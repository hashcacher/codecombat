/*! hash:b2378df6417e6e0292fe, chunkhash:902dc6f63ceaf8e685ca, name:main, filebase:b2378df6417e6e0292fe.worker.js, query:, file:b2378df6417e6e0292fe.worker.js */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var CocoSchema = /*#__PURE__*/function () {function CocoSchema() {_classCallCheck(this, CocoSchema);}_createClass(CocoSchema, [{ key: \"deleteCocoSchema\", value: function deleteCocoSchema()\n\n\n\n\n\n\n\n\n    {\n      delete this._cocoSchema;\n    } }, { key: \"cocoSchema\", get: function get() {if (!this._cocoSchema) {this._cocoSchema = {};}return this._cocoSchema;} }]);return CocoSchema;}();exports[\"default\"] = CocoSchema;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL2Nqcy9Db2NvU2NoZW1hLmpzPzA0YzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWEsOENBQThDLGNBQWMsRUFBRSw0QkFBNEIsaURBQWlELHlDQUF5QywyREFBMkQsMkNBQTJDLGVBQWUsa0JBQWtCLE9BQU8sMEJBQTBCLHVEQUF1RCwrQkFBK0Isc0RBQXNELDREQUE0RCw2REFBNkQscUVBQXFFLDZEQUE2RCxvQkFBb0IsMkNBQTJDLHVCQUF1QixtQ0FBbUMsMkJBQTJCOzs7Ozs7Ozs7QUFTcDRCO0FBQ0E7QUFDQSxLQUFLLEVBQUUsR0FBRyx5Q0FBeUMsd0JBQXdCLHVCQUF1Qix5QkFBeUIsRUFBRSxHQUFHLG1CQUFtQixHQUFHIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge2lmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7dmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO319ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge2lmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fXZhciBDb2NvU2NoZW1hID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtmdW5jdGlvbiBDb2NvU2NoZW1hKCkge19jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2NvU2NoZW1hKTt9X2NyZWF0ZUNsYXNzKENvY29TY2hlbWEsIFt7IGtleTogXCJkZWxldGVDb2NvU2NoZW1hXCIsIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVDb2NvU2NoZW1hKClcblxuXG5cblxuXG5cblxuXG4gICAge1xuICAgICAgZGVsZXRlIHRoaXMuX2NvY29TY2hlbWE7XG4gICAgfSB9LCB7IGtleTogXCJjb2NvU2NoZW1hXCIsIGdldDogZnVuY3Rpb24gZ2V0KCkge2lmICghdGhpcy5fY29jb1NjaGVtYSkge3RoaXMuX2NvY29TY2hlbWEgPSB7fTt9cmV0dXJuIHRoaXMuX2NvY29TY2hlbWE7fSB9XSk7cmV0dXJuIENvY29TY2hlbWE7fSgpO2V4cG9ydHNbXCJkZWZhdWx0XCJdID0gQ29jb1NjaGVtYTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hZG9iZS1hbmltYXRlLXBhcnNlci9saWIvY2pzL0NvY29TY2hlbWEuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _objectHash = _interopRequireDefault(__webpack_require__(20));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\n\nAnimateNode = /*#__PURE__*/function () {\n  function AnimateNode(id, type, original) {var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};_classCallCheck(this, AnimateNode);\n    this.id = id;\n    this.type = type;\n    this.data = data;\n\n    // TODO node should not contain original\n    this._original = original;\n  }_createClass(AnimateNode, [{ key: \"finalizeId\", value: function finalizeId()\n\n\n\n\n\n\n\n\n\n    {\n      var originalId = this.id;\n\n      this.id = (0, _objectHash[\"default\"])(_objectSpread({\n        type: this.type },\n\n      this.data));\n\n\n      return originalId;\n    } }, { key: \"id\", set: function set(id) {this._id = id;}, get: function get() {return this._id;} }, { key: \"node\", get: function get()\n\n    {\n      return this;\n    } }, { key: \"original\", get: function get()\n\n    {\n      return this.node._original;\n    } }]);return AnimateNode;}();exports[\"default\"] = AnimateNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL3BhcnNlL0FuaW1hdGVOb2RlLmpzPzljODEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWEsOENBQThDLGNBQWMsRUFBRSw0QkFBNEIseUNBQXlDLG1CQUFPLENBQUMsRUFBYSxHQUFHLHNDQUFzQyxzQ0FBc0MsbUJBQW1CLGdDQUFnQyxlQUFlLHNCQUFzQixPQUFPLHNEQUFzRCxrQ0FBa0MseURBQXlELHFGQUFxRixnRUFBZ0UsSUFBSSxnQ0FBZ0MsMkNBQTJDLEdBQUcsZUFBZSwyQ0FBMkMsaUJBQWlCLGlDQUFpQyxxRUFBcUUsR0FBRyxPQUFPLGtCQUFrQixZQUFZLGlEQUFpRCx5Q0FBeUMsMkRBQTJELDJDQUEyQyxlQUFlLGtCQUFrQixPQUFPLDBCQUEwQix1REFBdUQsK0JBQStCLHNEQUFzRCw0REFBNEQsNkRBQTZELHFFQUFxRSw2REFBNkQsb0JBQW9COztBQUVqa0Q7QUFDQSw0Q0FBNEMsa0ZBQWtGO0FBQzlIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRyw0QkFBNEI7Ozs7Ozs7Ozs7QUFVL0I7QUFDQTs7QUFFQTtBQUNBLHlCQUF5Qjs7QUFFekI7OztBQUdBO0FBQ0EsS0FBSyxFQUFFLEdBQUcsbUNBQW1DLGVBQWUsdUJBQXVCLGlCQUFpQixFQUFFLEdBQUc7O0FBRXpHO0FBQ0E7QUFDQSxLQUFLLEVBQUUsR0FBRzs7QUFFVjtBQUNBO0FBQ0EsS0FBSyxFQUFFLEdBQUcsb0JBQW9CLEdBQUciLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDt2YXIgX29iamVjdEhhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJvYmplY3QtaGFzaFwiKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtyZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07fWZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7Zm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHt2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTt2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7b3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO30pKTt9b3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTt9KTt9cmV0dXJuIHRhcmdldDt9ZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge2lmIChrZXkgaW4gb2JqKSB7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTt9IGVsc2Uge29ialtrZXldID0gdmFsdWU7fXJldHVybiBvYmo7fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge3ZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTt9fWZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO312YXJcblxuQW5pbWF0ZU5vZGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBbmltYXRlTm9kZShpZCwgdHlwZSwgb3JpZ2luYWwpIHt2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFuaW1hdGVOb2RlKTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgLy8gVE9ETyBub2RlIHNob3VsZCBub3QgY29udGFpbiBvcmlnaW5hbFxuICAgIHRoaXMuX29yaWdpbmFsID0gb3JpZ2luYWw7XG4gIH1fY3JlYXRlQ2xhc3MoQW5pbWF0ZU5vZGUsIFt7IGtleTogXCJmaW5hbGl6ZUlkXCIsIHZhbHVlOiBmdW5jdGlvbiBmaW5hbGl6ZUlkKClcblxuXG5cblxuXG5cblxuXG5cbiAgICB7XG4gICAgICB2YXIgb3JpZ2luYWxJZCA9IHRoaXMuaWQ7XG5cbiAgICAgIHRoaXMuaWQgPSAoMCwgX29iamVjdEhhc2hbXCJkZWZhdWx0XCJdKShfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgdHlwZTogdGhpcy50eXBlIH0sXG5cbiAgICAgIHRoaXMuZGF0YSkpO1xuXG5cbiAgICAgIHJldHVybiBvcmlnaW5hbElkO1xuICAgIH0gfSwgeyBrZXk6IFwiaWRcIiwgc2V0OiBmdW5jdGlvbiBzZXQoaWQpIHt0aGlzLl9pZCA9IGlkO30sIGdldDogZnVuY3Rpb24gZ2V0KCkge3JldHVybiB0aGlzLl9pZDt9IH0sIHsga2V5OiBcIm5vZGVcIiwgZ2V0OiBmdW5jdGlvbiBnZXQoKVxuXG4gICAge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSB9LCB7IGtleTogXCJvcmlnaW5hbFwiLCBnZXQ6IGZ1bmN0aW9uIGdldCgpXG5cbiAgICB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlLl9vcmlnaW5hbDtcbiAgICB9IH1dKTtyZXR1cm4gQW5pbWF0ZU5vZGU7fSgpO2V4cG9ydHNbXCJkZWZhdWx0XCJdID0gQW5pbWF0ZU5vZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL3BhcnNlL0FuaW1hdGVOb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _CocoSchema2 = _interopRequireDefault(__webpack_require__(0));\nvar _Graphics = _interopRequireDefault(__webpack_require__(13));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _typeof(obj) {if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}var\n\nShape = /*#__PURE__*/function (_CocoSchema) {_inherits(Shape, _CocoSchema);\n  function Shape() {var _this;_classCallCheck(this, Shape);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Shape).call(this));\n\n    _this.graphics = new _Graphics[\"default\"](_assertThisInitialized(_this));return _this;\n  }_createClass(Shape, [{ key: \"setTransform\", value: function setTransform(\n\n    x, y) {\n      this.cocoSchema.transform = {\n        x: x, y: y };\n\n\n      return this;\n    } }]);return Shape;}(_CocoSchema2[\"default\"]);exports[\"default\"] = Shape;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL2Nqcy9TaGFwZS5qcz9jZjFhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhLDhDQUE4QyxjQUFjLEVBQUUsNEJBQTRCLDBDQUEwQyxtQkFBTyxDQUFDLENBQWM7QUFDdkssdUNBQXVDLG1CQUFPLENBQUMsRUFBWSxHQUFHLHNDQUFzQyxzQ0FBc0MsbUJBQW1CLHVCQUF1QiwwRUFBMEUsaUNBQWlDLHFCQUFxQixPQUFPLGlDQUFpQyxnSUFBZ0kscUJBQXFCLGlEQUFpRCx5Q0FBeUMsMkRBQTJELDJDQUEyQyxlQUFlLGtCQUFrQixPQUFPLDBCQUEwQix1REFBdUQsK0JBQStCLHNEQUFzRCw0REFBNEQsNkRBQTZELHFFQUFxRSw2REFBNkQsb0JBQW9CLGlEQUFpRCx5RUFBeUUsYUFBYSxxQ0FBcUMsNkJBQTZCLCtGQUErRixpREFBaUQsMkJBQTJCLHVDQUF1QyxzQkFBc0IsdUZBQXVGLGFBQWEsMENBQTBDLDhEQUE4RCwyRUFBMkUsd0VBQXdFLGVBQWUsc0RBQXNELEVBQUUsRUFBRSx1REFBdUQsZ0NBQWdDLDJFQUEyRSxnQkFBZ0IsV0FBVyw4QkFBOEI7O0FBRWxzRSw2Q0FBNkM7QUFDN0Msb0JBQW9CLFVBQVU7QUFDOUI7O0FBRUEsNkVBQTZFO0FBQzdFLEdBQUcsc0JBQXNCOztBQUV6QjtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsS0FBSyxFQUFFLEdBQUcsY0FBYywwQkFBMEIiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDt2YXIgX0NvY29TY2hlbWEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Db2NvU2NoZW1hXCIpKTtcbnZhciBfR3JhcGhpY3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0dyYXBoaWNzXCIpKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge3JldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTt9ZnVuY3Rpb24gX3R5cGVvZihvYmopIHtpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtyZXR1cm4gdHlwZW9mIG9iajt9O30gZWxzZSB7X3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7cmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7fTt9cmV0dXJuIF90eXBlb2Yob2JqKTt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge2lmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7dmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO319ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge2lmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge3JldHVybiBjYWxsO31yZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTt9ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge3JldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7fTtyZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO31mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtpZiAoc2VsZiA9PT0gdm9pZCAwKSB7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gc2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7aWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO31mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge19zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge28uX19wcm90b19fID0gcDtyZXR1cm4gbzt9O3JldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7fXZhclxuXG5TaGFwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvY29TY2hlbWEpIHtfaW5oZXJpdHMoU2hhcGUsIF9Db2NvU2NoZW1hKTtcbiAgZnVuY3Rpb24gU2hhcGUoKSB7dmFyIF90aGlzO19jbGFzc0NhbGxDaGVjayh0aGlzLCBTaGFwZSk7XG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoU2hhcGUpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuZ3JhcGhpY3MgPSBuZXcgX0dyYXBoaWNzW1wiZGVmYXVsdFwiXShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7cmV0dXJuIF90aGlzO1xuICB9X2NyZWF0ZUNsYXNzKFNoYXBlLCBbeyBrZXk6IFwic2V0VHJhbnNmb3JtXCIsIHZhbHVlOiBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0oXG5cbiAgICB4LCB5KSB7XG4gICAgICB0aGlzLmNvY29TY2hlbWEudHJhbnNmb3JtID0ge1xuICAgICAgICB4OiB4LCB5OiB5IH07XG5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSB9XSk7cmV0dXJuIFNoYXBlO30oX0NvY29TY2hlbWEyW1wiZGVmYXVsdFwiXSk7ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTaGFwZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hZG9iZS1hbmltYXRlLXBhcnNlci9saWIvY2pzL1NoYXBlLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _CocoSchema2 = _interopRequireDefault(__webpack_require__(0));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _typeof(obj) {if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}var\n\nRectangle = /*#__PURE__*/function (_CocoSchema) {_inherits(Rectangle, _CocoSchema);\n  function Rectangle() {var _getPrototypeOf2;var _this;_classCallCheck(this, Rectangle);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Rectangle)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.cocoSchema.rectangleConfig = args;return _this;\n  }return Rectangle;}(_CocoSchema2[\"default\"]);exports[\"default\"] = Rectangle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL2Nqcy9SZWN0YW5nbGUuanM/MjM1NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYSw4Q0FBOEMsY0FBYyxFQUFFLDRCQUE0QiwwQ0FBMEMsbUJBQU8sQ0FBQyxDQUFjLEdBQUcsc0NBQXNDLHNDQUFzQyxtQkFBbUIsdUJBQXVCLDBFQUEwRSxpQ0FBaUMscUJBQXFCLE9BQU8saUNBQWlDLGdJQUFnSSxxQkFBcUIsaURBQWlELHlDQUF5QywyREFBMkQsaURBQWlELHlFQUF5RSxhQUFhLHFDQUFxQyx1Q0FBdUMsc0JBQXNCLHVGQUF1RixhQUFhLDZCQUE2QiwrRkFBK0YsaURBQWlELDJCQUEyQiwwQ0FBMEMsOERBQThELDJFQUEyRSx3RUFBd0UsZUFBZSxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCxnQ0FBZ0MsMkVBQTJFLGdCQUFnQixXQUFXLDhCQUE4Qjs7QUFFdHlELGlEQUFpRDtBQUNqRCx3QkFBd0IscUJBQXFCLFVBQVUsaUNBQWlDLG1FQUFtRSxhQUFhLFVBQVU7QUFDbEw7O0FBRUEsNENBQTRDO0FBQzVDLEdBQUcsa0JBQWtCLDBCQUEwQiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO3ZhciBfQ29jb1NjaGVtYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NvY29TY2hlbWFcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7cmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9O31mdW5jdGlvbiBfdHlwZW9mKG9iaikge2lmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge190eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge3JldHVybiB0eXBlb2Ygb2JqO307fSBlbHNlIHtfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtyZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajt9O31yZXR1cm4gX3R5cGVvZihvYmopO31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7aWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge2lmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7cmV0dXJuIGNhbGw7fXJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO31mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtpZiAoc2VsZiA9PT0gdm9pZCAwKSB7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gc2VsZjt9ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge3JldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7fTtyZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO31zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7aWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7fWZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7X3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7by5fX3Byb3RvX18gPSBwO3JldHVybiBvO307cmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTt9dmFyXG5cblJlY3RhbmdsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvY29TY2hlbWEpIHtfaW5oZXJpdHMoUmVjdGFuZ2xlLCBfQ29jb1NjaGVtYSk7XG4gIGZ1bmN0aW9uIFJlY3RhbmdsZSgpIHt2YXIgX2dldFByb3RvdHlwZU9mMjt2YXIgX3RoaXM7X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlY3RhbmdsZSk7Zm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7YXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTt9XG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihSZWN0YW5nbGUpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF90aGlzLmNvY29TY2hlbWEucmVjdGFuZ2xlQ29uZmlnID0gYXJncztyZXR1cm4gX3RoaXM7XG4gIH1yZXR1cm4gUmVjdGFuZ2xlO30oX0NvY29TY2hlbWEyW1wiZGVmYXVsdFwiXSk7ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBSZWN0YW5nbGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL2Nqcy9SZWN0YW5nbGUuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _CocoSchema3 = _interopRequireDefault(__webpack_require__(0));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _typeof(obj) {if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}var\n\nTimeline = /*#__PURE__*/function (_CocoSchema) {_inherits(Timeline, _CocoSchema);\n  function Timeline() {var _this;_classCallCheck(this, Timeline);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Timeline).call(this));\n\n    _this.cocoSchema.tweens = [];return _this;\n  }_createClass(Timeline, [{ key: \"addTween\", value: function addTween(\n\n    tween) {\n      this.cocoSchema.tweens.push(tween);\n    }\n\n    // Override Tween property\n  }, { key: \"tweens\", get: function get() {\n      return this.cocoSchema.tweens;\n    } }]);return Timeline;}(_CocoSchema3[\"default\"]);var\n\n\nMovieClip = /*#__PURE__*/function (_CocoSchema2) {_inherits(MovieClip, _CocoSchema2);\n  function MovieClip() {var _this2;_classCallCheck(this, MovieClip);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MovieClip).call(this));for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n\n    _this2.cocoSchema.constructorArgs = args;return _this2;\n  }_createClass(MovieClip, [{ key: \"initialize\", value: function initialize()\n\n    {\n    } }, { key: \"on\", value: function on()\n\n    {} }, { key: \"setTransform\", value: function setTransform()\n\n    {for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}\n      this.cocoSchema.transform = args;\n\n      return this;\n    } }, { key: \"_off\", set: function set(\n\n    bool) {\n      this.cocoSchema.off = bool;\n    }\n\n    // Lazily create timeline to make sure that each instance of a movie clip has\n    // its own timeline.  Due to the way that animate chains prototypes setting this\n    // in the constructor results in shared state across multiple instances of the\n    // movie clip subclass\n  }, { key: \"timeline\", get: function get() {\n      if (!this._timeline) {\n        this._timeline = new Timeline();\n      }\n\n      return this._timeline;\n    } }]);return MovieClip;}(_CocoSchema3[\"default\"]);exports[\"default\"] = MovieClip;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL2Nqcy9Nb3ZpZUNsaXAuanM/YmJhNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYSw4Q0FBOEMsY0FBYyxFQUFFLDRCQUE0QiwwQ0FBMEMsbUJBQU8sQ0FBQyxDQUFjLEdBQUcsc0NBQXNDLHNDQUFzQyxtQkFBbUIsdUJBQXVCLDBFQUEwRSxpQ0FBaUMscUJBQXFCLE9BQU8saUNBQWlDLGdJQUFnSSxxQkFBcUIsaURBQWlELHlDQUF5QywyREFBMkQsMkNBQTJDLGVBQWUsa0JBQWtCLE9BQU8sMEJBQTBCLHVEQUF1RCwrQkFBK0Isc0RBQXNELDREQUE0RCw2REFBNkQscUVBQXFFLDZEQUE2RCxvQkFBb0IsaURBQWlELHlFQUF5RSxhQUFhLHFDQUFxQyx1Q0FBdUMsc0JBQXNCLHVGQUF1RixhQUFhLDZCQUE2QiwrRkFBK0YsaURBQWlELDJCQUEyQiwwQ0FBMEMsOERBQThELDJFQUEyRSx3RUFBd0UsZUFBZSxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCxnQ0FBZ0MsMkVBQTJFLGdCQUFnQixXQUFXLDhCQUE4Qjs7QUFFOXlFLGdEQUFnRDtBQUNoRCx1QkFBdUIsVUFBVTtBQUNqQzs7QUFFQSxpQ0FBaUM7QUFDakMsR0FBRyx5QkFBeUI7O0FBRTVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUcsR0FBRztBQUNOO0FBQ0EsS0FBSyxFQUFFLEdBQUcsaUJBQWlCLDBCQUEwQjs7O0FBR3JELGtEQUFrRDtBQUNsRCx3QkFBd0IsV0FBVztBQUNuQyxxRkFBcUYsbUVBQW1FLGFBQWEsVUFBVTs7QUFFL0ssNkNBQTZDO0FBQzdDLEdBQUcsMEJBQTBCOztBQUU3QjtBQUNBLEtBQUssRUFBRSxHQUFHOztBQUVWLE1BQU0sRUFBRSxHQUFHOztBQUVYLEtBQUssc0VBQXNFLGVBQWUsV0FBVztBQUNyRzs7QUFFQTtBQUNBLEtBQUssRUFBRSxHQUFHOztBQUVWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsR0FBRztBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUssRUFBRSxHQUFHLGtCQUFrQiwwQkFBMEIiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDt2YXIgX0NvY29TY2hlbWEzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Db2NvU2NoZW1hXCIpKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge3JldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTt9ZnVuY3Rpb24gX3R5cGVvZihvYmopIHtpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtyZXR1cm4gdHlwZW9mIG9iajt9O30gZWxzZSB7X3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7cmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7fTt9cmV0dXJuIF90eXBlb2Yob2JqKTt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge2lmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7dmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO319ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge2lmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtyZXR1cm4gQ29uc3RydWN0b3I7fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge3JldHVybiBjYWxsO31yZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTt9ZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7aWYgKHNlbGYgPT09IHZvaWQgMCkge3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIHNlbGY7fWZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7X2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtyZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO307cmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7aWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO31mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge19zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge28uX19wcm90b19fID0gcDtyZXR1cm4gbzt9O3JldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7fXZhclxuXG5UaW1lbGluZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvY29TY2hlbWEpIHtfaW5oZXJpdHMoVGltZWxpbmUsIF9Db2NvU2NoZW1hKTtcbiAgZnVuY3Rpb24gVGltZWxpbmUoKSB7dmFyIF90aGlzO19jbGFzc0NhbGxDaGVjayh0aGlzLCBUaW1lbGluZSk7XG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVGltZWxpbmUpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuY29jb1NjaGVtYS50d2VlbnMgPSBbXTtyZXR1cm4gX3RoaXM7XG4gIH1fY3JlYXRlQ2xhc3MoVGltZWxpbmUsIFt7IGtleTogXCJhZGRUd2VlblwiLCB2YWx1ZTogZnVuY3Rpb24gYWRkVHdlZW4oXG5cbiAgICB0d2Vlbikge1xuICAgICAgdGhpcy5jb2NvU2NoZW1hLnR3ZWVucy5wdXNoKHR3ZWVuKTtcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSBUd2VlbiBwcm9wZXJ0eVxuICB9LCB7IGtleTogXCJ0d2VlbnNcIiwgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb2NvU2NoZW1hLnR3ZWVucztcbiAgICB9IH1dKTtyZXR1cm4gVGltZWxpbmU7fShfQ29jb1NjaGVtYTNbXCJkZWZhdWx0XCJdKTt2YXJcblxuXG5Nb3ZpZUNsaXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db2NvU2NoZW1hMikge19pbmhlcml0cyhNb3ZpZUNsaXAsIF9Db2NvU2NoZW1hMik7XG4gIGZ1bmN0aW9uIE1vdmllQ2xpcCgpIHt2YXIgX3RoaXMyO19jbGFzc0NhbGxDaGVjayh0aGlzLCBNb3ZpZUNsaXApO1xuICAgIF90aGlzMiA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihNb3ZpZUNsaXApLmNhbGwodGhpcykpO2ZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07fVxuXG4gICAgX3RoaXMyLmNvY29TY2hlbWEuY29uc3RydWN0b3JBcmdzID0gYXJncztyZXR1cm4gX3RoaXMyO1xuICB9X2NyZWF0ZUNsYXNzKE1vdmllQ2xpcCwgW3sga2V5OiBcImluaXRpYWxpemVcIiwgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemUoKVxuXG4gICAge1xuICAgIH0gfSwgeyBrZXk6IFwib25cIiwgdmFsdWU6IGZ1bmN0aW9uIG9uKClcblxuICAgIHt9IH0sIHsga2V5OiBcInNldFRyYW5zZm9ybVwiLCB2YWx1ZTogZnVuY3Rpb24gc2V0VHJhbnNmb3JtKClcblxuICAgIHtmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHthcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07fVxuICAgICAgdGhpcy5jb2NvU2NoZW1hLnRyYW5zZm9ybSA9IGFyZ3M7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gfSwgeyBrZXk6IFwiX29mZlwiLCBzZXQ6IGZ1bmN0aW9uIHNldChcblxuICAgIGJvb2wpIHtcbiAgICAgIHRoaXMuY29jb1NjaGVtYS5vZmYgPSBib29sO1xuICAgIH1cblxuICAgIC8vIExhemlseSBjcmVhdGUgdGltZWxpbmUgdG8gbWFrZSBzdXJlIHRoYXQgZWFjaCBpbnN0YW5jZSBvZiBhIG1vdmllIGNsaXAgaGFzXG4gICAgLy8gaXRzIG93biB0aW1lbGluZS4gIER1ZSB0byB0aGUgd2F5IHRoYXQgYW5pbWF0ZSBjaGFpbnMgcHJvdG90eXBlcyBzZXR0aW5nIHRoaXNcbiAgICAvLyBpbiB0aGUgY29uc3RydWN0b3IgcmVzdWx0cyBpbiBzaGFyZWQgc3RhdGUgYWNyb3NzIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGVcbiAgICAvLyBtb3ZpZSBjbGlwIHN1YmNsYXNzXG4gIH0sIHsga2V5OiBcInRpbWVsaW5lXCIsIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCF0aGlzLl90aW1lbGluZSkge1xuICAgICAgICB0aGlzLl90aW1lbGluZSA9IG5ldyBUaW1lbGluZSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fdGltZWxpbmU7XG4gICAgfSB9XSk7cmV0dXJuIE1vdmllQ2xpcDt9KF9Db2NvU2NoZW1hM1tcImRlZmF1bHRcIl0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdID0gTW92aWVDbGlwO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fkb2JlLWFuaW1hdGUtcGFyc2VyL2xpYi9janMvTW92aWVDbGlwLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _CocoSchema2 = _interopRequireDefault(__webpack_require__(0));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _typeof(obj) {if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}var\nTween = /*#__PURE__*/function (_CocoSchema) {_inherits(Tween, _CocoSchema);_createClass(Tween, null, [{ key: \"get\",\n    // TODO: naming: movieclip & shape\n    value: function get(movieClip) {\n      return new Tween(movieClip);\n    } }]);\n\n  function Tween(target) {var _this;_classCallCheck(this, Tween);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tween).call(this));\n\n    _this.cocoSchema.target = target;\n    _this.cocoSchema.methodCalls = [];return _this;\n  }_createClass(Tween, [{ key: \"wait\", value: function wait()\n\n    {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n      this.cocoSchema.methodCalls.push({\n        name: 'wait',\n        args: args });\n\n\n      return this;\n    } }, { key: \"call\", value: function call(\n\n    _call) {\n      return this;\n    } }, { key: \"to\", value: function to()\n\n    {for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}\n      this.cocoSchema.methodCalls.push({\n        name: 'to',\n        args: args });\n\n\n      return this;\n    } }, { key: \"target\", get: function get()\n\n    {\n      return this.cocoSchema.target;\n    } }]);return Tween;}(_CocoSchema2[\"default\"]);exports[\"default\"] = Tween;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL2Nqcy9Ud2Vlbi5qcz83NTE5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhLDhDQUE4QyxjQUFjLEVBQUUsNEJBQTRCLDBDQUEwQyxtQkFBTyxDQUFDLENBQWMsR0FBRyxzQ0FBc0Msc0NBQXNDLG1CQUFtQix1QkFBdUIsMEVBQTBFLGlDQUFpQyxxQkFBcUIsT0FBTyxpQ0FBaUMsZ0lBQWdJLHFCQUFxQixpREFBaUQseUNBQXlDLDJEQUEyRCxpREFBaUQseUVBQXlFLGFBQWEscUNBQXFDLHVDQUF1QyxzQkFBc0IsdUZBQXVGLGFBQWEsNkJBQTZCLCtGQUErRixpREFBaUQsMkJBQTJCLDJDQUEyQyxlQUFlLGtCQUFrQixPQUFPLDBCQUEwQix1REFBdUQsK0JBQStCLHNEQUFzRCw0REFBNEQsNkRBQTZELHFFQUFxRSw2REFBNkQsb0JBQW9CLDBDQUEwQyw4REFBOEQsMkVBQTJFLHdFQUF3RSxlQUFlLHNEQUFzRCxFQUFFLEVBQUUsdURBQXVELGdDQUFnQywyRUFBMkUsZ0JBQWdCLFdBQVcsOEJBQThCO0FBQzl5RSw2Q0FBNkMsOEJBQThCLDRCQUE0QjtBQUN2RztBQUNBO0FBQ0E7QUFDQSxLQUFLLEVBQUU7O0FBRVAsMEJBQTBCLFVBQVU7QUFDcEM7O0FBRUE7QUFDQSxzQ0FBc0M7QUFDdEMsR0FBRyxzQkFBc0I7O0FBRXpCLEtBQUssbUVBQW1FLGFBQWEsVUFBVTtBQUMvRjtBQUNBO0FBQ0Esb0JBQW9COzs7QUFHcEI7QUFDQSxLQUFLLEVBQUUsR0FBRzs7QUFFVjtBQUNBO0FBQ0EsS0FBSyxFQUFFLEdBQUc7O0FBRVYsS0FBSyxzRUFBc0UsZUFBZSxXQUFXO0FBQ3JHO0FBQ0E7QUFDQSxvQkFBb0I7OztBQUdwQjtBQUNBLEtBQUssRUFBRSxHQUFHOztBQUVWO0FBQ0E7QUFDQSxLQUFLLEVBQUUsR0FBRyxjQUFjLDBCQUEwQiIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO3ZhciBfQ29jb1NjaGVtYTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NvY29TY2hlbWFcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7cmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9O31mdW5jdGlvbiBfdHlwZW9mKG9iaikge2lmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge190eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge3JldHVybiB0eXBlb2Ygb2JqO307fSBlbHNlIHtfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtyZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajt9O31yZXR1cm4gX3R5cGVvZihvYmopO31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7aWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge2lmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7cmV0dXJuIGNhbGw7fXJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO31mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtpZiAoc2VsZiA9PT0gdm9pZCAwKSB7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gc2VsZjt9ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge3JldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7fTtyZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO31mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge3ZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTt9fWZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO31zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7aWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7fWZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7X3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7by5fX3Byb3RvX18gPSBwO3JldHVybiBvO307cmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTt9dmFyXG5Ud2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvY29TY2hlbWEpIHtfaW5oZXJpdHMoVHdlZW4sIF9Db2NvU2NoZW1hKTtfY3JlYXRlQ2xhc3MoVHdlZW4sIG51bGwsIFt7IGtleTogXCJnZXRcIixcbiAgICAvLyBUT0RPOiBuYW1pbmc6IG1vdmllY2xpcCAmIHNoYXBlXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldChtb3ZpZUNsaXApIHtcbiAgICAgIHJldHVybiBuZXcgVHdlZW4obW92aWVDbGlwKTtcbiAgICB9IH1dKTtcblxuICBmdW5jdGlvbiBUd2Vlbih0YXJnZXQpIHt2YXIgX3RoaXM7X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFR3ZWVuKTtcbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihUd2VlbikuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5jb2NvU2NoZW1hLnRhcmdldCA9IHRhcmdldDtcbiAgICBfdGhpcy5jb2NvU2NoZW1hLm1ldGhvZENhbGxzID0gW107cmV0dXJuIF90aGlzO1xuICB9X2NyZWF0ZUNsYXNzKFR3ZWVuLCBbeyBrZXk6IFwid2FpdFwiLCB2YWx1ZTogZnVuY3Rpb24gd2FpdCgpXG5cbiAgICB7Zm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7YXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTt9XG4gICAgICB0aGlzLmNvY29TY2hlbWEubWV0aG9kQ2FsbHMucHVzaCh7XG4gICAgICAgIG5hbWU6ICd3YWl0JyxcbiAgICAgICAgYXJnczogYXJncyB9KTtcblxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IH0sIHsga2V5OiBcImNhbGxcIiwgdmFsdWU6IGZ1bmN0aW9uIGNhbGwoXG5cbiAgICBfY2FsbCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSB9LCB7IGtleTogXCJ0b1wiLCB2YWx1ZTogZnVuY3Rpb24gdG8oKVxuXG4gICAge2ZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge2FyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTt9XG4gICAgICB0aGlzLmNvY29TY2hlbWEubWV0aG9kQ2FsbHMucHVzaCh7XG4gICAgICAgIG5hbWU6ICd0bycsXG4gICAgICAgIGFyZ3M6IGFyZ3MgfSk7XG5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSB9LCB7IGtleTogXCJ0YXJnZXRcIiwgZ2V0OiBmdW5jdGlvbiBnZXQoKVxuXG4gICAge1xuICAgICAgcmV0dXJuIHRoaXMuY29jb1NjaGVtYS50YXJnZXQ7XG4gICAgfSB9XSk7cmV0dXJuIFR3ZWVuO30oX0NvY29TY2hlbWEyW1wiZGVmYXVsdFwiXSk7ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBUd2VlbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hZG9iZS1hbmltYXRlLXBhcnNlci9saWIvY2pzL1R3ZWVuLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _CocoSchema2 = _interopRequireDefault(__webpack_require__(0));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _typeof(obj) {if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}var\n\nShadow = /*#__PURE__*/function (_CocoSchema) {_inherits(Shadow, _CocoSchema);\n  function Shadow() {var _getPrototypeOf2;var _this;_classCallCheck(this, Shadow);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Shadow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.cocoSchema.constructorArgs = args;return _this;\n  }return Shadow;}(_CocoSchema2[\"default\"]);exports[\"default\"] = Shadow;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL2Nqcy9TaGFkb3cuanM/NjMwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYSw4Q0FBOEMsY0FBYyxFQUFFLDRCQUE0QiwwQ0FBMEMsbUJBQU8sQ0FBQyxDQUFjLEdBQUcsc0NBQXNDLHNDQUFzQyxtQkFBbUIsdUJBQXVCLDBFQUEwRSxpQ0FBaUMscUJBQXFCLE9BQU8saUNBQWlDLGdJQUFnSSxxQkFBcUIsaURBQWlELHlDQUF5QywyREFBMkQsaURBQWlELHlFQUF5RSxhQUFhLHFDQUFxQyx1Q0FBdUMsc0JBQXNCLHVGQUF1RixhQUFhLDZCQUE2QiwrRkFBK0YsaURBQWlELDJCQUEyQiwwQ0FBMEMsOERBQThELDJFQUEyRSx3RUFBd0UsZUFBZSxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCxnQ0FBZ0MsMkVBQTJFLGdCQUFnQixXQUFXLDhCQUE4Qjs7QUFFdHlELDhDQUE4QztBQUM5QyxxQkFBcUIscUJBQXFCLFVBQVUsOEJBQThCLG1FQUFtRSxhQUFhLFVBQVU7QUFDNUs7O0FBRUEsNENBQTRDO0FBQzVDLEdBQUcsZUFBZSwwQkFBMEIiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDt2YXIgX0NvY29TY2hlbWEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Db2NvU2NoZW1hXCIpKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge3JldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTt9ZnVuY3Rpb24gX3R5cGVvZihvYmopIHtpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtyZXR1cm4gdHlwZW9mIG9iajt9O30gZWxzZSB7X3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7cmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7fTt9cmV0dXJuIF90eXBlb2Yob2JqKTt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge2lmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge3JldHVybiBjYWxsO31yZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTt9ZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7aWYgKHNlbGYgPT09IHZvaWQgMCkge3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTt9cmV0dXJuIHNlbGY7fWZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7X2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtyZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO307cmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7aWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTt9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO31mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge19zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge28uX19wcm90b19fID0gcDtyZXR1cm4gbzt9O3JldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7fXZhclxuXG5TaGFkb3cgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db2NvU2NoZW1hKSB7X2luaGVyaXRzKFNoYWRvdywgX0NvY29TY2hlbWEpO1xuICBmdW5jdGlvbiBTaGFkb3coKSB7dmFyIF9nZXRQcm90b3R5cGVPZjI7dmFyIF90aGlzO19jbGFzc0NhbGxDaGVjayh0aGlzLCBTaGFkb3cpO2ZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07fVxuICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoU2hhZG93KSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfdGhpcy5jb2NvU2NoZW1hLmNvbnN0cnVjdG9yQXJncyA9IGFyZ3M7cmV0dXJuIF90aGlzO1xuICB9cmV0dXJuIFNoYWRvdzt9KF9Db2NvU2NoZW1hMltcImRlZmF1bHRcIl0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdID0gU2hhZG93O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fkb2JlLWFuaW1hdGUtcGFyc2VyL2xpYi9janMvU2hhZG93LmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _adobeAnimateParser = __webpack_require__(8);\n\nself.addEventListener('message', function (event) {\n  var data = event.data;\n\n\n  if (data.input) {\n    try {\n      var parser = new _adobeAnimateParser.AdobeAnimation(data.input);\n      parser.parse();\n\n      self.postMessage({ output: JSON.stringify((0, _adobeAnimateParser.translate)(parser.parsedEntryPoint)) });\n    } catch (error) {\n      self.postMessage({ error: error });\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvdmlld3MvZWRpdG9yL3RoYW5nL0FuaW1hdGVJbXBvcnRXb3JrZXIuanM/MWUwOCJdLCJuYW1lcyI6WyJzZWxmIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZGF0YSIsImlucHV0IiwicGFyc2VyIiwiQWRvYmVBbmltYXRpb24iLCJwYXJzZSIsInBvc3RNZXNzYWdlIiwib3V0cHV0IiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcnNlZEVudHJ5UG9pbnQiLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQUEsS0FBS0MsZ0JBQUwsQ0FBc0IsU0FBdEIsRUFBaUMsVUFBQ0MsS0FBRCxFQUFXO0FBQUEsTUFDbENDLElBRGtDLEdBQ3pCRCxLQUR5QixDQUNsQ0MsSUFEa0M7OztBQUcxQyxNQUFJQSxLQUFLQyxLQUFULEVBQWdCO0FBQ2QsUUFBSTtBQUNGLFVBQU1DLFNBQVMsSUFBSUMsa0NBQUosQ0FBbUJILEtBQUtDLEtBQXhCLENBQWY7QUFDQUMsYUFBT0UsS0FBUDs7QUFFQVAsV0FBS1EsV0FBTCxDQUFpQixFQUFFQyxRQUFRQyxLQUFLQyxTQUFMLENBQWUsbUNBQVVOLE9BQU9PLGdCQUFqQixDQUFmLENBQVYsRUFBakI7QUFDRCxLQUxELENBS0UsT0FBT0MsS0FBUCxFQUFjO0FBQ2RiLFdBQUtRLFdBQUwsQ0FBaUIsRUFBRUssWUFBRixFQUFqQjtBQUNEO0FBQ0Y7QUFDRixDQWJEIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZG9iZUFuaW1hdGlvbiwgdHJhbnNsYXRlIH0gZnJvbSAnYWRvYmUtYW5pbWF0ZS1wYXJzZXInXG5cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4ge1xuICBjb25zdCB7IGRhdGEgfSA9IGV2ZW50XG5cbiAgaWYgKGRhdGEuaW5wdXQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGFyc2VyID0gbmV3IEFkb2JlQW5pbWF0aW9uKGRhdGEuaW5wdXQpXG4gICAgICBwYXJzZXIucGFyc2UoKVxuXG4gICAgICBzZWxmLnBvc3RNZXNzYWdlKHsgb3V0cHV0OiBKU09OLnN0cmluZ2lmeSh0cmFuc2xhdGUocGFyc2VyLnBhcnNlZEVudHJ5UG9pbnQpKSB9KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBzZWxmLnBvc3RNZXNzYWdlKHsgZXJyb3IgfSlcbiAgICB9XG4gIH1cbn0pXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAvdmlld3MvZWRpdG9yL3RoYW5nL0FuaW1hdGVJbXBvcnRXb3JrZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });Object.defineProperty(exports, \"AdobeAnimation\", { enumerable: true, get: function get() {return _AdobeAnimation2[\"default\"];} });Object.defineProperty(exports, \"translate\", { enumerable: true, get: function get() {return _translate2[\"default\"];} });var _AdobeAnimation2 = _interopRequireDefault(__webpack_require__(9));var _translate2 = _interopRequireDefault(__webpack_require__(22));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvaW5kZXguanM/NjI5MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYSw4Q0FBOEMsY0FBYyxFQUFFLGtEQUFrRCx3Q0FBd0Msb0NBQW9DLEVBQUUsRUFBRSw2Q0FBNkMsd0NBQXdDLCtCQUErQixFQUFFLEVBQUUsOENBQThDLG1CQUFPLENBQUMsQ0FBc0IsR0FBRyx5Q0FBeUMsbUJBQU8sQ0FBQyxFQUFpQixHQUFHLHNDQUFzQyxzQ0FBc0MiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBZG9iZUFuaW1hdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gZ2V0KCkge3JldHVybiBfQWRvYmVBbmltYXRpb24yW1wiZGVmYXVsdFwiXTt9IH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRyYW5zbGF0ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gZ2V0KCkge3JldHVybiBfdHJhbnNsYXRlMltcImRlZmF1bHRcIl07fSB9KTt2YXIgX0Fkb2JlQW5pbWF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGliL0Fkb2JlQW5pbWF0aW9uXCIpKTt2YXIgX3RyYW5zbGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi90cmFuc2xhdGVcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7cmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9O31cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hZG9iZS1hbmltYXRlLXBhcnNlci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _sandboxedFunction = _interopRequireDefault(__webpack_require__(10));\nvar _cjs = _interopRequireDefault(__webpack_require__(11));\n\nvar _parse = _interopRequireDefault(__webpack_require__(16));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\n\nAdobeAnimation = /*#__PURE__*/function () {\n  function AdobeAnimation(animationFile) {_classCallCheck(this, AdobeAnimation);\n    this.animateFile = animationFile || '';\n\n    this.library = {};\n    this.movieClips = {};\n    this.animationTrees = {};\n\n    if (this.animateFile.trim().length === 0) {\n      throw new Error('Invalid file format - animate file is empty');\n    }\n  }_createClass(AdobeAnimation, [{ key: \"parse\", value: function parse()\n\n    {\n      this[\"import\"]();\n      this.findAndMonitorLibraryMovieClips();\n      this.buildAnimationTrees();\n\n      this.findEntryPoint();\n\n      this.parseTree();\n    } }, { key: \"import\", value: function _import()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    {\n      this.library = {};\n      var animate = {};\n\n      var compiledAnimateFile = (0, _sandboxedFunction[\"default\"])(\"\\n      createjs = cocoCjs;\\n     \\n      try {\\n          lib = cocoLibrary;\\n      } catch (e) {} // If lib is defined overwrite it\\n   \\n      try {\\n          AdobeAn = cocoAnimate;\\n      } catch (e) {} // If lib is defined overwrite it\\n      \\n      \".concat(\n\n\n\n\n\n\n\n\n\n\n      this.animateFile, \"\\n    \"));\n\n\n      try {\n        compiledAnimateFile({\n          cocoLibrary: this.library,\n          cocoAnimate: animate,\n          cocoCjs: _cjs[\"default\"],\n          console: console });\n\n      } catch (e) {\n        throw new Error('Failed parsing animate file', e);\n      }\n\n      // If animate compositions is present, extract library from it, otherwise assume script will set it\n      if (animate.compositions) {\n        var animateCompositions = animate.compositions;\n        var compositionKeys = Object.keys(animateCompositions);\n\n        if (compositionKeys.length !== 1) {\n          throw new Error('Unexpected number of compositions');\n        }\n\n        this.library = animateCompositions[compositionKeys[0]].getLibrary();\n      }\n\n      if (Object.keys(this.library).length === 0) {\n        throw new Error('Nothing in library');\n      }\n\n      this.findAndMonitorLibraryMovieClips();\n\n      this.imported = true;\n    }\n\n    /**\n       * Find every top level movie clip exposed from the library and mod\n       */ }, { key: \"findAndMonitorLibraryMovieClips\", value: function findAndMonitorLibraryMovieClips()\n    {var _this = this;\n      this.constructorCallCounts = {};\n      var constructorCallCounts = this.constructorCallCounts;var _loop = function _loop() {var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n\n        key = _Object$entries$_i[0],value = _Object$entries$_i[1];\n        if (value.prototype instanceof _cjs[\"default\"].MovieClip) {\n          var wrappedLibraryFunction = function wrappedLibraryFunction() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n            this.cocoSchema.constructorArgs = args;\n\n            constructorCallCounts[key] = constructorCallCounts[key] || 0;\n            constructorCallCounts[key] += 1;\n\n            return value.call.apply(value, [this].concat(args));\n          };\n\n          wrappedLibraryFunction.prototype = value.prototype;\n\n          _this.library[key] = wrappedLibraryFunction;\n          _this.movieClips[key] = wrappedLibraryFunction;\n        }};for (var _i = 0, _Object$entries = Object.entries(this.library); _i < _Object$entries.length; _i++) {_loop();\n      }\n    } }, { key: \"buildAnimationTrees\", value: function buildAnimationTrees()\n\n    {\n      for (var _i2 = 0, _Object$entries2 = Object.entries(this.movieClips); _i2 < _Object$entries2.length; _i2++) {var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),key = _Object$entries2$_i[0],value = _Object$entries2$_i[1];\n        this.animationTrees[key] = new value();\n      }\n    }\n\n    /**\n       * We track the number of times each library movie clip is constructed and select\n       * the one that was constructed the smallest number of times.\n       */ }, { key: \"findEntryPoint\", value: function findEntryPoint()\n    {\n      var minKey;\n      var minCount = Infinity;\n      var numOccurrencesOfMin;\n\n      for (var _i3 = 0, _Object$entries3 = Object.entries(this.constructorCallCounts); _i3 < _Object$entries3.length; _i3++) {var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),key = _Object$entries3$_i[0],value = _Object$entries3$_i[1];\n        if (value < minCount) {\n          minCount = value;\n          minKey = key;\n          numOccurrencesOfMin = 1;\n        } else if (value === minCount) {\n          numOccurrencesOfMin += 1;\n        }\n      }\n\n      if (typeof minKey === 'undefined') {\n        throw new Error('No minimum found');\n      }\n\n      // If more than one movie clip had the minimum number of constructions we\n      // are in an unexpected state.\n      if (numOccurrencesOfMin > 1) {\n        throw new Error('No clear entry point');\n      }\n\n      this.entryPointName = minKey;\n      return this.entryPointName;\n    } }, { key: \"parseTree\", value: function parseTree()\n\n    {var _this2 = this;\n      this.animateParser = new _parse[\"default\"]();\n      this._parsedEntryPoint = this.animateParser.parseMovieClip(this.animationTrees[this.entryPointName]);\n\n      // For now assume top level is a movie clip and the top level has\n      // a self referencing tween that we do not support.\n      // We assume this self referencing tween is always the first tween.\n      this._parsedEntryPoint.data.tweens = this._parsedEntryPoint.data.tweens.filter(function (tween) {\n        return _this2._parsedEntryPoint.id !== tween.node.id;\n      });\n\n      // Translate bounding boxes of top level animation.\n      //\n      // The game engine requires that the bounds are centered around the\n      // center of the top level movie clip.\n      if (this.library.properties) {var _this$library$propert =\n\n\n\n        this.library.properties,width = _this$library$propert.width,height = _this$library$propert.height;\n\n        if (typeof width !== 'undefined' && typeof height !== 'undefined') {var _this$_parsedEntryPoi =\n\n\n\n          this._parsedEntryPoint.data,boundsNode = _this$_parsedEntryPoi.bounds,frameBoundsNodes = _this$_parsedEntryPoi.frameBounds;\n\n          var resolvedBoundsNode = boundsNode.node;\n          if (resolvedBoundsNode.data.length > 0) {\n            var currentWidth = resolvedBoundsNode.data[0];\n            var currentHeight = resolvedBoundsNode.data[1];\n\n            var xTranslation = 0 - resolvedBoundsNode.data[2];\n            var yTranslation = 0 - resolvedBoundsNode.data[3];\n\n            var widthScaleFactor = currentWidth / width;\n            var heightScaleFactor = currentHeight / height;\n\n            resolvedBoundsNode.data = [\n            0, 0,\n            width, height];\n\n\n            if (frameBoundsNodes && frameBoundsNodes.length > 0) {var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n                for (var _iterator = frameBoundsNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var frameBoundNode = _step.value;\n                  var resolvedFrameBoundNode = frameBoundNode.node;\n\n                  resolvedFrameBoundNode.data[0] += xTranslation;\n                  resolvedFrameBoundNode.data[1] += yTranslation;\n\n                  resolvedBoundsNode.data[2] *= widthScaleFactor;\n                  resolvedBoundsNode.data[3] *= heightScaleFactor;\n                }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {_iterator[\"return\"]();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n            }\n          }\n        }\n      }\n\n      this._parsedEntryPoint.id = this.entryPointName;\n\n      this.treeParsed = true;\n    } }, { key: \"entryPoint\", get: function get() {if (!this.imported) {throw new Error('Animate file not imported');}return this.movieClips[this.entryPointName];} }, { key: \"parsedEntryPoint\", get: function get() {if (!this.treeParsed) {throw new Error('Entry point not parsed');}return this.animateParser.schema;} }]);return AdobeAnimation;}();exports[\"default\"] = AdobeAnimation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = sandboxFunction;function has(target, key) {\n  return true;\n}\n\n// Taken from https://blog.risingstack.com/writing-a-javascript-framework-sandboxed-code-evaluation/\nfunction sandboxFunction(src) {\n  src = 'with (sandbox) {' + src + '}';\n  var code = new Function('sandbox', src);\n\n  return function (sandbox) {\n    var sandboxProxy = new Proxy(sandbox, { has: has });\n    return code(sandboxProxy);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvdXRpbC9zYW5kYm94ZWRGdW5jdGlvbi5qcz8wYTdmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhLDhDQUE4QyxjQUFjLEVBQUUscUNBQXFDO0FBQ2hIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QixZQUFZO0FBQ3JDOztBQUVBO0FBQ0EsMkNBQTJDLFdBQVc7QUFDdEQ7QUFDQTtBQUNBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdID0gc2FuZGJveEZ1bmN0aW9uO2Z1bmN0aW9uIGhhcyh0YXJnZXQsIGtleSkge1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gVGFrZW4gZnJvbSBodHRwczovL2Jsb2cucmlzaW5nc3RhY2suY29tL3dyaXRpbmctYS1qYXZhc2NyaXB0LWZyYW1ld29yay1zYW5kYm94ZWQtY29kZS1ldmFsdWF0aW9uL1xuZnVuY3Rpb24gc2FuZGJveEZ1bmN0aW9uKHNyYykge1xuICBzcmMgPSAnd2l0aCAoc2FuZGJveCkgeycgKyBzcmMgKyAnfSc7XG4gIHZhciBjb2RlID0gbmV3IEZ1bmN0aW9uKCdzYW5kYm94Jywgc3JjKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKHNhbmRib3gpIHtcbiAgICB2YXIgc2FuZGJveFByb3h5ID0gbmV3IFByb3h5KHNhbmRib3gsIHsgaGFzOiBoYXMgfSk7XG4gICAgcmV0dXJuIGNvZGUoc2FuZGJveFByb3h5KTtcbiAgfTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hZG9iZS1hbmltYXRlLXBhcnNlci91dGlsL3NhbmRib3hlZEZ1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _lodash = _interopRequireDefault(__webpack_require__(12));\n\nvar _CocoSchema = _interopRequireDefault(__webpack_require__(0));\n\nvar _Shape = _interopRequireDefault(__webpack_require__(2));\nvar _Rectangle = _interopRequireDefault(__webpack_require__(3));\nvar _MovieClip = _interopRequireDefault(__webpack_require__(4));\nvar _Stage = _interopRequireDefault(__webpack_require__(15));\nvar _Tween = _interopRequireDefault(__webpack_require__(5));\nvar _Shadow = _interopRequireDefault(__webpack_require__(6));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}\n\n// function extend (subclass, superclass) {\n// \t\"use strict\";\n//\n// \tfunction o() { this.constructor = subclass; }\n// \to.prototype = superclass.prototype;\n// \treturn (subclass.prototype = new o());\n// }\n\n\nfunction extend(subclass, superclass) {\n  function ExtendedClass() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n    superclass.call.apply(superclass, [this].concat(args));\n  }\n\n  ExtendedClass.prototype = (0, _lodash[\"default\"])(superclass.prototype, {\n    constructor: ExtendedClass });\n\n\n  var extendedClassInstance = new ExtendedClass();\n  if (extendedClassInstance instanceof _CocoSchema[\"default\"]) {\n    extendedClassInstance.deleteCocoSchema();\n  }\n\n  return extendedClassInstance;\n}var _default =\n\n{\n  extend: extend,\n\n  Shape: _Shape[\"default\"],\n  Rectangle: _Rectangle[\"default\"],\n  MovieClip: _MovieClip[\"default\"],\n  Stage: _Stage[\"default\"],\n  Tween: _Tween[\"default\"],\n\n  Shadow: _Shadow[\"default\"] };exports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL2Nqcy9pbmRleC5qcz8zZTAzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhLDhDQUE4QyxjQUFjLEVBQUUsNEJBQTRCLHFDQUFxQyxtQkFBTyxDQUFDLEVBQWU7O0FBRW5LLHlDQUF5QyxtQkFBTyxDQUFDLENBQWM7O0FBRS9ELG9DQUFvQyxtQkFBTyxDQUFDLENBQVM7QUFDckQsd0NBQXdDLG1CQUFPLENBQUMsQ0FBYTtBQUM3RCx3Q0FBd0MsbUJBQU8sQ0FBQyxDQUFhO0FBQzdELG9DQUFvQyxtQkFBTyxDQUFDLEVBQVM7QUFDckQsb0NBQW9DLG1CQUFPLENBQUMsQ0FBUztBQUNyRCxxQ0FBcUMsbUJBQU8sQ0FBQyxDQUFVLEdBQUcsc0NBQXNDLHNDQUFzQzs7QUFFdEk7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDZCQUE2QjtBQUMvQztBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsNEJBQTRCLG1FQUFtRSxhQUFhLFVBQVU7QUFDdEg7QUFDQTs7QUFFQTtBQUNBLGdDQUFnQzs7O0FBR2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO3ZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoLmNyZWF0ZVwiKSk7XG5cbnZhciBfQ29jb1NjaGVtYSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ29jb1NjaGVtYVwiKSk7XG5cbnZhciBfU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NoYXBlXCIpKTtcbnZhciBfUmVjdGFuZ2xlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SZWN0YW5nbGVcIikpO1xudmFyIF9Nb3ZpZUNsaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01vdmllQ2xpcFwiKSk7XG52YXIgX1N0YWdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TdGFnZVwiKSk7XG52YXIgX1R3ZWVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ud2VlblwiKSk7XG52YXIgX1NoYWRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2hhZG93XCIpKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge3JldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTt9XG5cbi8vIGZ1bmN0aW9uIGV4dGVuZCAoc3ViY2xhc3MsIHN1cGVyY2xhc3MpIHtcbi8vIFx0XCJ1c2Ugc3RyaWN0XCI7XG4vL1xuLy8gXHRmdW5jdGlvbiBvKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gc3ViY2xhc3M7IH1cbi8vIFx0by5wcm90b3R5cGUgPSBzdXBlcmNsYXNzLnByb3RvdHlwZTtcbi8vIFx0cmV0dXJuIChzdWJjbGFzcy5wcm90b3R5cGUgPSBuZXcgbygpKTtcbi8vIH1cblxuXG5mdW5jdGlvbiBleHRlbmQoc3ViY2xhc3MsIHN1cGVyY2xhc3MpIHtcbiAgZnVuY3Rpb24gRXh0ZW5kZWRDbGFzcygpIHtmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHthcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO31cbiAgICBzdXBlcmNsYXNzLmNhbGwuYXBwbHkoc3VwZXJjbGFzcywgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG4gIH1cblxuICBFeHRlbmRlZENsYXNzLnByb3RvdHlwZSA9ICgwLCBfbG9kYXNoW1wiZGVmYXVsdFwiXSkoc3VwZXJjbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3RvcjogRXh0ZW5kZWRDbGFzcyB9KTtcblxuXG4gIHZhciBleHRlbmRlZENsYXNzSW5zdGFuY2UgPSBuZXcgRXh0ZW5kZWRDbGFzcygpO1xuICBpZiAoZXh0ZW5kZWRDbGFzc0luc3RhbmNlIGluc3RhbmNlb2YgX0NvY29TY2hlbWFbXCJkZWZhdWx0XCJdKSB7XG4gICAgZXh0ZW5kZWRDbGFzc0luc3RhbmNlLmRlbGV0ZUNvY29TY2hlbWEoKTtcbiAgfVxuXG4gIHJldHVybiBleHRlbmRlZENsYXNzSW5zdGFuY2U7XG59dmFyIF9kZWZhdWx0ID1cblxue1xuICBleHRlbmQ6IGV4dGVuZCxcblxuICBTaGFwZTogX1NoYXBlW1wiZGVmYXVsdFwiXSxcbiAgUmVjdGFuZ2xlOiBfUmVjdGFuZ2xlW1wiZGVmYXVsdFwiXSxcbiAgTW92aWVDbGlwOiBfTW92aWVDbGlwW1wiZGVmYXVsdFwiXSxcbiAgU3RhZ2U6IF9TdGFnZVtcImRlZmF1bHRcIl0sXG4gIFR3ZWVuOiBfVHdlZW5bXCJkZWZhdWx0XCJdLFxuXG4gIFNoYWRvdzogX1NoYWRvd1tcImRlZmF1bHRcIl0gfTtleHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fkb2JlLWFuaW1hdGUtcGFyc2VyL2xpYi9janMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

eval("/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an object that inherits from the `prototype` object. If a\n * `properties` object is given, its own enumerable string keyed properties\n * are assigned to the created object.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Object\n * @param {Object} prototype The object to inherit from.\n * @param {Object} [properties] The properties to assign to the object.\n * @returns {Object} Returns the new object.\n * @example\n *\n * function Shape() {\n *   this.x = 0;\n *   this.y = 0;\n * }\n *\n * function Circle() {\n *   Shape.call(this);\n * }\n *\n * Circle.prototype = _.create(Shape.prototype, {\n *   'constructor': Circle\n * });\n *\n * var circle = new Circle;\n * circle instanceof Circle;\n * // => true\n *\n * circle instanceof Shape;\n * // => true\n */\nfunction create(prototype, properties) {\n  var result = baseCreate(prototype);\n  return properties ? baseAssign(result, properties) : result;\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = create;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLmNyZWF0ZS9pbmRleC5qcz82MGJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLFFBQVE7QUFDbkIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE1BQU07QUFDakIsV0FBVyxPQUFPLFdBQVc7QUFDN0IsV0FBVyxTQUFTO0FBQ3BCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0Esd0JBQXdCOztBQUV4QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0JBQWtCLEVBQUU7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICAvLyBTYWZhcmkgOSBtYWtlcyBgYXJndW1lbnRzLmxlbmd0aGAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgdmFyIHJlc3VsdCA9IChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpXG4gICAgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpXG4gICAgOiBbXTtcblxuICB2YXIgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aCxcbiAgICAgIHNraXBJbmRleGVzID0gISFsZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoa2V5ID09ICdsZW5ndGgnIHx8IGlzSW5kZXgoa2V5LCBsZW5ndGgpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZUNyZWF0ZShwcm90bykge1xuICByZXR1cm4gaXNPYmplY3QocHJvdG8pID8gb2JqZWN0Q3JlYXRlKHByb3RvKSA6IHt9O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkID8gc291cmNlW2tleV0gOiBuZXdWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSAmJlxuICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcbiAgLy8gU2FmYXJpIDguMSBtYWtlcyBgYXJndW1lbnRzLmNhbGxlZWAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAoIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKSB8fCBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBhcmdzVGFnKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOC05IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4zLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gKiAgIHRoaXMueCA9IDA7XG4gKiAgIHRoaXMueSA9IDA7XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICogfVxuICpcbiAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gKiB9KTtcbiAqXG4gKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICByZXR1cm4gcHJvcGVydGllcyA/IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKSA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLmNyZWF0ZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _CocoSchema2 = _interopRequireDefault(__webpack_require__(0));\n\nvar _shapes = __webpack_require__(14);\nvar _Rectangle = _interopRequireDefault(__webpack_require__(3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _typeof(obj) {if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}var\n\nGraphics = /*#__PURE__*/function (_CocoSchema) {_inherits(Graphics, _CocoSchema);\n  function Graphics(parent) {var _this;_classCallCheck(this, Graphics);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Graphics).call(this));\n\n    _this.currentX = 0;\n    _this.currentY = 0;\n\n    _this.minX = Infinity;\n    _this.minY = Infinity;\n    _this.maxX = -1 * Infinity;\n    _this.maxY = -1 * Infinity;\n\n    _this.parent = parent;return _this;\n  }_createClass(Graphics, [{ key: \"f\", value: function f(\n\n\n    _f) {\n      this.cocoSchema.fc = _f;\n      return this;\n    } }, { key: \"s\", value: function s(\n\n    _s) {\n      // TODO may be able to call this multiple times.  If so will need to have each\n      // call to s() return a new object that collects the data on subsequent calls\n      //\n      // Collect each of these objects in an array on coco schema\n      return this;\n    } }, { key: \"decodePath\", value: function decodePath(\n\n    p) {\n      try {\n        this.decodingPath = true;\n        this.orignalDecodePath(p);\n      } finally {\n        this.decodingPath = false;\n      }\n\n      return this;\n    } }, { key: \"orignalDecodePath\", value: function orignalDecodePath(\n\n    pathString) {\n      var instructions = [this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath];\n      var paramCount = [2, 2, 4, 6, 0];\n      var i = 0,l = pathString.length;\n      var params = [];\n      var base64 = Graphics.BASE_64;\n      var x = 0,y = 0;\n\n      while (i < l) {\n        var c = pathString.charAt(i);\n        var n = base64[c];\n        var fi = n >> 3; // highest order bits 1-3 code for operation.\n        var f = instructions[fi];\n\n        // check that we have a valid instruction & that the unused bits are empty:\n        if (!f || n & 3) {throw \"bad path data (@\" + i + \"): \" + c;}\n\n        var pl = paramCount[fi];\n        if (!fi) {x = y = 0;} // move operations reset the position.\n        params.length = 0;\n        i++;\n\n        var charCount = (n >> 2 & 1) + 2; // 4th header bit indicates number size for this operation.\n        for (var p = 0; p < pl; p++) {\n          var num = base64[pathString.charAt(i)];\n\n          var sign = num >> 5 ? -1 : 1;\n          num = (num & 31) << 6 | base64[pathString.charAt(i + 1)];\n\n          if (charCount == 3) {num = num << 6 | base64[pathString.charAt(i + 2)];}\n\n          num = sign * num / 10;\n          if (p % 2) {x = num += x;} else\n          {y = num += y;}\n\n          params[p] = num;\n          i += charCount;\n        }\n\n        f.apply(this, params);\n      }\n\n      return this;\n    } }, { key: \"p\", value: function p(\n\n    _p) {\n      this.cocoSchema.p = _p;\n\n      this.decodePath(_p);\n      return this;\n    } }, { key: \"rf\", value: function rf()\n\n    {for (var _len = arguments.length, _rf = new Array(_len), _key = 0; _key < _len; _key++) {_rf[_key] = arguments[_key];}\n      this.cocoSchema.rf = _rf;\n      return this;\n    } }, { key: \"lf\", value: function lf()\n\n    {for (var _len2 = arguments.length, _lf = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {_lf[_key2] = arguments[_key2];}\n      this.cocoSchema.lf = _lf;\n      return this;\n    } }, { key: \"ss\", value: function ss()\n\n    {for (var _len3 = arguments.length, _ss = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {_ss[_key3] = arguments[_key3];}\n      this.cocoSchema.ss = _ss;\n      return this;\n    } }, { key: \"moveTo\", value: function moveTo(\n\n    x, y) {\n      if (!this.decodingPath) {\n        // Save to coco schema (not currently supported)\n      }\n\n      this.currentX = x;\n      this.currentY = y;\n    } }, { key: \"lineTo\", value: function lineTo(\n\n    x, y) {\n      if (!this.decodingPath) {\n        // Save to coco schema (not currently supported)\n      }\n\n      this.processBoundingBox(\n      (0, _shapes.getRectangleBounds)(\n      this.currentX, this.currentY,\n      x, y));\n\n\n\n      this.currentX = x;\n      this.currentY = y;\n    } }, { key: \"quadraticCurveTo\", value: function quadraticCurveTo(\n\n    cpx, cpy, x, y) {\n      var curveBounds = (0, _shapes.getCurveBounds)(\n      this.currentX, this.currentY,\n      cpx, cpy,\n      cpx, cpy,\n      x, y);\n\n\n      this.processBoundingBox(curveBounds);\n\n      if (!this.decodingPath) {\n        // Save to coco schema (not currently supported)\n      }\n\n      this.currentX = x;\n      this.currentY = y;\n    } }, { key: \"bezierCurveTo\", value: function bezierCurveTo(\n\n    cp1x, cp1y, cp2x, cp2y, x, y) {\n      var curveBounds = (0, _shapes.getCurveBounds)(\n      this.currentX, this.currentY,\n      cp1x, cp1y,\n      cp2x, cp2y,\n      x, y);\n\n\n      this.processBoundingBox(curveBounds);\n\n      if (!this.decodingPath) {\n        // Save to coco schema (not currently supported)\n      }\n\n      this.currentX = x;\n      this.currentY = y;\n    } }, { key: \"closePath\", value: function closePath()\n\n    {\n      // Save to coco schema (not currently supported)\n      // Also may want to reset currentX and currentY to zero\n\n      if (this.parent) {var\n\n        minX =\n\n\n\n        this.minX,minY = this.minY,maxX = this.maxX,maxY = this.maxY;\n\n        if (minX === Infinity || minY === Infinity || maxX === -1 * Infinity || maxY === -1 * Infinity) {\n          throw new Error('Unexpected bounds state');\n        }\n\n        this.parent.nominalBounds = new _Rectangle[\"default\"](\n        minX,\n        minY,\n        maxX - minX,\n        maxY - minY);\n\n      }\n    } }, { key: \"processBoundingBox\", value: function processBoundingBox(\n\n    boundingBox) {\n      var minX = boundingBox.x;\n      var minY = boundingBox.y;\n\n      var maxX = boundingBox.x + boundingBox.width;\n      var maxY = boundingBox.y + boundingBox.height;\n\n      this.minX = Math.min(this.minX, minX);\n      this.minY = Math.min(this.minY, minY);\n\n      this.maxX = Math.max(this.maxX, maxX);\n      this.maxY = Math.max(this.maxY, maxY);\n    } }]);return Graphics;}(_CocoSchema2[\"default\"]);exports[\"default\"] = Graphics;\n\n\nGraphics.BASE_64 = { \"A\": 0, \"B\": 1, \"C\": 2, \"D\": 3, \"E\": 4, \"F\": 5, \"G\": 6, \"H\": 7, \"I\": 8, \"J\": 9, \"K\": 10, \"L\": 11, \"M\": 12, \"N\": 13, \"O\": 14, \"P\": 15, \"Q\": 16, \"R\": 17, \"S\": 18, \"T\": 19, \"U\": 20, \"V\": 21, \"W\": 22, \"X\": 23, \"Y\": 24, \"Z\": 25, \"a\": 26, \"b\": 27, \"c\": 28, \"d\": 29, \"e\": 30, \"f\": 31, \"g\": 32, \"h\": 33, \"i\": 34, \"j\": 35, \"k\": 36, \"l\": 37, \"m\": 38, \"n\": 39, \"o\": 40, \"p\": 41, \"q\": 42, \"r\": 43, \"s\": 44, \"t\": 45, \"u\": 46, \"v\": 47, \"w\": 48, \"x\": 49, \"y\": 50, \"z\": 51, \"0\": 52, \"1\": 53, \"2\": 54, \"3\": 55, \"4\": 56, \"5\": 57, \"6\": 58, \"7\": 59, \"8\": 60, \"9\": 61, \"+\": 62, \"/\": 63 };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.getCurveBounds = getCurveBounds;exports.getRectangleBounds = getRectangleBounds; // x, y are upper left corner\n// Taken from https://stackoverflow.com/a/13378980/827207\n// A is start point D is end point\n// Points b and c are control points 1 and 2\nfunction getCurveBounds(ax, ay, bx, by, cx, cy, dx, dy)\n{\n  var px, py, qx, qy, rx, ry, sx, sy, tx, ty,\n  tobx, toby, tocx, tocy, todx, tody, toqx, toqy, torx, tory, totx, toty;\n  var x, y, minx, miny, maxx, maxy;\n\n  minx = miny = Number.POSITIVE_INFINITY;\n  maxx = maxy = Number.NEGATIVE_INFINITY;\n\n  tobx = bx - ax;toby = by - ay; // directions\n  tocx = cx - bx;tocy = cy - by;\n  todx = dx - cx;tody = dy - cy;\n  var step = 1 / 40; // precission\n  for (var d = 0; d < 1.001; d += step)\n  {\n    px = ax + d * tobx;py = ay + d * toby;\n    qx = bx + d * tocx;qy = by + d * tocy;\n    rx = cx + d * todx;ry = cy + d * tody;\n    toqx = qx - px;toqy = qy - py;\n    torx = rx - qx;tory = ry - qy;\n\n    sx = px + d * toqx;sy = py + d * toqy;\n    tx = qx + d * torx;ty = qy + d * tory;\n    totx = tx - sx;toty = ty - sy;\n\n    x = sx + d * totx;y = sy + d * toty;\n\n    minx = Math.min(minx, x);miny = Math.min(miny, y);\n    maxx = Math.max(maxx, x);maxy = Math.max(maxy, y);\n  }\n  return { x: minx, y: miny, width: maxx - minx, height: maxy - miny };\n}\n\nfunction getRectangleBounds(x1, y1, x2, y2) {\n  return {\n    x: Math.min(x1, x2),\n    y: Math.min(y1, y2),\n\n    width: Math.abs(x2 - x1),\n    height: Math.abs(y2 - y1) };\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvdXRpbC9zaGFwZXMuanM/NzdiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYSw4Q0FBOEMsY0FBYyxFQUFFLHdDQUF3QyxnREFBZ0Q7QUFDbks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixlQUFlO0FBQ2hDLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakIsb0JBQW9CO0FBQ3BCLGlCQUFpQixXQUFXO0FBQzVCO0FBQ0EsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIsbUJBQW1CO0FBQ25CLG1CQUFtQjs7QUFFbkIsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2QixtQkFBbUI7O0FBRW5CLHNCQUFzQjs7QUFFdEIsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUM3QjtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO2V4cG9ydHMuZ2V0Q3VydmVCb3VuZHMgPSBnZXRDdXJ2ZUJvdW5kcztleHBvcnRzLmdldFJlY3RhbmdsZUJvdW5kcyA9IGdldFJlY3RhbmdsZUJvdW5kczsgLy8geCwgeSBhcmUgdXBwZXIgbGVmdCBjb3JuZXJcbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEzMzc4OTgwLzgyNzIwN1xuLy8gQSBpcyBzdGFydCBwb2ludCBEIGlzIGVuZCBwb2ludFxuLy8gUG9pbnRzIGIgYW5kIGMgYXJlIGNvbnRyb2wgcG9pbnRzIDEgYW5kIDJcbmZ1bmN0aW9uIGdldEN1cnZlQm91bmRzKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIGR4LCBkeSlcbntcbiAgdmFyIHB4LCBweSwgcXgsIHF5LCByeCwgcnksIHN4LCBzeSwgdHgsIHR5LFxuICB0b2J4LCB0b2J5LCB0b2N4LCB0b2N5LCB0b2R4LCB0b2R5LCB0b3F4LCB0b3F5LCB0b3J4LCB0b3J5LCB0b3R4LCB0b3R5O1xuICB2YXIgeCwgeSwgbWlueCwgbWlueSwgbWF4eCwgbWF4eTtcblxuICBtaW54ID0gbWlueSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgbWF4eCA9IG1heHkgPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cbiAgdG9ieCA9IGJ4IC0gYXg7dG9ieSA9IGJ5IC0gYXk7IC8vIGRpcmVjdGlvbnNcbiAgdG9jeCA9IGN4IC0gYng7dG9jeSA9IGN5IC0gYnk7XG4gIHRvZHggPSBkeCAtIGN4O3RvZHkgPSBkeSAtIGN5O1xuICB2YXIgc3RlcCA9IDEgLyA0MDsgLy8gcHJlY2lzc2lvblxuICBmb3IgKHZhciBkID0gMDsgZCA8IDEuMDAxOyBkICs9IHN0ZXApXG4gIHtcbiAgICBweCA9IGF4ICsgZCAqIHRvYng7cHkgPSBheSArIGQgKiB0b2J5O1xuICAgIHF4ID0gYnggKyBkICogdG9jeDtxeSA9IGJ5ICsgZCAqIHRvY3k7XG4gICAgcnggPSBjeCArIGQgKiB0b2R4O3J5ID0gY3kgKyBkICogdG9keTtcbiAgICB0b3F4ID0gcXggLSBweDt0b3F5ID0gcXkgLSBweTtcbiAgICB0b3J4ID0gcnggLSBxeDt0b3J5ID0gcnkgLSBxeTtcblxuICAgIHN4ID0gcHggKyBkICogdG9xeDtzeSA9IHB5ICsgZCAqIHRvcXk7XG4gICAgdHggPSBxeCArIGQgKiB0b3J4O3R5ID0gcXkgKyBkICogdG9yeTtcbiAgICB0b3R4ID0gdHggLSBzeDt0b3R5ID0gdHkgLSBzeTtcblxuICAgIHggPSBzeCArIGQgKiB0b3R4O3kgPSBzeSArIGQgKiB0b3R5O1xuXG4gICAgbWlueCA9IE1hdGgubWluKG1pbngsIHgpO21pbnkgPSBNYXRoLm1pbihtaW55LCB5KTtcbiAgICBtYXh4ID0gTWF0aC5tYXgobWF4eCwgeCk7bWF4eSA9IE1hdGgubWF4KG1heHksIHkpO1xuICB9XG4gIHJldHVybiB7IHg6IG1pbngsIHk6IG1pbnksIHdpZHRoOiBtYXh4IC0gbWlueCwgaGVpZ2h0OiBtYXh5IC0gbWlueSB9O1xufVxuXG5mdW5jdGlvbiBnZXRSZWN0YW5nbGVCb3VuZHMoeDEsIHkxLCB4MiwgeTIpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBNYXRoLm1pbih4MSwgeDIpLFxuICAgIHk6IE1hdGgubWluKHkxLCB5MiksXG5cbiAgICB3aWR0aDogTWF0aC5hYnMoeDIgLSB4MSksXG4gICAgaGVpZ2h0OiBNYXRoLmFicyh5MiAtIHkxKSB9O1xuXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvdXRpbC9zaGFwZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var Stage = /*#__PURE__*/function () {\n  function Stage() {_classCallCheck(this, Stage);}_createClass(Stage, [{ key: \"setAutoPlay\", value: function setAutoPlay()\n\n    {} }, { key: \"play\", value: function play()\n    {} }, { key: \"stop\", value: function stop()\n    {} }, { key: \"seek\", value: function seek()\n    {} }, { key: \"getDuration\", value: function getDuration()\n    {} }, { key: \"getTimelinePosition\", value: function getTimelinePosition()\n    {} }]);return Stage;}();exports[\"default\"] = Stage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL2Nqcy9TdGFnZS5qcz9jNmM0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhLDhDQUE4QyxjQUFjLEVBQUUsNEJBQTRCLGlEQUFpRCx5Q0FBeUMsMkRBQTJELDJDQUEyQyxlQUFlLGtCQUFrQixPQUFPLDBCQUEwQix1REFBdUQsK0JBQStCLHNEQUFzRCw0REFBNEQsNkRBQTZELHFFQUFxRSw2REFBNkQsb0JBQW9CO0FBQ3B3QixvQkFBb0IsOEJBQThCLHNCQUFzQjs7QUFFeEUsTUFBTSxFQUFFLEdBQUc7QUFDWCxNQUFNLEVBQUUsR0FBRztBQUNYLE1BQU0sRUFBRSxHQUFHO0FBQ1gsTUFBTSxFQUFFLEdBQUc7QUFDWCxNQUFNLEVBQUUsR0FBRztBQUNYLE1BQU0sRUFBRSxHQUFHLGNBQWMsR0FBRyIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7aWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge2ZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHt2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7aWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7fX1mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7aWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7aWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9dmFyIFN0YWdlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RhZ2UoKSB7X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YWdlKTt9X2NyZWF0ZUNsYXNzKFN0YWdlLCBbeyBrZXk6IFwic2V0QXV0b1BsYXlcIiwgdmFsdWU6IGZ1bmN0aW9uIHNldEF1dG9QbGF5KClcblxuICAgIHt9IH0sIHsga2V5OiBcInBsYXlcIiwgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKVxuICAgIHt9IH0sIHsga2V5OiBcInN0b3BcIiwgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKVxuICAgIHt9IH0sIHsga2V5OiBcInNlZWtcIiwgdmFsdWU6IGZ1bmN0aW9uIHNlZWsoKVxuICAgIHt9IH0sIHsga2V5OiBcImdldER1cmF0aW9uXCIsIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpXG4gICAge30gfSwgeyBrZXk6IFwiZ2V0VGltZWxpbmVQb3NpdGlvblwiLCB2YWx1ZTogZnVuY3Rpb24gZ2V0VGltZWxpbmVQb3NpdGlvbigpXG4gICAge30gfV0pO3JldHVybiBTdGFnZTt9KCk7ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTdGFnZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9hZG9iZS1hbmltYXRlLXBhcnNlci9saWIvY2pzL1N0YWdlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _lodash = _interopRequireDefault(__webpack_require__(17));\n\nvar _MovieClip = _interopRequireDefault(__webpack_require__(4));\nvar _Shadow = _interopRequireDefault(__webpack_require__(6));\nvar _Shape = _interopRequireDefault(__webpack_require__(2));\nvar _Tween = _interopRequireDefault(__webpack_require__(5));\nvar _AnimateNode = _interopRequireDefault(__webpack_require__(1));\nvar _AnimateNodeReference = _interopRequireDefault(__webpack_require__(21));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _typeof(obj) {if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\n\nAnimateParser = /*#__PURE__*/function () {\n  function AnimateParser() {_classCallCheck(this, AnimateParser);\n    this.targetCache = {\n      original: {},\n      parsed: {} };\n\n\n    this.schema = {\n      shapes: [],\n      animations: [],\n      references: [],\n      nativeObjects: [] };\n\n\n    this.idCounter = 0;\n  }_createClass(AnimateParser, [{ key: \"nextId\", value: function nextId()\n\n    {\n      return \"temp_\".concat(this.idCounter++);\n    } }, { key: \"markParsed\", value: function markParsed(\n\n    target) {\n      if (this.haveParsed(target)) {\n        return;\n      }\n\n      var tempId = this.nextId();\n      this.applyParsedId(target, tempId);\n\n      this.targetCache.original[tempId] = target;\n\n      return tempId;\n    } }, { key: \"haveParsed\", value: function haveParsed(\n\n    target) {\n      return typeof this.getParsedId(target) !== 'undefined';\n    } }, { key: \"getParsedId\", value: function getParsedId(\n\n    target) {\n      return target._cocoId;\n    } }, { key: \"applyParsedId\", value: function applyParsedId(\n\n    target, id) {\n      target._cocoId = id;\n      return target;\n    } }, { key: \"updatedId\", value: function updatedId(\n\n    oldId, animateNode) {\n      this.targetCache.original[animateNode.id] = this.targetCache.original[oldId];\n      delete this.targetCache.original[oldId];\n\n      this.targetCache.parsed[animateNode.id] = this.targetCache.parsed[oldId];\n      delete this.targetCache.parsed[oldId];\n\n      // TODO inefficient for animation trees with large numbers of references\n      this.schema.references.forEach(function (reference) {\n        if (reference.nodeId === animateNode.id) {\n          reference.nodeId = animateNode.id;\n        }\n      });\n    } }, { key: \"getReference\", value: function getReference(\n\n    entityOrReference) {\n      if (entityOrReference instanceof _AnimateNodeReference[\"default\"]) {\n        return entityOrReference;\n      }\n\n      var referencedNodeId;\n      if (entityOrReference instanceof _AnimateNode[\"default\"]) {\n        referencedNodeId = entityOrReference.id;\n      } else {\n        referencedNodeId = this.getParsedId(entityOrReference);\n      }\n\n      var reference = new _AnimateNodeReference[\"default\"]('', referencedNodeId, this.targetCache);\n      var tempId = this.markParsed(reference);\n      reference.id = tempId;\n\n      this.schema.references.push(reference);\n      return reference;\n    } }, { key: \"resolveEntity\", value: function resolveEntity(\n\n    entityOrReference) {\n      if (entityOrReference instanceof _AnimateNodeReference[\"default\"]) {var\n        nodeId = entityOrReference.nodeId;\n\n        var animateNode = this.targetCache.parsed[nodeId];\n        if (!animateNode) {\n          throw new Error('Animate node not found from reference');\n        }\n\n        return animateNode.original;\n      }\n\n      if (entityOrReference instanceof _AnimateNode[\"default\"]) {\n        return entityOrReference.original;\n      }\n\n      return entityOrReference;\n    } }, { key: \"parseRectangle\", value: function parseRectangle(\n\n    rectangle) {\n      if (!rectangle) {\n        return undefined;\n      }\n\n      var tempId = this.markParsed(rectangle);\n      var result = new _AnimateNode[\"default\"](\n      tempId,\n      'rectangle',\n      rectangle,\n      rectangle.cocoSchema.rectangleConfig);\n\n\n      var originalId = result.finalizeId();\n      this.updatedId(originalId, result);\n\n      return result;\n    } }, { key: \"parseShape\", value: function parseShape(\n\n    shape) {\n      if (this.haveParsed(shape)) {\n        return this.getReference(shape);\n      }\n\n      var tempId = this.markParsed(shape);var\n\n\n      frameBounds =\n\n      shape.frameBounds,nominalBounds = shape.nominalBounds;\n\n      var result = new _AnimateNode[\"default\"](\n      tempId,\n      'shape',\n      shape,\n      {\n        transform: shape.cocoSchema.transform,\n        graphics: (shape.graphics || {}).cocoSchema });\n\n\n\n      if (frameBounds) {\n        result.data.frameBounds = this.parseRectangle(frameBounds);\n      }\n\n      if (nominalBounds) {\n        result.data.bounds = this.parseRectangle(nominalBounds);\n      }\n\n      var originalId = result.finalizeId();\n      this.updatedId(originalId, result);\n\n      this.schema.shapes.push(result);\n      this.targetCache.parsed[result.id] = result;\n\n      return result;\n    } }, { key: \"parseMovieClip\", value: function parseMovieClip(\n\n    movieClip) {var _this = this;\n      if (this.haveParsed(movieClip)) {\n        return this.getReference(movieClip);\n      }\n\n      var tempId = this.markParsed(movieClip);var\n\n\n      frameBounds =\n\n      movieClip.frameBounds,nominalBounds = movieClip.nominalBounds;var\n\n      tweens = movieClip.timeline.tweens;\n\n      var parsedFrameBounds;\n      if (frameBounds) {\n        parsedFrameBounds = frameBounds.map(function (fb) {return _this.parseRectangle(fb);});\n      }\n\n      var parsedTweens = tweens.map(function (t) {return _this.parseTween(t);});\n\n      var result = new _AnimateNode[\"default\"](\n      tempId,\n      'movie_clip',\n      movieClip, _objectSpread({\n\n        constructorArgs: movieClip.cocoSchema.constructorArgs,\n        transform: movieClip.cocoSchema.transform,\n\n        bounds: this.parseRectangle(nominalBounds),\n        frameBounds: parsedFrameBounds,\n\n        tweens: parsedTweens },\n\n      movieClip.cocoSchema.off && { off: movieClip.cocoSchema.off }));\n\n\n\n      var originalId = result.finalizeId();\n      this.updatedId(originalId, result);\n\n      this.schema.animations.push(result);\n      this.targetCache.parsed[result.id] = result;\n\n      return result;\n    } }, { key: \"parseTween\", value: function parseTween(\n\n    tween) {\n      if (this.haveParsed(tween)) {\n        return this.getReference(tween);\n      }\n\n      var tempId = this.markParsed(tween);var\n\n      target = tween.target;\n\n      var parsedTarget;\n      if (target instanceof _MovieClip[\"default\"]) {\n        parsedTarget = this.parseMovieClip(target);\n      } else if (target instanceof _Shape[\"default\"]) {\n        parsedTarget = this.parseShape(target);\n      } else if (target.constructor === Object) {\n        // If tween target is a plain object make sure to handle it in code\n        parsedTarget = this.parseNativeJsObject(target);\n      } else {\n        throw new Error('Invalid tween target');\n      }\n\n      var tweenCalls = this.parseNativeJsObject(tween.cocoSchema.methodCalls);\n\n      var result = new _AnimateNode[\"default\"](\n      tempId,\n      'tween',\n      tween,\n      {\n        target: this.getReference(parsedTarget),\n        tweenCalls: tweenCalls });\n\n\n\n      var originalId = result.finalizeId();\n      this.updatedId(originalId, result);\n\n      this.targetCache.parsed[result.id] = result;\n      return result;\n    }\n\n    // This function only supports simple JSON objects but does not exactly check for them\n  }, { key: \"parseNativeJsObject\", value: function parseNativeJsObject(object) {\n      if (this.haveParsed(object)) {\n        return this.getReference(object);\n      }\n\n      // We shallow clone so we can capture the object without the parsing metadata.  We\n      // may need to deep clone at some point.\n      var shallowClone = (0, _lodash[\"default\"])(object);\n\n      var tempId = this.markParsed(object);\n\n      var parsedObject = Array.isArray(shallowClone) ? [] : {};\n      for (var _i = 0, _Object$entries = Object.entries(shallowClone); _i < _Object$entries.length; _i++) {var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),key = _Object$entries$_i[0],value = _Object$entries$_i[1];\n        var parsedTarget = value;\n\n        if (_typeof(value) === 'object') {\n          // TODO can we find a way to make this dyanmic so we dont have to remember to add support for each new cjs object we add\n\n          if (value instanceof _MovieClip[\"default\"]) {\n            parsedTarget = this.parseMovieClip(value);\n          } else if (value instanceof _Shape[\"default\"]) {\n            parsedTarget = this.parseShape(value);\n          } else if (value instanceof _Tween[\"default\"]) {\n            parsedTarget = this.parseTween(value);\n          } else if (value instanceof _Tween[\"default\"]) {\n            // TODO throwing to be safe here - we have not tested tween support in native JS objects\n            throw new Error('Do no support tween here');\n          } else if (value.constructor === Object || Array.isArray(value)) {\n            parsedTarget = this.parseNativeJsObject(value);\n          } else {\n            throw new Error('Unexpected value type');\n          }\n        }\n\n        parsedObject[key] = parsedTarget;\n      }\n\n      var result = new _AnimateNode[\"default\"](\n      tempId,\n      'native_object',\n      parsedObject,\n      {\n        // This is redundant but allows finalizeId to create a unique ID because\n        // it is currently based on the data contents and type only\n        object: parsedObject });\n\n\n\n\n      var originalId = result.finalizeId();\n      this.updatedId(originalId, result);\n\n      this.targetCache.parsed[result.id] = result;\n\n      return result;\n    } }]);return AnimateParser;}();exports[\"default\"] = AnimateParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, false, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = clone;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(18), __webpack_require__(19)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XG59IGNhdGNoKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcblx0XHRnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif(!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

eval("var require;var require;!function(e){if(true)module.exports=e();else if(\"function\"==typeof define&&define.amd)define(e);else{var t;\"undefined\"!=typeof window?t=window:\"undefined\"!=typeof global?t=global:\"undefined\"!=typeof self&&(t=self),t.objectHash=e()}}(function(){return function e(t,n,r){function o(u,a){if(!n[u]){if(!t[u]){var f=\"function\"==typeof require&&require;if(!a&&f)return require(u,!0);if(i)return i(u,!0);throw new Error(\"Cannot find module '\"+u+\"'\")}var s=n[u]={exports:{}};t[u][0].call(s.exports,function(e){var n=t[u][1][e];return o(n?n:e)},s,s.exports,e,t,n,r)}return n[u].exports}for(var i=\"function\"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(e,t,n){(function(r,o,i,u,a,f,s,c,l){\"use strict\";function d(e,t){return t=h(e,t),g(e,t)}function h(e,t){if(t=t||{},t.algorithm=t.algorithm||\"sha1\",t.encoding=t.encoding||\"hex\",t.excludeValues=!!t.excludeValues,t.algorithm=t.algorithm.toLowerCase(),t.encoding=t.encoding.toLowerCase(),t.ignoreUnknown=t.ignoreUnknown===!0,t.respectType=t.respectType!==!1,t.respectFunctionNames=t.respectFunctionNames!==!1,t.respectFunctionProperties=t.respectFunctionProperties!==!1,t.unorderedArrays=t.unorderedArrays===!0,t.unorderedSets=t.unorderedSets!==!1,t.unorderedObjects=t.unorderedObjects!==!1,t.replacer=t.replacer||void 0,t.excludeKeys=t.excludeKeys||void 0,\"undefined\"==typeof e)throw new Error(\"Object argument required.\");for(var n=0;n<v.length;++n)v[n].toLowerCase()===t.algorithm.toLowerCase()&&(t.algorithm=v[n]);if(v.indexOf(t.algorithm)===-1)throw new Error('Algorithm \"'+t.algorithm+'\"  not supported. supported values: '+v.join(\", \"));if(m.indexOf(t.encoding)===-1&&\"passthrough\"!==t.algorithm)throw new Error('Encoding \"'+t.encoding+'\"  not supported. supported values: '+m.join(\", \"));return t}function p(e){if(\"function\"!=typeof e)return!1;var t=/^function\\s+\\w*\\s*\\(\\s*\\)\\s*{\\s+\\[native code\\]\\s+}$/i;return null!=t.exec(Function.prototype.toString.call(e))}function g(e,t){var n;n=\"passthrough\"!==t.algorithm?b.createHash(t.algorithm):new w,\"undefined\"==typeof n.write&&(n.write=n.update,n.end=n.update);var r=y(t,n);if(r.dispatch(e),n.update||n.end(\"\"),n.digest)return n.digest(\"buffer\"===t.encoding?void 0:t.encoding);var o=n.read();return\"buffer\"===t.encoding?o:o.toString(t.encoding)}function y(e,t,n){n=n||[];var r=function(e){return t.update?t.update(e,\"utf8\"):t.write(e,\"utf8\")};return{dispatch:function(t){e.replacer&&(t=e.replacer(t));var n=typeof t;return null===t&&(n=\"null\"),this[\"_\"+n](t)},_object:function(t){var o=/\\[object (.*)\\]/i,u=Object.prototype.toString.call(t),a=o.exec(u);a=a?a[1]:\"unknown:[\"+u+\"]\",a=a.toLowerCase();var f=null;if((f=n.indexOf(t))>=0)return this.dispatch(\"[CIRCULAR:\"+f+\"]\");if(n.push(t),\"undefined\"!=typeof i&&i.isBuffer&&i.isBuffer(t))return r(\"buffer:\"),r(t);if(\"object\"===a||\"function\"===a){var s=Object.keys(t);e.unorderedObjects&&(s=s.sort()),e.respectType===!1||p(t)||s.splice(0,0,\"prototype\",\"__proto__\",\"constructor\"),e.excludeKeys&&(s=s.filter(function(t){return!e.excludeKeys(t)})),r(\"object:\"+s.length+\":\");var c=this;return s.forEach(function(n){c.dispatch(n),r(\":\"),e.excludeValues||c.dispatch(t[n]),r(\",\")})}if(!this[\"_\"+a]){if(e.ignoreUnknown)return r(\"[\"+a+\"]\");throw new Error('Unknown object type \"'+a+'\"')}this[\"_\"+a](t)},_array:function(t,o){o=\"undefined\"!=typeof o?o:e.unorderedArrays!==!1;var i=this;if(r(\"array:\"+t.length+\":\"),!o||t.length<=1)return t.forEach(function(e){return i.dispatch(e)});var u=[],a=t.map(function(t){var r=new w,o=n.slice(),i=y(e,r,o);return i.dispatch(t),u=u.concat(o.slice(n.length)),r.read().toString()});return n=n.concat(u),a.sort(),this._array(a,!1)},_date:function(e){return r(\"date:\"+e.toJSON())},_symbol:function(e){return r(\"symbol:\"+e.toString())},_error:function(e){return r(\"error:\"+e.toString())},_boolean:function(e){return r(\"bool:\"+e.toString())},_string:function(e){r(\"string:\"+e.length+\":\"),r(e.toString())},_function:function(t){r(\"fn:\"),p(t)?this.dispatch(\"[native]\"):this.dispatch(t.toString()),e.respectFunctionNames!==!1&&this.dispatch(\"function-name:\"+String(t.name)),e.respectFunctionProperties&&this._object(t)},_number:function(e){return r(\"number:\"+e.toString())},_xml:function(e){return r(\"xml:\"+e.toString())},_null:function(){return r(\"Null\")},_undefined:function(){return r(\"Undefined\")},_regexp:function(e){return r(\"regex:\"+e.toString())},_uint8array:function(e){return r(\"uint8array:\"),this.dispatch(Array.prototype.slice.call(e))},_uint8clampedarray:function(e){return r(\"uint8clampedarray:\"),this.dispatch(Array.prototype.slice.call(e))},_int8array:function(e){return r(\"uint8array:\"),this.dispatch(Array.prototype.slice.call(e))},_uint16array:function(e){return r(\"uint16array:\"),this.dispatch(Array.prototype.slice.call(e))},_int16array:function(e){return r(\"uint16array:\"),this.dispatch(Array.prototype.slice.call(e))},_uint32array:function(e){return r(\"uint32array:\"),this.dispatch(Array.prototype.slice.call(e))},_int32array:function(e){return r(\"uint32array:\"),this.dispatch(Array.prototype.slice.call(e))},_float32array:function(e){return r(\"float32array:\"),this.dispatch(Array.prototype.slice.call(e))},_float64array:function(e){return r(\"float64array:\"),this.dispatch(Array.prototype.slice.call(e))},_arraybuffer:function(e){return r(\"arraybuffer:\"),this.dispatch(new Uint8Array(e))},_url:function(e){return r(\"url:\"+e.toString(),\"utf8\")},_map:function(t){r(\"map:\");var n=Array.from(t);return this._array(n,e.unorderedSets!==!1)},_set:function(t){r(\"set:\");var n=Array.from(t);return this._array(n,e.unorderedSets!==!1)},_blob:function(){if(e.ignoreUnknown)return r(\"[blob]\");throw Error('Hashing Blob objects is currently not supported\\n(see https://github.com/puleos/object-hash/issues/26)\\nUse \"options.replacer\" or \"options.ignoreUnknown\"\\n')},_domwindow:function(){return r(\"domwindow\")},_process:function(){return r(\"process\")},_timer:function(){return r(\"timer\")},_pipe:function(){return r(\"pipe\")},_tcp:function(){return r(\"tcp\")},_udp:function(){return r(\"udp\")},_tty:function(){return r(\"tty\")},_statwatcher:function(){return r(\"statwatcher\")},_securecontext:function(){return r(\"securecontext\")},_connection:function(){return r(\"connection\")},_zlib:function(){return r(\"zlib\")},_context:function(){return r(\"context\")},_nodescript:function(){return r(\"nodescript\")},_httpparser:function(){return r(\"httpparser\")},_dataview:function(){return r(\"dataview\")},_signal:function(){return r(\"signal\")},_fsevent:function(){return r(\"fsevent\")},_tlswrap:function(){return r(\"tlswrap\")}}}function w(){return{buf:\"\",write:function(e){this.buf+=e},end:function(e){this.buf+=e},read:function(){return this.buf}}}var b=e(\"crypto\");n=t.exports=d,n.sha1=function(e){return d(e)},n.keys=function(e){return d(e,{excludeValues:!0,algorithm:\"sha1\",encoding:\"hex\"})},n.MD5=function(e){return d(e,{algorithm:\"md5\",encoding:\"hex\"})},n.keysMD5=function(e){return d(e,{algorithm:\"md5\",encoding:\"hex\",excludeValues:!0})};var v=b.getHashes?b.getHashes().slice():[\"sha1\",\"md5\"];v.push(\"passthrough\");var m=[\"buffer\",\"hex\",\"binary\",\"base64\"];n.writeToStream=function(e,t,n){return\"undefined\"==typeof n&&(n=t,t={}),t=h(e,t),y(t,n).dispatch(e)}}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/fake_e8180ef5.js\",\"/\")},{buffer:3,crypto:5,lYpoI2:10}],2:[function(e,t,n){(function(e,t,r,o,i,u,a,f,s){var c=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";!function(e){\"use strict\";function t(e){var t=e.charCodeAt(0);return t===i||t===l?62:t===u||t===d?63:t<a?-1:t<a+10?t-a+26+26:t<s+26?t-s:t<f+26?t-f+26:void 0}function n(e){function n(e){s[l++]=e}var r,i,u,a,f,s;if(e.length%4>0)throw new Error(\"Invalid string. Length must be a multiple of 4\");var c=e.length;f=\"=\"===e.charAt(c-2)?2:\"=\"===e.charAt(c-1)?1:0,s=new o(3*e.length/4-f),u=f>0?e.length-4:e.length;var l=0;for(r=0,i=0;r<u;r+=4,i+=3)a=t(e.charAt(r))<<18|t(e.charAt(r+1))<<12|t(e.charAt(r+2))<<6|t(e.charAt(r+3)),n((16711680&a)>>16),n((65280&a)>>8),n(255&a);return 2===f?(a=t(e.charAt(r))<<2|t(e.charAt(r+1))>>4,n(255&a)):1===f&&(a=t(e.charAt(r))<<10|t(e.charAt(r+1))<<4|t(e.charAt(r+2))>>2,n(a>>8&255),n(255&a)),s}function r(e){function t(e){return c.charAt(e)}function n(e){return t(e>>18&63)+t(e>>12&63)+t(e>>6&63)+t(63&e)}var r,o,i,u=e.length%3,a=\"\";for(r=0,i=e.length-u;r<i;r+=3)o=(e[r]<<16)+(e[r+1]<<8)+e[r+2],a+=n(o);switch(u){case 1:o=e[e.length-1],a+=t(o>>2),a+=t(o<<4&63),a+=\"==\";break;case 2:o=(e[e.length-2]<<8)+e[e.length-1],a+=t(o>>10),a+=t(o>>4&63),a+=t(o<<2&63),a+=\"=\"}return a}var o=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,i=\"+\".charCodeAt(0),u=\"/\".charCodeAt(0),a=\"0\".charCodeAt(0),f=\"a\".charCodeAt(0),s=\"A\".charCodeAt(0),l=\"-\".charCodeAt(0),d=\"_\".charCodeAt(0);e.toByteArray=n,e.fromByteArray=r}(\"undefined\"==typeof n?this.base64js={}:n)}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js\",\"/node_modules/gulp-browserify/node_modules/base64-js/lib\")},{buffer:3,lYpoI2:10}],3:[function(e,t,n){(function(t,r,o,i,u,a,f,s,c){function o(e,t,n){if(!(this instanceof o))return new o(e,t,n);var r=typeof e;if(\"base64\"===t&&\"string\"===r)for(e=N(e);e.length%4!==0;)e+=\"=\";var i;if(\"number\"===r)i=F(e);else if(\"string\"===r)i=o.byteLength(e,t);else{if(\"object\"!==r)throw new Error(\"First argument needs to be a number, array or string.\");i=F(e.length)}var u;o._useTypedArrays?u=o._augment(new Uint8Array(i)):(u=this,u.length=i,u._isBuffer=!0);var a;if(o._useTypedArrays&&\"number\"==typeof e.byteLength)u._set(e);else if(O(e))for(a=0;a<i;a++)o.isBuffer(e)?u[a]=e.readUInt8(a):u[a]=e[a];else if(\"string\"===r)u.write(e,0,t);else if(\"number\"===r&&!o._useTypedArrays&&!n)for(a=0;a<i;a++)u[a]=0;return u}function l(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r),r>i&&(r=i)):r=i;var u=t.length;$(u%2===0,\"Invalid hex string\"),r>u/2&&(r=u/2);for(var a=0;a<r;a++){var f=parseInt(t.substr(2*a,2),16);$(!isNaN(f),\"Invalid hex string\"),e[n+a]=f}return o._charsWritten=2*a,a}function d(e,t,n,r){var i=o._charsWritten=W(V(t),e,n,r);return i}function h(e,t,n,r){var i=o._charsWritten=W(q(t),e,n,r);return i}function p(e,t,n,r){return h(e,t,n,r)}function g(e,t,n,r){var i=o._charsWritten=W(R(t),e,n,r);return i}function y(e,t,n,r){var i=o._charsWritten=W(P(t),e,n,r);return i}function w(e,t,n){return 0===t&&n===e.length?G.fromByteArray(e):G.fromByteArray(e.slice(t,n))}function b(e,t,n){var r=\"\",o=\"\";n=Math.min(e.length,n);for(var i=t;i<n;i++)e[i]<=127?(r+=J(o)+String.fromCharCode(e[i]),o=\"\"):o+=\"%\"+e[i].toString(16);return r+J(o)}function v(e,t,n){var r=\"\";n=Math.min(e.length,n);for(var o=t;o<n;o++)r+=String.fromCharCode(e[o]);return r}function m(e,t,n){return v(e,t,n)}function _(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o=\"\",i=t;i<n;i++)o+=H(e[i]);return o}function E(e,t,n){for(var r=e.slice(t,n),o=\"\",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function I(e,t,n,r){r||($(\"boolean\"==typeof n,\"missing or invalid endian\"),$(void 0!==t&&null!==t,\"missing offset\"),$(t+1<e.length,\"Trying to read beyond buffer length\"));var o=e.length;if(!(t>=o)){var i;return n?(i=e[t],t+1<o&&(i|=e[t+1]<<8)):(i=e[t]<<8,t+1<o&&(i|=e[t+1])),i}}function A(e,t,n,r){r||($(\"boolean\"==typeof n,\"missing or invalid endian\"),$(void 0!==t&&null!==t,\"missing offset\"),$(t+3<e.length,\"Trying to read beyond buffer length\"));var o=e.length;if(!(t>=o)){var i;return n?(t+2<o&&(i=e[t+2]<<16),t+1<o&&(i|=e[t+1]<<8),i|=e[t],t+3<o&&(i+=e[t+3]<<24>>>0)):(t+1<o&&(i=e[t+1]<<16),t+2<o&&(i|=e[t+2]<<8),t+3<o&&(i|=e[t+3]),i+=e[t]<<24>>>0),i}}function B(e,t,n,r){r||($(\"boolean\"==typeof n,\"missing or invalid endian\"),$(void 0!==t&&null!==t,\"missing offset\"),$(t+1<e.length,\"Trying to read beyond buffer length\"));var o=e.length;if(!(t>=o)){var i=I(e,t,n,!0),u=32768&i;return u?(65535-i+1)*-1:i}}function L(e,t,n,r){r||($(\"boolean\"==typeof n,\"missing or invalid endian\"),$(void 0!==t&&null!==t,\"missing offset\"),$(t+3<e.length,\"Trying to read beyond buffer length\"));var o=e.length;if(!(t>=o)){var i=A(e,t,n,!0),u=2147483648&i;return u?(4294967295-i+1)*-1:i}}function U(e,t,n,r){return r||($(\"boolean\"==typeof n,\"missing or invalid endian\"),$(t+3<e.length,\"Trying to read beyond buffer length\")),Q.read(e,t,n,23,4)}function x(e,t,n,r){return r||($(\"boolean\"==typeof n,\"missing or invalid endian\"),$(t+7<e.length,\"Trying to read beyond buffer length\")),Q.read(e,t,n,52,8)}function S(e,t,n,r,o){o||($(void 0!==t&&null!==t,\"missing value\"),$(\"boolean\"==typeof r,\"missing or invalid endian\"),$(void 0!==n&&null!==n,\"missing offset\"),$(n+1<e.length,\"trying to write beyond buffer length\"),K(t,65535));var i=e.length;if(!(n>=i))for(var u=0,a=Math.min(i-n,2);u<a;u++)e[n+u]=(t&255<<8*(r?u:1-u))>>>8*(r?u:1-u)}function j(e,t,n,r,o){o||($(void 0!==t&&null!==t,\"missing value\"),$(\"boolean\"==typeof r,\"missing or invalid endian\"),$(void 0!==n&&null!==n,\"missing offset\"),$(n+3<e.length,\"trying to write beyond buffer length\"),K(t,4294967295));var i=e.length;if(!(n>=i))for(var u=0,a=Math.min(i-n,4);u<a;u++)e[n+u]=t>>>8*(r?u:3-u)&255}function C(e,t,n,r,o){o||($(void 0!==t&&null!==t,\"missing value\"),$(\"boolean\"==typeof r,\"missing or invalid endian\"),$(void 0!==n&&null!==n,\"missing offset\"),$(n+1<e.length,\"Trying to write beyond buffer length\"),z(t,32767,-32768));var i=e.length;n>=i||(t>=0?S(e,t,n,r,o):S(e,65535+t+1,n,r,o))}function k(e,t,n,r,o){o||($(void 0!==t&&null!==t,\"missing value\"),$(\"boolean\"==typeof r,\"missing or invalid endian\"),$(void 0!==n&&null!==n,\"missing offset\"),$(n+3<e.length,\"Trying to write beyond buffer length\"),z(t,2147483647,-2147483648));var i=e.length;n>=i||(t>=0?j(e,t,n,r,o):j(e,4294967295+t+1,n,r,o))}function T(e,t,n,r,o){o||($(void 0!==t&&null!==t,\"missing value\"),$(\"boolean\"==typeof r,\"missing or invalid endian\"),$(void 0!==n&&null!==n,\"missing offset\"),$(n+3<e.length,\"Trying to write beyond buffer length\"),X(t,3.4028234663852886e38,-3.4028234663852886e38));var i=e.length;n>=i||Q.write(e,t,n,r,23,4)}function M(e,t,n,r,o){o||($(void 0!==t&&null!==t,\"missing value\"),$(\"boolean\"==typeof r,\"missing or invalid endian\"),$(void 0!==n&&null!==n,\"missing offset\"),$(n+7<e.length,\"Trying to write beyond buffer length\"),X(t,1.7976931348623157e308,-1.7976931348623157e308));var i=e.length;n>=i||Q.write(e,t,n,r,52,8)}function N(e){return e.trim?e.trim():e.replace(/^\\s+|\\s+$/g,\"\")}function Y(e,t,n){return\"number\"!=typeof e?n:(e=~~e,e>=t?t:e>=0?e:(e+=t,e>=0?e:0))}function F(e){return e=~~Math.ceil(+e),e<0?0:e}function D(e){return(Array.isArray||function(e){return\"[object Array]\"===Object.prototype.toString.call(e)})(e)}function O(e){return D(e)||o.isBuffer(e)||e&&\"object\"==typeof e&&\"number\"==typeof e.length}function H(e){return e<16?\"0\"+e.toString(16):e.toString(16)}function V(e){for(var t=[],n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<=127)t.push(e.charCodeAt(n));else{var o=n;r>=55296&&r<=57343&&n++;for(var i=encodeURIComponent(e.slice(o,n+1)).substr(1).split(\"%\"),u=0;u<i.length;u++)t.push(parseInt(i[u],16))}}return t}function q(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t}function P(e){for(var t,n,r,o=[],i=0;i<e.length;i++)t=e.charCodeAt(i),n=t>>8,r=t%256,o.push(r),o.push(n);return o}function R(e){return G.toByteArray(e)}function W(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);o++)t[o+n]=e[o];return o}function J(e){try{return decodeURIComponent(e)}catch(t){return String.fromCharCode(65533)}}function K(e,t){$(\"number\"==typeof e,\"cannot write a non-number as a number\"),$(e>=0,\"specified a negative value for writing an unsigned value\"),$(e<=t,\"value is larger than maximum value for type\"),$(Math.floor(e)===e,\"value has a fractional component\")}function z(e,t,n){$(\"number\"==typeof e,\"cannot write a non-number as a number\"),$(e<=t,\"value larger than maximum allowed value\"),$(e>=n,\"value smaller than minimum allowed value\"),$(Math.floor(e)===e,\"value has a fractional component\")}function X(e,t,n){$(\"number\"==typeof e,\"cannot write a non-number as a number\"),$(e<=t,\"value larger than maximum allowed value\"),$(e>=n,\"value smaller than minimum allowed value\")}function $(e,t){if(!e)throw new Error(t||\"Failed assertion\")}var G=e(\"base64-js\"),Q=e(\"ieee754\");n.Buffer=o,n.SlowBuffer=o,n.INSPECT_MAX_BYTES=50,o.poolSize=8192,o._useTypedArrays=function(){try{var e=new ArrayBuffer(0),t=new Uint8Array(e);return t.foo=function(){return 42},42===t.foo()&&\"function\"==typeof t.subarray}catch(n){return!1}}(),o.isEncoding=function(e){switch(String(e).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"binary\":case\"base64\":case\"raw\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},o.isBuffer=function(e){return!(null===e||void 0===e||!e._isBuffer)},o.byteLength=function(e,t){var n;switch(e+=\"\",t||\"utf8\"){case\"hex\":n=e.length/2;break;case\"utf8\":case\"utf-8\":n=V(e).length;break;case\"ascii\":case\"binary\":case\"raw\":n=e.length;break;case\"base64\":n=R(e).length;break;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":n=2*e.length;break;default:throw new Error(\"Unknown encoding\")}return n},o.concat=function(e,t){if($(D(e),\"Usage: Buffer.concat(list, [totalLength])\\nlist should be an Array.\"),0===e.length)return new o(0);if(1===e.length)return e[0];var n;if(\"number\"!=typeof t)for(t=0,n=0;n<e.length;n++)t+=e[n].length;var r=new o(t),i=0;for(n=0;n<e.length;n++){var u=e[n];u.copy(r,i),i+=u.length}return r},o.prototype.write=function(e,t,n,r){if(isFinite(t))isFinite(n)||(r=n,n=void 0);else{var o=r;r=t,t=n,n=o}t=Number(t)||0;var i=this.length-t;n?(n=Number(n),n>i&&(n=i)):n=i,r=String(r||\"utf8\").toLowerCase();var u;switch(r){case\"hex\":u=l(this,e,t,n);break;case\"utf8\":case\"utf-8\":u=d(this,e,t,n);break;case\"ascii\":u=h(this,e,t,n);break;case\"binary\":u=p(this,e,t,n);break;case\"base64\":u=g(this,e,t,n);break;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":u=y(this,e,t,n);break;default:throw new Error(\"Unknown encoding\")}return u},o.prototype.toString=function(e,t,n){var r=this;if(e=String(e||\"utf8\").toLowerCase(),t=Number(t)||0,n=void 0!==n?Number(n):n=r.length,n===t)return\"\";var o;switch(e){case\"hex\":o=_(r,t,n);break;case\"utf8\":case\"utf-8\":o=b(r,t,n);break;case\"ascii\":o=v(r,t,n);break;case\"binary\":o=m(r,t,n);break;case\"base64\":o=w(r,t,n);break;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":o=E(r,t,n);break;default:throw new Error(\"Unknown encoding\")}return o},o.prototype.toJSON=function(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}},o.prototype.copy=function(e,t,n,r){var i=this;if(n||(n=0),r||0===r||(r=this.length),t||(t=0),r!==n&&0!==e.length&&0!==i.length){$(r>=n,\"sourceEnd < sourceStart\"),$(t>=0&&t<e.length,\"targetStart out of bounds\"),$(n>=0&&n<i.length,\"sourceStart out of bounds\"),$(r>=0&&r<=i.length,\"sourceEnd out of bounds\"),r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var u=r-n;if(u<100||!o._useTypedArrays)for(var a=0;a<u;a++)e[a+t]=this[a+n];else e._set(this.subarray(n,n+u),t)}},o.prototype.slice=function(e,t){var n=this.length;if(e=Y(e,n,0),t=Y(t,n,n),o._useTypedArrays)return o._augment(this.subarray(e,t));for(var r=t-e,i=new o(r,(void 0),(!0)),u=0;u<r;u++)i[u]=this[u+e];return i},o.prototype.get=function(e){return console.log(\".get() is deprecated. Access using array indexes instead.\"),this.readUInt8(e)},o.prototype.set=function(e,t){return console.log(\".set() is deprecated. Access using array indexes instead.\"),this.writeUInt8(e,t)},o.prototype.readUInt8=function(e,t){if(t||($(void 0!==e&&null!==e,\"missing offset\"),$(e<this.length,\"Trying to read beyond buffer length\")),!(e>=this.length))return this[e]},o.prototype.readUInt16LE=function(e,t){return I(this,e,!0,t)},o.prototype.readUInt16BE=function(e,t){return I(this,e,!1,t)},o.prototype.readUInt32LE=function(e,t){return A(this,e,!0,t)},o.prototype.readUInt32BE=function(e,t){return A(this,e,!1,t)},o.prototype.readInt8=function(e,t){if(t||($(void 0!==e&&null!==e,\"missing offset\"),$(e<this.length,\"Trying to read beyond buffer length\")),!(e>=this.length)){var n=128&this[e];return n?(255-this[e]+1)*-1:this[e]}},o.prototype.readInt16LE=function(e,t){return B(this,e,!0,t)},o.prototype.readInt16BE=function(e,t){return B(this,e,!1,t)},o.prototype.readInt32LE=function(e,t){return L(this,e,!0,t)},o.prototype.readInt32BE=function(e,t){return L(this,e,!1,t)},o.prototype.readFloatLE=function(e,t){return U(this,e,!0,t)},o.prototype.readFloatBE=function(e,t){return U(this,e,!1,t)},o.prototype.readDoubleLE=function(e,t){return x(this,e,!0,t)},o.prototype.readDoubleBE=function(e,t){return x(this,e,!1,t)},o.prototype.writeUInt8=function(e,t,n){n||($(void 0!==e&&null!==e,\"missing value\"),$(void 0!==t&&null!==t,\"missing offset\"),$(t<this.length,\"trying to write beyond buffer length\"),K(e,255)),t>=this.length||(this[t]=e)},o.prototype.writeUInt16LE=function(e,t,n){S(this,e,t,!0,n)},o.prototype.writeUInt16BE=function(e,t,n){S(this,e,t,!1,n)},o.prototype.writeUInt32LE=function(e,t,n){j(this,e,t,!0,n)},o.prototype.writeUInt32BE=function(e,t,n){j(this,e,t,!1,n)},o.prototype.writeInt8=function(e,t,n){n||($(void 0!==e&&null!==e,\"missing value\"),$(void 0!==t&&null!==t,\"missing offset\"),$(t<this.length,\"Trying to write beyond buffer length\"),z(e,127,-128)),t>=this.length||(e>=0?this.writeUInt8(e,t,n):this.writeUInt8(255+e+1,t,n))},o.prototype.writeInt16LE=function(e,t,n){C(this,e,t,!0,n)},o.prototype.writeInt16BE=function(e,t,n){C(this,e,t,!1,n)},o.prototype.writeInt32LE=function(e,t,n){k(this,e,t,!0,n)},o.prototype.writeInt32BE=function(e,t,n){k(this,e,t,!1,n)},o.prototype.writeFloatLE=function(e,t,n){T(this,e,t,!0,n)},o.prototype.writeFloatBE=function(e,t,n){T(this,e,t,!1,n)},o.prototype.writeDoubleLE=function(e,t,n){M(this,e,t,!0,n)},o.prototype.writeDoubleBE=function(e,t,n){M(this,e,t,!1,n)},o.prototype.fill=function(e,t,n){if(e||(e=0),t||(t=0),n||(n=this.length),\"string\"==typeof e&&(e=e.charCodeAt(0)),$(\"number\"==typeof e&&!isNaN(e),\"value is not a number\"),$(n>=t,\"end < start\"),n!==t&&0!==this.length){$(t>=0&&t<this.length,\"start out of bounds\"),$(n>=0&&n<=this.length,\"end out of bounds\");for(var r=t;r<n;r++)this[r]=e}},o.prototype.inspect=function(){for(var e=[],t=this.length,r=0;r<t;r++)if(e[r]=H(this[r]),r===n.INSPECT_MAX_BYTES){e[r+1]=\"...\";break}return\"<Buffer \"+e.join(\" \")+\">\"},o.prototype.toArrayBuffer=function(){if(\"undefined\"!=typeof Uint8Array){if(o._useTypedArrays)return new o(this).buffer;for(var e=new Uint8Array(this.length),t=0,n=e.length;t<n;t+=1)e[t]=this[t];return e.buffer}throw new Error(\"Buffer.toArrayBuffer not supported in this browser\")};var Z=o.prototype;o._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=Z.get,e.set=Z.set,e.write=Z.write,e.toString=Z.toString,e.toLocaleString=Z.toString,e.toJSON=Z.toJSON,e.copy=Z.copy,e.slice=Z.slice,e.readUInt8=Z.readUInt8,e.readUInt16LE=Z.readUInt16LE,e.readUInt16BE=Z.readUInt16BE,e.readUInt32LE=Z.readUInt32LE,e.readUInt32BE=Z.readUInt32BE,e.readInt8=Z.readInt8,e.readInt16LE=Z.readInt16LE,e.readInt16BE=Z.readInt16BE,e.readInt32LE=Z.readInt32LE,e.readInt32BE=Z.readInt32BE,e.readFloatLE=Z.readFloatLE,e.readFloatBE=Z.readFloatBE,e.readDoubleLE=Z.readDoubleLE,e.readDoubleBE=Z.readDoubleBE,e.writeUInt8=Z.writeUInt8,e.writeUInt16LE=Z.writeUInt16LE,e.writeUInt16BE=Z.writeUInt16BE,e.writeUInt32LE=Z.writeUInt32LE,e.writeUInt32BE=Z.writeUInt32BE,e.writeInt8=Z.writeInt8,e.writeInt16LE=Z.writeInt16LE,e.writeInt16BE=Z.writeInt16BE,e.writeInt32LE=Z.writeInt32LE,e.writeInt32BE=Z.writeInt32BE,e.writeFloatLE=Z.writeFloatLE,e.writeFloatBE=Z.writeFloatBE,e.writeDoubleLE=Z.writeDoubleLE,e.writeDoubleBE=Z.writeDoubleBE,e.fill=Z.fill,e.inspect=Z.inspect,e.toArrayBuffer=Z.toArrayBuffer,e}}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/gulp-browserify/node_modules/buffer/index.js\",\"/node_modules/gulp-browserify/node_modules/buffer\")},{\"base64-js\":2,buffer:3,ieee754:11,lYpoI2:10}],4:[function(e,t,n){(function(n,r,o,i,u,a,f,s,c){function l(e,t){if(e.length%p!==0){var n=e.length+(p-e.length%p);e=o.concat([e,g],n)}for(var r=[],i=t?e.readInt32BE:e.readInt32LE,u=0;u<e.length;u+=p)r.push(i.call(e,u));return r}function d(e,t,n){for(var r=new o(t),i=n?r.writeInt32BE:r.writeInt32LE,u=0;u<e.length;u++)i.call(r,e[u],4*u,!0);return r}function h(e,t,n,r){o.isBuffer(e)||(e=new o(e));var i=t(l(e,r),e.length*y);return d(i,n,r)}var o=e(\"buffer\").Buffer,p=4,g=new o(p);g.fill(0);var y=8;t.exports={hash:h}}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js\",\"/node_modules/gulp-browserify/node_modules/crypto-browserify\")},{buffer:3,lYpoI2:10}],5:[function(e,t,n){(function(t,r,o,i,u,a,f,s,c){function l(e,t,n){o.isBuffer(t)||(t=new o(t)),o.isBuffer(n)||(n=new o(n)),t.length>m?t=e(t):t.length<m&&(t=o.concat([t,_],m));for(var r=new o(m),i=new o(m),u=0;u<m;u++)r[u]=54^t[u],i[u]=92^t[u];var a=e(o.concat([r,n]));return e(o.concat([i,a]))}function d(e,t){e=e||\"sha1\";var n=v[e],r=[],i=0;return n||h(\"algorithm:\",e,\"is not yet supported\"),{update:function(e){return o.isBuffer(e)||(e=new o(e)),r.push(e),i+=e.length,this},digest:function(e){var i=o.concat(r),u=t?l(n,t,i):n(i);return r=null,e?u.toString(e):u}}}function h(){var e=[].slice.call(arguments).join(\" \");throw new Error([e,\"we accept pull requests\",\"http://github.com/dominictarr/crypto-browserify\"].join(\"\\n\"))}function p(e,t){for(var n in e)t(e[n],n)}var o=e(\"buffer\").Buffer,g=e(\"./sha\"),y=e(\"./sha256\"),w=e(\"./rng\"),b=e(\"./md5\"),v={sha1:g,sha256:y,md5:b},m=64,_=new o(m);_.fill(0),n.createHash=function(e){return d(e)},n.createHmac=function(e,t){return d(e,t)},n.randomBytes=function(e,t){if(!t||!t.call)return new o(w(e));try{t.call(this,void 0,new o(w(e)))}catch(n){t(n)}},p([\"createCredentials\",\"createCipher\",\"createCipheriv\",\"createDecipher\",\"createDecipheriv\",\"createSign\",\"createVerify\",\"createDiffieHellman\",\"pbkdf2\"],function(e){n[e]=function(){h(\"sorry,\",e,\"is not implemented yet\")}})}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js\",\"/node_modules/gulp-browserify/node_modules/crypto-browserify\")},{\"./md5\":6,\"./rng\":7,\"./sha\":8,\"./sha256\":9,buffer:3,lYpoI2:10}],6:[function(e,t,n){(function(n,r,o,i,u,a,f,s,c){function l(e,t){e[t>>5]|=128<<t%32,e[(t+64>>>9<<4)+14]=t;for(var n=1732584193,r=-271733879,o=-1732584194,i=271733878,u=0;u<e.length;u+=16){var a=n,f=r,s=o,c=i;n=h(n,r,o,i,e[u+0],7,-680876936),i=h(i,n,r,o,e[u+1],12,-389564586),o=h(o,i,n,r,e[u+2],17,606105819),r=h(r,o,i,n,e[u+3],22,-1044525330),n=h(n,r,o,i,e[u+4],7,-176418897),i=h(i,n,r,o,e[u+5],12,1200080426),o=h(o,i,n,r,e[u+6],17,-1473231341),r=h(r,o,i,n,e[u+7],22,-45705983),n=h(n,r,o,i,e[u+8],7,1770035416),i=h(i,n,r,o,e[u+9],12,-1958414417),o=h(o,i,n,r,e[u+10],17,-42063),r=h(r,o,i,n,e[u+11],22,-1990404162),n=h(n,r,o,i,e[u+12],7,1804603682),i=h(i,n,r,o,e[u+13],12,-40341101),o=h(o,i,n,r,e[u+14],17,-1502002290),r=h(r,o,i,n,e[u+15],22,1236535329),n=p(n,r,o,i,e[u+1],5,-165796510),i=p(i,n,r,o,e[u+6],9,-1069501632),o=p(o,i,n,r,e[u+11],14,643717713),r=p(r,o,i,n,e[u+0],20,-373897302),n=p(n,r,o,i,e[u+5],5,-701558691),i=p(i,n,r,o,e[u+10],9,38016083),o=p(o,i,n,r,e[u+15],14,-660478335),r=p(r,o,i,n,e[u+4],20,-405537848),n=p(n,r,o,i,e[u+9],5,568446438),i=p(i,n,r,o,e[u+14],9,-1019803690),o=p(o,i,n,r,e[u+3],14,-187363961),r=p(r,o,i,n,e[u+8],20,1163531501),n=p(n,r,o,i,e[u+13],5,-1444681467),i=p(i,n,r,o,e[u+2],9,-51403784),o=p(o,i,n,r,e[u+7],14,1735328473),r=p(r,o,i,n,e[u+12],20,-1926607734),n=g(n,r,o,i,e[u+5],4,-378558),i=g(i,n,r,o,e[u+8],11,-2022574463),o=g(o,i,n,r,e[u+11],16,1839030562),r=g(r,o,i,n,e[u+14],23,-35309556),n=g(n,r,o,i,e[u+1],4,-1530992060),i=g(i,n,r,o,e[u+4],11,1272893353),o=g(o,i,n,r,e[u+7],16,-155497632),r=g(r,o,i,n,e[u+10],23,-1094730640),n=g(n,r,o,i,e[u+13],4,681279174),i=g(i,n,r,o,e[u+0],11,-358537222),o=g(o,i,n,r,e[u+3],16,-722521979),r=g(r,o,i,n,e[u+6],23,76029189),n=g(n,r,o,i,e[u+9],4,-640364487),i=g(i,n,r,o,e[u+12],11,-421815835),o=g(o,i,n,r,e[u+15],16,530742520),r=g(r,o,i,n,e[u+2],23,-995338651),n=y(n,r,o,i,e[u+0],6,-198630844),i=y(i,n,r,o,e[u+7],10,1126891415),o=y(o,i,n,r,e[u+14],15,-1416354905),r=y(r,o,i,n,e[u+5],21,-57434055),n=y(n,r,o,i,e[u+12],6,1700485571),i=y(i,n,r,o,e[u+3],10,-1894986606),o=y(o,i,n,r,e[u+10],15,-1051523),r=y(r,o,i,n,e[u+1],21,-2054922799),n=y(n,r,o,i,e[u+8],6,1873313359),i=y(i,n,r,o,e[u+15],10,-30611744),o=y(o,i,n,r,e[u+6],15,-1560198380),r=y(r,o,i,n,e[u+13],21,1309151649),n=y(n,r,o,i,e[u+4],6,-145523070),i=y(i,n,r,o,e[u+11],10,-1120210379),o=y(o,i,n,r,e[u+2],15,718787259),r=y(r,o,i,n,e[u+9],21,-343485551),n=w(n,a),r=w(r,f),o=w(o,s),i=w(i,c)}return Array(n,r,o,i)}function d(e,t,n,r,o,i){return w(b(w(w(t,e),w(r,i)),o),n)}function h(e,t,n,r,o,i,u){return d(t&n|~t&r,e,t,o,i,u)}function p(e,t,n,r,o,i,u){return d(t&r|n&~r,e,t,o,i,u)}function g(e,t,n,r,o,i,u){return d(t^n^r,e,t,o,i,u)}function y(e,t,n,r,o,i,u){return d(n^(t|~r),e,t,o,i,u)}function w(e,t){var n=(65535&e)+(65535&t),r=(e>>16)+(t>>16)+(n>>16);return r<<16|65535&n}function b(e,t){return e<<t|e>>>32-t}var v=e(\"./helpers\");t.exports=function(e){return v.hash(e,l,16)}}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js\",\"/node_modules/gulp-browserify/node_modules/crypto-browserify\")},{\"./helpers\":4,buffer:3,lYpoI2:10}],7:[function(e,t,n){(function(e,n,r,o,i,u,a,f,s){!function(){var e,n,r=this;e=function(e){for(var t,t,n=new Array(e),r=0;r<e;r++)0==(3&r)&&(t=4294967296*Math.random()),n[r]=t>>>((3&r)<<3)&255;return n},r.crypto&&crypto.getRandomValues&&(n=function(e){var t=new Uint8Array(e);return crypto.getRandomValues(t),t}),t.exports=n||e}()}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js\",\"/node_modules/gulp-browserify/node_modules/crypto-browserify\")},{buffer:3,lYpoI2:10}],8:[function(e,t,n){(function(n,r,o,i,u,a,f,s,c){function l(e,t){e[t>>5]|=128<<24-t%32,e[(t+64>>9<<4)+15]=t;for(var n=Array(80),r=1732584193,o=-271733879,i=-1732584194,u=271733878,a=-1009589776,f=0;f<e.length;f+=16){for(var s=r,c=o,l=i,y=u,w=a,b=0;b<80;b++){b<16?n[b]=e[f+b]:n[b]=g(n[b-3]^n[b-8]^n[b-14]^n[b-16],1);var v=p(p(g(r,5),d(b,o,i,u)),p(p(a,n[b]),h(b)));a=u,u=i,i=g(o,30),o=r,r=v}r=p(r,s),o=p(o,c),i=p(i,l),u=p(u,y),a=p(a,w)}return Array(r,o,i,u,a)}function d(e,t,n,r){return e<20?t&n|~t&r:e<40?t^n^r:e<60?t&n|t&r|n&r:t^n^r}function h(e){return e<20?1518500249:e<40?1859775393:e<60?-1894007588:-899497514}function p(e,t){var n=(65535&e)+(65535&t),r=(e>>16)+(t>>16)+(n>>16);return r<<16|65535&n}function g(e,t){return e<<t|e>>>32-t}var y=e(\"./helpers\");t.exports=function(e){return y.hash(e,l,20,!0)}}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js\",\"/node_modules/gulp-browserify/node_modules/crypto-browserify\")},{\"./helpers\":4,buffer:3,lYpoI2:10}],9:[function(e,t,n){(function(n,r,o,i,u,a,f,s,c){var l=e(\"./helpers\"),d=function(e,t){var n=(65535&e)+(65535&t),r=(e>>16)+(t>>16)+(n>>16);return r<<16|65535&n},h=function(e,t){return e>>>t|e<<32-t},p=function(e,t){return e>>>t},g=function(e,t,n){return e&t^~e&n},y=function(e,t,n){return e&t^e&n^t&n},w=function(e){return h(e,2)^h(e,13)^h(e,22);\n},b=function(e){return h(e,6)^h(e,11)^h(e,25)},v=function(e){return h(e,7)^h(e,18)^p(e,3)},m=function(e){return h(e,17)^h(e,19)^p(e,10)},_=function(e,t){var n,r,o,i,u,a,f,s,c,l,h,p,_=new Array(1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298),E=new Array(1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225),I=new Array(64);e[t>>5]|=128<<24-t%32,e[(t+64>>9<<4)+15]=t;for(var c=0;c<e.length;c+=16){n=E[0],r=E[1],o=E[2],i=E[3],u=E[4],a=E[5],f=E[6],s=E[7];for(var l=0;l<64;l++)l<16?I[l]=e[l+c]:I[l]=d(d(d(m(I[l-2]),I[l-7]),v(I[l-15])),I[l-16]),h=d(d(d(d(s,b(u)),g(u,a,f)),_[l]),I[l]),p=d(w(n),y(n,r,o)),s=f,f=a,a=u,u=d(i,h),i=o,o=r,r=n,n=d(h,p);E[0]=d(n,E[0]),E[1]=d(r,E[1]),E[2]=d(o,E[2]),E[3]=d(i,E[3]),E[4]=d(u,E[4]),E[5]=d(a,E[5]),E[6]=d(f,E[6]),E[7]=d(s,E[7])}return E};t.exports=function(e){return l.hash(e,_,32,!0)}}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js\",\"/node_modules/gulp-browserify/node_modules/crypto-browserify\")},{\"./helpers\":4,buffer:3,lYpoI2:10}],10:[function(e,t,n){(function(e,n,r,o,i,u,a,f,s){function c(){}var e=t.exports={};e.nextTick=function(){var e=\"undefined\"!=typeof window&&window.setImmediate,t=\"undefined\"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};if(t){var n=[];return window.addEventListener(\"message\",function(e){var t=e.source;if((t===window||null===t)&&\"process-tick\"===e.data&&(e.stopPropagation(),n.length>0)){var r=n.shift();r()}},!0),function(e){n.push(e),window.postMessage(\"process-tick\",\"*\")}}return function(e){setTimeout(e,0)}}(),e.title=\"browser\",e.browser=!0,e.env={},e.argv=[],e.on=c,e.addListener=c,e.once=c,e.off=c,e.removeListener=c,e.removeAllListeners=c,e.emit=c,e.binding=function(e){throw new Error(\"process.binding is not supported\")},e.cwd=function(){return\"/\"},e.chdir=function(e){throw new Error(\"process.chdir is not supported\")}}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/gulp-browserify/node_modules/process/browser.js\",\"/node_modules/gulp-browserify/node_modules/process\")},{buffer:3,lYpoI2:10}],11:[function(e,t,n){(function(e,t,r,o,i,u,a,f,s){n.read=function(e,t,n,r,o){var i,u,a=8*o-r-1,f=(1<<a)-1,s=f>>1,c=-7,l=n?o-1:0,d=n?-1:1,h=e[t+l];for(l+=d,i=h&(1<<-c)-1,h>>=-c,c+=a;c>0;i=256*i+e[t+l],l+=d,c-=8);for(u=i&(1<<-c)-1,i>>=-c,c+=r;c>0;u=256*u+e[t+l],l+=d,c-=8);if(0===i)i=1-s;else{if(i===f)return u?NaN:(h?-1:1)*(1/0);u+=Math.pow(2,r),i-=s}return(h?-1:1)*u*Math.pow(2,i-r)},n.write=function(e,t,n,r,o,i){var u,a,f,s=8*i-o-1,c=(1<<s)-1,l=c>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,p=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,u=c):(u=Math.floor(Math.log(t)/Math.LN2),t*(f=Math.pow(2,-u))<1&&(u--,f*=2),t+=u+l>=1?d/f:d*Math.pow(2,1-l),t*f>=2&&(u++,f/=2),u+l>=c?(a=0,u=c):u+l>=1?(a=(t*f-1)*Math.pow(2,o),u+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,o),u=0));o>=8;e[n+h]=255&a,h+=p,a/=256,o-=8);for(u=u<<o|a,s+=o;s>0;e[n+h]=255&u,h+=p,u/=256,s-=8);e[n+h-p]|=128*g}}).call(this,e(\"lYpoI2\"),\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{},e(\"buffer\").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],\"/node_modules/ieee754/index.js\",\"/node_modules/ieee754\")},{buffer:3,lYpoI2:10}]},{},[1])(1)});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = void 0;var _AnimateNode2 = _interopRequireDefault(__webpack_require__(1));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _typeof(obj) {if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}var\n\nAnimateNodeReference = /*#__PURE__*/function (_AnimateNode) {_inherits(AnimateNodeReference, _AnimateNode);\n  function AnimateNodeReference(id, nodeId, targetCache) {var _this;_classCallCheck(this, AnimateNodeReference);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimateNodeReference).call(this, id, 'reference', undefined, {\n      nodeId: nodeId }));\n\n\n    _this.targetCache = targetCache;return _this;\n  }_createClass(AnimateNodeReference, [{ key: \"nodeId\", get: function get()\n\n    {\n      return this.data.nodeId;\n    }, set: function set(\n\n    nodeId) {\n      this.data.nodeId = nodeId;\n    } }, { key: \"node\", get: function get()\n\n    {\n      return this.targetCache.parsed[this.nodeId];\n    } }]);return AnimateNodeReference;}(_AnimateNode2[\"default\"]);exports[\"default\"] = AnimateNodeReference;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL3BhcnNlL0FuaW1hdGVOb2RlUmVmZXJlbmNlLmpzPzhlYWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWEsOENBQThDLGNBQWMsRUFBRSw0QkFBNEIsMkNBQTJDLG1CQUFPLENBQUMsQ0FBZSxHQUFHLHNDQUFzQyxzQ0FBc0MsbUJBQW1CLHVCQUF1QiwwRUFBMEUsaUNBQWlDLHFCQUFxQixPQUFPLGlDQUFpQyxnSUFBZ0kscUJBQXFCLGlEQUFpRCx5Q0FBeUMsMkRBQTJELDJDQUEyQyxlQUFlLGtCQUFrQixPQUFPLDBCQUEwQix1REFBdUQsK0JBQStCLHNEQUFzRCw0REFBNEQsNkRBQTZELHFFQUFxRSw2REFBNkQsb0JBQW9CLGlEQUFpRCx5RUFBeUUsYUFBYSxxQ0FBcUMsdUNBQXVDLHNCQUFzQix1RkFBdUYsYUFBYSw2QkFBNkIsK0ZBQStGLGlEQUFpRCwyQkFBMkIsMENBQTBDLDhEQUE4RCwyRUFBMkUsd0VBQXdFLGVBQWUsc0RBQXNELEVBQUUsRUFBRSx1REFBdUQsZ0NBQWdDLDJFQUEyRSxnQkFBZ0IsV0FBVyw4QkFBOEI7O0FBRWh6RSw2REFBNkQ7QUFDN0QsMERBQTBELFVBQVU7QUFDcEU7QUFDQSxzQkFBc0I7OztBQUd0QixvQ0FBb0M7QUFDcEMsR0FBRyxxQ0FBcUM7O0FBRXhDO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLLEVBQUUsR0FBRzs7QUFFVjtBQUNBO0FBQ0EsS0FBSyxFQUFFLEdBQUcsNkJBQTZCLDJCQUEyQiIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDt2YXIgX0FuaW1hdGVOb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQW5pbWF0ZU5vZGVcIikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7cmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9O31mdW5jdGlvbiBfdHlwZW9mKG9iaikge2lmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge190eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge3JldHVybiB0eXBlb2Ygb2JqO307fSBlbHNlIHtfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtyZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajt9O31yZXR1cm4gX3R5cGVvZihvYmopO31mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7aWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO319ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge2ZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHt2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7aWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7fX1mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7aWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7aWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO3JldHVybiBDb25zdHJ1Y3Rvcjt9ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge2lmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7cmV0dXJuIGNhbGw7fXJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO31mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtpZiAoc2VsZiA9PT0gdm9pZCAwKSB7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gc2VsZjt9ZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge3JldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7fTtyZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO31zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7aWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7fWZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7X3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7by5fX3Byb3RvX18gPSBwO3JldHVybiBvO307cmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTt9dmFyXG5cbkFuaW1hdGVOb2RlUmVmZXJlbmNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0ZU5vZGUpIHtfaW5oZXJpdHMoQW5pbWF0ZU5vZGVSZWZlcmVuY2UsIF9BbmltYXRlTm9kZSk7XG4gIGZ1bmN0aW9uIEFuaW1hdGVOb2RlUmVmZXJlbmNlKGlkLCBub2RlSWQsIHRhcmdldENhY2hlKSB7dmFyIF90aGlzO19jbGFzc0NhbGxDaGVjayh0aGlzLCBBbmltYXRlTm9kZVJlZmVyZW5jZSk7XG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQW5pbWF0ZU5vZGVSZWZlcmVuY2UpLmNhbGwodGhpcywgaWQsICdyZWZlcmVuY2UnLCB1bmRlZmluZWQsIHtcbiAgICAgIG5vZGVJZDogbm9kZUlkIH0pKTtcblxuXG4gICAgX3RoaXMudGFyZ2V0Q2FjaGUgPSB0YXJnZXRDYWNoZTtyZXR1cm4gX3RoaXM7XG4gIH1fY3JlYXRlQ2xhc3MoQW5pbWF0ZU5vZGVSZWZlcmVuY2UsIFt7IGtleTogXCJub2RlSWRcIiwgZ2V0OiBmdW5jdGlvbiBnZXQoKVxuXG4gICAge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YS5ub2RlSWQ7XG4gICAgfSwgc2V0OiBmdW5jdGlvbiBzZXQoXG5cbiAgICBub2RlSWQpIHtcbiAgICAgIHRoaXMuZGF0YS5ub2RlSWQgPSBub2RlSWQ7XG4gICAgfSB9LCB7IGtleTogXCJub2RlXCIsIGdldDogZnVuY3Rpb24gZ2V0KClcblxuICAgIHtcbiAgICAgIHJldHVybiB0aGlzLnRhcmdldENhY2hlLnBhcnNlZFt0aGlzLm5vZGVJZF07XG4gICAgfSB9XSk7cmV0dXJuIEFuaW1hdGVOb2RlUmVmZXJlbmNlO30oX0FuaW1hdGVOb2RlMltcImRlZmF1bHRcIl0pO2V4cG9ydHNbXCJkZWZhdWx0XCJdID0gQW5pbWF0ZU5vZGVSZWZlcmVuY2U7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYWRvYmUtYW5pbWF0ZS1wYXJzZXIvbGliL3BhcnNlL0FuaW1hdGVOb2RlUmVmZXJlbmNlLmpzXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports[\"default\"] = _default;var _AnimateNode = _interopRequireDefault(__webpack_require__(1));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { \"default\": obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}\n\nvar blockNameCounter = {};\n\n// TODO we need to figure out how to generate unqiue block names for all variables\n// If an object is used twice in the same block it will have duplicate blocknames, which will not work\n// so we have to generate them separately and make sure they are mapped properly\n//\n// IDEA: Count usages of the ID and append _0, _1, _2, etc to them\nfunction getBlockNameVar(targetId, blockNameMappings) {\n  blockNameCounter[targetId] = blockNameCounter[targetId] || 0;\n\n  var blockName = \"bn_\".concat(targetId, \"_\").concat(blockNameCounter[targetId]++);\n  blockNameMappings[targetId] = blockName;\n\n  return blockName;\n}\n\nfunction translateBounds(boundsData) {\n  if (Array.isArray(boundsData)) {\n    return boundsData.map(function (bounds) {return translateBounds(bounds);});\n  }\n\n  if (boundsData instanceof _AnimateNode[\"default\"]) {\n    var resolvedBoundsData = boundsData.node;\n\n    return resolvedBoundsData.data;\n  }\n\n  return boundsData;\n}\n\nfunction dereferenceNativeObject(nativeObject) {var movieClipRefs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];var shapeRefs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var blockNameMappings = arguments.length > 3 ? arguments[3] : undefined;\n  var resolvedNativeObject = nativeObject.node;\n\n  var outputObject = Array.isArray(resolvedNativeObject.data.object) ? [] : {};\n\n  for (var _i = 0, _Object$entries = Object.entries(resolvedNativeObject.data.object); _i < _Object$entries.length; _i++) {var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),key = _Object$entries$_i[0],value = _Object$entries$_i[1];\n    var dereferencedValue = value;\n\n    if (value instanceof _AnimateNode[\"default\"]) {\n      var resolvedValue = value.node;\n\n      // If this is an object we have a complex type that we need to unwind\n      if (resolvedValue.type === 'movie_clip') {\n        movieClipRefs.push({\n          bn: getBlockNameVar(resolvedValue.id, blockNameMappings),\n          gn: resolvedValue.id,\n          a: resolvedValue.data.constructorArgs,\n          t: resolvedValue.data.transform,\n          off: resolvedValue.data.off === true });\n\n\n        // Replace with the ID, it will be properly handled when rebuilt\n        dereferencedValue = blockNameMappings[resolvedValue._cocoId]; // TODO can we pull this out in a better way\n      } else if (resolvedValue.type === 'shape') {\n        shapeRefs.push({\n          bn: getBlockNameVar(resolvedValue.id, blockNameMappings),\n          gn: resolvedValue.id });\n\n\n        // Replace with the ID, it will be properly handled when rebuilt\n        dereferencedValue = blockNameMappings[resolvedValue.id]; // TODO can we pull this out in a better way\n      } else if (value.type === 'native_object') {\n        dereferencedValue = dereferenceNativeObject(resolvedValue, movieClipRefs, shapeRefs, blockNameMappings);\n      } else {\n        throw new Error('Invalid target type');\n      }\n    }\n\n    outputObject[key] = dereferencedValue;\n  }\n\n  return outputObject;\n}\n\nfunction _default(schema) {\n  var finalShapes = {};var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n    for (var _iterator = schema.shapes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var shape = _step.value;\n      var resolvedShape = shape.node;\n\n      var translatedShape = _objectSpread({},\n      resolvedShape.data.graphics || {});\n\n\n      if (resolvedShape.data.transform) {\n        translatedShape.t = [\n        resolvedShape.data.transform.x,\n        resolvedShape.data.transform.y];\n\n      }\n\n      if (resolvedShape.data.bounds) {\n        translatedShape.bounds = translateBounds(resolvedShape.data.bounds);\n      }\n\n      if (resolvedShape.data.frameBounds) {\n        translatedShape.frameBounds = translateBounds(resolvedShape.data.frameBounds);\n      }\n\n      finalShapes[resolvedShape.id] = translatedShape;\n    }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {_iterator[\"return\"]();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n\n  var finalAnimations = {};var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {\n    for (var _iterator2 = schema.animations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var animation = _step2.value;\n      var resolvedAnimation = animation.node;\n\n      var shapes = [];\n      var animations = [];\n      var tweens = [];\n\n      var blockNameMappings = {};var _iteratorNormalCompletion3 = true;var _didIteratorError3 = false;var _iteratorError3 = undefined;try {\n\n        for (var _iterator3 = resolvedAnimation.data.tweens[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {var tween = _step3.value;\n          var finalTween = [];\n\n          var resolvedTween = tween.node;\n          var resolvedTarget = resolvedTween.data.target.node;\n\n          switch (resolvedTarget.type) {\n            case 'movie_clip':\n              animations.push({\n                bn: getBlockNameVar(resolvedTarget.id, blockNameMappings),\n                gn: resolvedTarget.id,\n                a: resolvedTarget.data.constructorArgs,\n                t: resolvedTarget.data.transform,\n                off: resolvedTarget.data.off === true });\n\n\n              finalTween.push({\n                n: 'get',\n                a: [blockNameMappings[resolvedTarget.id]] });\n\n\n              break;\n\n\n            case 'shape':\n              shapes.push({\n                bn: getBlockNameVar(resolvedTarget.id, blockNameMappings),\n                gn: resolvedTarget.id });\n\n\n              finalTween.push({\n                n: 'get',\n                a: [blockNameMappings[resolvedTarget.id]] });\n\n\n              break;\n\n            case 'native_object':\n              finalTween.push({\n                n: 'get',\n                a: [resolvedTarget.data.object] });\n\n\n              break;\n\n            default:\n              throw new Error('Invalid target type');}\n\n\n\n          var dereferencedTweenCalls = dereferenceNativeObject(\n          resolvedTween.data.tweenCalls, animations, shapes, blockNameMappings);var _iteratorNormalCompletion4 = true;var _didIteratorError4 = false;var _iteratorError4 = undefined;try {\n\n\n            for (var _iterator4 = dereferencedTweenCalls[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {var methodCall = _step4.value;\n              finalTween.push({\n                n: methodCall.name,\n                a: methodCall.args });\n\n            }} catch (err) {_didIteratorError4 = true;_iteratorError4 = err;} finally {try {if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {_iterator4[\"return\"]();}} finally {if (_didIteratorError4) {throw _iteratorError4;}}}\n\n          tweens.push(finalTween);\n        }} catch (err) {_didIteratorError3 = true;_iteratorError3 = err;} finally {try {if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {_iterator3[\"return\"]();}} finally {if (_didIteratorError3) {throw _iteratorError3;}}}\n\n      var translatedAnimation = {\n        animations: animations,\n        shapes: shapes,\n        tweens: tweens,\n        containers: [],\n        graphics: [],\n        bounds: resolvedAnimation.bounds,\n        frameBounds: resolvedAnimation.frameBounds };\n\n\n      if (resolvedAnimation.data.bounds) {\n        translatedAnimation.bounds = translateBounds(resolvedAnimation.data.bounds);\n      }\n\n      if (resolvedAnimation.data.frameBounds) {\n        translatedAnimation.frameBounds = translateBounds(resolvedAnimation.data.frameBounds);\n      }\n\n      finalAnimations[resolvedAnimation.id] = translatedAnimation;\n    }} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {_iterator2[\"return\"]();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}\n\n  var result = {\n    shapes: finalShapes,\n    animations: finalAnimations\n\n\n    // TODO fix code to not insert undefineds\n    // Remove undefineds\n  };return JSON.parse(JSON.stringify(result));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ })
/******/ ]);