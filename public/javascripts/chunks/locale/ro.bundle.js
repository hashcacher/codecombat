/*! hash:345dfe6c0e434e9c7378, chunkhash:8ca21d239b3d597b75a7, name:locale/ro, filebase:ro.bundle.js, query:, file:javascripts/chunks/locale/ro.bundle.js */
webpackJsonp([31],{

/***/ 1077:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"limba română\",\n  englishDescription: \"Romanian\",\n  translation: {\n    new_home: {\n      built_for_teachers_title: \"Un joc de programare dezvoltat cu gandul la profesori.\",\n      built_for_teachers_subtitle1: \"Informatică\",\n      built_for_teachers_subblurb1: \"Începând cu cursul nostru gratuit de Introducere în Informatică, studenții însușesc concepte de baza în programare, cum ar fi bucle while/for, funcții și algoritmi.\",\n      built_for_teachers_subtitle2: \"Dezvoltare de jocuri\",\n      built_for_teachers_subtitle3: \"Dezvoltare Web\",\n      century_skills_subtitle1: \"Gândire critică\",\n      century_skills_subtitle2: \"Creativitate\",\n      featured_partners_blurb4: \"Partener oficial Code.org\",\n      for_leaders_subtitle1: \"Implementare ușoară\",\n      slogan: \"Cel mai interesant mod de a învăța codul real.\",\n      im_a_teacher: \"Sunt Profesor\",\n      im_a_student: \"Sunt Student\",\n      learn_more: \"Aflați mai multe\",\n      from_the_first_level: \"de la primul nivel\",\n      course_guides: \"și ghiduri de curs\",\n      accessible_to: \"Accesibil la\",\n      everyone: \"toţi\",\n      why_games: \"De ce este importantă învățarea prin jocuri?\",\n      motivating: \"motivând\",\n      gaming_is_good: \"Studiile sugerează că jocurile sunt bune pentru creierul copiilor. (e adevarat!)\",\n      have_an_account: \"Aveți un cont?\",\n      logged_in_as: \"În prezent sunteți conectat(ă) ca\",\n      ffa: \"Gratuit pentru toți elevii\"\n    },\n    nav: {\n      play: \"Nivele\",\n      community: \"Communitate\",\n      courses: \"Cursuri\",\n      blog: \"Blog\",\n      forum: \"Forum\",\n      account: \"Cont\",\n      my_account: \"Contul meu\",\n      profile: \"Profil\",\n      home: \"Acasă\",\n      contribute: \"Contribuie\",\n      legal: \"Confidențialitate și termeni\",\n      about: \"Despre\",\n      contact: \"Contact\",\n      twitter_follow: \"Urmărește\",\n      my_courses: \"Cursurile mele\",\n      facebook: \"Facebook\",\n      twitter: \"Twitter\"\n    },\n    modal: {\n      close: \"Inchide\",\n      okay: \"Okay\"\n    },\n    not_found: {\n      page_not_found: \"Pagina nu a fost gasită\"\n    },\n    diplomat_suggestion: {\n      title: \"Ajută-ne să traducem CodeCombat!\",\n      sub_heading: \"Avem nevoie de abilitățile tale lingvistice.\",\n      pitch_body: \"CodeCombat este dezvoltat in limba engleza , dar deja avem jucatări din toate colțurile lumii. Mulți dintre ei vor să joace in română și nu vorbesc engleză. Dacă poți vorbi ambele te rugăm să te gândești dacă ai dori să devi un Diplomat și să ne ajuți sa traducem atât jocul cât și site-ul.\",\n      missing_translations: \"Until we can translate everything into Romanian, you'll see English when Romanian isn't available.\",\n      learn_more: \"Află mai multe despre cum să fi un Diplomat\",\n      subscribe_as_diplomat: \"Înscrie-te ca Diplomat\"\n    },\n    play: {\n      play_as: \"Alege-ți echipa\",\n      spectate: \"Spectator\",\n      players: \"jucători\",\n      hours_played: \"ore jucate\",\n      items: \"Iteme\",\n      unlock: \"Deblochează\",\n      confirm: \"Confirmă\",\n      owned: \"Deținute\",\n      locked: \"Blocate\",\n      available: \"Valabile\",\n      skills_granted: \"Skill-uri acordate\",\n      heroes: \"Eroi\",\n      achievements: \"Realizări\",\n      settings: \"Setări\",\n      poll: \"Sondaj\",\n      next: \"Următorul\",\n      change_hero: \"Schimbă eroul\",\n      buy_gems: \"Cumpără Pietre Prețioase\",\n      anonymous: \"Jucător Anonim\",\n      level_difficulty: \"Dificultate: \",\n      awaiting_levels_adventurer_prefix: \"Lansăm niveluri noi în fiecare săptămână.\",\n      awaiting_levels_adventurer: \"Înscrie-te ca un aventurier \",\n      awaiting_levels_adventurer_suffix: \"pentru a fi primul care joacă nivele noi.\",\n      adjust_volume: \"Reglează volumul\",\n      campaign_multiplayer: \"Arene Multiplayer\",\n      campaign_multiplayer_description: \"... în care te lupți cap-la-cap contra alți jucători.\"\n    },\n    code: {\n      \"+\": \"plus\",\n      \"-\": \"minus\",\n      \"+=\": \"adaugă și atribuie\",\n      \"-=\": \"scade și atribuie\",\n      True: \"Adevărat\",\n      \"true\": \"adevărat\",\n      False: \"Fals\",\n      \"false\": \"fals\",\n      undefined: \"nedefinit\"\n    },\n    share_progress_modal: {\n      blurb: \"Faci progrese mari! Spune-le părinților cât de mult ai învățat cu CodeCombat.\",\n      email_invalid: \"Adresă Email invalidă.\",\n      form_blurb: \"Introduceți adresa e-mail al unui părinte mai jos și le vom arăta!\",\n      form_label: \"Adresă Email\",\n      placeholder: \"adresă email\",\n      title: \"Excelentă treabă, Ucenicule\"\n    },\n    login: {\n      sign_up: \"Crează cont\",\n      email_or_username: \"Email sau nume de utilizator\",\n      log_in: \"Log In\",\n      logging_in: \"Se conectează\",\n      log_out: \"Log Out\",\n      forgot_password: \"Ai uitat parola?\",\n      finishing: \"Terminare\",\n      sign_in_with_facebook: \"Conectați-vă cu Facebook\",\n      sign_in_with_gplus: \"Conectați-vă cu G+\",\n      signup_switch: \"Doriți să creați un cont?\"\n    },\n    signup: {\n      complete_subscription: \"Completează abonamentul\",\n      create_student_header: \"Creează cont student\",\n      create_teacher_header: \"Creează cont profesor\",\n      create_individual_header: \"Creează cont profesor un cont individual\",\n      email_announcements: \"Primește notificări prin email\",\n      sign_in_to_continue: \"Conecteaza-te sau creează un cont pentru a continua\",\n      creating: \"Se creează contul...\",\n      sign_up: \"Înscrie-te\",\n      log_in: \"loghează-te cu parola\",\n      required: \"Trebuie să te înregistrezi înaite să parcurgi acest drum.\",\n      login_switch: \"Ai deja un cont?\",\n      optional: \"opțional\",\n      student_type_4: \"Alege-ți eroul!\",\n      enter_parent_email: \"Introduceți adresa de e-mail a părintelui dvs .:\",\n      write_this_down: \"Notează asta:\",\n      start_playing: \"Începe jocul!\",\n      eu_confirmation_place_of_processing: \"Află mai multe despre riscuri posibile.\",\n      eu_confirmation_student: \"Dacă nu ești sigur, întreabă-ți profesorul.\"\n    },\n    recover: {\n      recover_account_title: \"Recuperează Cont\",\n      send_password: \"Trimite parolă de recuperare\",\n      recovery_sent: \"Email de recuperare trimis.\"\n    },\n    items: {\n      primary: \"Primar\",\n      secondary: \"Secundar\",\n      armor: \"Armură\",\n      accessories: \"Accesorii\",\n      misc: \"Diverse\",\n      books: \"Cărti\"\n    },\n    common: {\n      back: \"Inapoi\",\n      coming_soon: \"In curand!\",\n      \"continue\": \"Continuă\",\n      next: \"Urmator\",\n      default_code: \"Cod implicit\",\n      loading: \"Se încarcă...\",\n      overview: \"Prezentare generală\",\n      processing: \"Procesare...\",\n      solution: \"Soluţie\",\n      table_of_contents: \"Cuprins\",\n      intro: \"Introducere\",\n      saving: \"Se salvează...\",\n      sending: \"Se trimite...\",\n      send: \"Trimite\",\n      sent: \"Trimis\",\n      cancel: \"Anulează\",\n      save: \"Salvează\",\n      publish: \"Publică\",\n      create: \"Creează\",\n      fork: \"Fork\",\n      play: \"Joacă\",\n      retry: \"Reîncearca\",\n      actions: \"Acţiuni\",\n      info: \"Info\",\n      help: \"Ajutor\",\n      watch: \"Watch\",\n      unwatch: \"Unwatch\",\n      submit_patch: \"Înainteaza Patch\",\n      submit_changes: \"Trimite modificări\",\n      save_changes: \"Salveaza modificări\",\n      required_field: \"obligatoriu\"\n    },\n    general: {\n      and: \"și\",\n      name: \"Nume\",\n      date: \"Dată\",\n      body: \"Corp\",\n      version: \"Versiune\",\n      pending: \"În așteptare\",\n      accepted: \"Acceptat\",\n      rejected: \"Respins\",\n      withdrawn: \"Retrage\",\n      accept: \"Accepta\",\n      accept_and_save: \"Acceptă și Salvează\",\n      reject: \"Respinge\",\n      withdraw: \"Retrage\",\n      submitter: \"Expeditor\",\n      submitted: \"Expediat\",\n      commit_msg: \"Înregistrează Mesajul\",\n      version_history: \"Istoricul versiunilor\",\n      version_history_for: \"Istoricul versiunilor pentru: \",\n      select_changes: \"Selectați două schimbări de mai jos pentru a vedea diferenţa.\",\n      undo_prefix: \"Undo\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Redo\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Joaca previzualizarea nivelului actual\",\n      result: \"Rezultat\",\n      results: \"Rezultate\",\n      description: \"Descriere\",\n      or: \"sau\",\n      subject: \"Subiect\",\n      email: \"Email\",\n      password: \"Parola\",\n      confirm_password: \"Confirmă parola\",\n      message: \"Mesaj\",\n      code: \"Cod\",\n      ladder: \"Clasament\",\n      when: \"când\",\n      opponent: \"oponent\",\n      rank: \"Rang\",\n      score: \"Scor\",\n      win: \"Victorie\",\n      loss: \"Înfrângere\",\n      tie: \"Remiză\",\n      easy: \"Ușor\",\n      medium: \"Mediu\",\n      hard: \"Greu\",\n      player: \"Jucător\",\n      player_level: \"Nivel\",\n      warrior: \"Războinic\",\n      ranger: \"Arcaș\",\n      wizard: \"Vrăjitor\",\n      first_name: \"Prenume\",\n      last_name: \"Nume\",\n      last_initial: \"Inițiala nume\",\n      username: \"Nume de utilizator\",\n      contact_us: \"Contacteaza-ne\",\n      close_window: \"Închide fereastra\",\n      learn_more: \"Află mai mult\",\n      more: \"Mai mult\",\n      fewer: \"Mai putin\",\n      \"with\": \"cu\"\n    },\n    units: {\n      second: \"secundă\",\n      seconds: \"secunde\",\n      minute: \"minut\",\n      minutes: \"minute\",\n      hour: \"oră\",\n      hours: \"ore\",\n      day: \"zi\",\n      days: \"zile\",\n      week: \"săptămână\",\n      weeks: \"săptămâni\",\n      month: \"lună\",\n      months: \"luni\",\n      year: \"an\",\n      years: \"ani\"\n    },\n    play_level: {\n      done: \"Gata\",\n      languages: \"Limbi\",\n      programming_language: \"Limbaj de programare\",\n      home: \"Acasă\",\n      level: \"Nivel\",\n      skip: \"Sari peste\",\n      game_menu: \"Meniul Jocului\",\n      restart: \"Restart\",\n      goals: \"Obiective\",\n      goal: \"Obiectiv\",\n      running: \"Rulează...\",\n      success: \"Success!\",\n      incomplete: \"Incomplet\",\n      timed_out: \"Ai rămas fără timp\",\n      failing: \"Eşec\",\n      reload: \"Reîncarca\",\n      reload_title: \"Reîncarcă tot codul?\",\n      reload_really: \"Ești sigur că vrei să reîncarci nivelul de la început?\",\n      reload_confirm: \"Reîncarca Tot\",\n      victory: \"Victorie\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Terminat\",\n      victory_sign_up: \"Înscrie-te pentru a salva progresul\",\n      victory_sign_up_poke: \"Vrei să-ți salvezi codul? Crează un cont gratis!\",\n      victory_rate_the_level: \"Apreciază nivelul: \",\n      victory_return_to_ladder: \"Înapoi la jocurile de clasament\",\n      victory_saving_progress: \"Salvează Progresul\",\n      victory_go_home: \"Acasă\",\n      victory_review: \"Spune-ne mai multe!\",\n      victory_hour_of_code_done: \"Ai terminat?\",\n      victory_hour_of_code_done_yes: \"Da, am terminat Hour of Code™!\",\n      victory_experience_gained: \"Ai câștigat XP\",\n      victory_gems_gained: \"Ai câștigat Pietre Prețioase\",\n      victory_new_item: \"Item nou\",\n      victory_viking_code_school: \"Wow, ăla a fost un nivel greu! Daca nu ești deja un dezvoltator de software, ar trebui să fi. Tocmai ai fost selectat pentru acceptare in Viking Code School, unde poți sa iți dezvolți abilitățile la nivelul următor și să devi un dezvoltator web profesionist în 14 săptămâni.\",\n      victory_become_a_viking: \"Devino Viking\",\n      tome_cast_button_run: \"Ruleaza\",\n      tome_cast_button_running: \"In Derulare\",\n      tome_cast_button_ran: \"A rulat\",\n      tome_submit_button: \"Trimite\",\n      tome_reload_method: \"Reîncarcă cod original, pentru această metodă\",\n      tome_available_spells: \"Vrăji disponibile\",\n      tome_your_skills: \"Skillurile tale\",\n      code_saved: \"Cod Salvat\",\n      skip_tutorial: \"Sari peste (esc)\",\n      keyboard_shortcuts: \"Scurtături Keyboard\",\n      loading_start: \"Începe Level\",\n      problem_alert_title: \"Repară codul\",\n      time_current: \"Acum:\",\n      time_total: \"Max:\",\n      time_goto: \"Dute la:\",\n      non_user_code_problem_title: \"Imposibil de încărcat Nivel\",\n      infinite_loop_title: \"Buclă infinită detectată\",\n      infinite_loop_description: \"Codul initial pentru a construi lumea nu a terminat de rulat. Este, probabil, foarte lent sau are o buclă infinită. Sau ar putea fi un bug. Puteți încerca acest cod nou sau resetați codul la starea implicită. Dacă nu-l repara, vă rugăm să ne anunțați.\",\n      check_dev_console: \"Puteți deschide, de asemenea, consola de dezvoltator pentru a vedea ce ar putea merge gresit.\",\n      check_dev_console_link: \"(instrucțiuni)\",\n      infinite_loop_try_again: \"Încearcă din nou\",\n      infinite_loop_reset_level: \"Resetează Nivelul\",\n      infinite_loop_comment_out: \"Comentează Codul\",\n      tip_toggle_play: \"Pune sau scoate pauza cu Ctrl+P.\",\n      tip_scrub_shortcut: \"Înapoi și derulare rapidă cu Ctrl+[ and Ctrl+].\",\n      tip_guide_exists: \"Apasă pe ghidul din partea de sus a pagini pentru informații utile.\",\n      tip_open_source: \"CodeCombat este 100% open source!\",\n      tip_beta_launch: \"CodeCombat a fost lansat beta in Octombrie 2013.\",\n      tip_think_solution: \"Gândește-te la soluție, nu la problemă.\",\n      tip_theory_practice: \"Teoretic nu este nici o diferență înte teorie și practică. Dar practic este. - Yogi Berra\",\n      tip_error_free: \"Există doar două metode de a scrie un program fără erori; numai a treia funcționează. - Alan Perlis\",\n      tip_debugging_program: \"Dacă a face debuggin este procesul de a scoate bug-uri, atunci a programa este procesul de a introduce bug-uri. - Edsger W. Dijkstra\",\n      tip_forums: \"Intră pe forum și spune-ți părerea!\",\n      tip_baby_coders: \"În vitor până și bebelușii vor fi Archmage.\",\n      tip_morale_improves: \"Se va încărca până până când va crește moralul.\",\n      tip_all_species: \"Noi credem în șanse egale de a învăța programare pentru toate speciile.\",\n      tip_reticulating: \"Reticulăm coloane vertebrale.\",\n      tip_harry: \"Ha un Wizard, \",\n      tip_great_responsibility: \"Cu o mare abilitate mare de programare vine o mare responsabilitate de debugging.\",\n      tip_munchkin: \"Daca nu iți mananci legumele, un munchkin va veni după tine cand dormi.\",\n      tip_binary: \"Sunt doar 10 tipuri de oameni in lume: cei ce îteleg sistemul binar, si ceilalți.\",\n      tip_commitment_yoda: \"Un programator trebuie să aiba cel mai profund angajament, si mintea cea mai serioasă. ~Yoda\",\n      tip_no_try: \"Fă. Sau nu mai face. Nu exista voi încerca. ~Yoda\",\n      tip_patience: \"Să ai rabdare trebuie, tinere Padawan. ~Yoda\",\n      tip_documented_bug: \"Un bug documentat nu e chiar un bug; este o caracteristica.\",\n      tip_impossible: \"Mereu pare imposibil până e gata. ~Nelson Mandela\",\n      tip_talk_is_cheap: \"Vorbele sunt ieftine. Arată-mi codul. ~Linus Torvalds\",\n      tip_first_language: \"Cel mai dezastruos lucru pe care poți să îl înveți este primul limbaj de programare. ~Alan Kay\",\n      tip_hardware_problem: \"Î: De cați programatori ai nevoie ca să schimbi un bec? R: Niciunul, e o problemă hardware.\",\n      tip_hofstadters_law: \"Legea lui Hofstadter: Mereu dureaza mai mult decât te aștepți, chiar dacă iei în considerare Legea lui Hofstadter.\",\n      tip_premature_optimization: \"Optimizarea prematură este rădăcina tuturor răutăților. ~Donald Knuth\",\n      tip_brute_force: \"Atunci cănd ești în dubii, folosește brute force. ~Ken Thompson\",\n      tip_extrapolation: \"Există două feluri de oameni: cei care pot extrapola din date incomplete...\",\n      tip_superpower: \"Programarea este cel mai apropiat lucru de o superputere.\",\n      tip_control_destiny: \"In open source, ai dreptul de a-ți controla propiul destin. ~Linus Torvalds\",\n      tip_no_code: \"Nici-un cod nu e mai rapid decat niciun cod.\",\n      tip_code_never_lies: \"Codul nu minte niciodată, commenturile mai mint. ~Ron Jeffries\",\n      tip_reusable_software: \"Înainte ca un software să fie reutilizabil, trebuie să fie mai întâi utilizabil.\",\n      tip_optimization_operator: \"Fiecare limbaj are un operator de optimizare. La majoritatea acela este '//'\",\n      tip_lines_of_code: \"Măsurarea progresului în lini de cod este ca și măsurarea progresului de construcție a aeronavelor în greutate. ~Bill Gates\",\n      tip_source_code: \"Vreau să schimb lumea dar nu îmi dă nimeni codul sursă.\",\n      tip_javascript_java: \"Java e pentru JavaScript exact ce e o Mașina pentru o Carpetă. ~Chris Heilmann\",\n      tip_move_forward: \"Orice ai face, dăi înainte. ~Martin Luther King Jr.\",\n      tip_google: \"Ai o problemă care nu o poți rezolva? Folosește Google!\",\n      tip_adding_evil: \"Adaugăm un strop de răutate.\",\n      tip_hate_computers: \"Tocmai aia e problema celor ce urăsc calulatoarele, ei defapt urăsc programatorii nepricepuți. ~Larry Niven\",\n      tip_open_source_contribute: \"Poți ajuta la îmbunătățirea jocului CodeCombat!\",\n      tip_recurse: \"A itera este uman, recursiv este divin. ~L. Peter Deutsch\",\n      tip_free_your_mind: \"Trebuie sa lași totul, Neo. Frica, Îndoiala și necredința. Eliberează-ți mintea. ~Morpheus\",\n      tip_strong_opponents: \"Și cei mai puternici dintre oponenți întodeauna au o slăbiciune. ~Itachi Uchiha\"\n    },\n    play_game_dev_level: {\n      created_by: \"Creat de {{name}}\"\n    },\n    game_menu: {\n      inventory_tab: \"Inventar\",\n      save_load_tab: \"Salvează/Încarcă\",\n      options_tab: \"Opțiuni\",\n      guide_tab: \"Ghid\",\n      guide_video_tutorial: \"Tutorial Video\",\n      guide_tips: \"Sfaturi\",\n      multiplayer_tab: \"Multiplayer\",\n      auth_tab: \"Înscriete\",\n      inventory_caption: \"Echipeazăți Eroul\",\n      choose_hero_caption: \"Alege Eroul, limbajul\",\n      options_caption: \"Configurarea setărilor\",\n      guide_caption: \"Documentație si sfaturi\",\n      multiplayer_caption: \"Joaca cu prieteni!\",\n      auth_caption: \"Salvează progresul.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Vizualizează Tabelul de Clasificare\",\n      scores: \"Scoruri\",\n      top_players: \"Top Jucători\",\n      day: \"Astăzi\",\n      week: \"Săptămâna Aceasta\",\n      all: \"Tot Timpul\",\n      latest: \"Ultimul\",\n      time: \"Timp\",\n      damage_taken: \"Damage Primit\",\n      damage_dealt: \"Damage Oferit\",\n      difficulty: \"Dificultate\",\n      gold_collected: \"Aur Colectat\",\n      survival_time: \"Supravietuit\",\n      defeated: \"Inamici înfrânți\",\n      code_length: \"Linii de cod\",\n      score_display: \"__scoreType__: __score__\"\n    },\n    inventory: {\n      equipped_item: \"Echipat\",\n      required_purchase_title: \"Necesar\",\n      available_item: \"Valabil\",\n      restricted_title: \"Restricționat\",\n      should_equip: \"(dublu-click pentru echipare)\",\n      equipped: \"(echipat)\",\n      locked: \"(blocat)\",\n      restricted: \"(în acest nivel)\",\n      equip: \"Echipează\",\n      unequip: \"Dezechipează\"\n    },\n    buy_gems: {\n      few_gems: \"Căteva Pietre Prețioase\",\n      pile_gems: \"Un morman de Pietre Prețioase\",\n      chest_gems: \"Un cufăr de Pietre Prețioase\",\n      purchasing: \"Cumpărare...\",\n      declined: \"Cardul tău a fost refuzat.\",\n      retrying: \"Eroare de server, reîncerc.\",\n      prompt_title: \"Nu sunt destule Pietre Prețioase.\",\n      prompt_body: \"Vrei mai multe?\",\n      prompt_button: \"Intră în magazin.\",\n      recovered: \"Pietre Prețioase cumpărate anterior recuperate.Va rugăm să dați refresh la pagină.\",\n      price: \"x{{gems}} / mo\",\n      buy_premium: \"Cumpara Premium\"\n    },\n    subscribe_for_gems: {\n      prompt_title: \"Pietre prețioase insuficiente!\",\n      prompt_body: \"Abonează-te la Premium pentru a obține pietre prețioase și pentru a accesa chiar mai multe nivele!\"\n    },\n    earn_gems: {\n      prompt_title: \"Pietre prețioase insuficiente\",\n      prompt_body: \"Continuă să joci pentru a câștiga mai mult!\"\n    },\n    subscribe: {\n      best_deal: \"Cea mai bună afacere!\",\n      confirmation: \"Felicitări! Acum ai abonament CodeCombat Premium!\",\n      premium_already_subscribed: \"Esti deja abonat la Premium!\",\n      subscribe_modal_title: \"CodeCombat Premium\",\n      comparison_blurb: \"Îmbunătățește-ți abilitățile cu abonamentul CodeCombat\",\n      must_be_logged: \"Trebuie să te conectezi mai întâi. Te rugăm să creezi un cont sau să te conectezi din meniul de mai sus.\",\n      subscribe_title: \"Abonează-te\",\n      unsubscribe: \"Dezabonează-te\",\n      confirm_unsubscribe: \"Confirmă Dezabonarea\",\n      never_mind: \"Nu contează, eu tot te iubesc!\",\n      thank_you_months_prefix: \"Mulțumesc pentru sprijinul acordat în aceste\",\n      thank_you_months_suffix: \"luni.\",\n      thank_you: \"Mulțumim pentru susținerea jocului CodeCombat!\",\n      sorry_to_see_you_go: \"Ne pare rău că pleci! Te rugăm să ne spui ce am fi putut face mai bine.\",\n      unsubscribe_feedback_placeholder: \"O, ce am făcut?\",\n      stripe_description: \"Abonament Lunar\",\n      buy_now: \"Cumpără acum\",\n      subscription_required_to_play: \"Ai nevoie de abonament ca să joci acest nivel.\",\n      unlock_help_videos: \"Abonează-te pentru deblocarea tuturor tutorialelor video.\",\n      personal_sub: \"Abonament Personal\",\n      loading_info: \"Se încarcă informațile despre abonament...\",\n      managed_by: \"Gestionat de\",\n      will_be_cancelled: \"Va fi anulat pe\",\n      currently_free: \"Ai un abonament gratuit\",\n      currently_free_until: \"Ai un abonament gratuit până pe\",\n      free_subscription: \"Abonament gratuit\",\n      was_free_until: \"Ai avut un abonament gratuit până pe\",\n      managed_subs: \"Abonamente Gestionate\",\n      subscribing: \"Te abonăm...\",\n      current_recipients: \"Recipienți curenți\",\n      unsubscribing: \"Dezabonare...\",\n      subscribe_prepaid: \"Dă Click pe Abonare pentru a folosi un cod prepaid\",\n      using_prepaid: \"Foloseste codul prepaid pentru un abonament lunar\",\n      feature_level_access: \"Accesează peste 300 de nivele disponibile\",\n      feature_heroes: \"Deblochează eroi exclusivi și personaje\",\n      feature_learn: \"Învață să creezi jocuri și site-uri web\",\n      month_price: \"$__price__\",\n      first_month_price: \"Doar $__price__ pentru prima luna!\",\n      lifetime: \"Acces pe viață\",\n      lifetime_price: \"$__price__\",\n      year_subscription: \"Abonament anual\",\n      year_price: \"$__price__/an\",\n      support_part1: \"Ai nevoie de ajutor cu plata sau preferi PayPal? E-mail\",\n      support_part2: \"support@codecombat.com\"\n    },\n    choose_hero: {\n      choose_hero: \"Alege Eroul\",\n      programming_language: \"Limbaj de Programare\",\n      programming_language_description: \"Ce limbaj de programare vrei să folosești?\",\n      \"default\": \"Implicit\",\n      experimental: \"Experimental\",\n      python_blurb: \"Simplu dar puternic, Python este un limbaj de uz general extraordinar!\",\n      javascript_blurb: \"Limbajul web-ului.\",\n      coffeescript_blurb: \"JavaScript cu o syntaxă mai placută!\",\n      lua_blurb: \"Limbaj de scripting pentru jocuri.\",\n      status: \"Stare\",\n      weapons: \"Armament\",\n      weapons_warrior: \"Săbii - Distanță Scurtă, Fără Magie\",\n      weapons_ranger: \"Arbalete, Arme - Distanță Mare, Fără Magie\",\n      weapons_wizard: \"Baghete, Toiage, - Distanță Mare, Și Magie\",\n      attack: \"Attack\",\n      health: \"Viață\",\n      speed: \"Viteză\",\n      regeneration: \"Regenerare\",\n      range: \"Rază\",\n      blocks: \"Blochează\",\n      backstab: \"Înjunghiere\",\n      skills: \"Skilluri\",\n      attack_1: \"Oferă\",\n      attack_2: \"of listed\",\n      attack_3: \"Damage cu arma.\",\n      health_1: \"Primește\",\n      health_2: \"of listed\",\n      health_3: \"Armură.\",\n      speed_1: \"Se mișcă cu\",\n      speed_2: \"metri pe secundă.\",\n      available_for_purchase: \"Disponibil pentru cumpărare\",\n      level_to_unlock: \"Pentru deblocare termină nivelul:\",\n      restricted_to_certain_heroes: \"Numai anumiți eroi pot juca acest nivel\"\n    },\n    skill_docs: {\n      writable: \"permisiuni de scriere\",\n      read_only: \"permisiuni doar de citire\",\n      action_name: \"nume\",\n      action_cooldown: \"Ține\",\n      action_specific_cooldown: \"Cooldown\",\n      action_damage: \"Damage\",\n      action_range: \"Rază de acțiune\",\n      action_radius: \"Rază\",\n      action_duration: \"Durată\",\n      example: \"Exemplu\",\n      ex: \"ex\",\n      current_value: \"Valoare Curentă\",\n      default_value: \"Valoare Implicită\",\n      parameters: \"Parametrii\",\n      returns: \"Întoarce\",\n      granted_by: \"Acordat de\"\n    },\n    save_load: {\n      granularity_saved_games: \"Salvate\",\n      granularity_change_history: \"Istoric\"\n    },\n    options: {\n      general_options: \"Opțiuni Generale\",\n      volume_label: \"Volum\",\n      music_label: \"Muzică\",\n      music_description: \"Oprește Muzica din fundal.\",\n      editor_config_title: \"Configurare Editor\",\n      editor_config_livecompletion_label: \"Autocompletare Live\",\n      editor_config_livecompletion_description: \"Afișează sugesti de autocompletare în timp ce scri.\",\n      editor_config_invisibles_label: \"Arată etichetele invizibile\",\n      editor_config_invisibles_description: \"Arată spațiile și taburile invizibile.\",\n      editor_config_indentguides_label: \"Arată ghidul de indentare\",\n      editor_config_indentguides_description: \"Arată linii verticale pentru a vedea mai bine indentarea.\",\n      editor_config_behaviors_label: \"Comportamente inteligente\",\n      editor_config_behaviors_description: \"Completează automat parantezele, ghilimele etc.\"\n    },\n    versions: {\n      save_version_title: \"Salvează noua versiune\",\n      new_major_version: \"Versiune nouă majoră\",\n      submitting_patch: \"Trimitere Patch...\",\n      cla_prefix: \"Pentru a salva modificările mai intâi trebuie sa fiți de acord cu\",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"SUNT DE ACORD\"\n    },\n    contact: {\n      contact_us: \"Contact CodeCombat\",\n      welcome: \"Folosiți acest formular pentru a ne trimite email. \",\n      forum_prefix: \"Pentru orice altceva vă rugăm sa incercați \",\n      forum_page: \"forumul nostru\",\n      forum_suffix: \" în schimb.\",\n      faq_prefix: \"Există si un\",\n      faq: \"FAQ\",\n      subscribe_prefix: \"Daca ai nevoie de ajutor ca să termini un nivel te rugăm să\",\n      subscribe: \"cumperi un abonament CodeCombat\",\n      subscribe_suffix: \"si vom fi bucuroși să te ajutăm cu codul.\",\n      subscriber_support: \"Din moment ce ești un abonat CodeCombat, adresa ta de email va primi sprijinul nostru prioritar.\",\n      screenshot_included: \"Screenshot-uri incluse.\",\n      where_reply: \"Unde ar trebui să răspundem?\",\n      send: \"Trimite Feedback\"\n    },\n    account_settings: {\n      title: \"Setări Cont\",\n      not_logged_in: \"Loghează-te sau crează un cont nou pentru a schimba setările.\",\n      me_tab: \"Eu\",\n      picture_tab: \"Poză\",\n      delete_account_tab: \"Șterge Contul\",\n      wrong_email: \"Email Greșit\",\n      delete_this_account: \"Ștergere permanetă a acestui cont\",\n      emails_tab: \"Email-uri\",\n      admin: \"Admin\",\n      new_password: \"Parolă nouă\",\n      new_password_verify: \"Verifică\",\n      type_in_email: \"Scrie adresa de email ca să confirmi ștergerea\",\n      email_subscriptions: \"Subscripție Email\",\n      email_subscriptions_none: \"Nu ai subscripții Email.\",\n      email_announcements: \"Anunțuri\",\n      email_announcements_description: \"Primește email-uri cu ultimele știri despre CodeCombat.\",\n      email_notifications: \"Notificări\",\n      email_notifications_summary: \"Control pentru notificări email personalizate, legate de activitatea CodeCombat.\",\n      email_any_notes: \"Orice Notificări\",\n      email_any_notes_description: \"Dezactivați pentru a opri toate e-mailurile de notificare a activității.\",\n      email_news: \"Noutăți\",\n      email_recruit_notes: \"Oportunități de job-uri\",\n      email_recruit_notes_description: \"Daca joci foarte bine, este posibil sa te contactăm pentru obținerea unui loc (mai bun) de muncă.\",\n      contributor_emails: \"Contributor Class Emails\",\n      contribute_prefix: \"Căutăm oameni să se alăture distracției! Intră pe \",\n      contribute_page: \"pagina de contribuție\",\n      contribute_suffix: \" pentru a afla mai multe.\",\n      email_toggle: \"Alege tot\",\n      error_saving: \"Salvare erori\",\n      saved: \"Modificări salvate\",\n      password_mismatch: \"Parola nu se potrivește.\",\n      password_repeat: \"Te rugăm sa repeți parola.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Scurtături Keyboard\",\n      space: \"Space\",\n      enter: \"Enter\",\n      escape: \"Escape\",\n      shift: \"Shift\",\n      run_code: \"Rulează codul.\",\n      run_real_time: \"Rulează în timp real.\",\n      continue_script: \"Continue past current script.\",\n      skip_scripts: \"Treci peste toate script-urile ce pot fi sărite.\",\n      toggle_playback: \"Comută play/pause.\",\n      scrub_playback: \"Mergi înainte si înapoi in timp.\",\n      single_scrub_playback: \"Mergi înainte si înapoi in timp cu un singur cadru.\",\n      scrub_execution: \"Mergi prin lista curentă de vrăji executate.\",\n      toggle_debug: \"Comută afișaj debug.\",\n      toggle_grid: \"Comută afișaj grilă.\",\n      toggle_pathfinding: \"Comută afișaj pathfinding.\",\n      beautify: \"Înfrumusețează codul standardizând formatarea lui.\",\n      maximize_editor: \"Mărește/Micește editorul.\"\n    },\n    community: {\n      main_title: \"Comunitatea CodeCombat\",\n      introduction: \"Vezi metode prin care poți să te implici și tu mai jos și decide să alegi ce ți se pare cel mai distractiv. Deabia așteptăm să lucrăm împreună!\",\n      level_editor_prefix: \"Folosește CodeCombat\",\n      level_editor_suffix: \"Pentru a crea și a edita nivele. Useri au creat nivele pentru clasele lor, prieteni, hackathonuri, studenți si rude. Dacă crearea unui nivel nou ți se pare intimidant poți sa modifici un nivel creat de noi!\",\n      thang_editor_prefix: \"Numim unitățile din joc 'thangs'. Folosește\",\n      thang_editor_suffix: \"pentru a modifica ilustrațile sursă CodeCombat. Permitele unitătilor sa arunce proiectile, schimbă direcția unei animații, schimbă viața unei unități, sau uploadează propiile sprite-uri vectoriale.\",\n      article_editor_prefix: \"Vezi o greșală in documentația noastă? Vrei să documentezi instrucțiuni pentru propiile creații? Vezi\",\n      article_editor_suffix: \"si ajută jucători CodeCombat să obțină căt mai multe din playtime-ul lor.\",\n      find_us: \"Ne găsești pe aceste site-uri\",\n      social_blog: \"Citește blogul CodeCombat pe Sett\",\n      social_discource: \"Alăturăte discuțiilor pe forumul Discourse\",\n      social_facebook: \"Lasă un Like pentru CodeCombat pe facebook\",\n      social_twitter: \"Urmărește CodeCombat pe Twitter\",\n      social_gplus: \"Alăturăte pe Google+\",\n      contribute_to_the_project: \"Contribuie la proiect\"\n    },\n    clans: {\n      clan: \"Clan\",\n      clans: \"Clanuri\",\n      new_name: \"Nume nou de clan\",\n      new_description: \"Descrierea clanului nou\",\n      make_private: \"Fă clanul privat\",\n      subs_only: \"numai abonați\",\n      create_clan: \"Creează un clan Nou\",\n      public_clans: \"Clanuri Publice\",\n      my_clans: \"Clanurile mele\",\n      clan_name: \"Numele Clanului\",\n      name: \"Nume\",\n      chieftain: \"Chieftain\",\n      edit_clan_name: \"Editează numele clanului\",\n      edit_clan_description: \"Editează descrierea clanului\",\n      edit_name: \"editează nume\",\n      edit_description: \"editează descriere\",\n      \"private\": \"(privat)\",\n      summary: \"Sumar\",\n      average_level: \"Medie Level\",\n      average_achievements: \"Medie Achievements\",\n      delete_clan: \"Șterge Clan\",\n      leave_clan: \"Pleacă din Clan\",\n      join_clan: \"Intră în Clan\",\n      invite_1: \"Invitație:\",\n      invite_2: \"*Invită jucători in acest clan trimițându-le acest link.\",\n      members: \"Membrii\",\n      progress: \"Progres\",\n      not_started_1: \"neînceput\",\n      started_1: \"început\",\n      complete_1: \"complet\",\n      exp_levels: \"Extinde nivele\",\n      rem_hero: \"Șterge Eroul\",\n      status: \"Stare\",\n      complete_2: \"Complet\",\n      started_2: \"Început\",\n      not_started_2: \"Neînceput\",\n      view_solution: \"Click pentru a vedea soluția.\",\n      latest_achievement: \"Ultimile Achievement-uri\",\n      playtime: \"Timp Jucat\",\n      last_played: \"Ultima oară cănd ai jucat\"\n    },\n    classes: {\n      archmage_title: \"Archmage\",\n      archmage_title_description: \"(Programator)\",\n      archmage_summary: \"Dacă ești un dezvoltator interesat să programezi jocuri educaționale, devino Archmage si ajută-ne să construim CodeCombat!\",\n      artisan_title: \"Artizan\",\n      artisan_title_description: \"(Creator de nivele)\",\n      artisan_summary: \"Construiește si oferă nivele pentru tine si pentru prieteni tăi, ca să se joace. Devino Artisan si învață arta de a împărți cunoștințe despre programare.\",\n      adventurer_title: \"Aventurier\",\n      adventurer_title_description: \"(Playtester de nivele)\",\n      adventurer_summary: \"Primește nivelele noastre noi (chiar si cele pentru abonați) gratis cu o săptămână înainte si ajută-ne să reparăm bug-uri până la lansare.\",\n      scribe_title: \"Scrib\",\n      scribe_title_description: \"(Editor de articole)\",\n      scribe_summary: \"Un cod bun are nevoie de o documentație bună. Scrie, editează, si improvizează documentația citită de milioane de jucători în întreaga lume.\",\n      diplomat_title: \"Diplomat\",\n      diplomat_title_description: \"(Translator)\",\n      diplomat_summary: \"CodeCombat e localizat în 45+ de limbi de Diplomații noștri. Ajută-ne și contribuie la traducere.\",\n      ambassador_title: \"Ambasador\",\n      ambassador_title_description: \"(Suport)\",\n      ambassador_summary: \"Îmblânzește useri de pe forumul nostru si oferă direcți pentru cei cu întrebări. Ambasadori noștri reprezintă CodeCombat în fața lumii.\"\n    },\n    editor: {\n      main_title: \"Editori CodeCombat\",\n      article_title: \"Editor Articol\",\n      thang_title: \"Editor Thang\",\n      level_title: \"Editor Nivele\",\n      achievement_title: \"Editor Achievement\",\n      poll_title: \"Editor Sondaje\",\n      back: \"Înapoi\",\n      revert: \"Revino la versiunea anterioară\",\n      revert_models: \"Resetează Modelele\",\n      pick_a_terrain: \"Alege Terenul\",\n      dungeon: \"Temniță\",\n      indoor: \"Interior\",\n      desert: \"Deșert\",\n      grassy: \"Ierbos\",\n      small: \"Mic\",\n      large: \"Mare\",\n      fork_title: \"Fork Versiune Nouă\",\n      fork_creating: \"Creare Fork...\",\n      generate_terrain: \"Generează Teren\",\n      more: \"Mai Multe\",\n      wiki: \"Wiki\",\n      live_chat: \"Chat Live\",\n      thang_main: \"Principal\",\n      thang_spritesheets: \"Spritesheets\",\n      thang_colors: \"Culori\",\n      level_some_options: \"Opțiuni?\",\n      level_tab_thangs: \"Thangs\",\n      level_tab_scripts: \"Script-uri\",\n      level_tab_components: \"Componente\",\n      level_tab_systems: \"Sisteme\",\n      level_tab_docs: \"Documentație\",\n      level_tab_thangs_title: \"Thangs actuali\",\n      level_tab_thangs_all: \"Toate\",\n      level_tab_thangs_conditions: \"Condiți inițiale\",\n      level_tab_thangs_add: \"Adaugă Thangs\",\n      add_components: \"Adaugă Componente\",\n      component_configs: \"Configurarea Componentelor\",\n      config_thang: \"Dublu click pentru a configura un thang\",\n      \"delete\": \"Șterge\",\n      duplicate: \"Duplică\",\n      stop_duplicate: \"Oprește Duplicarea\",\n      rotate: \"Rotește\",\n      level_component_tab_title: \"Componente actuale\",\n      level_component_btn_new: \"Crează componentă nouă\",\n      level_systems_tab_title: \"Sisteme actuale\",\n      level_systems_btn_new: \"Crează sistem nou\",\n      level_systems_btn_add: \"Adaugă Sistem\",\n      level_components_title: \"Înapoi la toți Thangs\",\n      level_components_type: \"Tip\",\n      level_component_edit_title: \"Editează Componentă\",\n      level_component_config_schema: \"Schema Config\",\n      level_system_edit_title: \"Editează Sistem\",\n      create_system_title: \"Crează sistem nou\",\n      new_component_title: \"Crează componentă nouă\",\n      new_component_field_system: \"Sistem\",\n      new_article_title: \"Crează un articol nou\",\n      new_thang_title: \"Crează un nou tip de Thang\",\n      new_level_title: \"Crează un nivel nou\",\n      new_article_title_login: \"Loghează-te pentru a crea un Articol Nou\",\n      new_thang_title_login: \"Loghează-te pentru a crea un Thang de Tip Nou\",\n      new_level_title_login: \"Loghează-te pentru a crea un Nivel Nou\",\n      new_achievement_title: \"Crează un Achivement Nou\",\n      new_achievement_title_login: \"Loghează-te pentru a crea un Achivement Nou\",\n      new_poll_title: \"Crează un Sondaj Nou\",\n      new_poll_title_login: \"Loghează-te pentru a crea un Sondaj Nou\",\n      article_search_title: \"Caută articole aici\",\n      thang_search_title: \"Caută tipuri de Thang aici\",\n      level_search_title: \"Caută nivele aici\",\n      achievement_search_title: \"Caută Achievements\",\n      poll_search_title: \"Caută Sondaje\",\n      read_only_warning2: \"Notă: nu poți salva editările aici, pentru că nu ești logat.\",\n      no_achievements: \"Nici-un achivement adăugat acestui nivel până acum.\",\n      achievement_query_misc: \"Key achievement din diverse\",\n      achievement_query_goals: \"Key achievement din obiectivele nivelelor\",\n      level_completion: \"Finalizare Nivel\",\n      pop_i18n: \"Populează I18N\",\n      tasks: \"Sarcini\",\n      clear_storage: \"Șterge schimbările locale\"\n    },\n    article: {\n      edit_btn_preview: \"Preview\",\n      edit_article_title: \"Editează Articol\"\n    },\n    polls: {\n      priority: \"Prioritate\"\n    },\n    contribute: {\n      page_title: \"Contribuțtii\",\n      intro_blurb: \"CodeCombat este 100% open source! Sute de jucători dedicați ne-au ajutat sa construim jocul în cea ce este astăzi. Alătură-te si scrie următorul capitol în aventura CodeCombat de a ajuta lumea să învețe cod!\",\n      alert_account_message_intro: \"Salutare!\",\n      alert_account_message: \"Pentru a te abona la mailurile clasei trebuie să fi logat.\",\n      archmage_introduction: \"Una dintre cele mai bune părți despre construirea unui joc este că sintetizează atât de multe lucruri diferite. Grafică, Sunet, Networking în timp real, Social Networking, și desigur multe dintre aspectele comune ale programării, de la gestiune low-level a bazelor de date, și administrare server până la construirea de interfețe. Este mult de muncă, și dacă ești un programator cu experiență, cu un dor de a se arunca cu capul înainte îm CodeCombat, această clasă ți se potrivește. Ne-ar plăcea să ne ajuți să construim cel mai bun joc de programare făcut vreodată.\",\n      class_attributes: \"Atribute pe clase\",\n      archmage_attribute_1_pref: \"Cunoștințe în \",\n      archmage_attribute_1_suf: \", sau o dorință de a învăța. Majoritatea codului este în acest limbaj. Dacă ești fan Ruby sau Python, te vei simți ca acasă. Este JavaScript, dar cu o sintaxă mai frumoasă.\",\n      archmage_attribute_2: \"Ceva experiență în programare și inițiativă personală. Te vom ajuta să te orientezi, dar nu putem aloca prea mult timp pentru a te pregăti.\",\n      how_to_join: \"Cum să ni te alături\",\n      join_desc_1: \"Oricine poate să ajute! Doar intrați pe \",\n      join_desc_2: \"pentru a începe, bifați căsuța de dedesubt pentru a te marca ca un Archmage curajos și pentru a primi ultimele știri pe email. Vrei să discuți despre ce să faci sau cum să te implici mai mult? \",\n      join_desc_3: \", sau găsește-ne în \",\n      join_desc_4: \"și pornim de acolo!\",\n      join_url_email: \"Trimite-ne Email\",\n      archmage_subscribe_desc: \"Primește email-uri despre noi oportunități de progrmare și anunțuri.\",\n      artisan_introduction_pref: \"Trebuie să construim nivele adiționale! Oamenii sunt nerăbdători pentru mai mult conținut, și noi putem face doar atât singuri. Momentan editorul de nivele abia este utilizabil până și de creatorii lui, așa că aveți grijă. Dacă ai viziuni cu campanii care cuprind loop-uri for pentru\",\n      artisan_introduction_suf: \", atunci aceasta ar fi clasa pentru tine.\",\n      artisan_attribute_1: \"Orice experiență în crearea de conținut ca acesta ar fi de preferat, precum folosirea editoarelor de nivele de la Blizzard. Dar nu este obligatoriu!\",\n      artisan_attribute_2: \"Un chef de a face o mulțime de teste și iterări. Pentru a face nivele bune, trebuie să testați pe mai mulți oameni și să obțineți feedback, și să fiți pregăți să reparați o mulțime de lucruri.\",\n      artisan_attribute_3: \"Pentru moment trebui să ai nervi de oțel. Editorul nostru de nivele este abia la început și încă are multe probleme. Ai fost avertizat!\",\n      artisan_join_desc: \"Folosiți editorul de nivele urmărind acești pași, mai mult sau mai puțin:\",\n      artisan_join_step1: \"Citește documentația.\",\n      artisan_join_step2: \"Crează un nivel nou și explorează nivelele deja existente.\",\n      artisan_join_step3: \"Găsește-ne pe chatul nostru de Hipchat pentru ajutor.\",\n      artisan_join_step4: \"Postează nivelele tale pe forum pentru feedback.\",\n      artisan_subscribe_desc: \"Primește email-uri despre update-uri legate de Editorul de Nivele și anunțuri.\",\n      adventurer_introduction: \"Să fie clar ce implică rolul tău: tu ești tancul. Vei avea multe de îndurat. Avem nevoie de oameni care să testeze nivelele noi și să ne ajute să găsim moduri noi de a le îmbunătăți. Va fi greu; să creezi jocuri bune este un proces dificil și nimeni nu o face perfect din prima. Dacă crezi că poți îndura, atunci aceasta este clasa pentru tine.\",\n      adventurer_attribute_1: \"O sete de cunoaștere. Tu vrei să înveți cum să programezi și noi vrem să te învățăm. Cel mai probabil tu vei fi cel care va preda mai mult în acest caz.\",\n      adventurer_attribute_2: \"Carismatic. Formulează într-un mod clar ceea ce trebuie îmbunătățit și oferă sugestii.\",\n      adventurer_join_pref: \"Ori fă echipă (sau recrutează!) cu un Artizan și lucrează cu el, sau bifează căsuța de mai jos pentru a primi email când sunt noi nivele de testat. De asemenea vom posta despre nivele care trebuie revizuite pe rețelele noastre precum\",\n      adventurer_forum_url: \"forumul nostru\",\n      adventurer_join_suf: \"deci dacă preferi să fi înștiințat în acele moduri, înscrie-te acolo!\",\n      adventurer_subscribe_desc: \"Primește email-uri când sunt noi nivele de testat.\",\n      scribe_introduction_pref: \"CodeCombat nu o să fie doar o colecție de nivele. Vor fi incluse resurse de cunoaștere, un wiki despre concepte de programare legate de fiecare nivel. În felul acesta fiecare Arisan nu trebuie să mai descrie în detaliu ce este un operator de comparație, ei pot să pună un link la un Articol mai bine documentat. Ceva asemănător cu ce \",\n      scribe_introduction_url_mozilla: \"Mozilla Developer Network\",\n      scribe_introduction_suf: \" a construit. Dacă idea ta de distracție este să articulezi conceptele de programare în formă Markdown, această clasă ți s-ar potrivi.\",\n      scribe_attribute_1: \"Un talent în cuvinte este tot ce îți trebuie. Nu numai gramatică și ortografie, trebuie să poți să explici ideii complicate celorlați.\",\n      contact_us_url: \"Contactați-ne\",\n      scribe_join_description: \"spune-ne câte ceva despre tine, experiențele tale despre programare și ce fel de lucruri ți-ar place să scri despre. Vom începe de acolo!.\",\n      scribe_subscribe_desc: \"Primește mailuri despre scrisul de articole.\",\n      diplomat_introduction_pref: \"Dacă ar fi un lucru care l-am învățat din \",\n      diplomat_launch_url: \"lansarea din Octombire\",\n      diplomat_introduction_suf: \"acesta ar fi că: există un interes mare pentru CodeCombat și în alte țări! Încercăm sa adunăm cât mai mulți translatori care sunt pregătiți să transforme un set de cuvinte intr-un alt set de cuvinte ca să facă CodeCombat cât mai accesibil în toată lumea. Dacă vrei să tragi cu ochiul la conțintul ce va apărea și să aduci nivele cât mai repede pentru conaționali tăi, această clasă ți se potriveste.\",\n      diplomat_attribute_1: \"Fluență în Engleză și limba în care vrei să traduci. Când explici ideii complicate este important să întelegi bine ambele limbi!\",\n      diplomat_i18n_page_prefix: \"Poți începe să traduci nivele accesând\",\n      diplomat_i18n_page: \"Pagina de traduceri\",\n      diplomat_i18n_page_suffix: \", sau interfața si website-ul pe GitHub.\",\n      diplomat_join_pref_github: \"Găsește fișierul pentru limba ta \",\n      diplomat_github_url: \"pe GitHub\",\n      diplomat_join_suf_github: \", editeazăl online si trimite un pull request. Bifează căsuța de mai jos ca să fi up-to-date cu dezvoltările noastre internaționale!\",\n      diplomat_subscribe_desc: \"Primește mail-uri despre dezvoltările i18n si niveluri de tradus.\",\n      ambassador_introduction: \"Aceasta este o comunitate pe care o construim, iar voi sunteți conexiunile. Avem forumui, email-uri, si rețele sociale cu mulți oameni cu care se poate vorbi despre joc și de la care se poate învața. Dacă vrei să ajuți oameni să se implice și să se distreze această clasă este potrivită pentru tine.\",\n      ambassador_attribute_1: \"Abilități de comunicare. Abilitatea de a indentifica problemele pe care jucătorii le au si șa îi poti ajuta. De asemenea, trebuie să ne informezi cu părerile jucătoriilor, ce le place și ce vor mai mult!\",\n      ambassador_join_desc: \"spune-ne câte ceva despre tine, ce ai făcut si ce te interesează să faci. Vom porni de acolo!.\",\n      ambassador_join_note_strong: \"Notă\",\n      ambassador_join_note_desc: \"Una din prioritățile noaste este să constrruim un joc multiplayer unde jucători noștri, dacă au probleme pot să cheme un wizard cu un nivel ridicat să îi ajute.\",\n      ambassador_subscribe_desc: \"Primește mailuri despre support updates și dezvoltări multiplayer.\",\n      changes_auto_save: \"Modificările sunt salvate automat când apeși checkbox-uri.\",\n      diligent_scribes: \"Scribii noștri:\",\n      powerful_archmages: \"Bravii noștri Archmage:\",\n      creative_artisans: \"Artizanii noștri creativi:\",\n      brave_adventurers: \"Aventurierii noștri neînfricați:\",\n      translating_diplomats: \"Diplomații noștri abili:\",\n      helpful_ambassadors: \"Ambasadorii noștri de ajutor:\"\n    },\n    ladder: {\n      my_matches: \"Jocurile mele\",\n      simulate: \"Simulează\",\n      simulation_explanation: \"Simulând jocuri poți afla poziția în clasament a jocului tău mai repede!\",\n      simulate_games: \"Simulează Jocuri!\",\n      games_simulated_by: \"Jocuri simulate de tine:\",\n      games_simulated_for: \"Jocuri simulate pentru tine:\",\n      games_simulated: \"Jocuri simulate\",\n      games_played: \"Jocuri jucate\",\n      ratio: \"Rație\",\n      leaderboard: \"Clasament\",\n      battle_as: \"Luptă ca \",\n      summary_your: \"Al tău \",\n      summary_matches: \"Meciuri - \",\n      summary_wins: \" Victorii, \",\n      summary_losses: \" Înfrângeri\",\n      rank_no_code: \"Nici un Cod nou pentru Clasament\",\n      rank_my_game: \"Plasează-mi jocul in Clasament!\",\n      rank_submitting: \"Se trimite...\",\n      rank_submitted: \"Se trimite pentru Clasament\",\n      rank_failed: \"A eșuat plasarea in clasament\",\n      rank_being_ranked: \"Jocul se plasează in Clasament\",\n      rank_last_submitted: \"trimis \",\n      help_simulate: \"Ne ajuți simulând jocuri?\",\n      code_being_simulated: \"Codul tău este simulat de alți jucători pentru clasament. Se va actualiza cum apar meciuri.\",\n      no_ranked_matches_pre: \"Nici un meci de clasament pentru \",\n      no_ranked_matches_post: \" echipă! Joacă împotriva unor concurenți și revino apoi aici pentru a-ți plasa meciul in clasament.\",\n      choose_opponent: \"Alege un adversar\",\n      select_your_language: \"Alege limbă!\",\n      tutorial_play: \"Joacă Tutorial-ul\",\n      tutorial_recommended: \"Recomandat dacă nu ai mai jucat niciodată înainte\",\n      tutorial_skip: \"Sări peste Tutorial\",\n      tutorial_not_sure: \"Nu ești sigur ce se întâmplă?\",\n      tutorial_play_first: \"Joacă Tutorial-ul mai întâi.\",\n      simple_ai: \"AI simplu\",\n      warmup: \"Încălzire\",\n      friends_playing: \"Prieteni ce se Joacă\",\n      log_in_for_friends: \"Loghează-te ca să joci cu prieteni tăi!\",\n      social_connect_blurb: \"Conectează-te și joacă împotriva prietenilor tăi!\",\n      invite_friends_to_battle: \"Invită-ți prieteni să se alăture bătăliei\",\n      fight: \"Luptă!\",\n      watch_victory: \"Vizualizează victoria\",\n      defeat_the: \"Învinge\",\n      tournament_started: \", a început\",\n      tournament_ends: \"Turneul se termină\",\n      tournament_ended: \"Turneul s-a terminat\",\n      tournament_rules: \"Regulile Turneului\",\n      tournament_blurb: \"Scrie cod, colectează aur, construiește armate, distruge inamici, câștigă premii, si îmbunătățeșteți cariera în turneul Lăcomiei de $40,000! Află detalii\",\n      tournament_blurb_criss_cross: \"Caștigă pariuri, creează căi, păcălește-ți oponenți, strâange Pietre Prețioase, si îmbunătățeșteți cariera in turneul Criss-Cross! Află detalii\",\n      tournament_blurb_zero_sum: \"Dezlănțuie creativitatea de programare în strângerea de aur sau în tactici de bătălie în alpine mirror match dintre vrăitori roșii și cei albaștrii.Turneul începe Vineri, 27 Martie și se va desfăsura până Luni, 6 Aprilie la 5PM PDT. Află detalii\",\n      tournament_blurb_blog: \"pe blogul nostru\",\n      rules: \"Reguli\",\n      winners: \"Învingători\"\n    },\n    user: {\n      stats: \"Statistici\",\n      singleplayer_title: \"Nivele Singleplayer\",\n      multiplayer_title: \"Nivele Multiplayer\",\n      achievements_title: \"Achievement-uri\",\n      last_played: \"Ultima oară jucat\",\n      status: \"Stare\",\n      status_completed: \"Complet\",\n      status_unfinished: \"Neterminat\",\n      no_singleplayer: \"Nici-un joc Singleplayer jucat.\",\n      no_multiplayer: \"Nici-un joc Multiplayer jucat.\",\n      no_achievements: \"Nici-un Achivement câștigat.\",\n      favorite_prefix: \"Limbaj preferat\",\n      favorite_postfix: \".\",\n      not_member_of_clans: \"Nu ești membrul unui clan.\"\n    },\n    achievements: {\n      last_earned: \"Ultimul câstigat\",\n      amount_achieved: \"Sumă\",\n      achievement: \"Achievement\",\n      current_xp_prefix: \"\",\n      current_xp_postfix: \" în total\",\n      new_xp_prefix: \"\",\n      new_xp_postfix: \" câștigat\",\n      left_xp_prefix: \"\",\n      left_xp_infix: \" până la level\",\n      left_xp_postfix: \"\"\n    },\n    account: {\n      payments: \"Plăți\",\n      purchased: \"Cumpărate\",\n      subscription: \"Abonament\",\n      invoices: \"Invoice-uri\",\n      service_apple: \"Apple\",\n      service_web: \"Web\",\n      paid_on: \"Plătit pe\",\n      service: \"Service\",\n      price: \"Preț\",\n      gems: \"Pietre Prețioase\",\n      active: \"Activ\",\n      subscribed: \"Abonat\",\n      unsubscribed: \"Dezabonat\",\n      active_until: \"Activ până\",\n      cost: \"Cost\",\n      next_payment: \"Următoarea Plată\",\n      card: \"Card\",\n      status_unsubscribed_active: \"Nu ești abonat si nu vei fi facturat, contul tău este activ deocamdată.\",\n      status_unsubscribed: \"Primește access la nivele noi, eroi, iteme, și Pietre Prețioase bonus cu un abonament CodeCombat!\"\n    },\n    account_invoices: {\n      amount: \"Sumă in dolari US\",\n      declined: \"Cardul tău a fost refuzat\",\n      invalid_amount: \"Introdu o sumă in dolari US.\",\n      not_logged_in: \"Logheazăte sau crează un cont pentru a accesa invoice-uri.\",\n      pay: \"Plată Invoice\",\n      purchasing: \"Cumpăr...\",\n      retrying: \"Eroare server, reîncerc.\",\n      success: \"Plătit cu success. Mulțumim!\"\n    },\n    loading_error: {\n      could_not_load: \"Eroare la încărcarea pe server\",\n      connection_failure: \"Conexiune eșuată.\",\n      unauthorized: \"Este nevoie să te loghezi. Ai cookies dezactivate?\",\n      forbidden: \"Nu ai permisiune.\",\n      not_found: \"Nu a fost găsit.\",\n      not_allowed: \"Metodă nepermisă.\",\n      timeout: \"Timeout Server.\",\n      conflict: \"Conflict resurse.\",\n      bad_input: \"Date greșite.\",\n      server_error: \"Eroare Server.\",\n      unknown: \"Eroare Necunoscută.\"\n    },\n    resources: {\n      level: \"Nivel\",\n      patch: \"Patch\",\n      patches: \"Patch-uri\",\n      system: \"Sistem\",\n      systems: \"Sisteme\",\n      component: \"Componentă\",\n      components: \"Componente\",\n      hero: \"Erou\",\n      campaigns: \"Campanii\"\n    },\n    delta: {\n      added: \"Adăugat\",\n      modified: \"Modificat\",\n      deleted: \"Șters\",\n      moved_index: \"Index Mutat\",\n      text_diff: \"Diff Text\",\n      merge_conflict_with: \"ÎBINĂ CONFLICTUL CU\",\n      no_changes: \"Fară Schimbări\"\n    },\n    legal: {\n      page_title: \"Aspecte Legale\",\n      opensource_description_prefix: \"Vizitează \",\n      github_url: \"pagina noastră de GitHub\",\n      opensource_description_center: \"și ajută-ne dacă îți place! CodeCombat este construit peste o mulțime de proiecte open source, care noi le iubim. Vizitați\",\n      archmage_wiki_url: \"Archmage wiki\",\n      opensource_description_suffix: \"pentru o listă cu software-ul care fac acest joc posibil.\",\n      practices_title: \"Convenții\",\n      practices_description: \"Acestea sunt promisiunile noastre către tine, jucătorul, fără așa mulți termeni legali.\",\n      privacy_title: \"Confidenţialitate şi termeni\",\n      privacy_description: \"Nu o să iți vindem datele personale.\",\n      security_title: \"Securitate\",\n      security_description: \"Ne străduim să vă protejăm informațiile personale. Fiind un proiect open-source, site-ul nostru oferă oricui posibilitatea de a ne revizui și îmbunătăți sistemul de securitate.\",\n      email_title: \"Email\",\n      email_description_prefix: \"Noi nu vă vom inunda cu spam. Prin\",\n      email_settings_url: \"setările tale de email\",\n      email_description_suffix: \" sau prin link-urile din email-urile care vi le trimitem, puteți să schimbați preferințele și să vâ dezabonați oricând.\",\n      cost_title: \"Cost\",\n      copyrights_title: \"Drepturi de autor și licențe\",\n      contributor_title: \"Acord de licență Contributor\",\n      contributor_description_prefix: \"Toți contribuitorii, atât pe site cât și pe GitHub-ul nostru, sunt supuși la\",\n      cla_url: \"ALC\",\n      contributor_description_suffix: \"la care trebuie să fi de accord înainte să poți contribui.\",\n      code_title: \"Code - MIT\",\n      mit_license_url: \"MIT license\",\n      code_description_suffix: \"Asta include tot codul din Systems și Components care este oferit de către CodeCombat cu scopul de a crea nivele.\",\n      art_title: \"Artă/Muzică - Conținut Comun \",\n      art_description_prefix: \"Tot conținutul creativ/artistic este valabil sub\",\n      cc_license_url: \"Creative Commons Attribution 4.0 International License\",\n      art_description_suffix: \"Conținut comun este orice făcut general valabil de către CodeCombat cu scopul de a crea nivele. Asta include:\",\n      art_music: \"Muzică\",\n      art_sound: \"Sunet\",\n      art_artwork: \"Artwork\",\n      art_sprites: \"Sprites\",\n      art_other: \"Orice si toate celelalte creații non-cod care sunt disponibile când se crează nivele.\",\n      art_access: \"Momentan nu există nici un sistem universal,ușor pentru preluarea acestor bunuri. În general, preluați-le precum site-ul din URL-urile folosite, contactați-ne pentru asistență, sau ajutați-ne sa extindem site-ul pentru a face aceste bunuri mai ușor accesibile.\",\n      art_paragraph_1: \"Pentru atribuire, vă rugăm numiți și lăsați referire link la codecombat.com unde este folosită sursa sau unde este adecvat pentru mediu. De exemplu:\",\n      use_list_1: \"Dacă este folosit într-un film sau alt joc, includeți codecombat.com la credite.\",\n      use_list_2: \"Dacă este folosit pe un site, includeți un link in apropiere, de exemplu sub o imagine, sau in pagina generală de atribuiri unde menționați și alte Bunuri Creative și software open source folosit pe site. Ceva care face referință explicit la CodeCombat, precum o postare pe un blog care menționează CodeCombat, nu trebuie să se facă o atribuire separată.\",\n      art_paragraph_2: \"Dacă conținutul folosit nu este creat de către CodeCombat ci de către un utilizator al codecombat.com,atunci faceți referință către ei, și urmăriți indicațiile de atribuire prevăzute în descrierea resursei dacă există.\",\n      rights_title: \"Drepturi rezervate\",\n      rights_desc: \"Toate drepturile sunt rezervate pentru Nivele în sine. Asta include\",\n      rights_scripts: \"Script-uri\",\n      rights_unit: \"Configurații de unități\",\n      rights_writings: \"Scrieri\",\n      rights_media: \"Media (sunete, muzică) și orice alt conținut creativ dezvoltat special pentru acel nivel care nu este valabil în mod normal pentru creat nivele.\",\n      rights_clarification: \"Pentru a clarifica, orice este valabil in Editorul de Nivele pentru scopul de a crea nivele se află sub CC, pe când conținutul creat cu Editorul de Nivele sau încărcat pentru a face nivelul nu se află.\",\n      nutshell_title: \"Pe scurt\",\n      nutshell_description: \"Orice resurse vă punem la dispoziție în Editorul de Nivele puteți folosi liber cum vreți pentru a crea nivele. Dar ne rezervăm dreptul de a rezerva distribuția de nivele în sine (care sunt create pe codecombat.com) astfel încât să se poată percepe o taxă pentru ele pe vitor, dacă se va ajunge la așa ceva.\",\n      canonical: \"Versiunea in engleză a acestui document este cea definitivă, versiunea canonică. Dacă există orice discrepanțe între traduceri, documentul in engleză are prioritate.\"\n    },\n    ladder_prizes: {\n      title: \"Premii Turnee\",\n      blurb_1: \"Aceste premii se acordă în funcție de\",\n      blurb_2: \"Regulile Turneului\",\n      blurb_3: \"la jucători umani sau ogre de top.\",\n      blurb_4: \"Două echipe înseamnă dublul premiilor!\",\n      blurb_5: \"(O să fie 2 câștigători pe primul loc, 2 pe locul 2, etc.)\",\n      rank: \"Rank\",\n      prizes: \"Premii\",\n      total_value: \"Valoare Totala\",\n      in_cash: \"în cash\",\n      custom_wizard: \"Wizard CodeCombat personalizat\",\n      custom_avatar: \"Avatar CodeCombat personalizat\",\n      heap: \"pentru 6 luni de acces \\\"Startup\\\"\",\n      credits: \"credite\",\n      one_month_coupon: \"coupon: alege Rails sau HTML\",\n      one_month_discount: \"discount, 30% off: choose either Rails or HTML\",\n      license: \"licență\",\n      oreilly: \"ebook la alegere\"\n    },\n    calendar: {\n      year: \"An\",\n      day: \"Zi\",\n      january: \"Ianuarie\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1077\n");

/***/ })

});