/*! hash:345dfe6c0e434e9c7378, chunkhash:89a180025d0d0e466a50, name:locale/sv, filebase:sv.bundle.js, query:, file:javascripts/chunks/locale/sv.bundle.js */
webpackJsonp([25],{

/***/ 1082:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Svenska\",\n  englishDescription: \"Swedish\",\n  translation: {\n    new_home: {\n      classroom_edition: \"Klassrumutgåven:\",\n      learn_to_code: \"Lär dig koda:\",\n      play_now: \"Spela nu\",\n      im_a_teacher: \"Jag är lärare\",\n      im_a_student: \"Jag är elev\",\n      learn_more: \"Läs mer\",\n      codecombat_is: \"CodeCombat är en platform <strong>för elever</strong> att lära sig datavetenskap när de spelar igenom ett riktigt spel.\",\n      watch_how: \"Se hur CodeCombat förändrar hur människor lär sig datavetenskap.\",\n      top_screenshots_hint: \"Elever skriver kod och ser deras ändringar write code and see their changes update in real-time\",\n      perform_at_higher_level: \"Genomför en högre nivå av prestation\",\n      real_game: \"Ett riktigt spel, spelad med riktig kodning.\",\n      have_an_account: \"Har du ett konto?\",\n      logged_in_as: \"Du är inloggad som\",\n      ffa: \"Gratis för alla elever\",\n      coming_soon: \"Mer kommer snat!\",\n      goto_classes: \"Gå till mina klasser\",\n      view_profile: \"Visa min profil\",\n      go_to_courses: \"Gå till mina kurser\"\n    },\n    nav: {\n      map: \"Karta\",\n      play: \"Spela\",\n      community: \"Community\",\n      courses: \"Lektioner\",\n      blog: \"Blogg\",\n      forum: \"Forum\",\n      account: \"Konto\",\n      my_account: \"Mitt konto\",\n      profile: \"Profil\",\n      home: \"Hem\",\n      contribute: \"Bidra\",\n      legal: \"Juridik\",\n      about: \"Om oss\",\n      contact: \"Kontakt\",\n      twitter_follow: \"Följ oss på Twitter\",\n      my_classrooms: \"Mina klasser\",\n      my_courses: \"Mina kurser\",\n      careers: \"Jobbtillfällen\",\n      schools: \"Skolor\",\n      get_involved: \"Bli engagerad\",\n      open_source: \"Öppen källkod (GitHub)\",\n      help_pref: \"Behöver du hjälp? Email\",\n      help_suff: \"och vi kommer höras!\"\n    },\n    modal: {\n      close: \"Stäng\",\n      okay: \"Okej\"\n    },\n    not_found: {\n      page_not_found: \"Sidan kan inte hittas\"\n    },\n    diplomat_suggestion: {\n      title: \"Hjälp till att översätta CodeCombat!\",\n      sub_heading: \"Vi behöver dina språkliga kunskaper.\",\n      pitch_body: \"Vi utvecklar CodeCombat på engelska, men vi har redan spelare världen över. Många av dem vill spela på svenska eftersom de inte talar engelska. Om du talar båda språken, fundera på att registrera dig som Diplomat och hjälp till med översättningen av både hemsidan och alla nivåer till svenska.\",\n      missing_translations: \"Tills vi har översatt allting till svenska, så kommer du se engelska när det inte finns någon svensk översättning tillgänglig.\",\n      learn_more: \"Läs mer om att vara en Diplomat\",\n      subscribe_as_diplomat: \"Registrera dig som Diplomat\"\n    },\n    play: {\n      play_as: \"Spela som \",\n      request_licenses: \"Kontakta våra skolspecialister för mer information\",\n      compete: \"Tävla!\",\n      spectate: \"Titta på\",\n      players: \"spelare\",\n      hours_played: \"timmar spelade\",\n      items: \"Föremål\",\n      unlock: \"Lås upp\",\n      confirm: \"Bekräfta\",\n      owned: \"Ägs av dig\",\n      locked: \"Låst\",\n      available: \"Tillgängligt\",\n      skills_granted: \"Ger färdigheter\",\n      heroes: \"Hjältar\",\n      achievements: \"Prestationer\",\n      settings: \"Inställningar\",\n      poll: \"Omröstning\",\n      next: \"Nästa\",\n      change_hero: \"Byt Hjälte\",\n      change_hero_or_language: \"Byt Hjälte eller Språk\",\n      buy_gems: \"Köp ädelstenar\",\n      subscribers_only: \"Endast prenumeranter!\",\n      subscribe_unlock: \"Prenumerera för att låsa upp!\",\n      anonymous: \"Anonym Spelare\",\n      level_difficulty: \"Svårighetsgrad: \",\n      awaiting_levels_adventurer_prefix: \"Vi släpper nya nivåer varje vecka.\",\n      awaiting_levels_adventurer: \"Registrera dig som äventyrare\",\n      awaiting_levels_adventurer_suffix: \"för att vara först att spela nya nivåer.\",\n      adjust_volume: \"justera volymen\",\n      campaign_multiplayer: \"Flerspelararenor\",\n      campaign_multiplayer_description: \"... i vilken du tävlar i kodande mot andra spelare\",\n      brain_pop_done: \"Du har besegrat trollen med kod! Du vann!\",\n      brain_pop_challenge: \"Utmana dig själv att spela igen med ett annat programmeringsspråk\",\n      back_to_classroom: \"Tillbaka till klassrummet\",\n      teacher_button: \"För lärare\"\n    },\n    code: {\n      \"if\": \"om\",\n      \"else\": \"annars\",\n      elif: \"annars om\",\n      \"while\": \"medans\",\n      \"for\": \"för\",\n      \"break\": \"bryt\",\n      \"continue\": \"fortsätt\",\n      pass: \"passa\",\n      \"return\": \"returnera\",\n      then: \"då\",\n      \"do\": \"gör\",\n      end: \"slut\",\n      \"function\": \"funktion\",\n      def: \"definera\",\n      \"var\": \"variabel\",\n      self: \"själv\",\n      hero: \"hjälte\",\n      \"this\": \"denna/detta\",\n      or: \"eller\",\n      \"||\": \"eller\",\n      and: \"och\",\n      \"&&\": \"och\",\n      not: \"inte\",\n      \"!\": \"inte\",\n      \"=\": \"tilldela\",\n      \"==\": \"lika med\",\n      \"===\": \"strikt lika med\",\n      \"!=\": \"är inte lika med\",\n      \"!==\": \"är inte strikt lika med\",\n      \">\": \"är större än\",\n      \">=\": \"är större eller lika med\",\n      \"<\": \"är mindre än\",\n      \"<=\": \"är mindre eller lika med\",\n      \"*\": \"multiplicerat med\",\n      \"/\": \"delat med\",\n      \"+\": \"plus\",\n      \"-\": \"minus\",\n      \"+=\": \"addera och tilldela\",\n      \"-=\": \"subtrahera och tilldela\",\n      True: \"Sant\",\n      \"true\": \"sant\",\n      False: \"Falskt\",\n      \"false\": \"Falskt\",\n      undefined: \"odefinerat\",\n      \"null\": \"null\"\n    },\n    share_progress_modal: {\n      blurb: \"Du gör stora framsteg! Berätta för dina föräldrar hur mycket du lärt dig tack vare CodeCombat.\",\n      email_invalid: \"ogiltig mejladress.\",\n      form_blurb: \"Ange en förälders mejladress så visar vi dem!\",\n      form_label: \"Mejladress\",\n      placeholder: \"mejladress\",\n      title: \"Utmärkt arbete, lärling\"\n    },\n    login: {\n      sign_up: \"Skapa konto\",\n      email_or_username: \"E-postadress eller användarnamn\",\n      log_in: \"Logga in\",\n      logging_in: \"Loggar in\",\n      log_out: \"Logga ut\",\n      forgot_password: \"Glömt ditt lösenord?\",\n      finishing: \"Färdigställer\",\n      sign_in_with_facebook: \"Logga in med Facebook\",\n      sign_in_with_gplus: \"Logga in med G+\",\n      signup_switch: \"Vill du skapa ett konto?\"\n    },\n    signup: {\n      create_student_header: \"Skapa elevkonto\",\n      create_teacher_header: \"Skapa lärarkonto\",\n      create_individual_header: \"Skapa individuellt konto\",\n      email_announcements: \"Mottag nyheter via mejl\",\n      sign_in_to_continue: \"Logga in eller skapa ett konto för att fortsätta\",\n      teacher_email_announcements: \"Keep me updated on new teacher resources, curriculum, and courses!\",\n      creating: \"Skapar konto...\",\n      sign_up: \"Skapa konto\",\n      log_in: \"logga in med lösenord\",\n      required: \"Du måste logga in innan du kan gå dit\",\n      login_switch: \"Har du redan ett konto?\",\n      optional: \"valfritt\",\n      hey_students: \"Elever, ange klasskoden från er lärare.\",\n      birthday: \"Födelsedatum\",\n      classroom_not_found: \"Det finns inga klasser med den här klasskoden. Kontrollera stavningen eller fråga din lärare om hjälp.\",\n      checking: \"Kontrollerar...\",\n      account_exists: \"Den här mailadressen används redan:\",\n      sign_in: \"Logga in\",\n      name_taken: \"Användarnamnet är redan taget! Prova {{suggestedName}}?\",\n      name_available: \"Användarnamn tillgängligt!\",\n      name_is_email: \"Användarnamnet kan inte vara en epostadress\",\n      choose_type: \"Välj din kontotyp\",\n      teacher_type_1: \"Lär ut programmering med CodeCombat!\",\n      student_type_2: \"Spela med din klass\",\n      student_type_3: \"Tävla i arenor\",\n      student_type_4: \"Välj din hjälte!\",\n      student_type_5: \"Ha din klasskod redo!\",\n      enter_class_code: \"Ange din klasskod\",\n      enter_birthdate: \"Ange ditt födelsedatum:\",\n      parent_use_birthdate: \"Föräldrar, ange era egna födelsedatum.\",\n      ask_teacher_1: \"Fråga din lärare om er klasskod.\",\n      ask_teacher_2: \"Inte en del av en klass? Skapa ett \",\n      ask_teacher_4: \" istället.\",\n      enter_parent_email: \"Ange din förälders epostadress:\",\n      account_created: \"Konto skapat!\",\n      write_this_down: \"Skriv ner detta:\",\n      start_playing: \"Börja spela!\",\n      select_your_starting_hero: \"Välj din hjälte:\",\n      you_can_always_change_your_hero_later: \"Du kan alltid byta din hjäte senare.\",\n      teacher_ready_to_create_class: \"Du är redo att skapa din första klass!\",\n      teacher_students_can_start_now: \"Dina elever kommer kunna börja spela första kursen, Introduktion till datavetenskap, direkt.\",\n      teacher_list_create_class: \"På nästa skärm kommer du kunna skapa en ny klass.\",\n      teacher_list_add_students: \"Lägg till elever till klassen genom att klicka på Visa klass-länken, sen kan du skicka klasskoden eller länken till dina elever. Du kan också bjuda in dem via mail om de har en epostadress.\",\n      dont_use_our_email_silly: \"Ange inte din epostadress här! Ange din förälders epostadress.\",\n      want_codecombat_in_school: \"Vill du spela CodeCombat hela tiden?\",\n      eu_confirmation_student: \"Om du är osäker, fråga din lärare.\"\n    },\n    recover: {\n      recover_account_title: \"Återskapa ditt konto\",\n      send_password: \"Skicka återskapningslösenord\",\n      recovery_sent: \"Återskapningslösenord skickat.\"\n    },\n    items: {\n      primary: \"Primär\",\n      secondary: \"Sekundär\",\n      armor: \"Rustning\",\n      accessories: \"Tillbehör\",\n      misc: \"Övrigt\",\n      books: \"Böcker\"\n    },\n    common: {\n      back: \"Tillbaka\",\n      coming_soon: \"Kommer snart!\",\n      \"continue\": \"Fortsätt\",\n      next: \"Nästa\",\n      loading: \"Laddar...\",\n      overview: \"Översikt\",\n      solution: \"Lösning\",\n      table_of_contents: \"Innehållsförteckning\",\n      intro: \"Intro\",\n      saving: \"Sparar...\",\n      sending: \"Skickar...\",\n      send: \"Skicka\",\n      sent: \"Skickat\",\n      cancel: \"Avbryt\",\n      save: \"Spara\",\n      publish: \"Publicera\",\n      create: \"Skapa\",\n      fork: \"Förgrena\",\n      play: \"Spela\",\n      retry: \"Försök igen\",\n      actions: \"Handlingar\",\n      info: \"Info\",\n      help: \"Hjälp\",\n      submit_changes: \"Spara Ändringar\",\n      save_changes: \"Spara ändringar\",\n      required_field: \"obligatoriskt\"\n    },\n    general: {\n      and: \"och\",\n      name: \"Namn\",\n      date: \"Datum\",\n      body: \"Kropp\",\n      version: \"Version\",\n      accepted: \"Accepterad\",\n      rejected: \"Avvisad\",\n      accept: \"Acceptera\",\n      accept_and_save: \"Acceptera och spara\",\n      reject: \"Avvisa\",\n      submitter: \"Inlämnare\",\n      submitted: \"Inlämnat\",\n      commit_msg: \"Ändringsmeddelande\",\n      version_history: \"Ändringshistorik\",\n      version_history_for: \"Ändringshistorik för: \",\n      select_changes: \"Välj två ändringar nedan för att se skillnaden.\",\n      undo_prefix: \"Ångra\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"gör om\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Spela förhandsversion av aktuell nivå\",\n      result: \"Resultat\",\n      results: \"Resultat\",\n      description: \"Beskrivning\",\n      or: \"eller\",\n      subject: \"Ämne\",\n      email: \"Mejl\",\n      password: \"Lösenord\",\n      confirm_password: \"Bekräfta lösenord\",\n      message: \"Meddelande\",\n      code: \"Kod\",\n      ladder: \"Stege\",\n      when: \"När\",\n      opponent: \"Fiende\",\n      rank: \"Rank\",\n      score: \"Poäng\",\n      win: \"Vinst\",\n      loss: \"Förlust\",\n      tie: \"Oavgjord\",\n      easy: \"Lätt\",\n      medium: \"Medium\",\n      hard: \"Svår\",\n      player: \"Spelare\",\n      player_level: \"Nivå\",\n      warrior: \"Krigare\",\n      ranger: \"Vandrare\",\n      wizard: \"Trollkarl\",\n      first_name: \"Förnamn\",\n      last_name: \"Efternamn\",\n      username: \"Användarnamn\",\n      contact_us: \"Kontakta oss\",\n      close_window: \"Stäng fönster\"\n    },\n    units: {\n      second: \"sekund\",\n      seconds: \"sekunder\",\n      sec: \"sek\",\n      minute: \"minut\",\n      minutes: \"minuter\",\n      hour: \"timme\",\n      hours: \"timmar\",\n      day: \"dag\",\n      days: \"dagar\",\n      week: \"vecka\",\n      weeks: \"veckor\",\n      month: \"månad\",\n      months: \"månader\",\n      year: \"år\",\n      years: \"år\"\n    },\n    play_level: {\n      back_to_map: \"Tillbaka till kartan\",\n      explore_codecombat: \"Utforska CodeCombat\",\n      finished_hoc: \"Jag är färdig med min Hour of Code\",\n      completed_level: \"Avklarad nivå:\",\n      course: \"Lektion:\",\n      done: \"Klar\",\n      next_level: \"Nästa nivå\",\n      next_game: \"Nästa spel\",\n      languages: \"Språk\",\n      programming_language: \"Programmeringsspråk\",\n      show_menu: \"Visa spelmeny\",\n      home: \"Hem\",\n      level: \"Nivå\",\n      skip: \"Hoppa över\",\n      game_menu: \"Spelmeny\",\n      restart: \"Börja om\",\n      goals: \"Mål\",\n      goal: \"Mål\",\n      running: \"Kör...\",\n      success: \"Du lyckades!\",\n      incomplete: \"Ej färdig\",\n      timed_out: \"Slut på tid\",\n      failing: \"Ingen framgång\",\n      reload: \"Ladda om\",\n      reload_title: \"Ladda om all kod?\",\n      reload_really: \"Är du säker på att du vill ladda om nivån från början?\",\n      reload_confirm: \"Ladda om allt\",\n      victory: \"Seger\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Genomförd\",\n      victory_sign_up: \"Registrera dig för att få uppdateringar\",\n      victory_sign_up_poke: \"Vill du ha de senaste nyheterna via mejl? Skapa ett gratiskonto så håller vi dig informerad!\",\n      victory_rate_the_level: \"Betygsätt nivån: \",\n      victory_return_to_ladder: \"Gå tillbaka till stegen\",\n      victory_saving_progress: \"Sparar framsteg\",\n      victory_go_home: \"Gå hem\",\n      victory_review: \"Berätta mer!\",\n      victory_review_placeholder: \"Hur tyckte du nivån var?\",\n      victory_hour_of_code_done: \"Är du klar?\",\n      victory_hour_of_code_done_yes: \"Ja, jag är klar med min Hour of Code!\",\n      victory_experience_gained: \"XP mottaget\",\n      victory_gems_gained: \"Vunna ädelstenar\",\n      victory_new_item: \"Nytt föremål\",\n      victory_new_hero: \"Ny hjälte\",\n      victory_viking_code_school: \"Jösses vilken svår nivå du just klarade! Om du inte redan är en mjukvaruutvecklare så borde du vara det. Du bev precis fast-tracked för antagning vid Viking Code School, där du kan ta dina kunskaper till en ny nivå och bli en professionell webbutvecklare på 14 veckor.\",\n      victory_become_a_viking: \"Bli en Viking\",\n      tome_cast_button_run: \"Kör\",\n      tome_cast_button_running: \"Kör...\",\n      tome_cast_button_ran: \"Körde\",\n      tome_submit_button: \"Lämna in\",\n      tome_reload_method: \"Ladda om den ursprungliga koden för den här metoden\",\n      tome_available_spells: \"Tillgängliga förmågor\",\n      tome_your_skills: \"Dina färdigheter\",\n      hints: \"Ledtrådar\",\n      hints_title: \"Ledtråd {{number}}\",\n      code_saved: \"Kod sparad\",\n      skip_tutorial: \"Hoppa över (esc)\",\n      keyboard_shortcuts: \"Kortkommandon\",\n      loading_start: \"Starta Nivå\",\n      problem_alert_title: \"Fixa din kod\",\n      time_current: \"Nu:\",\n      time_total: \"Max:\",\n      time_goto: \"Gå till:\",\n      non_user_code_problem_title: \"Kunde inte ladda nivå\",\n      infinite_loop_title: \"Oändlig loop upptäckt\",\n      check_dev_console_link: \"(instruktioner)\",\n      infinite_loop_try_again: \"Försök igen\",\n      infinite_loop_reset_level: \"Återställ Nivå\",\n      infinite_loop_comment_out: \"Kommentera bort min kod\",\n      tip_toggle_play: \"Spela/pausa med Ctrl+P.\",\n      tip_scrub_shortcut: \"Ctrl+] och Ctrl+[ spolar framåt och bakåt.\",\n      tip_guide_exists: \"Om du vill ha mer användbar information: Klicka på guiden högst upp i spelmenyn\",\n      tip_open_source: \"CodeCombat är 100% öppen källkod!\",\n      tip_tell_friends: \"Gillar du CodeCombat? Tipsa dina vänner om oss!\",\n      tip_beta_launch: \"CodeCombat startade sin beta i oktober 2013.\",\n      tip_think_solution: \"Tänk på lösningen, inte problemet.\",\n      tip_theory_practice: \"Teoretiskt sett så är det ingen skillnad mellan teori och praktik. Men i praktiken så är det. - Yogi Berra\",\n      tip_error_free: \"Det finns två sätt att skriva felfria program; endast det tredje fungerar. - Alan Perlis\",\n      tip_forums: \"Gå till forumen och berätta för oss vad du tycker!\",\n      tip_baby_coders: \"I framtiden är till och med bebisar ärkemagiker.\",\n      tip_harry: \"Du e' en trollkarl, \",\n      tip_binary: \"Det finns 10 sorters människor på jorden, de som försår binära tal och de som inte gör det.\",\n      tip_no_try: \"Gör. Eller gör inte. Försök finns inte. - Yoda\",\n      tip_patience: \"Tålamod du måste ha, unge Padawan. - Yoda\",\n      tip_documented_bug: \"En dokumenterad bugg är inte en bugg - det är en funktion.\",\n      tip_impossible: \"Allt verkar alltid omöjligt ända tills någon gör det. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Det är billigt att prata. Visa mig koden. - Linus Torvalds\",\n      tip_hardware_problem: \"Fråga: Hur många programmerare krävs för att byta en glödlampa?  Svar: Inga, det är ett hårdvaruproblem.\",\n      tip_no_code: \"Inge kod är snabbare än ingen kod.\",\n      tip_code_never_lies: \"Kod ljuger aldrig, kommentarer gör det ibland. — Ron Jeffries\",\n      tip_move_forward: \"Vad du än gör, fortsätt framåt. - Martin Luther King Jr.\",\n      tip_google: \"Ett problem du inte kan lösa? Googla det!\",\n      tip_adding_evil: \"Också en nypa ondska.\",\n      tip_hate_computers: \"Det är det som är grejen med folk som tror att de hatar datorer. Det de egentligen hatar är dåliga programmerare. - Larry Niven\",\n      tip_open_source_contribute: \"Du kan få CodeCombat att bli ännu bättre!\",\n      tip_recurse: \"Iteration är mänskligt, rekursion är gudomligt. - L. Peter Deutsch\",\n      share_this_project: \"Dela projektet med vänner eller familj:\",\n      ready_to_share: \"Redo att publicera ditt projekt?\",\n      view_gallery: \"Visa Galleri\",\n      keep_editing: \"Fortsätt redigera\"\n    },\n    apis: {\n      methods: \"Metoder\",\n      math: \"Matte\",\n      object: \"Objekt\",\n      string: \"Sträng\",\n      \"function\": \"Funktion\",\n      vector: \"Vektor\",\n      date: \"Datum\",\n      number: \"Nummer\"\n    },\n    play_game_dev_level: {\n      created_by: \"Skapad av {{name}}\",\n      created_during_hoc: \"Skapad under Hour of Code\",\n      restart: \"Starta om nivå\",\n      play: \"Spela nivå\",\n      play_more_codecombat: \"Spela mer CodeCombat\",\n      default_student_instructions: \"Klicka för att kontrollera din hjälte och vinn ditt spel!\",\n      goal_survive: \"Överlev.\",\n      goal_survive_time: \"Överlev i __seconds__ sekunder.\",\n      goal_defeat: \"Besegra alla fiender.\",\n      goal_defeat_amount: \"Besegrat __amount__ fiender.\",\n      goal_move: \"Flytta till alla röda X-märken.\",\n      goal_collect: \"Samla alla föremål.\",\n      goal_collect_amount: \"Samla __amount__ föremål.\"\n    },\n    game_menu: {\n      inventory_tab: \"Utrustning\",\n      save_load_tab: \"Spara/Ladda\",\n      options_tab: \"Inställningar\",\n      guide_tab: \"Guide\",\n      guide_video_tutorial: \"Videogenomgång\",\n      guide_tips: \"Tips\",\n      multiplayer_tab: \"Flerspelarläge\",\n      auth_tab: \"Registrera dig\",\n      inventory_caption: \"Utrusta din hjälte\",\n      choose_hero_caption: \"Välj hjälte, språk\",\n      options_caption: \"Konfigurera inställningar\",\n      guide_caption: \"Dokument och tips\",\n      multiplayer_caption: \"Spela med vänner!\",\n      auth_caption: \"Spara dina framsteg.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Visa topplistor\",\n      scores: \"Poäng\",\n      top_players: \"Toppspelare efter\",\n      day: \"Idag\",\n      week: \"Den här veckan\",\n      all: \"Genom tiderna\",\n      latest: \"Senaste\",\n      time: \"Tid\",\n      damage_taken: \"Mottagen skada\",\n      damage_dealt: \"Åsamkad skada\",\n      difficulty: \"Svårighetsgrad\",\n      gold_collected: \"Samlat guld\",\n      survival_time: \"Överlevde\",\n      defeated: \"Fiender besegrade\",\n      code_length: \"Rader av kod\"\n    },\n    inventory: {\n      equipped_item: \"Används\",\n      required_purchase_title: \"Krävs\",\n      available_item: \"Tillgänglig\",\n      restricted_title: \"Begränsad\",\n      should_equip: \"(dubbeklicka för att använda)\",\n      equipped: \"(används)\",\n      locked: \"(låst)\",\n      restricted: \"(begränsad på den här nivån)\",\n      equip: \"Använd\",\n      unequip: \"Sluta använda\",\n      warrior_only: \"Endast krigare\",\n      ranger_only: \"Endast Vandrare\",\n      wizard_only: \"Endast Trollkarl\"\n    },\n    buy_gems: {\n      few_gems: \"Ett par ädelstenar\",\n      pile_gems: \"Hög med ädelstenar\",\n      chest_gems: \"Kista med ädelstenar\",\n      purchasing: \"Köp pågår...\",\n      declined: \"Köp nekat\",\n      retrying: \"Serverfel, försöker igen.\",\n      prompt_title: \"Inte tillräckligt många ädelstenar\",\n      prompt_body: \"Vill du skaffa flera?\",\n      prompt_button: \"Gå till affären\",\n      recovered: \"Föregående köp av ädelstenar återskapat. Var vänlig och uppdatera sidan.\"\n    },\n    choose_hero: {\n      choose_hero: \"Välj hjälte\",\n      programming_language: \"Programspråk\",\n      programming_language_description: \"Vilket programspråk vill du använda?\",\n      \"default\": \"Standard\",\n      experimental: \"Experimentell\",\n      python_blurb: \"Enkelt men ändå kraftfullt, perfekt för nybörjare och experter.\",\n      javascript_blurb: \"Webbens språk. (Inte samma sak som Java.)\",\n      coffeescript_blurb: \"Trevligare JavaScript-syntax.\",\n      lua_blurb: \"Språk för spelskript.\",\n      status: \"Status\",\n      weapons: \"Vapen\",\n      weapons_warrior: \"Svärd - Kort räckvidd, ingen magi\",\n      weapons_ranger: \"Armborst, pistoler - Lång räckvidd, ingen magi\",\n      weapons_wizard: \"Trollspön, stavar - Lång räckvidd, magi\",\n      attack: \"Attack\",\n      health: \"Hälsa\",\n      speed: \"Hastighet\",\n      regeneration: \"Regeneration\",\n      range: \"Räckvidd\",\n      blocks: \"Blockerar\",\n      backstab: \"Hugg i ryggen\",\n      skills: \"Färdigheter\",\n      attack_1: \"Gör\",\n      attack_2: \"av noterad vapenskada för\",\n      attack_3: \".\",\n      health_1: \"Får\",\n      health_2: \"av noterad rustningshälsa för\",\n      health_3: \".\",\n      speed_1: \"Rör sig\",\n      speed_2: \"meter per sekund.\",\n      available_for_purchase: \"Tillgänlig att köpa\",\n      level_to_unlock: \"Nivå som låser upp:\",\n      restricted_to_certain_heroes: \"Det är bara vissa hjältar som kan spela den här nivån.\"\n    },\n    skill_docs: {\n      \"function\": \"funktion\",\n      method: \"metod\",\n      number: \"nummer\",\n      object: \"objekt\",\n      string: \"sträng\",\n      writable: \"skrivbar\",\n      read_only: \"endast läsning\",\n      action: \"Handling\",\n      spell: \"Trollformel\",\n      action_name: \"namn\",\n      action_cooldown: \"Tar\",\n      action_specific_cooldown: \"Återhämtningstid\",\n      action_damage: \"Skada\",\n      action_range: \"Räckvidd\",\n      action_radius: \"Radie\",\n      action_duration: \"Löptid\",\n      example: \"Exampel\",\n      ex: \"ex\",\n      current_value: \"Nuvarande värde\",\n      default_value: \"Standardvärde\",\n      parameters: \"Parametrar\",\n      required_parameters: \"Obligatoriska Parametrar\",\n      optional_parameters: \"Valfria parametrar\",\n      returns: \"Returnerar\",\n      granted_by: \"Ges av\"\n    },\n    save_load: {\n      granularity_saved_games: \"Sparat\",\n      granularity_change_history: \"Historik\"\n    },\n    options: {\n      general_options: \"Allmänna inställningar\",\n      volume_label: \"Volym\",\n      music_label: \"Musik\",\n      music_description: \"Stäng av/sätt på bakgrundsmusik.\",\n      editor_config_title: \"Redigerarinställningar\",\n      editor_config_livecompletion_description: \"Visar förslag medans du skriver\",\n      editor_config_invisibles_label: \"Visa osynliga\",\n      editor_config_invisibles_description: \"Visar osynliga tecken, till exempel mellanrum och nyradstecken.\",\n      editor_config_indentguides_label: \"Visa indenteringsguider\",\n      editor_config_indentguides_description: \"Visar vertikala linjer för att kunna se indentering bättre.\",\n      editor_config_behaviors_label: \"Smart beteende\",\n      editor_config_behaviors_description: \"Avsluta automatiskt hakparenteser, parenteser, och citat.\"\n    },\n    about: {\n      main_title: \"Om du vill lära dig programmera behlver du skriva (en hel del) kod.\",\n      main_description: \"PÅ CodeCombat, vårt jobb är att se till att du gör det med ett leende på läpparna.\",\n      mission_link: \"Uppdrag\",\n      mission_title: \"Vårt uppdrag: göra programmering tillgängligt för varje elev på Jorden.\",\n      nick_title: \"Medgrundare\",\n      matt_title: \"Medgrundare\",\n      cat_title: \"Chefshantverkare\",\n      scott_title: \"Medgrundare\",\n      titles_csm: \"Kundsucceschef\",\n      retrostyle_title: \"Illustration\",\n      retrostyle_blurb: \"RetroStyle Games\",\n      story_statistic_1c: \"Har börjat sin programmeringsresa genom CodeCombat\",\n      story_statistic_2a: \"Vi har översatt till över 50 languages — våra spelare kommer från\",\n      story_statistic_2b: \"190+ länder\"\n    },\n    versions: {\n      save_version_title: \"Spara ny version\",\n      new_major_version: \"Ny betydande version\",\n      submitting_patch: \"Skickar in rättning...\",\n      cla_prefix: \"För att spara ändringar måste du först godkänna vår\",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"JAG GODKÄNNER\",\n      owner_approve: \"En ägare måste godkänna ändringen innan den kan produktionssättas.\"\n    },\n    contact: {\n      contact_us: \"Kontakta CodeCombat\",\n      welcome: \"Kul att höra från dig! Använd formuläret för att skicka mejl till oss. \",\n      forum_prefix: \"För någonting offentligt, var vänlig testa \",\n      forum_page: \"vårt forum\",\n      forum_suffix: \" istället.\",\n      faq_prefix: \"Det finns också en\",\n      faq: \"FAQ\",\n      subscribe_prefix: \"Om du behöver hjälp med en nivå,\",\n      subscribe: \"köp en CodeCombat prenumeration.\",\n      subscribe_suffix: \"Sedan hjälper vi dig gärna med din kod.\",\n      subscriber_support: \"Eftersom du är en CodeCombat-prenumerant kommer ditt mejl att bli prioriterat.\",\n      screenshot_included: \"Inkluderar skärmbild.\",\n      where_reply: \"Vart ska vi skicka svaret?\",\n      send: \"Skicka Feedback\"\n    },\n    account_settings: {\n      title: \"Kontoinställningar\",\n      not_logged_in: \"Logga in eller skapa ett konto för att ändra dina inställningar.\",\n      me_tab: \"Jag\",\n      picture_tab: \"Profilbild\",\n      delete_account_tab: \"Ta bort ditt konto\",\n      wrong_email: \"Fel mejladress\",\n      wrong_password: \"Felaktigt lösenord\",\n      delete_this_account: \"Ta bort det här kontot för alltid\",\n      reset_progress_tab: \"Återställa alla nivåer\",\n      reset_your_progress: \"Vill du återställa alla nivåer och börja om från början\",\n      god_mode: \"Allsmäktigt läge\",\n      emails_tab: \"Mejladresser\",\n      admin: \"Administratör\",\n      manage_subscription: \"Klicka här för att hantera din prenumeration.\",\n      new_password: \"Nytt lösenord\",\n      new_password_verify: \"Verifiera\",\n      type_in_email: \"Skriv in din mejladress för att bekräfta borttagandet\",\n      type_in_email_progress: \"Skriv in din email för att bekräfta att du vill återställa alla nivåer och börja om från början.\",\n      type_in_password: \"En sak till, skriv in ditt lösenord.\",\n      email_subscriptions: \"Mejlprenumerationer\",\n      email_subscriptions_none: \"Inga mejlprenumerationer.\",\n      email_announcements: \"Meddelanden\",\n      email_announcements_description: \"Få mejl med de senaste nyheterna och utvecklingen på CodeCombat.\",\n      email_notifications: \"Underrättelser\",\n      email_notifications_summary: \"Kontroller för personliga, automatiska mejlunderrättelser relaterade till din aktivitet på CodeCombat.\",\n      email_any_notes: \"Alla underrättelser\",\n      email_any_notes_description: \"Stäng av för att hindra alla mejl om aktiviteter.\",\n      email_news: \"Nyheter\",\n      email_recruit_notes: \"Jobbtillfällen\",\n      email_recruit_notes_description: \"Om du spelar riktigt bra så kanske vi kontaktar dig för att erbjuda ett (bättre) jobb.\",\n      contributor_emails: \"Mejl för bidragare\",\n      contribute_prefix: \"Vi söker mer folk som vill var med och hjälpa till! Kolla in \",\n      contribute_page: \" bidragarsidan \",\n      contribute_suffix: \" för att få veta mer.\",\n      email_toggle: \"Växla alla\",\n      error_saving: \"Ett fel uppstod när ändringarna skulle sparas\",\n      saved: \"Ändringar sparade\",\n      password_mismatch: \"De angivna lösenorden stämmer inte överens.\",\n      password_repeat: \"Upprepa ditt lösenord.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Kortkommandon\",\n      space: \"Mellanslag\",\n      enter: \"Enter\",\n      press_enter: \"tryck enter\",\n      escape: \"Escape\",\n      shift: \"Shift\",\n      run_code: \"Kör nuvarande kod.\",\n      run_real_time: \"Kör i realtid.\",\n      continue_script: \"Fortsätt förbi nuvarande kod.\",\n      skip_scripts: \"Hoppa över all kod som kan hoppas över.\",\n      toggle_playback: \"Spela/Pausa.\",\n      scrub_playback: \"Spela bakåt och framåt genom tiden.\",\n      single_scrub_playback: \"Spela bakåt och framåt genom tiden, en frame i taget.\",\n      scrub_execution: \"Spela genom nuvarande magiska trollformel.\",\n      toggle_debug: \"Toggla debug display.\",\n      toggle_grid: \"Toggla grid overlay.\",\n      maximize_editor: \"Maximera/minimera kodredigeraren.\"\n    },\n    community: {\n      main_title: \"CodeCombat Community\",\n      introduction: \"Kolla in på vilka sätt du kan vara delaktig och välj det som låter mest kul. Vi ser fram emot att jobba med dig!\",\n      level_editor_prefix: \"Använd\",\n      level_editor_suffix: \"till att skapa och ändra nivåer. Användare har skapat nivåer till sina klasser, vänner, hackathons, elever och syskon. Om det låter svårt att skapa en nivå så kan du använda en av våra som grund!\",\n      thang_editor_prefix: \"Vi kallar enheter i spelet 'thangs'. Använd\",\n      thang_editor_suffix: \"till att ändra CodeCombats grafik. Låt enheter kasta saker, ändra riktningen på animeringar, ändra en enhets livslängd eller ladda upp din egen vektorgrafik.\",\n      article_editor_prefix: \"Sett ett misstag i något av våra dokument? Vill du göra instruktioner till dina egna skapelser? Ta en titt på\",\n      article_editor_suffix: \"och hjälp CodeCombatspelare att få så mycket ut från sin speltid som möjligt.\",\n      find_us: \"Här hittar du oss\",\n      social_github: \"Kolla in all vår kod på GitHub\",\n      social_blog: \"Läs CodeCombatbloggen på Sett\",\n      social_discource: \"Gå med i diskussionerna i vårt forum\",\n      social_facebook: \"Gilla CodeCombat på Facebook\",\n      social_twitter: \"Följ CodeCombat på Twitter\",\n      social_gplus: \"Följ CodeCombat på Google+\",\n      contribute_to_the_project: \"Bidra till projektet\"\n    },\n    clans: {\n      clan: \"Klan\",\n      clans: \"Klaner\",\n      new_name: \"Namn på ny klan\",\n      new_description: \"Beskrivning av ny klan\",\n      make_private: \"Gör klanen privat\",\n      subs_only: \"endast följare\",\n      create_clan: \"Skapa ny klan\",\n      private_preview: \"Förhandsgranska\",\n      private_clans: \"Privata klaner\",\n      public_clans: \"Publik klan\",\n      my_clans: \"Mina klaner\",\n      clan_name: \"Klanens namn\",\n      name: \"Namn\",\n      edit_clan_name: \"Ändra klanens namn\",\n      edit_clan_description: \"Ändra beskrivningen av klanen\",\n      edit_name: \"ändra namn\",\n      edit_description: \"ändra beskrivning\",\n      \"private\": \"(privat)\",\n      summary: \"Summering\",\n      average_level: \"Medelnivå\",\n      delete_clan: \"Ta bort klan\",\n      leave_clan: \"Lämna klan\",\n      join_clan: \"Gå med i klan\",\n      invite_1: \"Bjud in:\",\n      invite_2: \"*Bjud in spelare till klanen genom att skicka denna länk.\",\n      members: \"Medlemmar\",\n      progress: \"Framsteg\",\n      not_started_1: \"ej påbörjad\",\n      started_1: \"påbörjad\",\n      complete_1: \"avklarad\",\n      exp_levels: \"Expandera nivåer\",\n      rem_hero: \"Ta bort hjälte\",\n      status: \"Status\",\n      complete_2: \"Avklarad\",\n      started_2: \"Påbörjad\",\n      not_started_2: \"Ej påbörjad\",\n      view_solution: \"Klicka för att se lösning.\",\n      view_attempt: \"Klicka för att se försök.\",\n      latest_achievement: \"Senaste prestation\",\n      playtime: \"Speltid\",\n      last_played: \"Senast spelad\"\n    },\n    courses: {\n      create_new_class: \"Skapa ny klass\",\n      edit_settings1: \"Redigera klassinställningar\",\n      add_students: \"Lägg till elever\",\n      stats: \"Statistik\",\n      total_students: \"Totalt antal elever:\",\n      average_time: \"Genomsnittlig speltid:\",\n      total_time: \"Total speltid:\",\n      average_levels: \"Genomsnittligt antal nivåer avklarade:\",\n      total_levels: \"Totat antal nivåer avklarade\",\n      students: \"Elever\",\n      concepts: \"Koncept\",\n      play_time: \"Speltid:\",\n      completed: \"Avslutade:\"\n    },\n    project_gallery: {\n      no_projects_published: \"Var först med att publicera ett projekt i den här kursen!\",\n      view_project: \"Visa projekt\",\n      edit_project: \"Redigera projelt\"\n    },\n    classes: {\n      archmage_title: \"Ärkemagiker\",\n      archmage_title_description: \"(Kodare)\",\n      archmage_summary: \"Om du är en utvecklare som är intresserad av att koda utbildningsspel, bli då en ärkemagiker och hjälp oss bygga CodeCombat!\",\n      artisan_title: \"Hantverkare\",\n      artisan_title_description: \"(Nivåbyggare)\",\n      artisan_summary: \"Bygg och dela nivåer till dig och dina vänner. Bli en hantverkare för att lära dig konsten att lära andra att koda.\",\n      adventurer_title: \"Äventyrare\",\n      adventurer_title_description: \"(Nivåtestare)\",\n      adventurer_summary: \"Få nya nivåer (till och med prenumerantinnehåll) gratis en vecka innan alla andra och hjälp oss fixa buggar innan nivåerna blir publika.\",\n      scribe_title: \"Skriftlärd\",\n      scribe_title_description: \"(Artikelredigerare)\",\n      scribe_summary: \"Bra kod behöver bra dokumentation. Skriv, ändra och förbättra dokumenten som läses av miljoner spelare över hela världen.\",\n      diplomat_title: \"Diplomat\",\n      diplomat_title_description: \"(Översättare)\",\n      diplomat_summary: \"CodeCombat är översätts till över 45 språk av våra diplomater. Hjälp oss genom att göra översättningar.\",\n      ambassador_title: \"Ambassadör\",\n      ambassador_title_description: \"(Support)\",\n      ambassador_summary: \"Tämj forumanvändarna och hjälp dem som har frågor. Ambassadörerna representerar CodeCombat ute i världen.\",\n      teacher_title: \"Lärare\"\n    },\n    editor: {\n      main_title: \"Redigerare: CodeCombat\",\n      article_title: \"Redigerare: Artiklar\",\n      thang_title: \"Redigerare: Enheter\",\n      level_title: \"Redigerare: Nivåer\",\n      course_title: \"Redigerare: Kurser\",\n      achievement_title: \"Redigerare: Prestationer\",\n      poll_title: \"Redigerare: Omröstning\",\n      back: \"Backa\",\n      revert: \"Återställ\",\n      revert_models: \"Återställ modeller\",\n      pick_a_terrain: \"Välj terräng\",\n      dungeon: \"Håla\",\n      indoor: \"Inomhus\",\n      desert: \"Öken\",\n      grassy: \"Gräs\",\n      mountain: \"Berg\",\n      glacier: \"Glaciär\",\n      small: \"Liten\",\n      large: \"Stor\",\n      more: \"Mer\",\n      wiki: \"Wiki\",\n      thang_colors: \"Färger\",\n      level_some_options: \"Några inställningar?\",\n      level_tab_thangs: \"Enheter\",\n      level_tab_scripts: \"Skript\",\n      level_tab_components: \"Komponenter\",\n      level_tab_systems: \"System\",\n      level_tab_docs: \"Dokumentation\",\n      level_tab_thangs_title: \"Nuvarande enheter\",\n      level_tab_thangs_all: \"Alla\",\n      level_tab_thangs_conditions: \"Startvillkor\",\n      level_tab_thangs_add: \"Lägg till enheter\",\n      level_tab_thangs_search: \"Sök enheter\",\n      add_components: \"Lägg till komponenter\",\n      component_configs: \"Konfigurera komponenter\",\n      config_thang: \"Dubbelklicka för att konfigurera en enhet\",\n      \"delete\": \"Ta bort\",\n      duplicate: \"Duplicera\",\n      stop_duplicate: \"Sluta duplicera\",\n      rotate: \"Rotera\",\n      level_component_tab_title: \"Nuvarande komponenter\",\n      level_component_btn_new: \"Skapa ny komponent\",\n      level_systems_tab_title: \"Nuvarande system\",\n      level_systems_btn_new: \"Skapa nytt system\",\n      level_systems_btn_add: \"Lägg till system\",\n      level_components_title: \"Tillbaka till alla enheter\",\n      level_components_type: \"Typ\",\n      level_component_edit_title: \"Redigera komponent\",\n      level_component_config_schema: \"Konfigurera schema\",\n      level_system_edit_title: \"Redigera system\",\n      create_system_title: \"Skapa nytt system\",\n      new_component_title: \"Skapa ny komponent\",\n      new_component_field_system: \"System\",\n      new_article_title: \"Skapa ny artikel\",\n      new_thang_title: \"Skapa ny enhetstyp\",\n      new_level_title: \"Skapa ny nivå\",\n      new_article_title_login: \"Logga in för att skapa en ny artikel\",\n      new_thang_title_login: \"Logga in för att ska en ny typ av enhet\",\n      new_level_title_login: \"Logga in för att skapa en ny nivå\",\n      new_achievement_title: \"Skapa en ny prestation\",\n      new_achievement_title_login: \"Logga in för att skapa en ny prestation\",\n      new_poll_title: \"Skapa en ny omröstning\",\n      new_poll_title_login: \"Logga in för att skapa en ny omröstning\",\n      article_search_title: \"Sök artiklar här\",\n      thang_search_title: \"Sök enhetstyper här\",\n      level_search_title: \"Sök nivåer här\",\n      achievement_search_title: \"Sök prestationer\",\n      poll_search_title: \"Sök röstningar\",\n      no_achievements: \"Inga prestationer har lagts till för den här nivån än.\",\n      clear_storage: \"Rensa dina lokala ändringar\"\n    },\n    article: {\n      edit_btn_preview: \"Förhandsgranska\",\n      edit_article_title: \"Redigera artikel\"\n    },\n    polls: {\n      priority: \"Prioritet\"\n    },\n    contribute: {\n      page_title: \"Att bidra\",\n      intro_blurb: \"CodeCombat är 100% öppen källkod! Hundratals hängivna spelare har hjälpt till att skapa det spel du ser idag. Häng med oss och skriv nästa kapitel i CodeCombats uppdrag att lära världen att koda!\",\n      alert_account_message_intro: \"Hej där!\",\n      alert_account_message: \"För att prenumerera på klassmejl behöver du vara inloggad först.\",\n      archmage_introduction: \"En av de bästa delarna med att bygga spel är att de syntetiserar så många olika saker. Grafik, ljud, realtidsnätverkande, socialt netvärkande och så klart många av de vanligare aspekterna av programmering, från databashantering och serveradministration på låg nivå till användargränssnitt och gränsnittsbyggande. Det finns mycket att göra, och om du är en erfaren programmerare som längtar efter att dyka ner i CodeCombats detaljer kan den här klassen vara för dig. Vi skulle älska din hjälp med att bygga det bästa programmeringsspelet någonsin.\",\n      class_attributes: \"Klassattribut\",\n      archmage_attribute_1_pref: \"Kunskap om \",\n      archmage_attribute_1_suf: \", eller en vilja att lära. Det mesta av vår kod är i det här språket. Är du ett fan av Ruby eller Python kommer du att känna dig hemma. Det är Javascript, men med en trevligare syntax.\",\n      archmage_attribute_2: \"Viss erfarenhet av programmering och personligt initiativ. Vi hjälper dig att bli orienterad, men kan inte lägga mycket tid på att träna dig.\",\n      how_to_join: \"Hur man går med\",\n      join_desc_1: \"Alla kan hjälpa till! Kolla bara in vår \",\n      join_desc_2: \"för att komma igång, och kryssa i rutan nedanför för att markera att du är en modig ärkemagiker och få de senaste nyheterna via email. Vill du chatta om vad som ska göras eller hur du bli mer involverad?\",\n      join_desc_3: \", eller hitta oss i vår \",\n      join_desc_4: \"så tar vi det därifrån!\",\n      join_url_email: \"Maila oss\",\n      join_url_slack: \"publik Slackkanal\",\n      archmage_subscribe_desc: \"Få mail om nya kodmöjligheter och tillkännagivanden.\",\n      artisan_introduction_pref: \"Vi måste bygga fler nivåer! Människor kräver mer innehåll, och vi kan bara bygga en viss mängd själva. Just nu är arbetsstation nivå ett; vår nivåredigerare är knappt användbar ens av dess skapare, så var uppmärksam. Om du har visioner av kampanjer som sträcker sig från for-loopar till\",\n      artisan_introduction_suf: \", är den här klassen kanske något för dig.\",\n      artisan_attribute_1: \"Någon erfarenhet av att bygga liknande innehåll vore bra, som till exempel Blizzards nivåredigerare. Det är dock inget krav!\",\n      artisan_attribute_2: \"En vilja att göra en hel del testande och upprepning. För att göra bra nivåer, måste du ta dem till andra och se dem spela den, och vara beredd på att hitta många saker att laga.\",\n      artisan_attribute_3: \"För tillfället, uthållighet i klass med en äventyrare. Vår nivåredigerare är väldigt preliminär och frustrerande att använda. Du är varnad!\",\n      artisan_join_desc: \"Använd nivåredigeraren i dessa steg, mer eller mindre:\",\n      artisan_join_step1: \"Läs dokumentationen.\",\n      artisan_join_step2: \"Skapa en ny nivå och utforska existerande nivåer.\",\n      artisan_join_step3: \"Hitta oss i vårt offentliga Slack-rum för hjälp.\",\n      artisan_join_step4: \"Anslå dina nivåer på forumet för feedback.\",\n      artisan_subscribe_desc: \"Få mail om nivåredigeraruppdateringar och tillkännagivanden\",\n      adventurer_introduction: \"Låt oss vara tydliga med din roll: du är tanken. Du kommer att ta stor skada. Vi behöver människor som kan testa splitternya nivåer och hjälpa till att identifiera hur man kan göra saker bättre. Smärtan kommer att vara enorm; att göra bra spel är en lång process och ingen gör rätt första gången. Om du kan härda ut och tål mycket stryk är det här klassen för dig.\",\n      adventurer_attribute_1: \"En törst efter att lära sig. Du vill lära dig att koda och vi vill lära dig att koda. Du kommer förmodligen att vara den som lär ut mest i det här fallet, dock.\",\n      adventurer_attribute_2: \"Karismatisk. Var varsammen tydlig med vad som behöver förbättras, och erbjud förslag på hur förbättringar kan ske.\",\n      adventurer_join_pref: \"Antingen träffar (eller rekryterar!) du en hantverkare och jobbar med denna, eller så kryssar du i rutan nedanför för att få mail när det finns nya nivåer att testa. Vi kommer också att anslå nivåer som behöver granskas på nätverk som\",\n      adventurer_forum_url: \"vårt forum\",\n      adventurer_join_suf: \"så om du föredrar att bli notifierad på sådana sätt, bli medlem där!\",\n      adventurer_subscribe_desc: \"Få mail när det finns nya nivåer att testa.\",\n      scribe_introduction_pref: \"CodeCombat kommer inte att vara bara ett gäng nivåer. Det kommer också att inkludera en resurs för kunskap, en wiki av programmeringskoncept som nivåer kan ansluta till. På det sättet slipper varje hantverkare förklara i detalj vad en jämförelseoperator är, utan kan bara länka sin nivå till artikeln som förklarar det och redan är skriven, till spelarens uppbyggelse. Någonting i stil med vad \",\n      scribe_introduction_url_mozilla: \"Mozilla Developer Network\",\n      scribe_introduction_suf: \" har byggt. Om du tycker att det är kul att uttrycka programmeringskoncept i Markdown-form, är det här klassen för dig.\",\n      scribe_attribute_1: \"Förmåga med ord är i princip allt du behöver. Inte bara grammatik och stavning, utan förmåga att förmedla komplicerade idéer till andra.\",\n      contact_us_url: \"Kontakta oss\",\n      scribe_join_description: \"Berätta lite om dig själv, din erfarenhet med programmering och vilka saker du skulle vilja skriva om. Vi går vidare därifrån!\",\n      scribe_subscribe_desc: \"Få mail om tillkännagivanden om artiklar.\",\n      diplomat_introduction_pref: \"Om vi lärde oss någonting från \",\n      diplomat_launch_url: \"lanseringen i oktober\",\n      diplomat_introduction_suf: \"är det att det finns ett stort intresse för CodeCombat i andra länder! Vi bygger en kår av översättare ivriga att förvandla en samling ord till en annan samling ord för att få CodeCombat så tillgänglig i världen som möjligt. Om du gillar att få tjuvkikar på kommande innehåll och att få dessa nivåer till de andra i ditt land så snart som möjligt är det här kanske klassen för dig.\",\n      diplomat_attribute_1: \"Flytande engelska och språket du vill översätta till. När man förmedlar komplicerade idéer är det viktigt att ha ett starkt grepp om båda!\",\n      diplomat_i18n_page_prefix: \"Du kan börja översätta nivåer genom att gå till vår\",\n      diplomat_i18n_page: \"översättningssida\",\n      diplomat_i18n_page_suffix: \", eller använda vårt gränssnitt och hemsida på GitHub.\",\n      diplomat_join_pref_github: \"Hitta ditt språks locale-fil \",\n      diplomat_github_url: \"på GitHub\",\n      diplomat_join_suf_github: \", redigera den online, och skicka en ryckförfrågan. Kryssa också i rutan här nedanför för att hålla dig uppdaterad om nya internationaliseringsutvecklingar.\",\n      diplomat_subscribe_desc: \"Få mail om i18n-utvecklingar och nivåer att översätta.\",\n      ambassador_introduction: \"Det är en gemenskap vi bygger, och du är anslutningarna. Vi har Olark-chatter, mail och sociala nätverk med många människor att prata med och hjälpa bekanta sig med spelet och lära sig från. Om du vill hjälpa människor att bli involverade och ha kul, och ha bra koll på CodeCombats puls och var vi är på väg, kanske det här är klassen för dig.\",\n      ambassador_attribute_1: \"Kommunikationsfärdigheter. Kunna identifiera problemen spelarna har och hjälpa till att lösa dem. Också att hålla resten av oss informerade om vad spelarna säger, vad de gillar och vad de inte gillar och vad de vill ha mer av!\",\n      ambassador_join_desc: \"berätta om dig själv, vad du har gjort och vad du skulle vara intresserad av att göra. Vi tar det därifrån!\",\n      ambassador_join_note_strong: \"Notera\",\n      ambassador_join_note_desc: \"En av våra högsta prioriteringar är att bygga ett flerspelarläge där spelare som har problem med att lösa nivåer kan kalla på trollkarlar av en högre nivå för att hjälpa dem. Det kommer att vara ett jättebra sätt för ambassadörer att göra sin grej. Vi håller dig informerad!\",\n      ambassador_subscribe_desc: \"Få mail om supportuppdateringar och flerspelarutvecklingar\",\n      changes_auto_save: \"Förändringar sparas automatiskt när du ändrar kryssrutor.\",\n      diligent_scribes: \"Våra flitiga skriftlärda:\",\n      powerful_archmages: \"Våra kraftfulla ärkemagiker:\",\n      creative_artisans: \"Våra kreativa hantverkare:\",\n      brave_adventurers: \"Våra modiga äventyrare:\",\n      translating_diplomats: \"Våra översättande diplomater:\",\n      helpful_ambassadors: \"Våra hjälpfulla ambassadörer:\"\n    },\n    ladder: {\n      my_matches: \"Mina matcher\",\n      simulate: \"Simulera\",\n      simulation_explanation: \"Genom att simulera matcher kan du få dina matcher rankade fortare.\",\n      simulate_games: \"Simulera matcher!\",\n      games_simulated_by: \"Spel simulerade av dig:\",\n      games_simulated_for: \"Spel simulerade åt dig:\",\n      games_simulated: \"Simulerade spel\",\n      games_played: \"Spelade spel\",\n      ratio: \"Förhållande\",\n      leaderboard: \"Resultattavla\",\n      battle_as: \"Kämpa som \",\n      summary_your: \"Dina \",\n      summary_matches: \"Matcher - \",\n      summary_wins: \" Vinster, \",\n      summary_losses: \" Förlustar\",\n      rank_no_code: \"Ingen ny kod att ranka\",\n      rank_my_game: \"Ranka min match!\",\n      rank_submitting: \"Skickar...\",\n      rank_submitted: \"Inskickad för rankning\",\n      rank_failed: \"Kunde inte ranka\",\n      rank_being_ranked: \"Matchen blir rankad\",\n      help_simulate: \"Hjälp till att simulera spel?\",\n      code_being_simulated: \"Din nya kod håller på att bli simulerad av andra spelare för rankning. Detta kommer att uppdateras allt eftersom nya matcher kommer in.\",\n      no_ranked_matches_pre: \"Inga rankade matcher för \",\n      no_ranked_matches_post: \" laget! Spela mot några motståndare och kom sedan tillbaka it för att få din match rankad.\",\n      choose_opponent: \"Välj en motståndare\",\n      select_your_language: \"Välj språk!\",\n      tutorial_play: \"Spela tutorial\",\n      tutorial_recommended: \"Rekommenderas om du aldrig har spelat tidigare\",\n      tutorial_skip: \"Hoppa över tutorial\",\n      tutorial_not_sure: \"Inte säker på vad som händer?\",\n      tutorial_play_first: \"Spela tutorial först.\",\n      simple_ai: \"Enkel AI\",\n      warmup: \"Uppvärmning\",\n      friends_playing: \"Vänner spelar\",\n      log_in_for_friends: \"Logga in för att spela med dina vänner!\",\n      watch_victory: \"Se din seger\",\n      tournament_started: \", började\",\n      tournament_ends: \"Turnering slutar\",\n      tournament_ended: \"Turnering slutade\",\n      tournament_rules: \"Turneringsregler\",\n      rules: \"Regler\",\n      winners: \"Vinnare\"\n    },\n    user: {\n      stats: \"Stats\",\n      singleplayer_title: \"Enspelarnivåer\",\n      multiplayer_title: \"Flerspelarnivåer\",\n      achievements_title: \"Prestationer\",\n      last_played: \"Senast spelad\",\n      status: \"Status\",\n      status_completed: \"Avklarad\",\n      status_unfinished: \"Ej avklarad\",\n      no_singleplayer: \"Inga spel i enkelspelarläge än.\",\n      no_multiplayer: \"Inga spel i flerspelarläge än.\",\n      no_achievements: \"Inga prestationer än.\",\n      favorite_prefix: \"Favoritspråk: \",\n      not_member_of_clans: \"Inte medlem av någon klan än.\",\n      certificate_view: \"Visa certifikat\",\n      certificate_click_to_view: \"Klicka för att visa certifikat\"\n    },\n    achievements: {\n      last_earned: \"Senast förvärvad den\",\n      amount_achieved: \"Antal\",\n      achievement: \"Prestation\"\n    },\n    account: {\n      payments: \"Betalningar\",\n      subscription: \"Prenumeration\",\n      invoices: \"Fakturor\",\n      service_web: \"Webb\",\n      paid_on: \"Betalat den\",\n      price: \"Pris\",\n      gems: \"Ädelstenar\",\n      active: \"Aktiv\",\n      cost: \"Kostnad\",\n      next_payment: \"Nästa betalning\",\n      card: \"Kort\"\n    },\n    loading_error: {\n      could_not_load: \"Fel vid laddning från servern\",\n      connection_failure: \"Anslutning Misslyckades\",\n      connection_failure_desc: \"Det ser inte ut som du är ansluten till internet! Kontrollera din nätverksanslutning och ladda om sidan.\",\n      login_required: \"Inloggning krävs\",\n      login_required_desc: \"Du behöver vara inloggad för att komma åt sidan.\",\n      unauthorized: \"Du behöver vara inloggad. Har du kakor avakriverade?\",\n      forbidden: \"Förbjudet\",\n      forbidden_desc: \"Åh nej, det finns inget vi kan visa dig här! Se till att du är inloggad med rätt konto, eller besök en av länkarna under för att gå tillbaka till programmeringen!\",\n      not_found_desc: \"Hm, det finns inget här. Besök en av följande länkar för att komma tillbaka till programmeringen!\",\n      not_allowed: \"Metod ej tillåten.\",\n      server_error: \"Serverfel.\",\n      unknown: \"Okänt fel\",\n      general_desc: \"Något gick fel, och det är antagligen vårt fel. Prova vänta en stund och ladda om sidan, eller besök en av följande länkar för att gå tillbaka till programmeringen!\"\n    },\n    delta: {\n      no_changes: \"Inga ändringar\"\n    },\n    legal: {\n      page_title: \"Juridik\",\n      opensource_description_prefix: \"Spana in \",\n      github_url: \"vår GitHub\",\n      opensource_description_center: \" och hjälp till om du vill! CodeCombat är byggt på dussintals projekt med öppen källkod, och vi älskar dem. Se \",\n      archmage_wiki_url: \"vår Ärkemagiker-wiki\",\n      opensource_description_suffix: \"för en lista över mjukvaran som gör detta spel möjligt.\",\n      practices_title: \"Respektfulla \\\"best practices\\\"\",\n      practices_description: \"Dessa är våra löften till dig, spelaren, på lite mindre juristspråk.\",\n      privacy_title: \"Integritet\",\n      security_title: \"Säkerhet\",\n      security_description: \"Vi strävar efter att hålla din personliga information säker. Eftersom vår källkod är öppen är vår det fritt fram för vem som helst att granska och förbättra våra säkerhetssystem.\",\n      email_title: \"Mejl\",\n      email_description_prefix: \"Vi kommer inte att översvämma dig med spam. Genom \",\n      email_settings_url: \"dina mejlinställningar\",\n      email_description_suffix: \"eller genom länkar i mejlen vi skickar kan du ändra dina inställningar och lätt avprenumerera när som helst.\",\n      cost_title: \"Kostnad\",\n      copyrights_title: \"Upphovsrätt och licenser\",\n      contributor_title: \"Överenskommelse för bidragarlicens\",\n      contributor_description_prefix: \"Alla bidrag, både på sajten och på vårt GitHub-repo, faller under vår\",\n      cla_url: \"CLA\",\n      contributor_description_suffix: \", som du borde godkänna innan du börjar bidra.\",\n      code_title: \"Kod - MIT\",\n      mit_license_url: \"MIT license\",\n      code_description_suffix: \"Detta inkluderar all kod i system och komponenter som gjorts tillgänglig för CodeCombat i syftet att skapa nivåer.\",\n      art_title: \"Konst/Musik - Creative Commons \",\n      art_description_prefix: \"Allt gemensamt innehåll är tillgängligt under\",\n      cc_license_url: \"Creative Commons Erkännande 4.0 Internationell-licensen\",\n      art_description_suffix: \"Gemensamt innehåll är vad som helst som gjorts allmänt tillgängligt för CodeCombat i syfte att skapa nivåer. Detta inkluderar:\",\n      art_music: \"Musik\",\n      art_sound: \"Ljud\",\n      art_artwork: \"Illustrationer\",\n      art_sprites: \"Sprites\",\n      art_other: \"Allt (icke-kod) kreativt arbete som görs tillgängliga när nivåer skapas.\",\n      art_access: \"För tillfället finns det inget universellt, enkelt system för att hämta dessa tillgångar. Allmänt gäller: hämta dem från URL:erna som sajten använder, kontakta oss för hjälp, eller hjälp oss att utöka sajten för att göra dessa tillgångar mer lättillgängliga.\",\n      art_paragraph_1: \"För tillskrivning, var vänlig namnge och länka till codecombat.com i närheten av var källan används eller där det är passande för mediet. Till exempel:\",\n      use_list_1: \"Om det används i en film eller ett annat spel, inkludera codecombat.com i eftertexterna.\",\n      use_list_2: \"Om det används på en webbplats, inkludera en länk nära användandet, till exempel under en bild eller i en allmän tilldelningssida där du också kan nämna andra Create Commons-resurser och öppen programvara som används på webbplatsen. Någonting som redan tydligt refererar till CodeCombat, exempelvis en bloggpost som nämner CodeCombat, behöver ingen separat tillskrivning.\",\n      art_paragraph_2: \"Om innehållet som används inte är skapat av CodeCombat utan istället av en användare av codecombat.com, tillskriv dem istället, och följ tillskrivningsinstruktioner som ges i den resursens beskrivning om det finns några.\",\n      rights_title: \"Rättigheter förbehålls\",\n      rights_desc: \"Alla rättigheter förbehålls för själva nivåerna. Detta inkluderar:\",\n      rights_scripts: \"Script\",\n      rights_unit: \"Enhetskonfiguration\",\n      rights_writings: \"Skifter\",\n      rights_media: \"Media (ljud, musik) och annat kreativt innehåll som skapats specifikt för denna nivå och inte gjorts allmänt tillgängligt när nivåer skapats.\",\n      rights_clarification: \"För att klargöra, allt som gjorts tillgängligt i nivåredigeraren i syfte att skapa nivåer är under CC, medan innehållet skapat med nivåredigeraren eller uppladdat under skapandet inte är detta.\",\n      nutshell_title: \"I ett nötskal\",\n      nutshell_description: \"Alla resurser vi tillhandahåller i nivåredigeraren är gratis att använda som du vill för att skapa nivåer. Men vi reserverar oss rättigheten att begränsa distribution av nivåerna själva (som skapas på codecombat.com) så att de kan tas betalt för i framtiden, om det är så det blir.\",\n      canonical: \"Den engelska versionen av detta dokument är den definitiva, erkända versionen. Om det finns några skillnader mellan översättningar är det det engelska dokumentet som tar företräde.\"\n    },\n    calendar: {\n      year: \"År\",\n      day: \"Dag\",\n      month: \"Månad\",\n      january: \"Januari\",\n      february: \"Februari\",\n      march: \"Mars\",\n      april: \"April\",\n      may: \"Maj\",\n      june: \"Juni\",\n      july: \"Juli\",\n      august: \"Augusti\",\n      september: \"September\",\n      october: \"Oktober\",\n      november: \"November\",\n      december: \"December\"\n    },\n    server_error: {\n      email_taken: \"Epostadress redan taget\",\n      username_taken: \"Användarnamn redan taget\"\n    },\n    esper: {\n      line_no: \"Rad $1: \",\n      reference_error: \"Referensfel: \",\n      argument_error: \"Argumentfel: \",\n      type_error: \"Typfel: \",\n      syntax_error: \"Syntaxfel: \",\n      error: \"Fel: \",\n      x_not_a_function: \"$1 är ingen funktion\",\n      x_not_defined: \"$1 är inte definerad\",\n      spelling_issues: \"Se upp för stavfel: menade du `$1` istället för `$2`?\",\n      capitalization_issues: \"Se upp för kapitalisering: `$1` borde vara `$2`.\",\n      py_empty_block: \"Tom $1. Sätt 4 mellanslag framför satserna inuti $2 satsen.\",\n      fx_missing_paren: \"Om du vill använda `$1` som en funktion behöver du`()`\",\n      unterminated_string: \"Oavslutat sträng. Lägg till en matchande `\\\"` i slutet av din sträng.\",\n      missing_semicolon: \"Saknar semikolon.\",\n      missing_quotes: \"Saknar citattecken. Prova `$1`\",\n      argument_type: \"`$1`s argument `$2` borde ha typen `$3`, men fick `$4`: `$5`.\",\n      argument_type2: \"`$1`s argument `$2` borde ha typen `$3`, men fick `$4`.\",\n      attack_capitalization: \"Attackera $1, inte $2. (Versaler är viktiga.)\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbG9jYWxlL3N2LmNvZmZlZT85NGY1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0VBQUEsbUJBQW1CLFNBQW5CO0VBQThCLG9CQUFvQixTQUFsRDtFQUE2RCxhQUU1RTtJQUFBLFVBc0ZFO01BQUEsbUJBQW1CLGtCQUFuQjtNQUNBLGVBQWUsZUFEZjtNQUVBLFVBQVUsVUFGVjtNQUlBLGNBQWMsZUFKZDtNQUtBLGNBQWMsYUFMZDtNQU1BLFlBQVksU0FOWjtNQVFBLGVBQWUseUhBUmY7TUFVQSxXQUFXLGtFQVZYO01BV0Esc0JBQXNCLGlHQVh0QjtNQXFDQSx5QkFBeUIsc0NBckN6QjtNQXVDQSxXQUFXLDhDQXZDWDtNQWlEQSxpQkFBaUIsbUJBakRqQjtNQWtEQSxjQUFjLG9CQWxEZDtNQW9EQSxLQUFLLHdCQXBETDtNQXFEQSxhQUFhLGtCQXJEYjtNQTBEQSxjQUFjLHNCQTFEZDtNQTJEQSxjQUFjLGlCQTNEZDtNQTZEQSxlQUFlLHFCQTdEZjtLQXRGRjtJQXdKQSxLQUlFO01BQUEsS0FBSyxPQUFMO01BQ0EsTUFBTSxPQUROO01BRUEsV0FBVyxXQUZYO01BR0EsU0FBUyxXQUhUO01BSUEsTUFBTSxPQUpOO01BS0EsT0FBTyxPQUxQO01BTUEsU0FBUyxPQU5UO01BT0EsWUFBWSxZQVBaO01BUUEsU0FBUyxRQVJUO01BU0EsTUFBTSxLQVROO01BVUEsWUFBWSxPQVZaO01BV0EsT0FBTyxTQVhQO01BYUEsT0FBTyxRQWJQO01BY0EsU0FBUyxTQWRUO01BZUEsZ0JBQWdCLHFCQWZoQjtNQWdCQSxlQUFlLGNBaEJmO01BaUJBLFlBQVksYUFqQlo7TUFtQkEsU0FBUyxnQkFuQlQ7TUEwQkEsU0FBUyxRQTFCVDtNQTJCQSxjQUFjLGVBM0JkO01BNEJBLGFBQWEsd0JBNUJiO01BaUNBLFdBQVcseUJBakNYO01Ba0NBLFdBQVcsc0JBbENYO0tBNUpGO0lBbU1BLE9BQ0U7TUFBQSxPQUFP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O01BTUEsT0FBTyxPQU5QO01BT0EsS0FBSyxLQVBMO01BUUEsTUFBTSxNQVJOO01BU0EsTUFBTSxNQVROO01BVUEsUUFBUSxTQVZSO01BV0EsV0FBVyxXQVhYO01BWUEsU0FBUyxTQVpUO01BYUEsVUFBVSxVQWJWO01BY0EsVUFBVSxVQWRWO0tBdGtGRjtJQTZsRkEsY0FDRTtNQUFBLGFBQWEseUJBQWI7TUFDQSxnQkFBZ0IsMEJBRGhCO0tBOWxGRjtJQWltRkEsT0FDRTtNQUFBLFNBQVMsVUFBVDtNQUVBLGlCQUFpQixlQUZqQjtNQUdBLGdCQUFnQixlQUhoQjtNQUlBLFlBQVksVUFKWjtNQUtBLGNBQWMsYUFMZDtNQU1BLE9BQU8sT0FOUDtNQU9BLGtCQUFrQixzQkFQbEI7TUFRQSxlQUFlLHNCQVJmO01BU0EsaUJBQWlCLHVEQVRqQjtNQVVBLHVCQUF1QixrREFWdkI7TUFXQSxnQkFBZ0IsNkRBWGhCO01BWUEsa0JBQWtCLHdEQVpsQjtNQWNBLHFCQUFxQix1RUFkckI7TUFlQSxtQkFBbUIsbUJBZm5CO01BZ0JBLGdCQUFnQixnQ0FoQmhCO01BaUJBLGVBQWUsK0RBakJmO01Ba0JBLGdCQUFnQix5REFsQmhCO01Bb0JBLHVCQUF1QiwrQ0FwQnZCO0tBbG1GRjtHQUZlIiwiZmlsZSI6IjEwODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZURlc2NyaXB0aW9uOiBcIlN2ZW5za2FcIiwgZW5nbGlzaERlc2NyaXB0aW9uOiBcIlN3ZWRpc2hcIiwgdHJhbnNsYXRpb246XG5cbiAgbmV3X2hvbWU6XG4jICAgIHRpdGxlOiBcIkNvZGVDb21iYXQgLSBDb2RpbmcgZ2FtZXMgdG8gbGVhcm4gUHl0aG9uIGFuZCBKYXZhU2NyaXB0XCJcbiMgICAgbWV0YV9kZXNjcmlwdGlvbjogXCJMZWFybiB0eXBlZCBjb2RlIHRocm91Z2ggYSBwcm9ncmFtbWluZyBnYW1lLiBMZWFybiBQeXRob24sIEphdmFTY3JpcHQsIGFuZCBIVE1MIGFzIHlvdSBzb2x2ZSBwdXp6bGVzIGFuZCBsZWFybiB0byBtYWtlIHlvdXIgb3duIGNvZGluZyBnYW1lcyBhbmQgd2Vic2l0ZXMuXCJcbiMgICAgYnVpbHRfZm9yX3RlYWNoZXJzX3RpdGxlOiBcIkEgQ29kaW5nIEdhbWUgQnVpbHQgd2l0aCBUZWFjaGVycyBpbiBNaW5kXCJcbiMgICAgYnVpbHRfZm9yX3RlYWNoZXJzX2JsdXJiOiBcIlRlYWNoaW5nIGtpZHMgdG8gY29kZSBjYW4gb2Z0ZW4gZmVlbCBvdmVyd2hlbG1pbmcuIENvZGVDb21iYXQgaGVscHMgYWxsIGVkdWNhdG9ycyB0ZWFjaCBzdHVkZW50cyBob3cgdG8gY29kZSBpbiBlaXRoZXIgSmF2YVNjcmlwdCBvciBQeXRob24sIHR3byBvZiB0aGUgbW9zdCBwb3B1bGFyIHByb2dyYW1taW5nIGxhbmd1YWdlcy4gV2l0aCBhIGNvbXByZWhlbnNpdmUgY3VycmljdWx1bSB0aGF0IGluY2x1ZGVzIHNpeCBjb21wdXRlciBzY2llbmNlIHVuaXRzIGFuZCByZWluZm9yY2VzIGxlYXJuaW5nIHRocm91Z2ggcHJvamVjdC1iYXNlZCBnYW1lIGRldmVsb3BtZW50IGFuZCB3ZWIgZGV2ZWxvcG1lbnQgdW5pdHMsIGtpZHMgd2lsbCBwcm9ncmVzcyBvbiBhIGpvdXJuZXkgZnJvbSBiYXNpYyBzeW50YXggdG8gcmVjdXJzaW9uIVwiXG4jICAgIGJ1aWx0X2Zvcl90ZWFjaGVyc19zdWJ0aXRsZTE6IFwiQ29tcHV0ZXIgU2NpZW5jZVwiXG4jICAgIGJ1aWx0X2Zvcl90ZWFjaGVyc19zdWJibHVyYjE6IFwiU3RhcnRpbmcgd2l0aCBvdXIgZnJlZSBJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZSBjb3Vyc2UsIHN0dWRlbnRzIG1hc3RlciBjb3JlIGNvZGluZyBjb25jZXB0cyBzdWNoIGFzIHdoaWxlL2ZvciBsb29wcywgZnVuY3Rpb25zLCBhbmQgYWxnb3JpdGhtcy5cIlxuIyAgICBidWlsdF9mb3JfdGVhY2hlcnNfc3VidGl0bGUyOiBcIkdhbWUgRGV2ZWxvcG1lbnRcIlxuIyAgICBidWlsdF9mb3JfdGVhY2hlcnNfc3ViYmx1cmIyOiBcIkxlYXJuZXJzIGNvbnN0cnVjdCBtYXplcyBhbmQgdXNlIGJhc2ljIGlucHV0IGhhbmRsaW5nIHRvIGNvZGUgdGhlaXIgb3duIGdhbWVzIHRoYXQgY2FuIGJlIHNoYXJlZCB3aXRoIGZyaWVuZHMgYW5kIGZhbWlseS5cIlxuIyAgICBidWlsdF9mb3JfdGVhY2hlcnNfc3VidGl0bGUzOiBcIldlYiBEZXZlbG9wbWVudFwiXG4jICAgIGJ1aWx0X2Zvcl90ZWFjaGVyc19zdWJibHVyYjM6IFwiVXNpbmcgSFRNTCwgQ1NTLCBhbmQgalF1ZXJ5LCBsZWFybmVycyBmbGV4IHRoZWlyIGNyZWF0aXZlIG11c2NsZXMgdG8gcHJvZ3JhbSB0aGVpciBvd24gd2VicGFnZXMgd2l0aCBhIGN1c3RvbSBVUkwgdG8gc2hhcmUgd2l0aCB0aGVpciBjbGFzc21hdGVzLlwiXG4jICAgIGNlbnR1cnlfc2tpbGxzX3RpdGxlOiBcIjIxc3QgQ2VudHVyeSBTa2lsbHNcIlxuIyAgICBjZW50dXJ5X3NraWxsc19ibHVyYjE6IFwiU3R1ZGVudHMgRG9uJ3QgSnVzdCBMZXZlbCBVcCBUaGVpciBIZXJvLCBUaGV5IExldmVsIFVwIFRoZW1zZWx2ZXNcIlxuIyAgICBjZW50dXJ5X3NraWxsc19xdW90ZTE6IFwiWW91IG1lc3MgdXDigKZzbyB0aGVuIHlvdSB0aGluayBhYm91dCBhbGwgb2YgdGhlIHBvc3NpYmxlIHdheXMgdG8gZml4IGl0LCBhbmQgdGhlbiB0cnkgYWdhaW4uIEkgd291bGRuJ3QgYmUgYWJsZSB0byBnZXQgaGVyZSB3aXRob3V0IHRyeWluZyBoYXJkLlwiXG4jICAgIGNlbnR1cnlfc2tpbGxzX3N1YnRpdGxlMTogXCJDcml0aWNhbCBUaGlua2luZ1wiXG4jICAgIGNlbnR1cnlfc2tpbGxzX3N1YmJsdXJiMTogXCJXaXRoIGNvZGluZyBwdXp6bGVzIHRoYXQgYXJlIG5hdHVyYWxseSBzY2FmZm9sZGVkIGludG8gaW5jcmVhc2luZ2x5IGNoYWxsZW5naW5nIGxldmVscywgQ29kZUNvbWJhdCdzIHByb2dyYW1taW5nIGdhbWUgZW5zdXJlcyBraWRzIGFyZSBhbHdheXMgcHJhY3RpY2luZyBjcml0aWNhbCB0aGlua2luZy5cIlxuIyAgICBjZW50dXJ5X3NraWxsc19xdW90ZTI6IFwiRXZlcnlvbmUgZWxzZSB3YXMgbWFraW5nIG1hemVzLCBzbyBJIHRob3VnaHQsIOKAmGNhcHR1cmUgdGhlIGZsYWfigJkgYW5kIHRoYXTigJlzIHdoYXQgSSBkaWQuXCJcbiMgICAgY2VudHVyeV9za2lsbHNfc3VidGl0bGUyOiBcIkNyZWF0aXZpdHlcIlxuIyAgICBjZW50dXJ5X3NraWxsc19zdWJibHVyYjI6IFwiQ29kZUNvbWJhdCBlbmNvdXJhZ2VzIHN0dWRlbnRzIHRvIHNob3djYXNlIHRoZWlyIGNyZWF0aXZpdHkgYnkgYnVpbGRpbmcgYW5kIHNoYXJpbmcgdGhlaXIgb3duIGdhbWVzIGFuZCB3ZWJwYWdlcy5cIlxuIyAgICBjZW50dXJ5X3NraWxsc19xdW90ZTM6IFwiSWYgSSBnb3Qgc3R1Y2sgb24gYSBsZXZlbC4gSSB3b3VsZCB3b3JrIHdpdGggcGVvcGxlIGFyb3VuZCBtZSB1bnRpbCB3ZSB3ZXJlIGFsbCBhYmxlIHRvIGZpZ3VyZSBpdCBvdXQuXCJcbiMgICAgY2VudHVyeV9za2lsbHNfc3VidGl0bGUzOiBcIkNvbGxhYm9yYXRpb25cIlxuIyAgICBjZW50dXJ5X3NraWxsc19zdWJibHVyYjM6IFwiVGhyb3VnaG91dCB0aGUgZ2FtZSwgdGhlcmUgYXJlIG9wcG9ydHVuaXRpZXMgZm9yIHN0dWRlbnRzIHRvIGNvbGxhYm9yYXRlIHdoZW4gdGhleSBnZXQgc3R1Y2sgYW5kIHRvIHdvcmsgdG9nZXRoZXIgdXNpbmcgb3VyIHBhaXIgcHJvZ3JhbW1pbmcgZ3VpZGUuXCJcbiMgICAgY2VudHVyeV9za2lsbHNfcXVvdGU0OiBcIknigJl2ZSBhbHdheXMgaGFkIGFzcGlyYXRpb25zIG9mIGRlc2lnbmluZyB2aWRlbyBnYW1lcyBhbmQgbGVhcm5pbmcgaG93IHRvIGNvZGUgLi4uIHRoaXMgaXMgZ2l2aW5nIG1lIGEgZ3JlYXQgc3RhcnRpbmcgcG9pbnQuXCJcbiMgICAgY2VudHVyeV9za2lsbHNfc3VidGl0bGU0OiBcIkNvbW11bmljYXRpb25cIlxuIyAgICBjZW50dXJ5X3NraWxsc19zdWJibHVyYjQ6IFwiQ29kaW5nIHJlcXVpcmVzIGtpZHMgdG8gcHJhY3RpY2UgbmV3IGZvcm1zIG9mIGNvbW11bmljYXRpb24sIGluY2x1ZGluZyBjb21tdW5pY2F0aW5nIHdpdGggdGhlIGNvbXB1dGVyIGl0c2VsZiBhbmQgY29udmV5aW5nIHRoZWlyIGlkZWFzIHVzaW5nIHRoZSBtb3N0IGVmZmljaWVudCBjb2RlLlwiXG4jICAgIGNsYXNzcm9vbV9pbl9ib3hfdGl0bGU6IFwiV2UgU3RyaXZlIFRvOlwiXG4jICAgIGNsYXNzcm9vbV9pbl9ib3hfYmx1cmIxOiBcIkVuZ2FnZSBldmVyeSBzdHVkZW50IHNvIHRoYXQgdGhleSBiZWxpZXZlIGNvZGluZyBpcyBmb3IgdGhlbS5cIlxuIyAgICBjbGFzc3Jvb21faW5fYm94X2JsdXJiMjogXCJFbXBvd2VyIGFueSBlZHVjYXRvciB0byBmZWVsIGNvbmZpZGVudCB3aGVuIHRlYWNoaW5nIGNvZGluZy5cIlxuIyAgICBjbGFzc3Jvb21faW5fYm94X2JsdXJiMzogXCJJbnNwaXJlIGFsbCBzY2hvb2wgbGVhZGVycyB0byBjcmVhdGUgYSB3b3JsZC1jbGFzcyBjb21wdXRlciBzY2llbmNlIHByb2dyYW0uXCJcbiMgICAgY3JlYXRpdml0eV9yaWdvcl90aXRsZTogXCJXaGVyZSBDcmVhdGl2aXR5IE1lZXRzIFJpZ29yXCJcbiMgICAgY3JlYXRpdml0eV9yaWdvcl9zdWJ0aXRsZTE6IFwiTWFrZSBjb2RpbmcgZnVuIGFuZCB0ZWFjaCByZWFsLXdvcmxkIHNraWxsc1wiXG4jICAgIGNyZWF0aXZpdHlfcmlnb3JfYmx1cmIxOiBcIlN0dWRlbnRzIHR5cGUgcmVhbCBQeXRob24gYW5kIEphdmFTY3JpcHQgd2hpbGUgcGxheWluZyBnYW1lcyB0aGF0IGVuY291cmFnZSB0cmlhbC1hbmQtZXJyb3IsIGNyaXRpY2FsIHRoaW5raW5nLCBhbmQgY3JlYXRpdml0eS4gU3R1ZGVudHMgdGhlbiBhcHBseSB0aGUgY29kaW5nIHNraWxscyB0aGV54oCZdmUgbGVhcm5lZCBieSBkZXZlbG9waW5nIHRoZWlyIG93biBnYW1lcyBhbmQgd2Vic2l0ZXMgaW4gcHJvamVjdC1iYXNlZCBjb3Vyc2VzLlwiXG4jICAgIGNyZWF0aXZpdHlfcmlnb3Jfc3VidGl0bGUyOiBcIlJlYWNoIHN0dWRlbnRzIGF0IHRoZWlyIGxldmVsXCJcbiMgICAgY3JlYXRpdml0eV9yaWdvcl9ibHVyYjI6IFwiRXZlcnkgQ29kZUNvbWJhdCBsZXZlbCBpcyBzY2FmZm9sZGVkIGJhc2VkIG9uIG1pbGxpb25zIG9mIGRhdGEgcG9pbnRzIGFuZCBvcHRpbWl6ZWQgdG8gYWRhcHQgdG8gZWFjaCBsZWFybmVyLiBQcmFjdGljZSBsZXZlbHMgYW5kIGhpbnRzIGhlbHAgc3R1ZGVudHMgd2hlbiB0aGV5IGdldCBzdHVjaywgYW5kIGNoYWxsZW5nZSBsZXZlbHMgYXNzZXNzIHN0dWRlbnRzJyBsZWFybmluZyB0aHJvdWdob3V0IHRoZSBnYW1lLlwiXG4jICAgIGNyZWF0aXZpdHlfcmlnb3Jfc3VidGl0bGUzOiBcIkJ1aWx0IGZvciBhbGwgdGVhY2hlcnMsIHJlZ2FyZGxlc3Mgb2YgZXhwZXJpZW5jZVwiXG4jICAgIGNyZWF0aXZpdHlfcmlnb3JfYmx1cmIzOiBcIkNvZGVDb21iYXTigJlzIHNlbGYtcGFjZWQsIHN0YW5kYXJkcy1hbGlnbmVkIGN1cnJpY3VsdW0gbWFrZXMgdGVhY2hpbmcgY29tcHV0ZXIgc2NpZW5jZSBwb3NzaWJsZSBmb3IgZXZlcnlvbmUuIENvZGVDb21iYXQgZXF1aXBzIHRlYWNoZXJzIHdpdGggdGhlIHRyYWluaW5nLCBpbnN0cnVjdGlvbmFsIHJlc291cmNlcywgYW5kIGRlZGljYXRlZCBzdXBwb3J0IHRvIGZlZWwgY29uZmlkZW50IGFuZCBzdWNjZXNzZnVsIGluIHRoZSBjbGFzc3Jvb20uXCJcbiMgICAgZmVhdHVyZWRfcGFydG5lcnNfdGl0bGUxOiBcIkZlYXR1cmVkIEluXCJcbiMgICAgZmVhdHVyZWRfcGFydG5lcnNfdGl0bGUyOiBcIkF3YXJkcyAmIFBhcnRuZXJzXCJcbiMgICAgZmVhdHVyZWRfcGFydG5lcnNfYmx1cmIxOiBcIkNvbGxlZ2VCb2FyZCBFbmRvcnNlZCBQcm92aWRlclwiXG4jICAgIGZlYXR1cmVkX3BhcnRuZXJzX2JsdXJiMjogXCJCZXN0IENyZWF0aXZpdHkgVG9vbCBmb3IgU3R1ZGVudHNcIlxuIyAgICBmZWF0dXJlZF9wYXJ0bmVyc19ibHVyYjM6IFwiVG9wIFBpY2sgZm9yIExlYXJuaW5nXCJcbiMgICAgZmVhdHVyZWRfcGFydG5lcnNfYmx1cmI0OiBcIkNvZGUub3JnIE9mZmljaWFsIFBhcnRuZXJcIlxuIyAgICBmZWF0dXJlZF9wYXJ0bmVyc19ibHVyYjU6IFwiQ1Nmb3JBbGwgT2ZmaWNpYWwgTWVtYmVyXCJcbiMgICAgZmVhdHVyZWRfcGFydG5lcnNfYmx1cmI2OiBcIkhvdXIgb2YgQ29kZSBBY3Rpdml0eSBQYXJ0bmVyXCJcbiMgICAgZm9yX2xlYWRlcnNfdGl0bGU6IFwiRm9yIFNjaG9vbCBMZWFkZXJzXCJcbiMgICAgZm9yX2xlYWRlcnNfYmx1cmI6IFwiQSBDb21wcmVoZW5zaXZlLCBTdGFuZGFyZHMtQWxpZ25lZCBDb21wdXRlciBTY2llbmNlIFByb2dyYW1cIlxuIyAgICBmb3JfbGVhZGVyc19zdWJ0aXRsZTE6IFwiRWFzeSBJbXBsZW1lbnRhdGlvblwiXG4jICAgIGZvcl9sZWFkZXJzX3N1YmJsdXJiMTogXCJBIHdlYi1iYXNlZCBwcm9ncmFtIHRoYXQgcmVxdWlyZXMgbm8gSVQgc3VwcG9ydC4gR2V0IHN0YXJ0ZWQgaW4gdW5kZXIgNSBtaW51dGVzIHVzaW5nIEdvb2dsZSBvciBDbGV2ZXIgU2luZ2xlIFNpZ24tT24gKFNTTykuXCJcbiMgICAgZm9yX2xlYWRlcnNfc3VidGl0bGUyOiBcIkZ1bGwgQ29kaW5nIEN1cnJpY3VsdW1cIlxuIyAgICBmb3JfbGVhZGVyc19zdWJibHVyYjI6IFwiQSBzdGFuZGFyZHMtYWxpZ25lZCBjdXJyaWN1bHVtIHdpdGggaW5zdHJ1Y3Rpb25hbCByZXNvdXJjZXMgYW5kIHByb2Zlc3Npb25hbCBkZXZlbG9wbWVudCB0byBlbmFibGUgYW55IHRlYWNoZXIgdG8gdGVhY2ggY29tcHV0ZXIgc2NpZW5jZS5cIlxuIyAgICBmb3JfbGVhZGVyc19zdWJ0aXRsZTM6IFwiRmxleGlibGUgVXNlIENhc2VzXCJcbiMgICAgZm9yX2xlYWRlcnNfc3ViYmx1cmIzOiBcIldoZXRoZXIgeW91IHdhbnQgdG8gYnVpbGQgYSBNaWRkbGUgU2Nob29sIGNvZGluZyBlbGVjdGl2ZSwgYSBDVEUgcGF0aHdheSwgb3IgYW4gQVAgQ29tcHV0ZXIgU2NpZW5jZSBQcmluY2lwbGVzIGNsYXNzLCBDb2RlQ29tYmF0IGlzIHRhaWxvcmVkIHRvIHN1aXQgeW91ciBuZWVkcy5cIlxuIyAgICBmb3JfbGVhZGVyc19zdWJ0aXRsZTQ6IFwiUmVhbC1Xb3JsZCBTa2lsbHNcIlxuIyAgICBmb3JfbGVhZGVyc19zdWJibHVyYjQ6IFwiU3R1ZGVudHMgYnVpbGQgZ3JpdCBhbmQgZGV2ZWxvcCBhIGdyb3d0aCBtaW5kc2V0IHRocm91Z2ggY29kaW5nIGNoYWxsZW5nZXMgdGhhdCBwcmVwYXJlIHRoZW0gZm9yIHRoZSA1MDBLKyBvcGVuIGNvbXB1dGluZyBqb2JzLlwiXG4jICAgIGZvcl90ZWFjaGVyc190aXRsZTogXCJGb3IgVGVhY2hlcnNcIlxuIyAgICBmb3JfdGVhY2hlcnNfYmx1cmI6IFwiVG9vbHMgdG8gVW5sb2NrIFN0dWRlbnQgUG90ZW50aWFsXCJcbiMgICAgZm9yX3RlYWNoZXJzX3N1YnRpdGxlMTogXCJQcm9qZWN0LUJhc2VkIExlYXJuaW5nXCJcbiMgICAgZm9yX3RlYWNoZXJzX3N1YmJsdXJiMTogXCJQcm9tb3RlIGNyZWF0aXZpdHksIHByb2JsZW0tc29sdmluZywgYW5kIGNvbmZpZGVuY2UgaW4gcHJvamVjdC1iYXNlZCBjb3Vyc2VzIHdoZXJlIHN0dWRlbnRzIGRldmVsb3AgdGhlaXIgb3duIGdhbWVzIGFuZCB3ZWJwYWdlcy5cIlxuIyAgICBmb3JfdGVhY2hlcnNfc3VidGl0bGUyOiBcIlRlYWNoZXIgRGFzaGJvYXJkXCJcbiMgICAgZm9yX3RlYWNoZXJzX3N1YmJsdXJiMjogXCJWaWV3IGRhdGEgb24gc3R1ZGVudCBwcm9ncmVzcywgZGlzY292ZXIgY3VycmljdWx1bSByZXNvdXJjZXMsIGFuZCBhY2Nlc3MgcmVhbC10aW1lIHN1cHBvcnQgdG8gZW1wb3dlciBzdHVkZW50IGxlYXJuaW5nLlwiXG4jICAgIGZvcl90ZWFjaGVyc19zdWJ0aXRsZTM6IFwiQnVpbHQtaW4gQXNzZXNzbWVudHNcIlxuIyAgICBmb3JfdGVhY2hlcnNfc3ViYmx1cmIzOiBcIlBlcnNvbmFsaXplIGluc3RydWN0aW9uIGFuZCBlbnN1cmUgc3R1ZGVudHMgdW5kZXJzdGFuZCBjb3JlIGNvbmNlcHRzIHdpdGggZm9ybWF0aXZlIGFuZCBzdW1tYXRpdmUgYXNzZXNzbWVudHMuXCJcbiMgICAgZm9yX3RlYWNoZXJzX3N1YnRpdGxlNDogXCJBdXRvbWF0aWMgRGlmZmVyZW50aWF0aW9uXCJcbiMgICAgZm9yX3RlYWNoZXJzX3N1YmJsdXJiNDogXCJFbmdhZ2UgYWxsIGxlYXJuZXJzIGluIGEgZGl2ZXJzZSBjbGFzc3Jvb20gd2l0aCBwcmFjdGljZSBsZXZlbHMgdGhhdCBhZGFwdCB0byBlYWNoIHN0dWRlbnQncyBsZWFybmluZyBuZWVkcy5cIlxuIyAgICBnYW1lX2Jhc2VkX2JsdXJiOiBcIkNvZGVDb21iYXQgaXMgYSBnYW1lLWJhc2VkIGNvbXB1dGVyIHNjaWVuY2UgcHJvZ3JhbSB3aGVyZSBzdHVkZW50cyB0eXBlIHJlYWwgY29kZSBhbmQgc2VlIHRoZWlyIGNoYXJhY3RlcnMgcmVhY3QgaW4gcmVhbCB0aW1lLlwiXG4jICAgIGdldF9zdGFydGVkOiBcIkdldCBzdGFydGVkXCJcbiMgICAgZ2xvYmFsX3RpdGxlOiBcIkpvaW4gT3VyIEdsb2JhbCBDb21tdW5pdHkgb2YgTGVhcm5lcnMgYW5kIEVkdWNhdG9yc1wiXG4jICAgIGdsb2JhbF9zdWJ0aXRsZTE6IFwiTGVhcm5lcnNcIlxuIyAgICBnbG9iYWxfc3VidGl0bGUyOiBcIkxpbmVzIG9mIENvZGVcIlxuIyAgICBnbG9iYWxfc3VidGl0bGUzOiBcIlRlYWNoZXJzXCJcbiMgICAgZ2xvYmFsX3N1YnRpdGxlNDogXCJDb3VudHJpZXNcIlxuIyAgICBnb190b19teV9jbGFzc2VzOiBcIkdvIHRvIG15IGNsYXNzZXNcIlxuIyAgICBnb190b19teV9jb3Vyc2VzOiBcIkdvIHRvIG15IGNvdXJzZXNcIlxuIyAgICBxdW90ZXNfcXVvdGUxOiBcIk5hbWUgYW55IHByb2dyYW0gb25saW5lLCBJ4oCZdmUgdHJpZWQgaXQuIE5vbmUgb2YgdGhlbSBtYXRjaCB1cCB0byBDb2RlQ29tYmF0LiBBbnkgdGVhY2hlciB3aG8gd2FudHMgdGhlaXIgc3R1ZGVudHMgdG8gbGVhcm4gaG93IHRvIGNvZGUuLi4gc3RhcnQgaGVyZSFcIlxuIyAgICBxdW90ZXNfcXVvdGUyOiBcIiBJIHdhcyBzdXJwcmlzZWQgYWJvdXQgaG93IGVhc3kgYW5kIGludHVpdGl2ZSBDb2RlQ29tYmF0IG1ha2VzIGxlYXJuaW5nIGNvbXB1dGVyIHNjaWVuY2UuIFRoZSBzY29yZXMgb24gdGhlIEFQIGV4YW0gd2VyZSBtdWNoIGhpZ2hlciB0aGFuIEkgZXhwZWN0ZWQgYW5kIEkgYmVsaWV2ZSBDb2RlQ29tYmF0IGlzIHRoZSByZWFzb24gd2h5IHRoaXMgd2FzIHRoZSBjYXNlLlwiXG4jICAgIHF1b3Rlc19xdW90ZTM6IFwiQ29kZUNvbWJhdCBoYXMgYmVlbiB0aGUgbW9zdCBiZW5lZmljaWFsIGZvciB0ZWFjaGluZyBteSBzdHVkZW50cyByZWFsLWxpZmUgY29kaW5nIGNhcGFiaWxpdGllcy4gTXkgaHVzYmFuZCBpcyBhIHNvZnR3YXJlIGVuZ2luZWVyIGFuZCBoZSBoYXMgdGVzdGVkIG91dCBhbGwgb2YgbXkgcHJvZ3JhbXMuIEhlIHB1dCB0aGlzIGFzIGhpcyB0b3AgY2hvaWNlLlwiXG4jICAgIHF1b3Rlc19xdW90ZTQ6IFwiVGhlIGZlZWRiYWNrIOKApiBoYXMgYmVlbiBzbyBwb3NpdGl2ZSB0aGF0IHdlIGFyZSBzdHJ1Y3R1cmluZyBhIGNvbXB1dGVyIHNjaWVuY2UgY2xhc3MgYXJvdW5kIENvZGVDb21iYXQuIFRoZSBwcm9ncmFtIHJlYWxseSBlbmdhZ2VzIHRoZSBzdHVkZW50cyB3aXRoIGEgZ2FtaW5nIHN0eWxlIHBsYXRmb3JtIHRoYXQgaXMgZW50ZXJ0YWluaW5nIGFuZCBpbnN0cnVjdGlvbmFsIGF0IHRoZSBzYW1lIHRpbWUuIEtlZXAgdXAgdGhlIGdvb2Qgd29yaywgQ29kZUNvbWJhdCFcIlxuIyAgICBzZWVfZXhhbXBsZTogXCJTZWUgZXhhbXBsZVwiXG4jICAgIHNsb2dhbjogXCJUaGUgbW9zdCBlbmdhZ2luZyB3YXkgdG8gbGVhcm4gY29tcHV0ZXIgc2NpZW5jZVwiXG4jICAgIHRlYWNoX2NzMV9mcmVlOiBcIlRlYWNoIENTMSBGcmVlXCJcbiMgICAgdGVhY2hlcnNfbG92ZV9jb2RlY29tYmF0X3RpdGxlOiBcIlRlYWNoZXJzIExvdmUgQ29kZUNvbWJhdFwiXG4jICAgIHRlYWNoZXJzX2xvdmVfY29kZWNvbWJhdF9ibHVyYjE6IFwiUmVwb3J0IHRoYXQgdGhlaXIgc3R1ZGVudHMgZW5qb3kgdXNpbmcgQ29kZUNvbWJhdCB0byBsZWFybiBob3cgdG8gY29kZVwiXG4jICAgIHRlYWNoZXJzX2xvdmVfY29kZWNvbWJhdF9ibHVyYjI6IFwiV291bGQgcmVjb21tZW5kIENvZGVDb21iYXQgdG8gb3RoZXIgY29tcHV0ZXIgc2NpZW5jZSB0ZWFjaGVyc1wiXG4jICAgIHRlYWNoZXJzX2xvdmVfY29kZWNvbWJhdF9ibHVyYjM6IFwiU2F5IHRoYXQgQ29kZUNvbWJhdCBoZWxwcyB0aGVtIHN1cHBvcnQgc3R1ZGVudHPigJkgcHJvYmxlbSBzb2x2aW5nIGFiaWxpdGllc1wiXG4jICAgIHRlYWNoZXJzX2xvdmVfY29kZWNvbWJhdF9zdWJibHVyYjogXCJJbiBwYXJ0bmVyc2hpcCB3aXRoIE1jUkVMIEludGVybmF0aW9uYWwsIGEgbGVhZGVyIGluIHJlc2VhcmNoLWJhc2VkIGd1aWRhbmNlIGFuZCBldmFsdWF0aW9ucyBvZiBlZHVjYXRpb25hbCB0ZWNobm9sb2d5LlwiXG4jICAgIHRyeV90aGVfZ2FtZTogXCJUcnkgdGhlIGdhbWVcIlxuICAgIGNsYXNzcm9vbV9lZGl0aW9uOiBcIktsYXNzcnVtdXRnw6V2ZW46XCJcbiAgICBsZWFybl90b19jb2RlOiBcIkzDpHIgZGlnIGtvZGE6XCJcbiAgICBwbGF5X25vdzogXCJTcGVsYSBudVwiXG4jICAgIGltX2FuX2VkdWNhdG9yOiBcIkknbSBhbiBFZHVjYXRvclwiXG4gICAgaW1fYV90ZWFjaGVyOiBcIkphZyDDpHIgbMOkcmFyZVwiXG4gICAgaW1fYV9zdHVkZW50OiBcIkphZyDDpHIgZWxldlwiXG4gICAgbGVhcm5fbW9yZTogXCJMw6RzIG1lclwiXG4jICAgIGNsYXNzcm9vbV9pbl9hX2JveDogXCJBIGNsYXNzcm9vbSBpbi1hLWJveCBmb3IgdGVhY2hpbmcgY29tcHV0ZXIgc2NpZW5jZS5cIlxuICAgIGNvZGVjb21iYXRfaXM6IFwiQ29kZUNvbWJhdCDDpHIgZW4gcGxhdGZvcm0gPHN0cm9uZz5mw7ZyIGVsZXZlcjwvc3Ryb25nPiBhdHQgbMOkcmEgc2lnIGRhdGF2ZXRlbnNrYXAgbsOkciBkZSBzcGVsYXIgaWdlbm9tIGV0dCByaWt0aWd0IHNwZWwuXCJcbiMgICAgb3VyX2NvdXJzZXM6IFwiT3VyIGNvdXJzZXMgaGF2ZSBiZWVuIHNwZWNpZmljYWxseSBwbGF5dGVzdGVkIDxzdHJvbmc+dG8gZXhjZWwgaW4gdGhlIGNsYXNzcm9vbTwvc3Ryb25nPiwgZXZlbiBmb3IgdGVhY2hlcnMgd2l0aCBsaXR0bGUgdG8gbm8gcHJpb3IgcHJvZ3JhbW1pbmcgZXhwZXJpZW5jZS5cIlxuICAgIHdhdGNoX2hvdzogXCJTZSBodXIgQ29kZUNvbWJhdCBmw7Zyw6RuZHJhciBodXIgbcOkbm5pc2tvciBsw6RyIHNpZyBkYXRhdmV0ZW5za2FwLlwiXG4gICAgdG9wX3NjcmVlbnNob3RzX2hpbnQ6IFwiRWxldmVyIHNrcml2ZXIga29kIG9jaCBzZXIgZGVyYXMgw6RuZHJpbmdhciB3cml0ZSBjb2RlIGFuZCBzZWUgdGhlaXIgY2hhbmdlcyB1cGRhdGUgaW4gcmVhbC10aW1lXCJcbiMgICAgZGVzaWduZWRfd2l0aDogXCJEZXNpZ25lZCB3aXRoIHRlYWNoZXJzIGluIG1pbmRcIlxuIyAgICByZWFsX2NvZGU6IFwiUmVhbCwgdHlwZWQgY29kZVwiXG4jICAgIGZyb21fdGhlX2ZpcnN0X2xldmVsOiBcImZyb20gdGhlIGZpcnN0IGxldmVsXCJcbiMgICAgZ2V0dGluZ19zdHVkZW50czogXCJHZXR0aW5nIHN0dWRlbnRzIHRvIHR5cGVkIGNvZGUgYXMgcXVpY2tseSBhcyBwb3NzaWJsZSBpcyBjcml0aWNhbCB0byBsZWFybmluZyBwcm9ncmFtbWluZyBzeW50YXggYW5kIHByb3BlciBzdHJ1Y3R1cmUuXCJcbiMgICAgZWR1Y2F0b3JfcmVzb3VyY2VzOiBcIkVkdWNhdG9yIHJlc291cmNlc1wiXG4jICAgIGNvdXJzZV9ndWlkZXM6IFwiYW5kIGNvdXJzZSBndWlkZXNcIlxuIyAgICB0ZWFjaGluZ19jb21wdXRlcl9zY2llbmNlOiBcIlRlYWNoaW5nIGNvbXB1dGVyIHNjaWVuY2UgZG9lcyBub3QgcmVxdWlyZSBhIGNvc3RseSBkZWdyZWUsIGJlY2F1c2Ugd2UgcHJvdmlkZSB0b29scyB0byBzdXBwb3J0IGVkdWNhdG9ycyBvZiBhbGwgYmFja2dyb3VuZHMuXCJcbiMgICAgYWNjZXNzaWJsZV90bzogXCJBY2Nlc3NpYmxlIHRvXCJcbiMgICAgZXZlcnlvbmU6IFwiZXZlcnlvbmVcIlxuIyAgICBkZW1vY3JhdGl6aW5nOiBcIkRlbW9jcmF0aXppbmcgdGhlIHByb2Nlc3Mgb2YgbGVhcm5pbmcgY29kaW5nIGlzIGF0IHRoZSBjb3JlIG9mIG91ciBwaGlsb3NvcGh5LiBFdmVyeW9uZSBzaG91bGQgYmUgYWJsZSB0byBsZWFybiB0byBjb2RlLlwiXG4jICAgIGZvcmdvdF9sZWFybmluZzogXCJJIHRoaW5rIHRoZXkgYWN0dWFsbHkgZm9yZ290IHRoYXQgdGhleSB3ZXJlIGxlYXJuaW5nIHNvbWV0aGluZy5cIlxuIyAgICB3YW50ZWRfdG9fZG86IFwiIENvZGluZyBpcyBzb21ldGhpbmcgSSd2ZSBhbHdheXMgd2FudGVkIHRvIGRvLCBhbmQgSSBuZXZlciB0aG91Z2h0IEkgd291bGQgYmUgYWJsZSB0byBsZWFybiBpdCBpbiBzY2hvb2wuXCJcbiMgICAgYnVpbGRzX2NvbmNlcHRzX3VwOiBcIkkgbGlrZSBob3cgQ29kZUNvbWJhdCBidWlsZHMgdGhlIGNvbmNlcHRzIHVwLiBJdCdzIHJlYWxseSBlYXN5IHRvIHVuZGVyc3RhbmQgYW5kIGZ1biB0byBmaWd1cmUgaXQgb3V0LlwiXG4jICAgIHdoeV9nYW1lczogXCJXaHkgaXMgbGVhcm5pbmcgdGhyb3VnaCBnYW1lcyBpbXBvcnRhbnQ/XCJcbiMgICAgZ2FtZXNfcmV3YXJkOiBcIkdhbWVzIHJld2FyZCB0aGUgcHJvZHVjdGl2ZSBzdHJ1Z2dsZS5cIlxuIyAgICBlbmNvdXJhZ2U6IFwiR2FtaW5nIGlzIGEgbWVkaXVtIHRoYXQgZW5jb3VyYWdlcyBpbnRlcmFjdGlvbiwgZGlzY292ZXJ5LCBhbmQgdHJpYWwtYW5kLWVycm9yLiBBIGdvb2QgZ2FtZSBjaGFsbGVuZ2VzIHRoZSBwbGF5ZXIgdG8gbWFzdGVyIHNraWxscyBvdmVyIHRpbWUsIHdoaWNoIGlzIHRoZSBzYW1lIGNyaXRpY2FsIHByb2Nlc3Mgc3R1ZGVudHMgZ28gdGhyb3VnaCBhcyB0aGV5IGxlYXJuLlwiXG4jICAgIGV4Y2VsOiBcIkdhbWVzIGV4Y2VsIGF0IHJld2FyZGluZ1wiXG4jICAgIHN0cnVnZ2xlOiBcInByb2R1Y3RpdmUgc3RydWdnbGVcIlxuIyAgICBraW5kX29mX3N0cnVnZ2xlOiBcInRoZSBraW5kIG9mIHN0cnVnZ2xlIHRoYXQgcmVzdWx0cyBpbiBsZWFybmluZyB0aGF04oCZcyBlbmdhZ2luZyBhbmRcIlxuIyAgICBtb3RpdmF0aW5nOiBcIm1vdGl2YXRpbmdcIlxuIyAgICBub3RfdGVkaW91czogXCJub3QgdGVkaW91cy5cIlxuIyAgICBnYW1pbmdfaXNfZ29vZDogXCJTdHVkaWVzIHN1Z2dlc3QgZ2FtaW5nIGlzIGdvb2QgZm9yIGNoaWxkcmVu4oCZcyBicmFpbnMuIChpdOKAmXMgdHJ1ZSEpXCJcbiMgICAgZ2FtZV9iYXNlZDogXCJXaGVuIGdhbWUtYmFzZWQgbGVhcm5pbmcgc3lzdGVtcyBhcmVcIlxuIyAgICBjb21wYXJlZDogXCJjb21wYXJlZFwiXG4jICAgIGNvbnZlbnRpb25hbDogXCJhZ2FpbnN0IGNvbnZlbnRpb25hbCBhc3Nlc3NtZW50IG1ldGhvZHMsIHRoZSBkaWZmZXJlbmNlIGlzIGNsZWFyOiBnYW1lcyBhcmUgYmV0dGVyIGF0IGhlbHBpbmcgc3R1ZGVudHMgcmV0YWluIGtub3dsZWRnZSwgY29uY2VudHJhdGUgYW5kXCJcbiAgICBwZXJmb3JtX2F0X2hpZ2hlcl9sZXZlbDogXCJHZW5vbWbDtnIgZW4gaMO2Z3JlIG5pdsOlIGF2IHByZXN0YXRpb25cIlxuIyAgICBmZWVkYmFjazogXCJHYW1lcyBhbHNvIHByb3ZpZGUgcmVhbC10aW1lIGZlZWRiYWNrIHRoYXQgYWxsb3dzIHN0dWRlbnRzIHRvIGFkanVzdCB0aGVpciBzb2x1dGlvbiBwYXRoIGFuZCB1bmRlcnN0YW5kIGNvbmNlcHRzIG1vcmUgaG9saXN0aWNhbGx5LCBpbnN0ZWFkIG9mIGJlaW5nIGxpbWl0ZWQgdG8ganVzdCDigJxjb3JyZWN04oCdIG9yIOKAnGluY29ycmVjdOKAnSBhbnN3ZXJzLlwiXG4gICAgcmVhbF9nYW1lOiBcIkV0dCByaWt0aWd0IHNwZWwsIHNwZWxhZCBtZWQgcmlrdGlnIGtvZG5pbmcuXCJcbiMgICAgZ3JlYXRfZ2FtZTogXCJBIGdyZWF0IGdhbWUgaXMgbW9yZSB0aGFuIGp1c3QgYmFkZ2VzIGFuZCBhY2hpZXZlbWVudHMgLSBpdOKAmXMgYWJvdXQgYSBwbGF5ZXLigJlzIGpvdXJuZXksIHdlbGwtZGVzaWduZWQgcHV6emxlcywgYW5kIHRoZSBhYmlsaXR5IHRvIHRhY2tsZSBjaGFsbGVuZ2VzIHdpdGggYWdlbmN5IGFuZCBjb25maWRlbmNlLlwiXG4jICAgIGFnZW5jeTogXCJDb2RlQ29tYmF0IGlzIGEgZ2FtZSB0aGF0IGdpdmVzIHBsYXllcnMgdGhhdCBhZ2VuY3kgYW5kIGNvbmZpZGVuY2Ugd2l0aCBvdXIgcm9idXN0IHR5cGVkIGNvZGUgZW5naW5lLCB3aGljaCBoZWxwcyBiZWdpbm5lciBhbmQgYWR2YW5jZWQgc3R1ZGVudHMgYWxpa2Ugd3JpdGUgcHJvcGVyLCB2YWxpZCBjb2RlLlwiXG4jICAgIHJlcXVlc3RfZGVtb190aXRsZTogXCJHZXQgeW91ciBzdHVkZW50cyBzdGFydGVkIHRvZGF5IVwiXG4jICAgIHJlcXVlc3RfZGVtb19zdWJ0aXRsZTogXCJSZXF1ZXN0IGEgZGVtbyBhbmQgZ2V0IHlvdXIgc3R1ZGVudHMgc3RhcnRlZCBpbiBsZXNzIHRoYW4gYW4gaG91ci5cIlxuIyAgICBnZXRfc3RhcnRlZF90aXRsZTogXCJTZXQgdXAgeW91ciBjbGFzcyB0b2RheVwiXG4jICAgIGdldF9zdGFydGVkX3N1YnRpdGxlOiBcIlNldCB1cCBhIGNsYXNzLCBhZGQgeW91ciBzdHVkZW50cywgYW5kIG1vbml0b3IgdGhlaXIgcHJvZ3Jlc3MgYXMgdGhleSBsZWFybiBjb21wdXRlciBzY2llbmNlLlwiXG4jICAgIHJlcXVlc3RfZGVtbzogXCJSZXF1ZXN0IGEgRGVtb1wiXG4jICAgIHJlcXVlc3RfcXVvdGU6IFwiUmVxdWVzdCBhIFF1b3RlXCJcbiMgICAgc2V0dXBfYV9jbGFzczogXCJTZXQgVXAgYSBDbGFzc1wiXG4gICAgaGF2ZV9hbl9hY2NvdW50OiBcIkhhciBkdSBldHQga29udG8/XCJcbiAgICBsb2dnZWRfaW5fYXM6IFwiRHUgw6RyIGlubG9nZ2FkIHNvbVwiXG4jICAgIGNvbXB1dGVyX3NjaWVuY2U6IFwiT3VyIHNlbGYtcGFjZWQgY291cnNlcyBjb3ZlciBiYXNpYyBzeW50YXggdG8gYWR2YW5jZWQgY29uY2VwdHNcIlxuICAgIGZmYTogXCJHcmF0aXMgZsO2ciBhbGxhIGVsZXZlclwiXG4gICAgY29taW5nX3Nvb246IFwiTWVyIGtvbW1lciBzbmF0IVwiXG4jICAgIGNvdXJzZXNfYXZhaWxhYmxlX2luOiBcIkNvdXJzZXMgYXJlIGF2YWlsYWJsZSBpbiBKYXZhU2NyaXB0IGFuZCBQeXRob24uIFdlYiBEZXZlbG9wbWVudCBjb3Vyc2VzIHV0aWxpemUgSFRNTCwgQ1NTLCBhbmQgalF1ZXJ5LlwiXG4jICAgIGJvYXN0OiBcIkJvYXN0cyByaWRkbGVzIHRoYXQgYXJlIGNvbXBsZXggZW5vdWdoIHRvIGZhc2NpbmF0ZSBnYW1lcnMgYW5kIGNvZGVycyBhbGlrZS5cIlxuIyAgICB3aW5uaW5nOiBcIkEgd2lubmluZyBjb21iaW5hdGlvbiBvZiBSUEcgZ2FtZXBsYXkgYW5kIHByb2dyYW1taW5nIGhvbWV3b3JrIHRoYXQgcHVsbHMgb2ZmIG1ha2luZyBraWQtZnJpZW5kbHkgZWR1Y2F0aW9uIGxlZ2l0aW1hdGVseSBlbmpveWFibGUuXCJcbiMgICAgcnVuX2NsYXNzOiBcIkV2ZXJ5dGhpbmcgeW91IG5lZWQgdG8gcnVuIGEgY29tcHV0ZXIgc2NpZW5jZSBjbGFzcyBpbiB5b3VyIHNjaG9vbCB0b2RheSwgbm8gQ1MgYmFja2dyb3VuZCByZXF1aXJlZC5cIlxuICAgIGdvdG9fY2xhc3NlczogXCJHw6UgdGlsbCBtaW5hIGtsYXNzZXJcIlxuICAgIHZpZXdfcHJvZmlsZTogXCJWaXNhIG1pbiBwcm9maWxcIlxuIyAgICB2aWV3X3Byb2dyZXNzOiBcIlZpZXcgUHJvZ3Jlc3NcIlxuICAgIGdvX3RvX2NvdXJzZXM6IFwiR8OlIHRpbGwgbWluYSBrdXJzZXJcIlxuIyAgICB3YW50X2NvY286IFwiV2FudCBDb2RlQ29tYmF0IGF0IHlvdXIgc2Nob29sP1wiXG4jICAgIGVkdWNhdG9yOiBcIkVkdWNhdG9yXCJcbiMgICAgc3R1ZGVudDogXCJTdHVkZW50XCJcblxuICBuYXY6XG4jICAgIGVkdWNhdG9yczogXCJFZHVjYXRvcnNcIlxuIyAgICBmb2xsb3dfdXM6IFwiRm9sbG93IFVzXCJcbiMgICAgZ2VuZXJhbDogXCJHZW5lcmFsXCJcbiAgICBtYXA6IFwiS2FydGFcIlxuICAgIHBsYXk6IFwiU3BlbGFcIiAjIFRoZSB0b3AgbmF2IGJhciBlbnRyeSB3aGVyZSBwbGF5ZXJzIGNob29zZSB3aGljaCBsZXZlbHMgdG8gcGxheVxuICAgIGNvbW11bml0eTogXCJDb21tdW5pdHlcIlxuICAgIGNvdXJzZXM6IFwiTGVrdGlvbmVyXCJcbiAgICBibG9nOiBcIkJsb2dnXCJcbiAgICBmb3J1bTogXCJGb3J1bVwiXG4gICAgYWNjb3VudDogXCJLb250b1wiXG4gICAgbXlfYWNjb3VudDogXCJNaXR0IGtvbnRvXCJcbiAgICBwcm9maWxlOiBcIlByb2ZpbFwiXG4gICAgaG9tZTogXCJIZW1cIlxuICAgIGNvbnRyaWJ1dGU6IFwiQmlkcmFcIlxuICAgIGxlZ2FsOiBcIkp1cmlkaWtcIlxuIyAgICBwcml2YWN5OiBcIlByaXZhY3kgTm90aWNlXCJcbiAgICBhYm91dDogXCJPbSBvc3NcIlxuICAgIGNvbnRhY3Q6IFwiS29udGFrdFwiXG4gICAgdHdpdHRlcl9mb2xsb3c6IFwiRsO2bGogb3NzIHDDpSBUd2l0dGVyXCJcbiAgICBteV9jbGFzc3Jvb21zOiBcIk1pbmEga2xhc3NlclwiXG4gICAgbXlfY291cnNlczogXCJNaW5hIGt1cnNlclwiXG4jICAgIG15X3RlYWNoZXJzOiBcIk15IFRlYWNoZXJzXCJcbiAgICBjYXJlZXJzOiBcIkpvYmJ0aWxsZsOkbGxlblwiXG4jICAgIGZhY2Vib29rOiBcIkZhY2Vib29rXCJcbiMgICAgdHdpdHRlcjogXCJUd2l0dGVyXCJcbiMgICAgY3JlYXRlX2FfY2xhc3M6IFwiQ3JlYXRlIGEgQ2xhc3NcIlxuIyAgICBvdGhlcjogXCJPdGhlclwiXG4jICAgIGxlYXJuX3RvX2NvZGU6IFwiTGVhcm4gdG8gQ29kZSFcIlxuIyAgICB0b2dnbGVfbmF2OiBcIlRvZ2dsZSBuYXZpZ2F0aW9uXCJcbiAgICBzY2hvb2xzOiBcIlNrb2xvclwiXG4gICAgZ2V0X2ludm9sdmVkOiBcIkJsaSBlbmdhZ2VyYWRcIlxuICAgIG9wZW5fc291cmNlOiBcIsOWcHBlbiBrw6RsbGtvZCAoR2l0SHViKVwiXG4jICAgIHN1cHBvcnQ6IFwiU3VwcG9ydFwiXG4jICAgIGZhcXM6IFwiRkFRc1wiXG4jICAgIGNvcHlyaWdodF9wcmVmaXg6IFwiQ29weXJpZ2h0XCJcbiMgICAgY29weXJpZ2h0X3N1ZmZpeDogXCJBbGwgUmlnaHRzIFJlc2VydmVkLlwiXG4gICAgaGVscF9wcmVmOiBcIkJlaMO2dmVyIGR1IGhqw6RscD8gRW1haWxcIlxuICAgIGhlbHBfc3VmZjogXCJvY2ggdmkga29tbWVyIGjDtnJhcyFcIlxuIyAgICByZXNvdXJjZV9odWI6IFwiUmVzb3VyY2UgSHViXCJcbiMgICAgYXBjc3A6IFwiQVAgQ1MgUHJpbmNpcGxlc1wiXG4jICAgIHBhcmVudDogXCJQYXJlbnRzXCJcblxuICBtb2RhbDpcbiAgICBjbG9zZTogXCJTdMOkbmdcIlxuICAgIG9rYXk6IFwiT2tlalwiXG5cbiAgbm90X2ZvdW5kOlxuICAgIHBhZ2Vfbm90X2ZvdW5kOiBcIlNpZGFuIGthbiBpbnRlIGhpdHRhc1wiXG5cbiAgZGlwbG9tYXRfc3VnZ2VzdGlvbjpcbiAgICB0aXRsZTogXCJIasOkbHAgdGlsbCBhdHQgw7Z2ZXJzw6R0dGEgQ29kZUNvbWJhdCFcIiAjIFRoaXMgc2hvd3MgdXAgd2hlbiBhIHBsYXllciBzd2l0Y2hlcyB0byBhIG5vbi1FbmdsaXNoIGxhbmd1YWdlIHVzaW5nIHRoZSBsYW5ndWFnZSBzZWxlY3Rvci5cbiAgICBzdWJfaGVhZGluZzogXCJWaSBiZWjDtnZlciBkaW5hIHNwcsOla2xpZ2Ega3Vuc2thcGVyLlwiXG4gICAgcGl0Y2hfYm9keTogXCJWaSB1dHZlY2tsYXIgQ29kZUNvbWJhdCBww6UgZW5nZWxza2EsIG1lbiB2aSBoYXIgcmVkYW4gc3BlbGFyZSB2w6RybGRlbiDDtnZlci4gTcOlbmdhIGF2IGRlbSB2aWxsIHNwZWxhIHDDpSBzdmVuc2thIGVmdGVyc29tIGRlIGludGUgdGFsYXIgZW5nZWxza2EuIE9tIGR1IHRhbGFyIGLDpWRhIHNwcsOla2VuLCBmdW5kZXJhIHDDpSBhdHQgcmVnaXN0cmVyYSBkaWcgc29tIERpcGxvbWF0IG9jaCBoasOkbHAgdGlsbCBtZWQgw7Z2ZXJzw6R0dG5pbmdlbiBhdiBiw6VkZSBoZW1zaWRhbiBvY2ggYWxsYSBuaXbDpWVyIHRpbGwgc3ZlbnNrYS5cIlxuICAgIG1pc3NpbmdfdHJhbnNsYXRpb25zOiBcIlRpbGxzIHZpIGhhciDDtnZlcnNhdHQgYWxsdGluZyB0aWxsIHN2ZW5za2EsIHPDpSBrb21tZXIgZHUgc2UgZW5nZWxza2EgbsOkciBkZXQgaW50ZSBmaW5ucyBuw6Vnb24gc3ZlbnNrIMO2dmVyc8OkdHRuaW5nIHRpbGxnw6RuZ2xpZy5cIlxuICAgIGxlYXJuX21vcmU6IFwiTMOkcyBtZXIgb20gYXR0IHZhcmEgZW4gRGlwbG9tYXRcIlxuICAgIHN1YnNjcmliZV9hc19kaXBsb21hdDogXCJSZWdpc3RyZXJhIGRpZyBzb20gRGlwbG9tYXRcIlxuXG4gIHBsYXk6XG4jICAgIHRpdGxlOiBcIlBsYXkgQ29kZUNvbWJhdCBMZXZlbHMgLSBMZWFybiBQeXRob24sIEphdmFTY3JpcHQsIGFuZCBIVE1MXCJcbiMgICAgbWV0YV9kZXNjcmlwdGlvbjogXCJMZWFybiBwcm9ncmFtbWluZyB3aXRoIGEgY29kaW5nIGdhbWUgZm9yIGJlZ2lubmVycy4gTGVhcm4gUHl0aG9uIG9yIEphdmFTY3JpcHQgYXMgeW91IHNvbHZlIG1hemVzLCBtYWtlIHlvdXIgb3duIGdhbWVzLCBhbmQgbGV2ZWwgdXAuIENoYWxsZW5nZSB5b3VyIGZyaWVuZHMgaW4gbXVsdGlwbGF5ZXIgYXJlbmEgbGV2ZWxzIVwiXG4jICAgIGxldmVsX3RpdGxlOiBcIl9fbGV2ZWxfXyAtIExlYXJuIHRvIENvZGUgaW4gUHl0aG9uLCBKYXZhU2NyaXB0LCBIVE1MXCJcbiMgICAgdmlkZW9fdGl0bGU6IFwiX192aWRlb19fIHwgVmlkZW8gTGV2ZWxcIlxuIyAgICBnYW1lX2RldmVsb3BtZW50X3RpdGxlOiBcIl9fbGV2ZWxfXyB8IEdhbWUgRGV2ZWxvcG1lbnRcIlxuIyAgICB3ZWJfZGV2ZWxvcG1lbnRfdGl0bGU6IFwiX19sZXZlbF9fIHwgV2ViIERldmVsb3BtZW50XCJcbiMgICAgYW5vbl9zaWdudXBfdGl0bGVfMTogXCJDb2RlQ29tYmF0IGhhcyBhXCJcbiMgICAgYW5vbl9zaWdudXBfdGl0bGVfMjogXCJDbGFzc3Jvb20gVmVyc2lvbiFcIlxuIyAgICBhbm9uX3NpZ251cF9lbnRlcl9jb2RlOiBcIkVudGVyIENsYXNzIENvZGU6XCJcbiMgICAgYW5vbl9zaWdudXBfYXNrX3RlYWNoZXI6IFwiRG9uJ3QgaGF2ZSBvbmU/IEFzayB5b3VyIHRlYWNoZXIhXCJcbiMgICAgYW5vbl9zaWdudXBfY3JlYXRlX2NsYXNzOiBcIldhbnQgdG8gY3JlYXRlIGEgY2xhc3M/XCJcbiMgICAgYW5vbl9zaWdudXBfc2V0dXBfY2xhc3M6IFwiU2V0IHVwIGEgY2xhc3MsIGFkZCB5b3VyIHN0dWRlbnRzLCBhbmQgbW9uaXRvciBwcm9ncmVzcyFcIlxuIyAgICBhbm9uX3NpZ251cF9jcmVhdGVfdGVhY2hlcjogXCJDcmVhdGUgZnJlZSB0ZWFjaGVyIGFjY291bnRcIlxuICAgIHBsYXlfYXM6IFwiU3BlbGEgc29tIFwiICMgTGFkZGVyIHBhZ2VcbiMgICAgZ2V0X2NvdXJzZV9mb3JfY2xhc3M6IFwiQXNzaWduIEdhbWUgRGV2ZWxvcG1lbnQgYW5kIG1vcmUgdG8geW91ciBjbGFzc2VzIVwiXG4gICAgcmVxdWVzdF9saWNlbnNlczogXCJLb250YWt0YSB2w6VyYSBza29sc3BlY2lhbGlzdGVyIGbDtnIgbWVyIGluZm9ybWF0aW9uXCJcbiAgICBjb21wZXRlOiBcIlTDpHZsYSFcIiAjIENvdXJzZSBkZXRhaWxzIHBhZ2VcbiAgICBzcGVjdGF0ZTogXCJUaXR0YSBww6VcIiAjIExhZGRlciBwYWdlXG4gICAgcGxheWVyczogXCJzcGVsYXJlXCIgIyBIb3ZlciBvdmVyIGEgbGV2ZWwgb24gL3BsYXlcbiAgICBob3Vyc19wbGF5ZWQ6IFwidGltbWFyIHNwZWxhZGVcIiAjIEhvdmVyIG92ZXIgYSBsZXZlbCBvbiAvcGxheVxuICAgIGl0ZW1zOiBcIkbDtnJlbcOlbFwiICMgVG9vbHRpcCBvbiBpdGVtIHNob3AgYnV0dG9uIGZyb20gL3BsYXlcbiAgICB1bmxvY2s6IFwiTMOlcyB1cHBcIiAjIEZvciBwdXJjaGFzaW5nIGl0ZW1zIGFuZCBoZXJvZXNcbiAgICBjb25maXJtOiBcIkJla3LDpGZ0YVwiXG4gICAgb3duZWQ6IFwiw4RncyBhdiBkaWdcIiAjIEZvciBpdGVtcyB5b3Ugb3duXG4gICAgbG9ja2VkOiBcIkzDpXN0XCJcbiAgICBhdmFpbGFibGU6IFwiVGlsbGfDpG5nbGlndFwiXG4gICAgc2tpbGxzX2dyYW50ZWQ6IFwiR2VyIGbDpHJkaWdoZXRlclwiICMgUHJvcGVydHkgZG9jdW1lbnRhdGlvbiBkZXRhaWxzXG4gICAgaGVyb2VzOiBcIkhqw6RsdGFyXCIgIyBUb29sdGlwIG9uIGhlcm8gc2hvcCBidXR0b24gZnJvbSAvcGxheVxuICAgIGFjaGlldmVtZW50czogXCJQcmVzdGF0aW9uZXJcIiAjIFRvb2x0aXAgb24gYWNoaWV2ZW1lbnQgbGlzdCBidXR0b24gZnJvbSAvcGxheVxuICAgIHNldHRpbmdzOiBcIkluc3TDpGxsbmluZ2FyXCIgIyBUb29sdGlwIG9uIHNldHRpbmdzIGJ1dHRvbiBmcm9tIC9wbGF5XG4gICAgcG9sbDogXCJPbXLDtnN0bmluZ1wiICMgVG9vbHRpcCBvbiBwb2xsIGJ1dHRvbiBmcm9tIC9wbGF5XG4gICAgbmV4dDogXCJOw6RzdGFcIiAjIEdvIGZyb20gY2hvb3NlIGhlcm8gdG8gY2hvb3NlIGludmVudG9yeSBiZWZvcmUgcGxheWluZyBhIGxldmVsXG4gICAgY2hhbmdlX2hlcm86IFwiQnl0IEhqw6RsdGVcIiAjIEdvIGJhY2sgZnJvbSBjaG9vc2UgaW52ZW50b3J5IHRvIGNob29zZSBoZXJvXG4gICAgY2hhbmdlX2hlcm9fb3JfbGFuZ3VhZ2U6IFwiQnl0IEhqw6RsdGUgZWxsZXIgU3Byw6VrXCJcbiAgICBidXlfZ2VtczogXCJLw7ZwIMOkZGVsc3RlbmFyXCJcbiAgICBzdWJzY3JpYmVyc19vbmx5OiBcIkVuZGFzdCBwcmVudW1lcmFudGVyIVwiXG4gICAgc3Vic2NyaWJlX3VubG9jazogXCJQcmVudW1lcmVyYSBmw7ZyIGF0dCBsw6VzYSB1cHAhXCJcbiMgICAgc3Vic2NyaWJlcl9oZXJvZXM6IFwiU3Vic2NyaWJlIHRvZGF5IHRvIGltbWVkaWF0ZWx5IHVubG9jayBBbWFyYSwgSHVzaGJhdW0sIGFuZCBIYXR0b3JpIVwiXG4jICAgIHN1YnNjcmliZXJfZ2VtczogXCJTdWJzY3JpYmUgdG9kYXkgdG8gcHVyY2hhc2UgdGhpcyBoZXJvIHdpdGggZ2VtcyFcIlxuICAgIGFub255bW91czogXCJBbm9ueW0gU3BlbGFyZVwiXG4gICAgbGV2ZWxfZGlmZmljdWx0eTogXCJTdsOlcmlnaGV0c2dyYWQ6IFwiXG4gICAgYXdhaXRpbmdfbGV2ZWxzX2FkdmVudHVyZXJfcHJlZml4OiBcIlZpIHNsw6RwcGVyIG55YSBuaXbDpWVyIHZhcmplIHZlY2thLlwiICMge2NoYW5nZX1cbiAgICBhd2FpdGluZ19sZXZlbHNfYWR2ZW50dXJlcjogXCJSZWdpc3RyZXJhIGRpZyBzb20gw6R2ZW50eXJhcmVcIlxuICAgIGF3YWl0aW5nX2xldmVsc19hZHZlbnR1cmVyX3N1ZmZpeDogXCJmw7ZyIGF0dCB2YXJhIGbDtnJzdCBhdHQgc3BlbGEgbnlhIG5pdsOlZXIuXCJcbiAgICBhZGp1c3Rfdm9sdW1lOiBcImp1c3RlcmEgdm9seW1lblwiXG4gICAgY2FtcGFpZ25fbXVsdGlwbGF5ZXI6IFwiRmxlcnNwZWxhcmFyZW5vclwiXG4gICAgY2FtcGFpZ25fbXVsdGlwbGF5ZXJfZGVzY3JpcHRpb246IFwiLi4uIGkgdmlsa2VuIGR1IHTDpHZsYXIgaSBrb2RhbmRlIG1vdCBhbmRyYSBzcGVsYXJlXCJcbiAgICBicmFpbl9wb3BfZG9uZTogXCJEdSBoYXIgYmVzZWdyYXQgdHJvbGxlbiBtZWQga29kISBEdSB2YW5uIVwiXG4gICAgYnJhaW5fcG9wX2NoYWxsZW5nZTogXCJVdG1hbmEgZGlnIHNqw6RsdiBhdHQgc3BlbGEgaWdlbiBtZWQgZXR0IGFubmF0IHByb2dyYW1tZXJpbmdzc3Byw6VrXCJcbiMgICAgcmVwbGF5OiBcIlJlcGxheVwiXG4gICAgYmFja190b19jbGFzc3Jvb206IFwiVGlsbGJha2EgdGlsbCBrbGFzc3J1bW1ldFwiXG4gICAgdGVhY2hlcl9idXR0b246IFwiRsO2ciBsw6RyYXJlXCJcbiMgICAgZ2V0X21vcmVfY29kZWNvbWJhdDogXCJHZXQgTW9yZSBDb2RlQ29tYmF0XCJcblxuICBjb2RlOlxuICAgIGlmOiBcIm9tXCIgIyBLZXl3b3Jkcy0tdGhlc2UgdHJhbnNsYXRpb25zIHNob3cgdXAgb24gaG92ZXIsIHNvIHBsZWFzZSB0cmFuc2xhdGUgdGhlbSBhbGwsIGV2ZW4gaWYgaXQncyBraW5kIG9mIGxvbmcuIChJbiB0aGUgY29kZSBlZGl0b3IsIHRoZXkgd2lsbCBzdGlsbCBiZSBpbiBFbmdsaXNoLilcbiAgICBlbHNlOiBcImFubmFyc1wiXG4gICAgZWxpZjogXCJhbm5hcnMgb21cIlxuICAgIHdoaWxlOiBcIm1lZGFuc1wiXG4jICAgIGxvb3A6IFwibG9vcFwiXG4gICAgZm9yOiBcImbDtnJcIlxuICAgIGJyZWFrOiBcImJyeXRcIlxuICAgIGNvbnRpbnVlOiBcImZvcnRzw6R0dFwiXG4gICAgcGFzczogXCJwYXNzYVwiXG4gICAgcmV0dXJuOiBcInJldHVybmVyYVwiXG4gICAgdGhlbjogXCJkw6VcIlxuICAgIGRvOiBcImfDtnJcIlxuICAgIGVuZDogXCJzbHV0XCJcbiAgICBmdW5jdGlvbjogXCJmdW5rdGlvblwiXG4gICAgZGVmOiBcImRlZmluZXJhXCJcbiAgICB2YXI6IFwidmFyaWFiZWxcIlxuICAgIHNlbGY6IFwic2rDpGx2XCJcbiAgICBoZXJvOiBcImhqw6RsdGVcIlxuICAgIHRoaXM6IFwiZGVubmEvZGV0dGFcIlxuICAgIG9yOiBcImVsbGVyXCJcbiAgICBcInx8XCI6IFwiZWxsZXJcIlxuICAgIGFuZDogXCJvY2hcIlxuICAgIFwiJiZcIjogXCJvY2hcIlxuICAgIG5vdDogXCJpbnRlXCJcbiAgICBcIiFcIjogXCJpbnRlXCJcbiAgICBcIj1cIjogXCJ0aWxsZGVsYVwiXG4gICAgXCI9PVwiOiBcImxpa2EgbWVkXCJcbiAgICBcIj09PVwiOiBcInN0cmlrdCBsaWthIG1lZFwiXG4gICAgXCIhPVwiOiBcIsOkciBpbnRlIGxpa2EgbWVkXCJcbiAgICBcIiE9PVwiOiBcIsOkciBpbnRlIHN0cmlrdCBsaWthIG1lZFwiXG4gICAgXCI+XCI6IFwiw6RyIHN0w7ZycmUgw6RuXCJcbiAgICBcIj49XCI6IFwiw6RyIHN0w7ZycmUgZWxsZXIgbGlrYSBtZWRcIlxuICAgIFwiPFwiOiBcIsOkciBtaW5kcmUgw6RuXCJcbiAgICBcIjw9XCI6IFwiw6RyIG1pbmRyZSBlbGxlciBsaWthIG1lZFwiXG4gICAgXCIqXCI6IFwibXVsdGlwbGljZXJhdCBtZWRcIlxuICAgIFwiL1wiOiBcImRlbGF0IG1lZFwiXG4gICAgXCIrXCI6IFwicGx1c1wiXG4gICAgXCItXCI6IFwibWludXNcIlxuICAgIFwiKz1cIjogXCJhZGRlcmEgb2NoIHRpbGxkZWxhXCJcbiAgICBcIi09XCI6IFwic3VidHJhaGVyYSBvY2ggdGlsbGRlbGFcIlxuICAgIFRydWU6IFwiU2FudFwiXG4gICAgdHJ1ZTogXCJzYW50XCJcbiAgICBGYWxzZTogXCJGYWxza3RcIlxuICAgIGZhbHNlOiBcIkZhbHNrdFwiXG4gICAgdW5kZWZpbmVkOiBcIm9kZWZpbmVyYXRcIlxuICAgIG51bGw6IFwibnVsbFwiXG4jICAgIG5pbDogXCJuaWxcIlxuIyAgICBOb25lOiBcIk5vbmVcIlxuXG4gIHNoYXJlX3Byb2dyZXNzX21vZGFsOlxuICAgIGJsdXJiOiBcIkR1IGfDtnIgc3RvcmEgZnJhbXN0ZWchIEJlcsOkdHRhIGbDtnIgZGluYSBmw7Zyw6RsZHJhciBodXIgbXlja2V0IGR1IGzDpHJ0IGRpZyB0YWNrIHZhcmUgQ29kZUNvbWJhdC5cIlxuICAgIGVtYWlsX2ludmFsaWQ6IFwib2dpbHRpZyBtZWpsYWRyZXNzLlwiXG4gICAgZm9ybV9ibHVyYjogXCJBbmdlIGVuIGbDtnLDpGxkZXJzIG1lamxhZHJlc3Mgc8OlIHZpc2FyIHZpIGRlbSFcIlxuICAgIGZvcm1fbGFiZWw6IFwiTWVqbGFkcmVzc1wiXG4gICAgcGxhY2Vob2xkZXI6IFwibWVqbGFkcmVzc1wiXG4gICAgdGl0bGU6IFwiVXRtw6Rya3QgYXJiZXRlLCBsw6RybGluZ1wiXG5cbiAgbG9naW46XG4gICAgc2lnbl91cDogXCJTa2FwYSBrb250b1wiXG4gICAgZW1haWxfb3JfdXNlcm5hbWU6IFwiRS1wb3N0YWRyZXNzIGVsbGVyIGFudsOkbmRhcm5hbW5cIlxuICAgIGxvZ19pbjogXCJMb2dnYSBpblwiXG4gICAgbG9nZ2luZ19pbjogXCJMb2dnYXIgaW5cIlxuICAgIGxvZ19vdXQ6IFwiTG9nZ2EgdXRcIlxuICAgIGZvcmdvdF9wYXNzd29yZDogXCJHbMO2bXQgZGl0dCBsw7ZzZW5vcmQ/XCJcbiAgICBmaW5pc2hpbmc6IFwiRsOkcmRpZ3N0w6RsbGVyXCJcbiAgICBzaWduX2luX3dpdGhfZmFjZWJvb2s6IFwiTG9nZ2EgaW4gbWVkIEZhY2Vib29rXCJcbiAgICBzaWduX2luX3dpdGhfZ3BsdXM6IFwiTG9nZ2EgaW4gbWVkIEcrXCJcbiAgICBzaWdudXBfc3dpdGNoOiBcIlZpbGwgZHUgc2thcGEgZXR0IGtvbnRvP1wiXG5cbiAgc2lnbnVwOlxuIyAgICBjb21wbGV0ZV9zdWJzY3JpcHRpb246IFwiQ29tcGxldGUgU3Vic2NyaXB0aW9uXCJcbiAgICBjcmVhdGVfc3R1ZGVudF9oZWFkZXI6IFwiU2thcGEgZWxldmtvbnRvXCJcbiAgICBjcmVhdGVfdGVhY2hlcl9oZWFkZXI6IFwiU2thcGEgbMOkcmFya29udG9cIlxuICAgIGNyZWF0ZV9pbmRpdmlkdWFsX2hlYWRlcjogXCJTa2FwYSBpbmRpdmlkdWVsbHQga29udG9cIlxuICAgIGVtYWlsX2Fubm91bmNlbWVudHM6IFwiTW90dGFnIG55aGV0ZXIgdmlhIG1lamxcIiAjIHtjaGFuZ2V9XG4gICAgc2lnbl9pbl90b19jb250aW51ZTogXCJMb2dnYSBpbiBlbGxlciBza2FwYSBldHQga29udG8gZsO2ciBhdHQgZm9ydHPDpHR0YVwiXG4gICAgdGVhY2hlcl9lbWFpbF9hbm5vdW5jZW1lbnRzOiBcIktlZXAgbWUgdXBkYXRlZCBvbiBuZXcgdGVhY2hlciByZXNvdXJjZXMsIGN1cnJpY3VsdW0sIGFuZCBjb3Vyc2VzIVwiXG4gICAgY3JlYXRpbmc6IFwiU2thcGFyIGtvbnRvLi4uXCJcbiAgICBzaWduX3VwOiBcIlNrYXBhIGtvbnRvXCJcbiAgICBsb2dfaW46IFwibG9nZ2EgaW4gbWVkIGzDtnNlbm9yZFwiXG4jICAgIGxvZ2luOiBcIkxvZ2luXCJcbiAgICByZXF1aXJlZDogXCJEdSBtw6VzdGUgbG9nZ2EgaW4gaW5uYW4gZHUga2FuIGfDpSBkaXRcIlxuICAgIGxvZ2luX3N3aXRjaDogXCJIYXIgZHUgcmVkYW4gZXR0IGtvbnRvP1wiXG4gICAgb3B0aW9uYWw6IFwidmFsZnJpdHRcIlxuIyAgICBjb25uZWN0ZWRfZ3BsdXNfaGVhZGVyOiBcIllvdSd2ZSBzdWNjZXNzZnVsbHkgY29ubmVjdGVkIHdpdGggR29vZ2xlKyFcIlxuIyAgICBjb25uZWN0ZWRfZ3BsdXNfcDogXCJGaW5pc2ggc2lnbmluZyB1cCBzbyB5b3UgY2FuIGxvZyBpbiB3aXRoIHlvdXIgR29vZ2xlKyBhY2NvdW50LlwiXG4jICAgIGNvbm5lY3RlZF9mYWNlYm9va19oZWFkZXI6IFwiWW91J3ZlIHN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgd2l0aCBGYWNlYm9vayFcIlxuIyAgICBjb25uZWN0ZWRfZmFjZWJvb2tfcDogXCJGaW5pc2ggc2lnbmluZyB1cCBzbyB5b3UgY2FuIGxvZyBpbiB3aXRoIHlvdXIgRmFjZWJvb2sgYWNjb3VudC5cIlxuICAgIGhleV9zdHVkZW50czogXCJFbGV2ZXIsIGFuZ2Uga2xhc3Nrb2RlbiBmcsOlbiBlciBsw6RyYXJlLlwiXG4gICAgYmlydGhkYXk6IFwiRsO2ZGVsc2VkYXR1bVwiXG4jICAgIHBhcmVudF9lbWFpbF9ibHVyYjogXCJXZSBrbm93IHlvdSBjYW4ndCB3YWl0IHRvIGxlYXJuIHByb2dyYW1taW5nICZtZGFzaDsgd2UncmUgZXhjaXRlZCB0b28hIFlvdXIgcGFyZW50cyB3aWxsIHJlY2VpdmUgYW4gZW1haWwgd2l0aCBmdXJ0aGVyIGluc3RydWN0aW9ucyBvbiBob3cgdG8gY3JlYXRlIGFuIGFjY291bnQgZm9yIHlvdS4gRW1haWwge3tlbWFpbF9saW5rfX0gaWYgeW91IGhhdmUgYW55IHF1ZXN0aW9ucy5cIlxuICAgIGNsYXNzcm9vbV9ub3RfZm91bmQ6IFwiRGV0IGZpbm5zIGluZ2Ega2xhc3NlciBtZWQgZGVuIGjDpHIga2xhc3Nrb2Rlbi4gS29udHJvbGxlcmEgc3Rhdm5pbmdlbiBlbGxlciBmcsOlZ2EgZGluIGzDpHJhcmUgb20gaGrDpGxwLlwiXG4gICAgY2hlY2tpbmc6IFwiS29udHJvbGxlcmFyLi4uXCJcbiAgICBhY2NvdW50X2V4aXN0czogXCJEZW4gaMOkciBtYWlsYWRyZXNzZW4gYW52w6RuZHMgcmVkYW46XCJcbiAgICBzaWduX2luOiBcIkxvZ2dhIGluXCJcbiMgICAgZW1haWxfZ29vZDogXCJFbWFpbCBsb29rcyBnb29kIVwiXG4gICAgbmFtZV90YWtlbjogXCJBbnbDpG5kYXJuYW1uZXQgw6RyIHJlZGFuIHRhZ2V0ISBQcm92YSB7e3N1Z2dlc3RlZE5hbWV9fT9cIlxuICAgIG5hbWVfYXZhaWxhYmxlOiBcIkFudsOkbmRhcm5hbW4gdGlsbGfDpG5nbGlndCFcIlxuICAgIG5hbWVfaXNfZW1haWw6IFwiQW52w6RuZGFybmFtbmV0IGthbiBpbnRlIHZhcmEgZW4gZXBvc3RhZHJlc3NcIlxuICAgIGNob29zZV90eXBlOiBcIlbDpGxqIGRpbiBrb250b3R5cFwiXG4gICAgdGVhY2hlcl90eXBlXzE6IFwiTMOkciB1dCBwcm9ncmFtbWVyaW5nIG1lZCBDb2RlQ29tYmF0IVwiXG4jICAgIHRlYWNoZXJfdHlwZV8yOiBcIlNldCB1cCB5b3VyIGNsYXNzXCJcbiMgICAgdGVhY2hlcl90eXBlXzM6IFwiQWNjZXNzIENvdXJzZSBHdWlkZXNcIlxuIyAgICB0ZWFjaGVyX3R5cGVfNDogXCJWaWV3IHN0dWRlbnQgcHJvZ3Jlc3NcIlxuIyAgICBzaWdudXBfYXNfdGVhY2hlcjogXCJTaWduIHVwIGFzIGEgVGVhY2hlclwiXG4jICAgIHN0dWRlbnRfdHlwZV8xOiBcIkxlYXJuIHRvIHByb2dyYW0gd2hpbGUgcGxheWluZyBhbiBlbmdhZ2luZyBnYW1lIVwiXG4gICAgc3R1ZGVudF90eXBlXzI6IFwiU3BlbGEgbWVkIGRpbiBrbGFzc1wiXG4gICAgc3R1ZGVudF90eXBlXzM6IFwiVMOkdmxhIGkgYXJlbm9yXCJcbiAgICBzdHVkZW50X3R5cGVfNDogXCJWw6RsaiBkaW4gaGrDpGx0ZSFcIlxuICAgIHN0dWRlbnRfdHlwZV81OiBcIkhhIGRpbiBrbGFzc2tvZCByZWRvIVwiXG4jICAgIHNpZ251cF9hc19zdHVkZW50OiBcIlNpZ24gdXAgYXMgYSBTdHVkZW50XCJcbiMgICAgaW5kaXZpZHVhbHNfb3JfcGFyZW50czogXCJJbmRpdmlkdWFscyAmIFBhcmVudHNcIlxuIyAgICBpbmRpdmlkdWFsX3R5cGU6IFwiRm9yIHBsYXllcnMgbGVhcm5pbmcgdG8gY29kZSBvdXRzaWRlIG9mIGEgY2xhc3MuIFBhcmVudHMgc2hvdWxkIHNpZ24gdXAgZm9yIGFuIGFjY291bnQgaGVyZS5cIlxuIyAgICBzaWdudXBfYXNfaW5kaXZpZHVhbDogXCJTaWduIHVwIGFzIGFuIEluZGl2aWR1YWxcIlxuICAgIGVudGVyX2NsYXNzX2NvZGU6IFwiQW5nZSBkaW4ga2xhc3Nrb2RcIlxuICAgIGVudGVyX2JpcnRoZGF0ZTogXCJBbmdlIGRpdHQgZsO2ZGVsc2VkYXR1bTpcIlxuICAgIHBhcmVudF91c2VfYmlydGhkYXRlOiBcIkbDtnLDpGxkcmFyLCBhbmdlIGVyYSBlZ25hIGbDtmRlbHNlZGF0dW0uXCJcbiAgICBhc2tfdGVhY2hlcl8xOiBcIkZyw6VnYSBkaW4gbMOkcmFyZSBvbSBlciBrbGFzc2tvZC5cIlxuICAgIGFza190ZWFjaGVyXzI6IFwiSW50ZSBlbiBkZWwgYXYgZW4ga2xhc3M/IFNrYXBhIGV0dCBcIlxuIyAgICBhc2tfdGVhY2hlcl8zOiBcIkluZGl2aWR1YWwgQWNjb3VudFwiXG4gICAgYXNrX3RlYWNoZXJfNDogXCIgaXN0w6RsbGV0LlwiXG4jICAgIGFib3V0X3RvX2pvaW46IFwiWW91J3JlIGFib3V0IHRvIGpvaW46XCJcbiAgICBlbnRlcl9wYXJlbnRfZW1haWw6IFwiQW5nZSBkaW4gZsO2csOkbGRlcnMgZXBvc3RhZHJlc3M6XCJcbiMgICAgcGFyZW50X2VtYWlsX2Vycm9yOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gdHJ5aW5nIHRvIHNlbmQgdGhlIGVtYWlsLiBDaGVjayB0aGUgZW1haWwgYWRkcmVzcyBhbmQgdHJ5IGFnYWluLlwiXG4jICAgIHBhcmVudF9lbWFpbF9zZW50OiBcIldl4oCZdmUgc2VudCBhbiBlbWFpbCB3aXRoIGZ1cnRoZXIgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBjcmVhdGUgYW4gYWNjb3VudC4gQXNrIHlvdXIgcGFyZW50IHRvIGNoZWNrIHRoZWlyIGluYm94LlwiXG4gICAgYWNjb3VudF9jcmVhdGVkOiBcIktvbnRvIHNrYXBhdCFcIlxuIyAgICBjb25maXJtX3N0dWRlbnRfYmx1cmI6IFwiV3JpdGUgZG93biB5b3VyIGluZm9ybWF0aW9uIHNvIHRoYXQgeW91IGRvbid0IGZvcmdldCBpdC4gWW91ciB0ZWFjaGVyIGNhbiBhbHNvIGhlbHAgeW91IHJlc2V0IHlvdXIgcGFzc3dvcmQgYXQgYW55IHRpbWUuXCJcbiMgICAgY29uZmlybV9pbmRpdmlkdWFsX2JsdXJiOiBcIldyaXRlIGRvd24geW91ciBsb2dpbiBpbmZvcm1hdGlvbiBpbiBjYXNlIHlvdSBuZWVkIGl0IGxhdGVyLiBWZXJpZnkgeW91ciBlbWFpbCBzbyB5b3UgY2FuIHJlY292ZXIgeW91ciBhY2NvdW50IGlmIHlvdSBldmVyIGZvcmdldCB5b3VyIHBhc3N3b3JkIC0gY2hlY2sgeW91ciBpbmJveCFcIlxuICAgIHdyaXRlX3RoaXNfZG93bjogXCJTa3JpdiBuZXIgZGV0dGE6XCJcbiAgICBzdGFydF9wbGF5aW5nOiBcIkLDtnJqYSBzcGVsYSFcIlxuIyAgICBzc29fY29ubmVjdGVkOiBcIlN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgd2l0aDpcIlxuICAgIHNlbGVjdF95b3VyX3N0YXJ0aW5nX2hlcm86IFwiVsOkbGogZGluIGhqw6RsdGU6XCJcbiAgICB5b3VfY2FuX2Fsd2F5c19jaGFuZ2VfeW91cl9oZXJvX2xhdGVyOiBcIkR1IGthbiBhbGx0aWQgYnl0YSBkaW4gaGrDpHRlIHNlbmFyZS5cIlxuIyAgICBmaW5pc2g6IFwiRmluaXNoXCJcbiAgICB0ZWFjaGVyX3JlYWR5X3RvX2NyZWF0ZV9jbGFzczogXCJEdSDDpHIgcmVkbyBhdHQgc2thcGEgZGluIGbDtnJzdGEga2xhc3MhXCJcbiAgICB0ZWFjaGVyX3N0dWRlbnRzX2Nhbl9zdGFydF9ub3c6IFwiRGluYSBlbGV2ZXIga29tbWVyIGt1bm5hIGLDtnJqYSBzcGVsYSBmw7Zyc3RhIGt1cnNlbiwgSW50cm9kdWt0aW9uIHRpbGwgZGF0YXZldGVuc2thcCwgZGlyZWt0LlwiXG4gICAgdGVhY2hlcl9saXN0X2NyZWF0ZV9jbGFzczogXCJQw6UgbsOkc3RhIHNrw6RybSBrb21tZXIgZHUga3VubmEgc2thcGEgZW4gbnkga2xhc3MuXCJcbiAgICB0ZWFjaGVyX2xpc3RfYWRkX3N0dWRlbnRzOiBcIkzDpGdnIHRpbGwgZWxldmVyIHRpbGwga2xhc3NlbiBnZW5vbSBhdHQga2xpY2thIHDDpSBWaXNhIGtsYXNzLWzDpG5rZW4sIHNlbiBrYW4gZHUgc2tpY2thIGtsYXNza29kZW4gZWxsZXIgbMOkbmtlbiB0aWxsIGRpbmEgZWxldmVyLiBEdSBrYW4gb2Nrc8OlIGJqdWRhIGluIGRlbSB2aWEgbWFpbCBvbSBkZSBoYXIgZW4gZXBvc3RhZHJlc3MuXCJcbiMgICAgdGVhY2hlcl9saXN0X3Jlc291cmNlX2h1Yl8xOiBcIkNoZWNrIG91dCB0aGVcIlxuIyAgICB0ZWFjaGVyX2xpc3RfcmVzb3VyY2VfaHViXzI6IFwiQ291cnNlIEd1aWRlc1wiXG4jICAgIHRlYWNoZXJfbGlzdF9yZXNvdXJjZV9odWJfMzogXCJmb3Igc29sdXRpb25zIHRvIGV2ZXJ5IGxldmVsLCBhbmQgdGhlXCJcbiMgICAgdGVhY2hlcl9saXN0X3Jlc291cmNlX2h1Yl80OiBcIlJlc291cmNlIEh1YlwiXG4jICAgIHRlYWNoZXJfbGlzdF9yZXNvdXJjZV9odWJfNTogXCJmb3IgY3VycmljdWx1bSBndWlkZXMsIGFjdGl2aXRpZXMsIGFuZCBtb3JlIVwiXG4jICAgIHRlYWNoZXJfYWRkaXRpb25hbF9xdWVzdGlvbnM6IFwiVGhhdOKAmXMgaXQhIElmIHlvdSBuZWVkIGFkZGl0aW9uYWwgaGVscCBvciBoYXZlIHF1ZXN0aW9ucywgcmVhY2ggb3V0IHRvIF9fc3VwcG9ydEVtYWlsX18uXCJcbiAgICBkb250X3VzZV9vdXJfZW1haWxfc2lsbHk6IFwiQW5nZSBpbnRlIGRpbiBlcG9zdGFkcmVzcyBow6RyISBBbmdlIGRpbiBmw7Zyw6RsZGVycyBlcG9zdGFkcmVzcy5cIlxuICAgIHdhbnRfY29kZWNvbWJhdF9pbl9zY2hvb2w6IFwiVmlsbCBkdSBzcGVsYSBDb2RlQ29tYmF0IGhlbGEgdGlkZW4/XCJcbiMgICAgZXVfY29uZmlybWF0aW9uOiBcIkkgYWdyZWUgdG8gYWxsb3cgQ29kZUNvbWJhdCB0byBzdG9yZSBteSBkYXRhIG9uIFVTIHNlcnZlcnMuXCJcbiMgICAgZXVfY29uZmlybWF0aW9uX3BsYWNlX29mX3Byb2Nlc3Npbmc6IFwiTGVhcm4gbW9yZSBhYm91dCB0aGUgcG9zc2libGUgcmlza3NcIlxuICAgIGV1X2NvbmZpcm1hdGlvbl9zdHVkZW50OiBcIk9tIGR1IMOkciBvc8Oka2VyLCBmcsOlZ2EgZGluIGzDpHJhcmUuXCJcbiMgICAgZXVfY29uZmlybWF0aW9uX2luZGl2aWR1YWw6IFwiSWYgeW91IGRvIG5vdCB3YW50IHVzIHRvIHN0b3JlIHlvdXIgZGF0YSBvbiBVUyBzZXJ2ZXJzLCB5b3UgY2FuIGFsd2F5cyBrZWVwIHBsYXlpbmcgYW5vbnltb3VzbHkgd2l0aG91dCBzYXZpbmcgeW91ciBjb2RlLlwiXG5cbiAgcmVjb3ZlcjpcbiAgICByZWNvdmVyX2FjY291bnRfdGl0bGU6IFwiw4V0ZXJza2FwYSBkaXR0IGtvbnRvXCJcbiAgICBzZW5kX3Bhc3N3b3JkOiBcIlNraWNrYSDDpXRlcnNrYXBuaW5nc2zDtnNlbm9yZFwiXG4gICAgcmVjb3Zlcnlfc2VudDogXCLDhXRlcnNrYXBuaW5nc2zDtnNlbm9yZCBza2lja2F0LlwiXG5cbiAgaXRlbXM6XG4gICAgcHJpbWFyeTogXCJQcmltw6RyXCJcbiAgICBzZWNvbmRhcnk6IFwiU2VrdW5kw6RyXCJcbiAgICBhcm1vcjogXCJSdXN0bmluZ1wiXG4gICAgYWNjZXNzb3JpZXM6IFwiVGlsbGJlaMO2clwiXG4gICAgbWlzYzogXCLDlnZyaWd0XCJcbiAgICBib29rczogXCJCw7Zja2VyXCJcblxuICBjb21tb246XG4jICAgIGRlZmF1bHRfdGl0bGU6IFwiQ29kZUNvbWJhdCAtIENvZGluZyBnYW1lcyB0byBsZWFybiBQeXRob24gYW5kIEphdmFTY3JpcHRcIlxuIyAgICBkZWZhdWx0X21ldGFfZGVzY3JpcHRpb246IFwiTGVhcm4gdHlwZWQgY29kZSB0aHJvdWdoIGEgcHJvZ3JhbW1pbmcgZ2FtZS4gTGVhcm4gUHl0aG9uLCBKYXZhU2NyaXB0LCBhbmQgSFRNTCBhcyB5b3Ugc29sdmUgcHV6emxlcyBhbmQgbGVhcm4gdG8gbWFrZSB5b3VyIG93biBjb2RpbmcgZ2FtZXMgYW5kIHdlYnNpdGVzLlwiXG4gICAgYmFjazogXCJUaWxsYmFrYVwiICMgV2hlbiB1c2VkIGFzIGFuIGFjdGlvbiB2ZXJiLCBsaWtlIFwiTmF2aWdhdGUgYmFja3dhcmRcIlxuICAgIGNvbWluZ19zb29uOiBcIktvbW1lciBzbmFydCFcIlxuICAgIGNvbnRpbnVlOiBcIkZvcnRzw6R0dFwiICMgV2hlbiB1c2VkIGFzIGFuIGFjdGlvbiB2ZXJiLCBsaWtlIFwiQ29udGludWUgZm9yd2FyZFwiXG4gICAgbmV4dDogXCJOw6RzdGFcIlxuIyAgICBkZWZhdWx0X2NvZGU6IFwiRGVmYXVsdCBDb2RlXCJcbiAgICBsb2FkaW5nOiBcIkxhZGRhci4uLlwiXG4gICAgb3ZlcnZpZXc6IFwiw5Z2ZXJzaWt0XCJcbiMgICAgcHJvY2Vzc2luZzogXCJQcm9jZXNzaW5nLi4uXCJcbiAgICBzb2x1dGlvbjogXCJMw7ZzbmluZ1wiXG4gICAgdGFibGVfb2ZfY29udGVudHM6IFwiSW5uZWjDpWxsc2bDtnJ0ZWNrbmluZ1wiXG4gICAgaW50cm86IFwiSW50cm9cIlxuICAgIHNhdmluZzogXCJTcGFyYXIuLi5cIlxuICAgIHNlbmRpbmc6IFwiU2tpY2thci4uLlwiXG4gICAgc2VuZDogXCJTa2lja2FcIlxuICAgIHNlbnQ6IFwiU2tpY2thdFwiXG4gICAgY2FuY2VsOiBcIkF2YnJ5dFwiXG4gICAgc2F2ZTogXCJTcGFyYVwiXG4gICAgcHVibGlzaDogXCJQdWJsaWNlcmFcIlxuICAgIGNyZWF0ZTogXCJTa2FwYVwiXG4gICAgZm9yazogXCJGw7ZyZ3JlbmFcIlxuICAgIHBsYXk6IFwiU3BlbGFcIiAjIFdoZW4gdXNlZCBhcyBhbiBhY3Rpb24gdmVyYiwgbGlrZSBcIlBsYXkgbmV4dCBsZXZlbFwiXG4gICAgcmV0cnk6IFwiRsO2cnPDtmsgaWdlblwiXG4gICAgYWN0aW9uczogXCJIYW5kbGluZ2FyXCJcbiAgICBpbmZvOiBcIkluZm9cIlxuICAgIGhlbHA6IFwiSGrDpGxwXCJcbiMgICAgd2F0Y2g6IFwiV2F0Y2hcIlxuIyAgICB1bndhdGNoOiBcIlVud2F0Y2hcIlxuIyAgICBzdWJtaXRfcGF0Y2g6IFwiU3VibWl0IFBhdGNoXCJcbiAgICBzdWJtaXRfY2hhbmdlczogXCJTcGFyYSDDhG5kcmluZ2FyXCJcbiAgICBzYXZlX2NoYW5nZXM6IFwiU3BhcmEgw6RuZHJpbmdhclwiXG4gICAgcmVxdWlyZWRfZmllbGQ6IFwib2JsaWdhdG9yaXNrdFwiXG5cbiAgZ2VuZXJhbDpcbiAgICBhbmQ6IFwib2NoXCJcbiAgICBuYW1lOiBcIk5hbW5cIlxuICAgIGRhdGU6IFwiRGF0dW1cIlxuICAgIGJvZHk6IFwiS3JvcHBcIlxuICAgIHZlcnNpb246IFwiVmVyc2lvblwiXG4jICAgIHBlbmRpbmc6IFwiUGVuZGluZ1wiXG4gICAgYWNjZXB0ZWQ6IFwiQWNjZXB0ZXJhZFwiXG4gICAgcmVqZWN0ZWQ6IFwiQXZ2aXNhZFwiXG4jICAgIHdpdGhkcmF3bjogXCJXaXRoZHJhd25cIlxuICAgIGFjY2VwdDogXCJBY2NlcHRlcmFcIlxuICAgIGFjY2VwdF9hbmRfc2F2ZTogXCJBY2NlcHRlcmEgb2NoIHNwYXJhXCJcbiAgICByZWplY3Q6IFwiQXZ2aXNhXCJcbiMgICAgd2l0aGRyYXc6IFwiV2l0aGRyYXdcIlxuICAgIHN1Ym1pdHRlcjogXCJJbmzDpG1uYXJlXCJcbiAgICBzdWJtaXR0ZWQ6IFwiSW5sw6RtbmF0XCJcbiAgICBjb21taXRfbXNnOiBcIsOEbmRyaW5nc21lZGRlbGFuZGVcIlxuICAgIHZlcnNpb25faGlzdG9yeTogXCLDhG5kcmluZ3NoaXN0b3Jpa1wiXG4gICAgdmVyc2lvbl9oaXN0b3J5X2ZvcjogXCLDhG5kcmluZ3NoaXN0b3JpayBmw7ZyOiBcIlxuICAgIHNlbGVjdF9jaGFuZ2VzOiBcIlbDpGxqIHR2w6Ugw6RuZHJpbmdhciBuZWRhbiBmw7ZyIGF0dCBzZSBza2lsbG5hZGVuLlwiXG4gICAgdW5kb19wcmVmaXg6IFwiw4VuZ3JhXCJcbiAgICB1bmRvX3Nob3J0Y3V0OiBcIihDdHJsK1opXCJcbiAgICByZWRvX3ByZWZpeDogXCJnw7ZyIG9tXCJcbiAgICByZWRvX3Nob3J0Y3V0OiBcIihDdHJsK1NoaWZ0K1opXCJcbiAgICBwbGF5X3ByZXZpZXc6IFwiU3BlbGEgZsO2cmhhbmRzdmVyc2lvbiBhdiBha3R1ZWxsIG5pdsOlXCJcbiAgICByZXN1bHQ6IFwiUmVzdWx0YXRcIlxuICAgIHJlc3VsdHM6IFwiUmVzdWx0YXRcIlxuICAgIGRlc2NyaXB0aW9uOiBcIkJlc2tyaXZuaW5nXCJcbiAgICBvcjogXCJlbGxlclwiXG4gICAgc3ViamVjdDogXCLDhG1uZVwiXG4gICAgZW1haWw6IFwiTWVqbFwiXG4gICAgcGFzc3dvcmQ6IFwiTMO2c2Vub3JkXCJcbiAgICBjb25maXJtX3Bhc3N3b3JkOiBcIkJla3LDpGZ0YSBsw7ZzZW5vcmRcIlxuICAgIG1lc3NhZ2U6IFwiTWVkZGVsYW5kZVwiXG4gICAgY29kZTogXCJLb2RcIlxuICAgIGxhZGRlcjogXCJTdGVnZVwiXG4gICAgd2hlbjogXCJOw6RyXCJcbiAgICBvcHBvbmVudDogXCJGaWVuZGVcIlxuICAgIHJhbms6IFwiUmFua1wiXG4gICAgc2NvcmU6IFwiUG/DpG5nXCJcbiAgICB3aW46IFwiVmluc3RcIlxuICAgIGxvc3M6IFwiRsO2cmx1c3RcIlxuICAgIHRpZTogXCJPYXZnam9yZFwiXG4gICAgZWFzeTogXCJMw6R0dFwiXG4gICAgbWVkaXVtOiBcIk1lZGl1bVwiXG4gICAgaGFyZDogXCJTdsOlclwiXG4gICAgcGxheWVyOiBcIlNwZWxhcmVcIlxuICAgIHBsYXllcl9sZXZlbDogXCJOaXbDpVwiICMgTGlrZSBwbGF5ZXIgbGV2ZWwgNSwgbm90IGxpa2UgbGV2ZWw6IER1bmdlb25zIG9mIEtpdGhnYXJkXG4gICAgd2FycmlvcjogXCJLcmlnYXJlXCJcbiAgICByYW5nZXI6IFwiVmFuZHJhcmVcIlxuICAgIHdpemFyZDogXCJUcm9sbGthcmxcIlxuICAgIGZpcnN0X25hbWU6IFwiRsO2cm5hbW5cIlxuICAgIGxhc3RfbmFtZTogXCJFZnRlcm5hbW5cIlxuIyAgICBsYXN0X2luaXRpYWw6IFwiTGFzdCBJbml0aWFsXCJcbiAgICB1c2VybmFtZTogXCJBbnbDpG5kYXJuYW1uXCJcbiAgICBjb250YWN0X3VzOiBcIktvbnRha3RhIG9zc1wiXG4gICAgY2xvc2Vfd2luZG93OiBcIlN0w6RuZyBmw7Zuc3RlclwiXG4jICAgIGxlYXJuX21vcmU6IFwiTGVhcm4gTW9yZVwiXG4jICAgIG1vcmU6IFwiTW9yZVwiXG4jICAgIGZld2VyOiBcIkZld2VyXCJcbiMgICAgd2l0aDogXCJ3aXRoXCJcblxuICB1bml0czpcbiAgICBzZWNvbmQ6IFwic2VrdW5kXCJcbiAgICBzZWNvbmRzOiBcInNla3VuZGVyXCJcbiAgICBzZWM6IFwic2VrXCJcbiAgICBtaW51dGU6IFwibWludXRcIlxuICAgIG1pbnV0ZXM6IFwibWludXRlclwiXG4gICAgaG91cjogXCJ0aW1tZVwiXG4gICAgaG91cnM6IFwidGltbWFyXCJcbiAgICBkYXk6IFwiZGFnXCJcbiAgICBkYXlzOiBcImRhZ2FyXCJcbiAgICB3ZWVrOiBcInZlY2thXCJcbiAgICB3ZWVrczogXCJ2ZWNrb3JcIlxuICAgIG1vbnRoOiBcIm3DpW5hZFwiXG4gICAgbW9udGhzOiBcIm3DpW5hZGVyXCJcbiAgICB5ZWFyOiBcIsOlclwiXG4gICAgeWVhcnM6IFwiw6VyXCJcblxuICBwbGF5X2xldmVsOlxuICAgIGJhY2tfdG9fbWFwOiBcIlRpbGxiYWthIHRpbGwga2FydGFuXCJcbiMgICAgZGlyZWN0aW9uczogXCJEaXJlY3Rpb25zXCJcbiMgICAgZWRpdF9sZXZlbDogXCJFZGl0IExldmVsXCJcbiMgICAga2VlcF9sZWFybmluZzogXCJLZWVwIExlYXJuaW5nXCJcbiAgICBleHBsb3JlX2NvZGVjb21iYXQ6IFwiVXRmb3Jza2EgQ29kZUNvbWJhdFwiXG4gICAgZmluaXNoZWRfaG9jOiBcIkphZyDDpHIgZsOkcmRpZyBtZWQgbWluIEhvdXIgb2YgQ29kZVwiXG4jICAgIGdldF9jZXJ0aWZpY2F0ZTogXCJHZXQgeW91ciBjZXJ0aWZpY2F0ZSFcIlxuIyAgICBsZXZlbF9jb21wbGV0ZTogXCJMZXZlbCBDb21wbGV0ZVwiXG4gICAgY29tcGxldGVkX2xldmVsOiBcIkF2a2xhcmFkIG5pdsOlOlwiXG4gICAgY291cnNlOiBcIkxla3Rpb246XCJcbiAgICBkb25lOiBcIktsYXJcIlxuICAgIG5leHRfbGV2ZWw6IFwiTsOkc3RhIG5pdsOlXCJcbiMgICAgY29tYm9fY2hhbGxlbmdlOiBcIkNvbWJvIENoYWxsZW5nZVwiXG4jICAgIGNvbmNlcHRfY2hhbGxlbmdlOiBcIkNvbmNlcHQgQ2hhbGxlbmdlXCJcbiMgICAgY2hhbGxlbmdlX3VubG9ja2VkOiBcIkNoYWxsZW5nZSBVbmxvY2tlZFwiXG4jICAgIGNvbWJvX2NoYWxsZW5nZV91bmxvY2tlZDogXCJDb21ibyBDaGFsbGVuZ2UgVW5sb2NrZWRcIlxuIyAgICBjb25jZXB0X2NoYWxsZW5nZV91bmxvY2tlZDogXCJDb25jZXB0IENoYWxsZW5nZSBVbmxvY2tlZFwiXG4jICAgIGNvbmNlcHRfY2hhbGxlbmdlX2NvbXBsZXRlOiBcIkNvbmNlcHQgQ2hhbGxlbmdlIENvbXBsZXRlIVwiXG4jICAgIGNvbWJvX2NoYWxsZW5nZV9jb21wbGV0ZTogXCJDb21ibyBDaGFsbGVuZ2UgQ29tcGxldGUhXCJcbiMgICAgY29tYm9fY2hhbGxlbmdlX2NvbXBsZXRlX2JvZHk6IFwiR3JlYXQgam9iLCBpdCBsb29rcyBsaWtlIHlvdSdyZSB3ZWxsIG9uIHlvdXIgd2F5IHRvIHVuZGVyc3RhbmRpbmcgX19jb25jZXB0X18hXCJcbiMgICAgcmVwbGF5X2xldmVsOiBcIlJlcGxheSBMZXZlbFwiXG4jICAgIGNvbWJvX2NvbmNlcHRzX3VzZWQ6IFwiX19jb21wbGV0ZV9fL19fdG90YWxfXyBDb25jZXB0cyBVc2VkXCJcbiMgICAgY29tYm9fYWxsX2NvbmNlcHRzX3VzZWQ6IFwiWW91IHVzZWQgYWxsIGNvbmNlcHRzIHBvc3NpYmxlIHRvIHNvbHZlIHRoZSBjaGFsbGVuZ2UuIEdyZWF0IGpvYiFcIlxuIyAgICBjb21ib19ub3RfYWxsX2NvbmNlcHRzX3VzZWQ6IFwiWW91IHVzZWQgX19jb21wbGV0ZV9fIG91dCBvZiB0aGUgX190b3RhbF9fIGNvbmNlcHRzIHBvc3NpYmxlIHRvIHNvbHZlIHRoZSBjaGFsbGVuZ2UuIFRyeSB0byBnZXQgYWxsIF9fdG90YWxfXyBjb25jZXB0cyBuZXh0IHRpbWUhXCJcbiMgICAgc3RhcnRfY2hhbGxlbmdlOiBcIlN0YXJ0IENoYWxsZW5nZVwiXG4gICAgbmV4dF9nYW1lOiBcIk7DpHN0YSBzcGVsXCJcbiAgICBsYW5ndWFnZXM6IFwiU3Byw6VrXCJcbiAgICBwcm9ncmFtbWluZ19sYW5ndWFnZTogXCJQcm9ncmFtbWVyaW5nc3NwcsOla1wiXG4gICAgc2hvd19tZW51OiBcIlZpc2Egc3BlbG1lbnlcIlxuICAgIGhvbWU6IFwiSGVtXCIgIyBOb3QgdXNlZCBhbnkgbW9yZSwgd2lsbCBiZSByZW1vdmVkIHNvb24uXG4gICAgbGV2ZWw6IFwiTml2w6VcIiAjIExpa2UgXCJMZXZlbDogRHVuZ2VvbnMgb2YgS2l0aGdhcmRcIlxuICAgIHNraXA6IFwiSG9wcGEgw7Z2ZXJcIlxuICAgIGdhbWVfbWVudTogXCJTcGVsbWVueVwiXG4gICAgcmVzdGFydDogXCJCw7ZyamEgb21cIlxuICAgIGdvYWxzOiBcIk3DpWxcIlxuICAgIGdvYWw6IFwiTcOlbFwiXG4jICAgIGNoYWxsZW5nZV9sZXZlbF9nb2FsczogXCJDaGFsbGVuZ2UgTGV2ZWwgR29hbHNcIlxuIyAgICBjaGFsbGVuZ2VfbGV2ZWxfZ29hbDogXCJDaGFsbGVuZ2UgTGV2ZWwgR29hbFwiXG4jICAgIGNvbmNlcHRfY2hhbGxlbmdlX2dvYWxzOiBcIkNvbmNlcHQgQ2hhbGxlbmdlIEdvYWxzXCJcbiMgICAgY29tYm9fY2hhbGxlbmdlX2dvYWxzOiBcIkNoYWxsZW5nZSBMZXZlbCBHb2Fsc1wiXG4jICAgIGNvbmNlcHRfY2hhbGxlbmdlX2dvYWw6IFwiQ29uY2VwdCBDaGFsbGVuZ2UgR29hbFwiXG4jICAgIGNvbWJvX2NoYWxsZW5nZV9nb2FsOiBcIkNoYWxsZW5nZSBMZXZlbCBHb2FsXCJcbiAgICBydW5uaW5nOiBcIkvDtnIuLi5cIlxuICAgIHN1Y2Nlc3M6IFwiRHUgbHlja2FkZXMhXCJcbiAgICBpbmNvbXBsZXRlOiBcIkVqIGbDpHJkaWdcIlxuICAgIHRpbWVkX291dDogXCJTbHV0IHDDpSB0aWRcIlxuICAgIGZhaWxpbmc6IFwiSW5nZW4gZnJhbWfDpW5nXCJcbiAgICByZWxvYWQ6IFwiTGFkZGEgb21cIlxuICAgIHJlbG9hZF90aXRsZTogXCJMYWRkYSBvbSBhbGwga29kP1wiXG4gICAgcmVsb2FkX3JlYWxseTogXCLDhHIgZHUgc8Oka2VyIHDDpSBhdHQgZHUgdmlsbCBsYWRkYSBvbSBuaXbDpW4gZnLDpW4gYsO2cmphbj9cIlxuICAgIHJlbG9hZF9jb25maXJtOiBcIkxhZGRhIG9tIGFsbHRcIlxuIyAgICB0ZXN0X2xldmVsOiBcIlRlc3QgTGV2ZWxcIlxuICAgIHZpY3Rvcnk6IFwiU2VnZXJcIlxuICAgIHZpY3RvcnlfdGl0bGVfcHJlZml4OiBcIlwiXG4gICAgdmljdG9yeV90aXRsZV9zdWZmaXg6IFwiIEdlbm9tZsO2cmRcIlxuICAgIHZpY3Rvcnlfc2lnbl91cDogXCJSZWdpc3RyZXJhIGRpZyBmw7ZyIGF0dCBmw6UgdXBwZGF0ZXJpbmdhclwiXG4gICAgdmljdG9yeV9zaWduX3VwX3Bva2U6IFwiVmlsbCBkdSBoYSBkZSBzZW5hc3RlIG55aGV0ZXJuYSB2aWEgbWVqbD8gU2thcGEgZXR0IGdyYXRpc2tvbnRvIHPDpSBow6VsbGVyIHZpIGRpZyBpbmZvcm1lcmFkIVwiXG4gICAgdmljdG9yeV9yYXRlX3RoZV9sZXZlbDogXCJCZXR5Z3PDpHR0IG5pdsOlbjogXCIgIyB7Y2hhbmdlfVxuICAgIHZpY3RvcnlfcmV0dXJuX3RvX2xhZGRlcjogXCJHw6UgdGlsbGJha2EgdGlsbCBzdGVnZW5cIlxuICAgIHZpY3Rvcnlfc2F2aW5nX3Byb2dyZXNzOiBcIlNwYXJhciBmcmFtc3RlZ1wiXG4gICAgdmljdG9yeV9nb19ob21lOiBcIkfDpSBoZW1cIlxuICAgIHZpY3RvcnlfcmV2aWV3OiBcIkJlcsOkdHRhIG1lciFcIlxuICAgIHZpY3RvcnlfcmV2aWV3X3BsYWNlaG9sZGVyOiBcIkh1ciB0eWNrdGUgZHUgbml2w6VuIHZhcj9cIlxuICAgIHZpY3RvcnlfaG91cl9vZl9jb2RlX2RvbmU6IFwiw4RyIGR1IGtsYXI/XCJcbiAgICB2aWN0b3J5X2hvdXJfb2ZfY29kZV9kb25lX3llczogXCJKYSwgamFnIMOkciBrbGFyIG1lZCBtaW4gSG91ciBvZiBDb2RlIVwiXG4gICAgdmljdG9yeV9leHBlcmllbmNlX2dhaW5lZDogXCJYUCBtb3R0YWdldFwiXG4gICAgdmljdG9yeV9nZW1zX2dhaW5lZDogXCJWdW5uYSDDpGRlbHN0ZW5hclwiXG4gICAgdmljdG9yeV9uZXdfaXRlbTogXCJOeXR0IGbDtnJlbcOlbFwiXG4gICAgdmljdG9yeV9uZXdfaGVybzogXCJOeSBoasOkbHRlXCJcbiAgICB2aWN0b3J5X3Zpa2luZ19jb2RlX3NjaG9vbDogXCJKw7Zzc2VzIHZpbGtlbiBzdsOlciBuaXbDpSBkdSBqdXN0IGtsYXJhZGUhIE9tIGR1IGludGUgcmVkYW4gw6RyIGVuIG1qdWt2YXJ1dXR2ZWNrbGFyZSBzw6UgYm9yZGUgZHUgdmFyYSBkZXQuIER1IGJldiBwcmVjaXMgZmFzdC10cmFja2VkIGbDtnIgYW50YWduaW5nIHZpZCBWaWtpbmcgQ29kZSBTY2hvb2wsIGTDpHIgZHUga2FuIHRhIGRpbmEga3Vuc2thcGVyIHRpbGwgZW4gbnkgbml2w6Ugb2NoIGJsaSBlbiBwcm9mZXNzaW9uZWxsIHdlYmJ1dHZlY2tsYXJlIHDDpSAxNCB2ZWNrb3IuXCJcbiAgICB2aWN0b3J5X2JlY29tZV9hX3Zpa2luZzogXCJCbGkgZW4gVmlraW5nXCJcbiMgICAgdmljdG9yeV9ub19wcm9ncmVzc19mb3JfdGVhY2hlcnM6IFwiUHJvZ3Jlc3MgaXMgbm90IHNhdmVkIGZvciB0ZWFjaGVycy4gQnV0LCB5b3UgY2FuIGFkZCBhIHN0dWRlbnQgYWNjb3VudCB0byB5b3VyIGNsYXNzcm9vbSBmb3IgeW91cnNlbGYuXCJcbiAgICB0b21lX2Nhc3RfYnV0dG9uX3J1bjogXCJLw7ZyXCJcbiAgICB0b21lX2Nhc3RfYnV0dG9uX3J1bm5pbmc6IFwiS8O2ci4uLlwiXG4gICAgdG9tZV9jYXN0X2J1dHRvbl9yYW46IFwiS8O2cmRlXCJcbiAgICB0b21lX3N1Ym1pdF9idXR0b246IFwiTMOkbW5hIGluXCJcbiAgICB0b21lX3JlbG9hZF9tZXRob2Q6IFwiTGFkZGEgb20gZGVuIHVyc3BydW5nbGlnYSBrb2RlbiBmw7ZyIGRlbiBow6RyIG1ldG9kZW5cIiAjIHtjaGFuZ2V9XG4gICAgdG9tZV9hdmFpbGFibGVfc3BlbGxzOiBcIlRpbGxnw6RuZ2xpZ2EgZsO2cm3DpWdvclwiXG4gICAgdG9tZV95b3VyX3NraWxsczogXCJEaW5hIGbDpHJkaWdoZXRlclwiXG4gICAgaGludHM6IFwiTGVkdHLDpWRhclwiXG4jICAgIHZpZGVvczogXCJWaWRlb3NcIlxuICAgIGhpbnRzX3RpdGxlOiBcIkxlZHRyw6VkIHt7bnVtYmVyfX1cIlxuICAgIGNvZGVfc2F2ZWQ6IFwiS29kIHNwYXJhZFwiXG4gICAgc2tpcF90dXRvcmlhbDogXCJIb3BwYSDDtnZlciAoZXNjKVwiXG4gICAga2V5Ym9hcmRfc2hvcnRjdXRzOiBcIktvcnRrb21tYW5kb25cIlxuICAgIGxvYWRpbmdfc3RhcnQ6IFwiU3RhcnRhIE5pdsOlXCJcbiMgICAgbG9hZGluZ19zdGFydF9jb21ibzogXCJTdGFydCBDb21ibyBDaGFsbGVuZ2VcIlxuIyAgICBsb2FkaW5nX3N0YXJ0X2NvbmNlcHQ6IFwiU3RhcnQgQ29uY2VwdCBDaGFsbGVuZ2VcIlxuICAgIHByb2JsZW1fYWxlcnRfdGl0bGU6IFwiRml4YSBkaW4ga29kXCJcbiAgICB0aW1lX2N1cnJlbnQ6IFwiTnU6XCJcbiAgICB0aW1lX3RvdGFsOiBcIk1heDpcIlxuICAgIHRpbWVfZ290bzogXCJHw6UgdGlsbDpcIlxuICAgIG5vbl91c2VyX2NvZGVfcHJvYmxlbV90aXRsZTogXCJLdW5kZSBpbnRlIGxhZGRhIG5pdsOlXCJcbiAgICBpbmZpbml0ZV9sb29wX3RpdGxlOiBcIk/DpG5kbGlnIGxvb3AgdXBwdMOkY2t0XCJcbiMgICAgaW5maW5pdGVfbG9vcF9kZXNjcmlwdGlvbjogXCJUaGUgaW5pdGlhbCBjb2RlIHRvIGJ1aWxkIHRoZSB3b3JsZCBuZXZlciBmaW5pc2hlZCBydW5uaW5nLiBJdCdzIHByb2JhYmx5IGVpdGhlciByZWFsbHkgc2xvdyBvciBoYXMgYW4gaW5maW5pdGUgbG9vcC4gT3IgdGhlcmUgbWlnaHQgYmUgYSBidWcuIFlvdSBjYW4gZWl0aGVyIHRyeSBydW5uaW5nIHRoaXMgY29kZSBhZ2FpbiBvciByZXNldCB0aGUgY29kZSB0byB0aGUgZGVmYXVsdCBzdGF0ZS4gSWYgdGhhdCBkb2Vzbid0IGZpeCBpdCwgcGxlYXNlIGxldCB1cyBrbm93LlwiXG4jICAgIGNoZWNrX2Rldl9jb25zb2xlOiBcIllvdSBjYW4gYWxzbyBvcGVuIHRoZSBkZXZlbG9wZXIgY29uc29sZSB0byBzZWUgd2hhdCBtaWdodCBiZSBnb2luZyB3cm9uZy5cIlxuICAgIGNoZWNrX2Rldl9jb25zb2xlX2xpbms6IFwiKGluc3RydWt0aW9uZXIpXCJcbiAgICBpbmZpbml0ZV9sb29wX3RyeV9hZ2FpbjogXCJGw7Zyc8O2ayBpZ2VuXCJcbiAgICBpbmZpbml0ZV9sb29wX3Jlc2V0X2xldmVsOiBcIsOFdGVyc3TDpGxsIE5pdsOlXCJcbiAgICBpbmZpbml0ZV9sb29wX2NvbW1lbnRfb3V0OiBcIktvbW1lbnRlcmEgYm9ydCBtaW4ga29kXCJcbiAgICB0aXBfdG9nZ2xlX3BsYXk6IFwiU3BlbGEvcGF1c2EgbWVkIEN0cmwrUC5cIlxuICAgIHRpcF9zY3J1Yl9zaG9ydGN1dDogXCJDdHJsK10gb2NoIEN0cmwrWyBzcG9sYXIgZnJhbcOldCBvY2ggYmFrw6V0LlwiICMge2NoYW5nZX1cbiAgICB0aXBfZ3VpZGVfZXhpc3RzOiBcIk9tIGR1IHZpbGwgaGEgbWVyIGFudsOkbmRiYXIgaW5mb3JtYXRpb246IEtsaWNrYSBww6UgZ3VpZGVuIGjDtmdzdCB1cHAgaSBzcGVsbWVueW5cIlxuICAgIHRpcF9vcGVuX3NvdXJjZTogXCJDb2RlQ29tYmF0IMOkciAxMDAlIMO2cHBlbiBrw6RsbGtvZCFcIiAjIHtjaGFuZ2V9XG4gICAgdGlwX3RlbGxfZnJpZW5kczogXCJHaWxsYXIgZHUgQ29kZUNvbWJhdD8gVGlwc2EgZGluYSB2w6RubmVyIG9tIG9zcyFcIlxuICAgIHRpcF9iZXRhX2xhdW5jaDogXCJDb2RlQ29tYmF0IHN0YXJ0YWRlIHNpbiBiZXRhIGkgb2t0b2JlciAyMDEzLlwiXG4gICAgdGlwX3RoaW5rX3NvbHV0aW9uOiBcIlTDpG5rIHDDpSBsw7ZzbmluZ2VuLCBpbnRlIHByb2JsZW1ldC5cIlxuICAgIHRpcF90aGVvcnlfcHJhY3RpY2U6IFwiVGVvcmV0aXNrdCBzZXR0IHPDpSDDpHIgZGV0IGluZ2VuIHNraWxsbmFkIG1lbGxhbiB0ZW9yaSBvY2ggcHJha3Rpay4gTWVuIGkgcHJha3Rpa2VuIHPDpSDDpHIgZGV0LiAtIFlvZ2kgQmVycmFcIlxuICAgIHRpcF9lcnJvcl9mcmVlOiBcIkRldCBmaW5ucyB0dsOlIHPDpHR0IGF0dCBza3JpdmEgZmVsZnJpYSBwcm9ncmFtOyBlbmRhc3QgZGV0IHRyZWRqZSBmdW5nZXJhci4gLSBBbGFuIFBlcmxpc1wiXG4jICAgIHRpcF9kZWJ1Z2dpbmdfcHJvZ3JhbTogXCJJZiBkZWJ1Z2dpbmcgaXMgdGhlIHByb2Nlc3Mgb2YgcmVtb3ZpbmcgYnVncywgdGhlbiBwcm9ncmFtbWluZyBtdXN0IGJlIHRoZSBwcm9jZXNzIG9mIHB1dHRpbmcgdGhlbSBpbi4gLSBFZHNnZXIgVy4gRGlqa3N0cmFcIlxuICAgIHRpcF9mb3J1bXM6IFwiR8OlIHRpbGwgZm9ydW1lbiBvY2ggYmVyw6R0dGEgZsO2ciBvc3MgdmFkIGR1IHR5Y2tlciFcIlxuICAgIHRpcF9iYWJ5X2NvZGVyczogXCJJIGZyYW10aWRlbiDDpHIgdGlsbCBvY2ggbWVkIGJlYmlzYXIgw6Rya2VtYWdpa2VyLlwiXG4jICAgIHRpcF9tb3JhbGVfaW1wcm92ZXM6IFwiTG9hZGluZyB3aWxsIGNvbnRpbnVlIHVudGlsIG1vcmFsZSBpbXByb3Zlcy5cIlxuIyAgICB0aXBfYWxsX3NwZWNpZXM6IFwiV2UgYmVsaWV2ZSBpbiBlcXVhbCBvcHBvcnR1bml0aWVzIHRvIGxlYXJuIHByb2dyYW1taW5nIGZvciBhbGwgc3BlY2llcy5cIlxuIyAgICB0aXBfcmV0aWN1bGF0aW5nOiBcIlJldGljdWxhdGluZyBzcGluZXMuXCJcbiAgICB0aXBfaGFycnk6IFwiRHUgZScgZW4gdHJvbGxrYXJsLCBcIlxuIyAgICB0aXBfZ3JlYXRfcmVzcG9uc2liaWxpdHk6IFwiV2l0aCBncmVhdCBjb2Rpbmcgc2tpbGwgY29tZXMgZ3JlYXQgZGVidWcgcmVzcG9uc2liaWxpdHkuXCJcbiMgICAgdGlwX211bmNoa2luOiBcIklmIHlvdSBkb24ndCBlYXQgeW91ciB2ZWdldGFibGVzLCBhIG11bmNoa2luIHdpbGwgY29tZSBhZnRlciB5b3Ugd2hpbGUgeW91J3JlIGFzbGVlcC5cIlxuICAgIHRpcF9iaW5hcnk6IFwiRGV0IGZpbm5zIDEwIHNvcnRlcnMgbcOkbm5pc2tvciBww6Ugam9yZGVuLCBkZSBzb20gZsO2cnPDpXIgYmluw6RyYSB0YWwgb2NoIGRlIHNvbSBpbnRlIGfDtnIgZGV0LlwiXG4jICAgIHRpcF9jb21taXRtZW50X3lvZGE6IFwiQSBwcm9ncmFtbWVyIG11c3QgaGF2ZSB0aGUgZGVlcGVzdCBjb21taXRtZW50LCB0aGUgbW9zdCBzZXJpb3VzIG1pbmQuIH4gWW9kYVwiXG4gICAgdGlwX25vX3RyeTogXCJHw7ZyLiBFbGxlciBnw7ZyIGludGUuIEbDtnJzw7ZrIGZpbm5zIGludGUuIC0gWW9kYVwiXG4gICAgdGlwX3BhdGllbmNlOiBcIlTDpWxhbW9kIGR1IG3DpXN0ZSBoYSwgdW5nZSBQYWRhd2FuLiAtIFlvZGFcIlxuICAgIHRpcF9kb2N1bWVudGVkX2J1ZzogXCJFbiBkb2t1bWVudGVyYWQgYnVnZyDDpHIgaW50ZSBlbiBidWdnIC0gZGV0IMOkciBlbiBmdW5rdGlvbi5cIlxuICAgIHRpcF9pbXBvc3NpYmxlOiBcIkFsbHQgdmVya2FyIGFsbHRpZCBvbcO2amxpZ3Qgw6RuZGEgdGlsbHMgbsOlZ29uIGfDtnIgZGV0LiAtIE5lbHNvbiBNYW5kZWxhXCJcbiAgICB0aXBfdGFsa19pc19jaGVhcDogXCJEZXQgw6RyIGJpbGxpZ3QgYXR0IHByYXRhLiBWaXNhIG1pZyBrb2Rlbi4gLSBMaW51cyBUb3J2YWxkc1wiXG4jICAgIHRpcF9maXJzdF9sYW5ndWFnZTogXCJUaGUgbW9zdCBkaXNhc3Ryb3VzIHRoaW5nIHRoYXQgeW91IGNhbiBldmVyIGxlYXJuIGlzIHlvdXIgZmlyc3QgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UuIC0gQWxhbiBLYXlcIlxuICAgIHRpcF9oYXJkd2FyZV9wcm9ibGVtOiBcIkZyw6VnYTogSHVyIG3DpW5nYSBwcm9ncmFtbWVyYXJlIGtyw6R2cyBmw7ZyIGF0dCBieXRhIGVuIGdsw7ZkbGFtcGE/ICBTdmFyOiBJbmdhLCBkZXQgw6RyIGV0dCBow6VyZHZhcnVwcm9ibGVtLlwiXG4jICAgIHRpcF9ob2ZzdGFkdGVyc19sYXc6IFwiSG9mc3RhZHRlcidzIExhdzogSXQgYWx3YXlzIHRha2VzIGxvbmdlciB0aGFuIHlvdSBleHBlY3QsIGV2ZW4gd2hlbiB5b3UgdGFrZSBpbnRvIGFjY291bnQgSG9mc3RhZHRlcidzIExhdy5cIlxuIyAgICB0aXBfcHJlbWF0dXJlX29wdGltaXphdGlvbjogXCJQcmVtYXR1cmUgb3B0aW1pemF0aW9uIGlzIHRoZSByb290IG9mIGFsbCBldmlsLiAtIERvbmFsZCBLbnV0aFwiXG4jICAgIHRpcF9icnV0ZV9mb3JjZTogXCJXaGVuIGluIGRvdWJ0LCB1c2UgYnJ1dGUgZm9yY2UuIC0gS2VuIFRob21wc29uXCJcbiMgICAgdGlwX2V4dHJhcG9sYXRpb246IFwiVGhlcmUgYXJlIG9ubHkgdHdvIGtpbmRzIG9mIHBlb3BsZTogdGhvc2UgdGhhdCBjYW4gZXh0cmFwb2xhdGUgZnJvbSBpbmNvbXBsZXRlIGRhdGEuLi5cIlxuIyAgICB0aXBfc3VwZXJwb3dlcjogXCJDb2RpbmcgaXMgdGhlIGNsb3Nlc3QgdGhpbmcgd2UgaGF2ZSB0byBhIHN1cGVycG93ZXIuXCJcbiMgICAgdGlwX2NvbnRyb2xfZGVzdGlueTogXCJJbiByZWFsIG9wZW4gc291cmNlLCB5b3UgaGF2ZSB0aGUgcmlnaHQgdG8gY29udHJvbCB5b3VyIG93biBkZXN0aW55LiAtIExpbnVzIFRvcnZhbGRzXCJcbiAgICB0aXBfbm9fY29kZTogXCJJbmdlIGtvZCDDpHIgc25hYmJhcmUgw6RuIGluZ2VuIGtvZC5cIlxuICAgIHRpcF9jb2RlX25ldmVyX2xpZXM6IFwiS29kIGxqdWdlciBhbGRyaWcsIGtvbW1lbnRhcmVyIGfDtnIgZGV0IGlibGFuZC4g4oCUIFJvbiBKZWZmcmllc1wiXG4jICAgIHRpcF9yZXVzYWJsZV9zb2Z0d2FyZTogXCJCZWZvcmUgc29mdHdhcmUgY2FuIGJlIHJldXNhYmxlIGl0IGZpcnN0IGhhcyB0byBiZSB1c2FibGUuXCJcbiMgICAgdGlwX29wdGltaXphdGlvbl9vcGVyYXRvcjogXCJFdmVyeSBsYW5ndWFnZSBoYXMgYW4gb3B0aW1pemF0aW9uIG9wZXJhdG9yLiBJbiBtb3N0IGxhbmd1YWdlcyB0aGF0IG9wZXJhdG9yIGlzIOKAmC8v4oCZXCJcbiMgICAgdGlwX2xpbmVzX29mX2NvZGU6IFwiTWVhc3VyaW5nIHByb2dyYW1taW5nIHByb2dyZXNzIGJ5IGxpbmVzIG9mIGNvZGUgaXMgbGlrZSBtZWFzdXJpbmcgYWlyY3JhZnQgYnVpbGRpbmcgcHJvZ3Jlc3MgYnkgd2VpZ2h0LiDigJQgQmlsbCBHYXRlc1wiXG4jICAgIHRpcF9zb3VyY2VfY29kZTogXCJJIHdhbnQgdG8gY2hhbmdlIHRoZSB3b3JsZCBidXQgdGhleSB3b3VsZCBub3QgZ2l2ZSBtZSB0aGUgc291cmNlIGNvZGUuXCJcbiMgICAgdGlwX2phdmFzY3JpcHRfamF2YTogXCJKYXZhIGlzIHRvIEphdmFTY3JpcHQgd2hhdCBDYXIgaXMgdG8gQ2FycGV0LiAtIENocmlzIEhlaWxtYW5uXCJcbiAgICB0aXBfbW92ZV9mb3J3YXJkOiBcIlZhZCBkdSDDpG4gZ8O2ciwgZm9ydHPDpHR0IGZyYW3DpXQuIC0gTWFydGluIEx1dGhlciBLaW5nIEpyLlwiXG4gICAgdGlwX2dvb2dsZTogXCJFdHQgcHJvYmxlbSBkdSBpbnRlIGthbiBsw7ZzYT8gR29vZ2xhIGRldCFcIlxuICAgIHRpcF9hZGRpbmdfZXZpbDogXCJPY2tzw6UgZW4gbnlwYSBvbmRza2EuXCJcbiAgICB0aXBfaGF0ZV9jb21wdXRlcnM6IFwiRGV0IMOkciBkZXQgc29tIMOkciBncmVqZW4gbWVkIGZvbGsgc29tIHRyb3IgYXR0IGRlIGhhdGFyIGRhdG9yZXIuIERldCBkZSBlZ2VudGxpZ2VuIGhhdGFyIMOkciBkw6VsaWdhIHByb2dyYW1tZXJhcmUuIC0gTGFycnkgTml2ZW5cIlxuICAgIHRpcF9vcGVuX3NvdXJjZV9jb250cmlidXRlOiBcIkR1IGthbiBmw6UgQ29kZUNvbWJhdCBhdHQgYmxpIMOkbm51IGLDpHR0cmUhXCJcbiAgICB0aXBfcmVjdXJzZTogXCJJdGVyYXRpb24gw6RyIG3DpG5za2xpZ3QsIHJla3Vyc2lvbiDDpHIgZ3Vkb21saWd0LiAtIEwuIFBldGVyIERldXRzY2hcIlxuIyAgICB0aXBfZnJlZV95b3VyX21pbmQ6IFwiWW91IGhhdmUgdG8gbGV0IGl0IGFsbCBnbywgTmVvLiBGZWFyLCBkb3VidCwgYW5kIGRpc2JlbGllZi4gRnJlZSB5b3VyIG1pbmQuIC0gTW9ycGhldXNcIlxuIyAgICB0aXBfc3Ryb25nX29wcG9uZW50czogXCJFdmVuIHRoZSBzdHJvbmdlc3Qgb2Ygb3Bwb25lbnRzIGFsd2F5cyBoYXMgYSB3ZWFrbmVzcy4gLSBJdGFjaGkgVWNoaWhhXCJcbiMgICAgdGlwX3BhcGVyX2FuZF9wZW46IFwiQmVmb3JlIHlvdSBzdGFydCBjb2RpbmcsIHlvdSBjYW4gYWx3YXlzIHBsYW4gd2l0aCBhIHNoZWV0IG9mIHBhcGVyIGFuZCBhIHBlbi5cIlxuIyAgICB0aXBfc29sdmVfdGhlbl93cml0ZTogXCJGaXJzdCwgc29sdmUgdGhlIHByb2JsZW0uIFRoZW4sIHdyaXRlIHRoZSBjb2RlLiAtIEpvaG4gSm9obnNvblwiXG4jICAgIHRpcF9jb21waWxlcl9pZ25vcmVzX2NvbW1lbnRzOiBcIlNvbWV0aW1lcyBJIHRoaW5rIHRoYXQgdGhlIGNvbXBpbGVyIGlnbm9yZXMgbXkgY29tbWVudHMuXCJcbiMgICAgdGlwX3VuZGVyc3RhbmRfcmVjdXJzaW9uOiBcIlRoZSBvbmx5IHdheSB0byB1bmRlcnN0YW5kIHJlY3Vyc2lvbiBpcyB0byB1bmRlcnN0YW5kIHJlY3Vyc2lvbi5cIlxuIyAgICB0aXBfbGlmZV9hbmRfcG9seW1vcnBoaXNtOiBcIk9wZW4gU291cmNlIGlzIGxpa2UgYSB0b3RhbGx5IHBvbHltb3JwaGljIGhldGVyb2dlbmVvdXMgc3RydWN0dXJlOiBBbGwgdHlwZXMgYXJlIHdlbGNvbWUuXCJcbiMgICAgdGlwX21pc3Rha2VzX3Byb29mX29mX3RyeWluZzogXCJNaXN0YWtlcyBpbiB5b3VyIGNvZGUgYXJlIGp1c3QgcHJvb2YgdGhhdCB5b3UgYXJlIHRyeWluZy5cIlxuIyAgICB0aXBfYWRkaW5nX29yZ3JlczogXCJSb3VuZGluZyB1cCBvZ3Jlcy5cIlxuIyAgICB0aXBfc2hhcnBlbmluZ19zd29yZHM6IFwiU2hhcnBlbmluZyB0aGUgc3dvcmRzLlwiXG4jICAgIHRpcF9yYXRhdG91aWxsZTogXCJZb3UgbXVzdCBub3QgbGV0IGFueW9uZSBkZWZpbmUgeW91ciBsaW1pdHMgYmVjYXVzZSBvZiB3aGVyZSB5b3UgY29tZSBmcm9tLiBZb3VyIG9ubHkgbGltaXQgaXMgeW91ciBzb3VsLiAtIEd1c3RlYXUsIFJhdGF0b3VpbGxlXCJcbiMgICAgdGlwX25lbW86IFwiV2hlbiBsaWZlIGdldHMgeW91IGRvd24sIHdhbnQgdG8ga25vdyB3aGF0IHlvdSd2ZSBnb3R0YSBkbz8gSnVzdCBrZWVwIHN3aW1taW5nLCBqdXN0IGtlZXAgc3dpbW1pbmcuIC0gRG9yeSwgRmluZGluZyBOZW1vXCJcbiMgICAgdGlwX2ludGVybmV0X3dlYXRoZXI6IFwiSnVzdCBtb3ZlIHRvIHRoZSBpbnRlcm5ldCwgaXQncyBncmVhdCBoZXJlLiBXZSBnZXQgdG8gbGl2ZSBpbnNpZGUgd2hlcmUgdGhlIHdlYXRoZXIgaXMgYWx3YXlzIGF3ZXNvbWUuIC0gSm9obiBHcmVlblwiXG4jICAgIHRpcF9uZXJkczogXCJOZXJkcyBhcmUgYWxsb3dlZCB0byBsb3ZlIHN0dWZmLCBsaWtlIGp1bXAtdXAtYW5kLWRvd24taW4tdGhlLWNoYWlyLWNhbid0LWNvbnRyb2wteW91cnNlbGYgbG92ZSBpdC4gLSBKb2huIEdyZWVuXCJcbiMgICAgdGlwX3NlbGZfdGF1Z2h0OiBcIkkgdGF1Z2h0IG15c2VsZiA5MCUgb2Ygd2hhdCBJJ3ZlIGxlYXJuZWQuIEFuZCB0aGF0J3Mgbm9ybWFsISAtIEhhbmsgR3JlZW5cIlxuIyAgICB0aXBfbHVuYV9sb3ZlZ29vZDogXCJEb24ndCB3b3JyeSwgeW91J3JlIGp1c3QgYXMgc2FuZSBhcyBJIGFtLiAtIEx1bmEgTG92ZWdvb2RcIlxuIyAgICB0aXBfZ29vZF9pZGVhOiBcIlRoZSBiZXN0IHdheSB0byBoYXZlIGEgZ29vZCBpZGVhIGlzIHRvIGhhdmUgYSBsb3Qgb2YgaWRlYXMuIC0gTGludXMgUGF1bGluZ1wiXG4jICAgIHRpcF9wcm9ncmFtbWluZ19ub3RfYWJvdXRfY29tcHV0ZXJzOiBcIkNvbXB1dGVyIFNjaWVuY2UgaXMgbm8gbW9yZSBhYm91dCBjb21wdXRlcnMgdGhhbiBhc3Ryb25vbXkgaXMgYWJvdXQgdGVsZXNjb3Blcy4gLSBFZHNnZXIgRGlqa3N0cmFcIlxuIyAgICB0aXBfbXVsYW46IFwiQmVsaWV2ZSB5b3UgY2FuLCB0aGVuIHlvdSB3aWxsLiAtIE11bGFuXCJcbiMgICAgcHJvamVjdF9jb21wbGV0ZTogXCJQcm9qZWN0IENvbXBsZXRlIVwiXG4gICAgc2hhcmVfdGhpc19wcm9qZWN0OiBcIkRlbGEgcHJvamVrdGV0IG1lZCB2w6RubmVyIGVsbGVyIGZhbWlsajpcIlxuICAgIHJlYWR5X3RvX3NoYXJlOiBcIlJlZG8gYXR0IHB1YmxpY2VyYSBkaXR0IHByb2pla3Q/XCJcbiMgICAgY2xpY2tfcHVibGlzaDogXCJDbGljayBcXFwiUHVibGlzaFxcXCIgdG8gbWFrZSBpdCBhcHBlYXIgaW4gdGhlIGNsYXNzIGdhbGxlcnksIHRoZW4gY2hlY2sgb3V0IHdoYXQgeW91ciBjbGFzc21hdGVzIGJ1aWx0ISBZb3UgY2FuIGNvbWUgYmFjayBhbmQgY29udGludWUgdG8gd29yayBvbiB0aGlzIHByb2plY3QuIEFueSBmdXJ0aGVyIGNoYW5nZXMgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNhdmVkIGFuZCBzaGFyZWQgd2l0aCB5b3VyIGNsYXNzbWF0ZXMuXCJcbiMgICAgYWxyZWFkeV9wdWJsaXNoZWRfcHJlZml4OiBcIllvdXIgY2hhbmdlcyBoYXZlIGJlZW4gcHVibGlzaGVkIHRvIHRoZSBjbGFzcyBnYWxsZXJ5LlwiXG4jICAgIGFscmVhZHlfcHVibGlzaGVkX3N1ZmZpeDogXCJLZWVwIGV4cGVyaW1lbnRpbmcgYW5kIG1ha2luZyB0aGlzIHByb2plY3QgZXZlbiBiZXR0ZXIsIG9yIHNlZSB3aGF0IHRoZSByZXN0IG9mIHlvdXIgY2xhc3MgaGFzIGJ1aWx0ISBZb3VyIGNoYW5nZXMgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNhdmVkIGFuZCBzaGFyZWQgd2l0aCB5b3VyIGNsYXNzbWF0ZXMuXCJcbiAgICB2aWV3X2dhbGxlcnk6IFwiVmlzYSBHYWxsZXJpXCJcbiMgICAgcHJvamVjdF9wdWJsaXNoZWRfbm90eTogXCJZb3VyIGxldmVsIGhhcyBiZWVuIHB1Ymxpc2hlZCFcIlxuICAgIGtlZXBfZWRpdGluZzogXCJGb3J0c8OkdHQgcmVkaWdlcmFcIlxuIyAgICBsZWFybl9uZXdfY29uY2VwdHM6IFwiTGVhcm4gbmV3IGNvbmNlcHRzXCJcbiMgICAgd2F0Y2hfYV92aWRlbzogXCJXYXRjaCBhIHZpZGVvIG9uIF9fY29uY2VwdF9uYW1lX19cIlxuIyAgICBjb25jZXB0X3VubG9ja2VkOiBcIkNvbmNlcHQgVW5sb2NrZWRcIlxuIyAgICB1c2VfYXRfbGVhc3Rfb25lX2NvbmNlcHQ6IFwiVXNlIGF0IGxlYXN0IG9uZSBjb25jZXB0OiBcIlxuXG4gIGFwaXM6XG4gICAgbWV0aG9kczogXCJNZXRvZGVyXCJcbiMgICAgZXZlbnRzOiBcIkV2ZW50c1wiXG4jICAgIGhhbmRsZXJzOiBcIkhhbmRsZXJzXCJcbiMgICAgcHJvcGVydGllczogXCJQcm9wZXJ0aWVzXCJcbiMgICAgc25pcHBldHM6IFwiU25pcHBldHNcIlxuIyAgICBzcGF3bmFibGU6IFwiU3Bhd25hYmxlXCJcbiMgICAgaHRtbDogXCJIVE1MXCJcbiAgICBtYXRoOiBcIk1hdHRlXCJcbiMgICAgYXJyYXk6IFwiQXJyYXlcIlxuICAgIG9iamVjdDogXCJPYmpla3RcIlxuICAgIHN0cmluZzogXCJTdHLDpG5nXCJcbiAgICBmdW5jdGlvbjogXCJGdW5rdGlvblwiXG4gICAgdmVjdG9yOiBcIlZla3RvclwiXG4gICAgZGF0ZTogXCJEYXR1bVwiXG4jICAgIGpxdWVyeTogXCJqUXVlcnlcIlxuIyAgICBqc29uOiBcIkpTT05cIlxuICAgIG51bWJlcjogXCJOdW1tZXJcIlxuIyAgICB3ZWJqYXZhc2NyaXB0OiBcIkphdmFTY3JpcHRcIlxuXG4jICBhbWF6b25faG9jOlxuIyAgICB0aXRsZTogXCJLZWVwIExlYXJuaW5nIHdpdGggQW1hem9uIVwiXG4jICAgIGNvbmdyYXRzOiBcIkNvbmdyYXR1bGF0aW9ucyBvbiBjb25xdWVyaW5nIHRoYXQgY2hhbGxlbmdpbmcgSG91ciBvZiBDb2RlIVwiXG4jICAgIGVkdWNhdGVfMTogXCJOb3csIGtlZXAgbGVhcm5pbmcgYWJvdXQgY29kaW5nIGFuZCBjbG91ZCBjb21wdXRpbmcgd2l0aCBBV1MgRWR1Y2F0ZSwgYW4gZXhjaXRpbmcsIGZyZWUgcHJvZ3JhbSBmcm9tIEFtYXpvbiBmb3IgYm90aCBzdHVkZW50cyBhbmQgdGVhY2hlcnMuIFdpdGggQVdTIEVkdWNhdGUsIHlvdSBjYW4gZWFybiBjb29sIGJhZGdlcyBhcyB5b3UgbGVhcm4gYWJvdXQgdGhlIGJhc2ljcyBvZiB0aGUgY2xvdWQgYW5kIGN1dHRpbmctZWRnZSB0ZWNobm9sb2dpZXMgc3VjaCBhcyBnYW1pbmcsIHZpcnR1YWwgcmVhbGl0eSwgYW5kIEFsZXhhLlwiXG4jICAgIGVkdWNhdGVfMjogXCJMZWFybiBtb3JlIGFuZCBzaWduIHVwIGhlcmVcIlxuIyAgICBmdXR1cmVfZW5nXzE6IFwiWW91IGNhbiBhbHNvIHRyeSB0byBidWlsZCB5b3VyIG93biBzY2hvb2wgZmFjdHMgc2tpbGwgZm9yIEFsZXhhXCJcbiMgICAgZnV0dXJlX2VuZ18yOiBcImhlcmVcIlxuIyAgICBmdXR1cmVfZW5nXzM6IFwiKGRldmljZSBpcyBub3QgcmVxdWlyZWQpLiBUaGlzIEFsZXhhIGFjdGl2aXR5IGlzIGJyb3VnaHQgdG8geW91IGJ5IHRoZVwiXG4jICAgIGZ1dHVyZV9lbmdfNDogXCJBbWF6b24gRnV0dXJlIEVuZ2luZWVyXCJcbiMgICAgZnV0dXJlX2VuZ181OiBcInByb2dyYW0gd2hpY2ggY3JlYXRlcyBsZWFybmluZyBhbmQgd29yayBvcHBvcnR1bml0aWVzIGZvciBhbGwgSy0xMiBzdHVkZW50cyBpbiB0aGUgVW5pdGVkIFN0YXRlcyB3aG8gd2lzaCB0byBwdXJzdWUgY29tcHV0ZXIgc2NpZW5jZS5cIlxuXG4gIHBsYXlfZ2FtZV9kZXZfbGV2ZWw6XG4gICAgY3JlYXRlZF9ieTogXCJTa2FwYWQgYXYge3tuYW1lfX1cIlxuICAgIGNyZWF0ZWRfZHVyaW5nX2hvYzogXCJTa2FwYWQgdW5kZXIgSG91ciBvZiBDb2RlXCJcbiAgICByZXN0YXJ0OiBcIlN0YXJ0YSBvbSBuaXbDpVwiXG4gICAgcGxheTogXCJTcGVsYSBuaXbDpVwiXG4gICAgcGxheV9tb3JlX2NvZGVjb21iYXQ6IFwiU3BlbGEgbWVyIENvZGVDb21iYXRcIlxuICAgIGRlZmF1bHRfc3R1ZGVudF9pbnN0cnVjdGlvbnM6IFwiS2xpY2thIGbDtnIgYXR0IGtvbnRyb2xsZXJhIGRpbiBoasOkbHRlIG9jaCB2aW5uIGRpdHQgc3BlbCFcIlxuICAgIGdvYWxfc3Vydml2ZTogXCLDlnZlcmxldi5cIlxuICAgIGdvYWxfc3Vydml2ZV90aW1lOiBcIsOWdmVybGV2IGkgX19zZWNvbmRzX18gc2VrdW5kZXIuXCJcbiAgICBnb2FsX2RlZmVhdDogXCJCZXNlZ3JhIGFsbGEgZmllbmRlci5cIlxuICAgIGdvYWxfZGVmZWF0X2Ftb3VudDogXCJCZXNlZ3JhdCBfX2Ftb3VudF9fIGZpZW5kZXIuXCJcbiAgICBnb2FsX21vdmU6IFwiRmx5dHRhIHRpbGwgYWxsYSByw7ZkYSBYLW3DpHJrZW4uXCJcbiAgICBnb2FsX2NvbGxlY3Q6IFwiU2FtbGEgYWxsYSBmw7ZyZW3DpWwuXCJcbiAgICBnb2FsX2NvbGxlY3RfYW1vdW50OiBcIlNhbWxhIF9fYW1vdW50X18gZsO2cmVtw6VsLlwiXG5cbiAgZ2FtZV9tZW51OlxuICAgIGludmVudG9yeV90YWI6IFwiVXRydXN0bmluZ1wiXG4gICAgc2F2ZV9sb2FkX3RhYjogXCJTcGFyYS9MYWRkYVwiXG4gICAgb3B0aW9uc190YWI6IFwiSW5zdMOkbGxuaW5nYXJcIlxuICAgIGd1aWRlX3RhYjogXCJHdWlkZVwiXG4gICAgZ3VpZGVfdmlkZW9fdHV0b3JpYWw6IFwiVmlkZW9nZW5vbWfDpW5nXCJcbiAgICBndWlkZV90aXBzOiBcIlRpcHNcIlxuICAgIG11bHRpcGxheWVyX3RhYjogXCJGbGVyc3BlbGFybMOkZ2VcIlxuICAgIGF1dGhfdGFiOiBcIlJlZ2lzdHJlcmEgZGlnXCJcbiAgICBpbnZlbnRvcnlfY2FwdGlvbjogXCJVdHJ1c3RhIGRpbiBoasOkbHRlXCJcbiAgICBjaG9vc2VfaGVyb19jYXB0aW9uOiBcIlbDpGxqIGhqw6RsdGUsIHNwcsOla1wiXG4gICAgb3B0aW9uc19jYXB0aW9uOiBcIktvbmZpZ3VyZXJhIGluc3TDpGxsbmluZ2FyXCJcbiAgICBndWlkZV9jYXB0aW9uOiBcIkRva3VtZW50IG9jaCB0aXBzXCJcbiAgICBtdWx0aXBsYXllcl9jYXB0aW9uOiBcIlNwZWxhIG1lZCB2w6RubmVyIVwiXG4gICAgYXV0aF9jYXB0aW9uOiBcIlNwYXJhIGRpbmEgZnJhbXN0ZWcuXCJcblxuICBsZWFkZXJib2FyZDpcbiAgICB2aWV3X290aGVyX3NvbHV0aW9uczogXCJWaXNhIHRvcHBsaXN0b3JcIlxuICAgIHNjb3JlczogXCJQb8OkbmdcIlxuICAgIHRvcF9wbGF5ZXJzOiBcIlRvcHBzcGVsYXJlIGVmdGVyXCJcbiAgICBkYXk6IFwiSWRhZ1wiXG4gICAgd2VlazogXCJEZW4gaMOkciB2ZWNrYW5cIlxuICAgIGFsbDogXCJHZW5vbSB0aWRlcm5hXCJcbiAgICBsYXRlc3Q6IFwiU2VuYXN0ZVwiXG4gICAgdGltZTogXCJUaWRcIlxuICAgIGRhbWFnZV90YWtlbjogXCJNb3R0YWdlbiBza2FkYVwiXG4gICAgZGFtYWdlX2RlYWx0OiBcIsOFc2Fta2FkIHNrYWRhXCJcbiAgICBkaWZmaWN1bHR5OiBcIlN2w6VyaWdoZXRzZ3JhZFwiXG4gICAgZ29sZF9jb2xsZWN0ZWQ6IFwiU2FtbGF0IGd1bGRcIlxuICAgIHN1cnZpdmFsX3RpbWU6IFwiw5Z2ZXJsZXZkZVwiXG4gICAgZGVmZWF0ZWQ6IFwiRmllbmRlciBiZXNlZ3JhZGVcIlxuICAgIGNvZGVfbGVuZ3RoOiBcIlJhZGVyIGF2IGtvZFwiXG4jICAgIHNjb3JlX2Rpc3BsYXk6IFwiX19zY29yZVR5cGVfXzogX19zY29yZV9fXCJcblxuICBpbnZlbnRvcnk6XG4gICAgZXF1aXBwZWRfaXRlbTogXCJBbnbDpG5kc1wiXG4gICAgcmVxdWlyZWRfcHVyY2hhc2VfdGl0bGU6IFwiS3LDpHZzXCJcbiAgICBhdmFpbGFibGVfaXRlbTogXCJUaWxsZ8OkbmdsaWdcIlxuICAgIHJlc3RyaWN0ZWRfdGl0bGU6IFwiQmVncsOkbnNhZFwiXG4gICAgc2hvdWxkX2VxdWlwOiBcIihkdWJiZWtsaWNrYSBmw7ZyIGF0dCBhbnbDpG5kYSlcIlxuICAgIGVxdWlwcGVkOiBcIihhbnbDpG5kcylcIlxuICAgIGxvY2tlZDogXCIobMOlc3QpXCJcbiAgICByZXN0cmljdGVkOiBcIihiZWdyw6Ruc2FkIHDDpSBkZW4gaMOkciBuaXbDpW4pXCJcbiAgICBlcXVpcDogXCJBbnbDpG5kXCJcbiAgICB1bmVxdWlwOiBcIlNsdXRhIGFudsOkbmRhXCJcbiAgICB3YXJyaW9yX29ubHk6IFwiRW5kYXN0IGtyaWdhcmVcIlxuICAgIHJhbmdlcl9vbmx5OiBcIkVuZGFzdCBWYW5kcmFyZVwiXG4gICAgd2l6YXJkX29ubHk6IFwiRW5kYXN0IFRyb2xsa2FybFwiXG5cbiAgYnV5X2dlbXM6XG4gICAgZmV3X2dlbXM6IFwiRXR0IHBhciDDpGRlbHN0ZW5hclwiXG4gICAgcGlsZV9nZW1zOiBcIkjDtmcgbWVkIMOkZGVsc3RlbmFyXCJcbiAgICBjaGVzdF9nZW1zOiBcIktpc3RhIG1lZCDDpGRlbHN0ZW5hclwiXG4gICAgcHVyY2hhc2luZzogXCJLw7ZwIHDDpWfDpXIuLi5cIlxuICAgIGRlY2xpbmVkOiBcIkvDtnAgbmVrYXRcIlxuICAgIHJldHJ5aW5nOiBcIlNlcnZlcmZlbCwgZsO2cnPDtmtlciBpZ2VuLlwiXG4gICAgcHJvbXB0X3RpdGxlOiBcIkludGUgdGlsbHLDpGNrbGlndCBtw6VuZ2Egw6RkZWxzdGVuYXJcIlxuICAgIHByb21wdF9ib2R5OiBcIlZpbGwgZHUgc2thZmZhIGZsZXJhP1wiXG4gICAgcHJvbXB0X2J1dHRvbjogXCJHw6UgdGlsbCBhZmbDpHJlblwiXG4gICAgcmVjb3ZlcmVkOiBcIkbDtnJlZ8OlZW5kZSBrw7ZwIGF2IMOkZGVsc3RlbmFyIMOldGVyc2thcGF0LiBWYXIgdsOkbmxpZyBvY2ggdXBwZGF0ZXJhIHNpZGFuLlwiXG4jICAgIHByaWNlOiBcInh7e2dlbXN9fSAvIG1vXCJcbiMgICAgYnV5X3ByZW1pdW06IFwiQnV5IFByZW1pdW1cIlxuIyAgICBwdXJjaGFzZTogXCJQdXJjaGFzZVwiXG4jICAgIHB1cmNoYXNlZDogXCJQdXJjaGFzZWRcIlxuXG4jICBzdWJzY3JpYmVfZm9yX2dlbXM6XG4jICAgIHByb21wdF90aXRsZTogXCJOb3QgRW5vdWdoIEdlbXMhXCJcbiMgICAgcHJvbXB0X2JvZHk6IFwiU3Vic2NyaWJlIHRvIFByZW1pdW0gdG8gZ2V0IGdlbXMgYW5kIGFjY2VzcyB0byBldmVuIG1vcmUgbGV2ZWxzIVwiXG5cbiMgIGVhcm5fZ2VtczpcbiMgICAgcHJvbXB0X3RpdGxlOiBcIk5vdCBFbm91Z2ggR2Vtc1wiXG4jICAgIHByb21wdF9ib2R5OiBcIktlZXAgcGxheWluZyB0byBlYXJuIG1vcmUhXCJcblxuIyAgc3Vic2NyaWJlOlxuIyAgICBiZXN0X2RlYWw6IFwiQmVzdCBEZWFsIVwiXG4jICAgIGNvbmZpcm1hdGlvbjogXCJDb25ncmF0dWxhdGlvbnMhIFlvdSBub3cgaGF2ZSBhIENvZGVDb21iYXQgUHJlbWl1bSBTdWJzY3JpcHRpb24hXCJcbiMgICAgcHJlbWl1bV9hbHJlYWR5X3N1YnNjcmliZWQ6IFwiWW91J3JlIGFscmVhZHkgc3Vic2NyaWJlZCB0byBQcmVtaXVtIVwiXG4jICAgIHN1YnNjcmliZV9tb2RhbF90aXRsZTogXCJDb2RlQ29tYmF0IFByZW1pdW1cIlxuIyAgICBjb21wYXJpc29uX2JsdXJiOiBcIkJlY29tZSBhIE1hc3RlciBDb2RlciAtIHN1YnNjcmliZSB0byA8Yj5QcmVtaXVtPC9iPiB0b2RheSFcIlxuIyAgICBtdXN0X2JlX2xvZ2dlZDogXCJZb3UgbXVzdCBiZSBsb2dnZWQgaW4gZmlyc3QuIFBsZWFzZSBjcmVhdGUgYW4gYWNjb3VudCBvciBsb2cgaW4gZnJvbSB0aGUgbWVudSBhYm92ZS5cIlxuIyAgICBzdWJzY3JpYmVfdGl0bGU6IFwiU3Vic2NyaWJlXCIgIyBBY3R1YWxseSB1c2VkIGluIHN1YnNjcmliZSBidXR0b25zLCB0b29cbiMgICAgdW5zdWJzY3JpYmU6IFwiVW5zdWJzY3JpYmVcIlxuIyAgICBjb25maXJtX3Vuc3Vic2NyaWJlOiBcIkNvbmZpcm0gVW5zdWJzY3JpYmVcIlxuIyAgICBuZXZlcl9taW5kOiBcIk5ldmVyIE1pbmQsIEkgU3RpbGwgTG92ZSBZb3VcIlxuIyAgICB0aGFua195b3VfbW9udGhzX3ByZWZpeDogXCJUaGFuayB5b3UgZm9yIHN1cHBvcnRpbmcgdXMgdGhlc2UgbGFzdFwiXG4jICAgIHRoYW5rX3lvdV9tb250aHNfc3VmZml4OiBcIm1vbnRocy5cIlxuIyAgICB0aGFua195b3U6IFwiVGhhbmsgeW91IGZvciBzdXBwb3J0aW5nIENvZGVDb21iYXQuXCJcbiMgICAgc29ycnlfdG9fc2VlX3lvdV9nbzogXCJTb3JyeSB0byBzZWUgeW91IGdvISBQbGVhc2UgbGV0IHVzIGtub3cgd2hhdCB3ZSBjb3VsZCBoYXZlIGRvbmUgYmV0dGVyLlwiXG4jICAgIHVuc3Vic2NyaWJlX2ZlZWRiYWNrX3BsYWNlaG9sZGVyOiBcIk8sIHdoYXQgaGF2ZSB3ZSBkb25lP1wiXG4jICAgIHN0cmlwZV9kZXNjcmlwdGlvbjogXCJNb250aGx5IFN1YnNjcmlwdGlvblwiXG4jICAgIGJ1eV9ub3c6IFwiQnV5IE5vd1wiXG4jICAgIHN1YnNjcmlwdGlvbl9yZXF1aXJlZF90b19wbGF5OiBcIllvdSdsbCBuZWVkIGEgc3Vic2NyaXB0aW9uIHRvIHBsYXkgdGhpcyBsZXZlbC5cIlxuIyAgICB1bmxvY2tfaGVscF92aWRlb3M6IFwiU3Vic2NyaWJlIHRvIHVubG9jayBhbGwgdmlkZW8gdHV0b3JpYWxzLlwiXG4jICAgIHBlcnNvbmFsX3N1YjogXCJQZXJzb25hbCBTdWJzY3JpcHRpb25cIiAjIEFjY291bnRzIFN1YnNjcmlwdGlvbiBWaWV3IGJlbG93XG4jICAgIGxvYWRpbmdfaW5mbzogXCJMb2FkaW5nIHN1YnNjcmlwdGlvbiBpbmZvcm1hdGlvbi4uLlwiXG4jICAgIG1hbmFnZWRfYnk6IFwiTWFuYWdlZCBieVwiXG4jICAgIHdpbGxfYmVfY2FuY2VsbGVkOiBcIldpbGwgYmUgY2FuY2VsbGVkIG9uXCJcbiMgICAgY3VycmVudGx5X2ZyZWU6IFwiWW91IGN1cnJlbnRseSBoYXZlIGEgZnJlZSBzdWJzY3JpcHRpb25cIlxuIyAgICBjdXJyZW50bHlfZnJlZV91bnRpbDogXCJZb3UgY3VycmVudGx5IGhhdmUgYSBzdWJzY3JpcHRpb24gdW50aWxcIlxuIyAgICBmcmVlX3N1YnNjcmlwdGlvbjogXCJGcmVlIHN1YnNjcmlwdGlvblwiXG4jICAgIHdhc19mcmVlX3VudGlsOiBcIllvdSBoYWQgYSBmcmVlIHN1YnNjcmlwdGlvbiB1bnRpbFwiXG4jICAgIG1hbmFnZWRfc3ViczogXCJNYW5hZ2VkIFN1YnNjcmlwdGlvbnNcIlxuIyAgICBzdWJzY3JpYmluZzogXCJTdWJzY3JpYmluZy4uLlwiXG4jICAgIGN1cnJlbnRfcmVjaXBpZW50czogXCJDdXJyZW50IFJlY2lwaWVudHNcIlxuIyAgICB1bnN1YnNjcmliaW5nOiBcIlVuc3Vic2NyaWJpbmdcIlxuIyAgICBzdWJzY3JpYmVfcHJlcGFpZDogXCJDbGljayBTdWJzY3JpYmUgdG8gdXNlIHByZXBhaWQgY29kZVwiXG4jICAgIHVzaW5nX3ByZXBhaWQ6IFwiVXNpbmcgcHJlcGFpZCBjb2RlIGZvciBtb250aGx5IHN1YnNjcmlwdGlvblwiXG4jICAgIGZlYXR1cmVfbGV2ZWxfYWNjZXNzOiBcIkFjY2VzcyAzMDArIGxldmVscyBhdmFpbGFibGVcIlxuIyAgICBmZWF0dXJlX2hlcm9lczogXCJVbmxvY2sgZXhjbHVzaXZlIGhlcm9lcyBhbmQgcGV0c1wiXG4jICAgIGZlYXR1cmVfbGVhcm46IFwiTGVhcm4gdG8gbWFrZSBnYW1lcyBhbmQgd2Vic2l0ZXNcIlxuIyAgICBtb250aF9wcmljZTogXCIkX19wcmljZV9fXCJcbiMgICAgZmlyc3RfbW9udGhfcHJpY2U6IFwiT25seSAkX19wcmljZV9fIGZvciB5b3VyIGZpcnN0IG1vbnRoIVwiXG4jICAgIGxpZmV0aW1lOiBcIkxpZmV0aW1lIEFjY2Vzc1wiXG4jICAgIGxpZmV0aW1lX3ByaWNlOiBcIiRfX3ByaWNlX19cIlxuIyAgICB5ZWFyX3N1YnNjcmlwdGlvbjogXCJZZWFybHkgU3Vic2NyaXB0aW9uXCJcbiMgICAgeWVhcl9wcmljZTogXCIkX19wcmljZV9fL3llYXJcIlxuIyAgICBzdXBwb3J0X3BhcnQxOiBcIk5lZWQgaGVscCB3aXRoIHBheW1lbnQgb3IgcHJlZmVyIFBheVBhbD8gRW1haWxcIlxuIyAgICBzdXBwb3J0X3BhcnQyOiBcInN1cHBvcnRAY29kZWNvbWJhdC5jb21cIlxuXG4jICBhbm5vdW5jZW1lbnQ6XG4jICAgIG5vd19hdmFpbGFibGU6IFwiTm93IGF2YWlsYWJsZSBmb3Igc3Vic2NyaWJlcnMhXCJcbiMgICAgc3Vic2NyaWJlcjogXCJzdWJzY3JpYmVyXCJcbiMgICAgY3VkZGx5X2NvbXBhbmlvbnM6IFwiQ3VkZGx5IENvbXBhbmlvbnMhXCIgIyBQZXQgQW5ub3VuY2VtZW50IE1vZGFsXG4jICAgIGtpbmRsaW5nX25hbWU6IFwiS2luZGxpbmcgRWxlbWVudGFsXCJcbiMgICAga2luZGxpbmdfZGVzY3JpcHRpb246IFwiS2luZGxpbmcgRWxlbWVudGFscyBqdXN0IHdhbnQgdG8ga2VlcCB5b3Ugd2FybSBhdCBuaWdodC4gQW5kIGR1cmluZyB0aGUgZGF5LiBBbGwgdGhlIHRpbWUsIHJlYWxseS5cIlxuIyAgICBncmlmZmluX25hbWU6IFwiQmFieSBHcmlmZmluXCJcbiMgICAgZ3JpZmZpbl9kZXNjcmlwdGlvbjogXCJHcmlmZmlucyBhcmUgaGFsZiBlYWdsZSwgaGFsZiBsaW9uLCBhbGwgYWRvcmFibGUuXCJcbiMgICAgcmF2ZW5fbmFtZTogXCJSYXZlblwiXG4jICAgIHJhdmVuX2Rlc2NyaXB0aW9uOiBcIlJhdmVucyBhcmUgZXhjZWxsZW50IGF0IGdhdGhlcmluZyBzaGlueSBib3R0bGVzIGZ1bGwgb2YgaGVhbHRoIGZvciB5b3UuXCJcbiMgICAgbWltaWNfbmFtZTogXCJNaW1pY1wiXG4jICAgIG1pbWljX2Rlc2NyaXB0aW9uOiBcIk1pbWljcyBjYW4gcGljayB1cCBjb2lucyBmb3IgeW91LiBNb3ZlIHRoZW0gb24gdG9wIG9mIGNvaW5zIHRvIGluY3JlYXNlIHlvdXIgZ29sZCBzdXBwbHkuXCJcbiMgICAgY291Z2FyX25hbWU6IFwiQ291Z2FyXCJcbiMgICAgY291Z2FyX2Rlc2NyaXB0aW9uOiBcIkNvdWdhcnMgbGlrZSB0byBlYXJuIGEgUGhEIGJ5IFB1cnJpbmcgSGFwcGlseSBEYWlseS5cIlxuIyAgICBmb3hfbmFtZTogXCJCbHVlIEZveFwiXG4jICAgIGZveF9kZXNjcmlwdGlvbjogXCJCbHVlIGZveGVzIGFyZSB2ZXJ5IGNsZXZlciBhbmQgbG92ZSBkaWdnaW5nIGluIHRoZSBkaXJ0IGFuZCBzbm93IVwiXG4jICAgIHB1Z2ljb3JuX25hbWU6IFwiUHVnaWNvcm5cIlxuIyAgICBwdWdpY29ybl9kZXNjcmlwdGlvbjogXCJQdWdpY29ybnMgYXJlIHNvbWUgb2YgdGhlIHJhcmVzdCBjcmVhdHVyZXMgYW5kIGNhbiBjYXN0IHNwZWxscyFcIlxuIyAgICB3b2xmX25hbWU6IFwiV29sZiBQdXBcIlxuIyAgICB3b2xmX2Rlc2NyaXB0aW9uOiBcIldvbGYgcHVwcyBleGNlbCBpbiBodW50aW5nLCBnYXRoZXJpbmcsIGFuZCBwbGF5aW5nIGEgbWVhbiBnYW1lIG9mIGhpZGUtYW5kLXNlZWshXCJcbiMgICAgYmFsbF9uYW1lOiBcIlJlZCBTcXVlYWt5IEJhbGxcIlxuIyAgICBiYWxsX2Rlc2NyaXB0aW9uOiBcImJhbGwuc3F1ZWFrKClcIlxuIyAgICBjb2xsZWN0X3BldHM6IFwiQ29sbGVjdCBwZXRzIGZvciB5b3VyIGhlcm9lcyFcIlxuIyAgICBlYWNoX3BldDogXCJFYWNoIHBldCBoYXMgYSB1bmlxdWUgaGVscGVyIGFiaWxpdHkhXCJcbiMgICAgdXBncmFkZV90b19wcmVtaXVtOiBcIkJlY29tZSBhIHt7c3Vic2NyaWJlcn19IHRvIGVxdWlwIHBldHMuXCJcbiMgICAgcGxheV9zZWNvbmRfa2l0aG1hemU6IFwiUGxheSB7e3RoZV9zZWNvbmRfa2l0aG1hemV9fSB0byB1bmxvY2sgdGhlIFdvbGYgUHVwIVwiXG4jICAgIHRoZV9zZWNvbmRfa2l0aG1hemU6IFwiVGhlIFNlY29uZCBLaXRobWF6ZVwiXG4jICAgIGtlZXBfcGxheWluZzogXCJLZWVwIHBsYXlpbmcgdG8gZGlzY292ZXIgdGhlIGZpcnN0IHBldCFcIlxuIyAgICBjb21pbmdfc29vbjogXCJDb21pbmcgc29vblwiXG4jICAgIHJpdGljOiBcIlJpdGljIHRoZSBDb2xkXCIgIyBSaXRpYyBBbm5vdW5jZW1lbnQgTW9kYWxcbiMgICAgcml0aWNfZGVzY3JpcHRpb246IFwiUml0aWMgdGhlIENvbGQuIFRyYXBwZWQgaW4gS2VsdmludGFwaCBHbGFjaWVyIGZvciBjb3VudGxlc3MgYWdlcywgZmluYWxseSBmcmVlIGFuZCByZWFkeSB0byB0ZW5kIHRvIHRoZSBvZ3JlcyB0aGF0IGltcHJpc29uZWQgaGltLlwiXG4jICAgIGljZV9ibG9jazogXCJBIGJsb2NrIG9mIGljZVwiXG4jICAgIGljZV9kZXNjcmlwdGlvbjogXCJUaGVyZSBhcHBlYXJzIHRvIGJlIHNvbWV0aGluZyB0cmFwcGVkIGluc2lkZS4uLlwiXG4jICAgIGJsaW5rX25hbWU6IFwiQmxpbmtcIlxuIyAgICBibGlua19kZXNjcmlwdGlvbjogXCJSaXRpYyBkaXNhcHBlYXJzIGFuZCByZWFwcGVhcnMgaW4gYSBibGluayBvZiBhbiBleWUsIGxlYXZpbmcgbm90aGluZyBidXQgYSBzaGFkb3cuXCJcbiMgICAgc2hhZG93U3RlcF9uYW1lOiBcIlNoYWRvd3N0ZXBcIlxuIyAgICBzaGFkb3dTdGVwX2Rlc2NyaXB0aW9uOiBcIkEgbWFzdGVyIGFzc2Fzc2luIGtub3dzIGhvdyB0byB3YWxrIGJldHdlZW4gdGhlIHNoYWRvd3MuXCJcbiMgICAgdG9ybmFkb19uYW1lOiBcIlRvcm5hZG9cIlxuIyAgICB0b3JuYWRvX2Rlc2NyaXB0aW9uOiBcIkl0IGlzIGdvb2QgdG8gaGF2ZSBhIHJlc2V0IGJ1dHRvbiB3aGVuIG9uZSdzIGNvdmVyIGlzIGJsb3duLlwiXG4jICAgIHdhbGxPZkRhcmtuZXNzX25hbWU6IFwiV2FsbCBvZiBEYXJrbmVzc1wiXG4jICAgIHdhbGxPZkRhcmtuZXNzX2Rlc2NyaXB0aW9uOiBcIkhpZGUgYmVoaW5kIGEgd2FsbCBvZiBzaGFkb3dzIHRvIHByZXZlbnQgdGhlIGdhemUgb2YgcHJ5aW5nIGV5ZXMuXCJcblxuIyAgcHJlbWl1bV9mZWF0dXJlczpcbiMgICAgZ2V0X3ByZW1pdW06IFwiR2V0PGJyPkNvZGVDb21iYXQ8YnI+UHJlbWl1bVwiICMgRml0IGludG8gdGhlIGJhbm5lciBvbiB0aGUgL2ZlYXR1cmVzIHBhZ2VcbiMgICAgbWFzdGVyX2NvZGVyOiBcIkJlY29tZSBhIE1hc3RlciBDb2RlciBieSBzdWJzY3JpYmluZyB0b2RheSFcIlxuIyAgICBwYXlwYWxfcmVkaXJlY3Q6IFwiWW91IHdpbGwgYmUgcmVkaXJlY3RlZCB0byBQYXlQYWwgdG8gY29tcGxldGUgdGhlIHN1YnNjcmlwdGlvbiBwcm9jZXNzLlwiXG4jICAgIHN1YnNjcmliZV9ub3c6IFwiU3Vic2NyaWJlIE5vd1wiXG4jICAgIGhlcm9fYmx1cmJfMTogXCJHZXQgYWNjZXNzIHRvIF9fcHJlbWl1bUhlcm9lc0NvdW50X18gc3VwZXItY2hhcmdlZCBzdWJzY3JpYmVyLW9ubHkgaGVyb2VzISBIYXJuZXNzIHRoZSB1bnN0b3BwYWJsZSBwb3dlciBvZiBPa2FyIFN0b21wZm9vdCwgdGhlIGRlYWRseSBwcmVjaXNpb24gb2YgTmFyaWEgb2YgdGhlIExlYWYsIG9yIHN1bW1vbiBcXFwiYWRvcmFibGVcXFwiIHNrZWxldG9ucyB3aXRoIE5hbGZhciBDcnlwdG9yLlwiXG4jICAgIGhlcm9fYmx1cmJfMjogXCJQcmVtaXVtIFdhcnJpb3JzIHVubG9jayBzdHVubmluZyBtYXJ0aWFsIHNraWxscyBsaWtlIFdhcmNyeSwgU3RvbXAsIGFuZCBIdXJsIEVuZW15LiBPciwgcGxheSBhcyBhIFJhbmdlciwgdXNpbmcgc3RlYWx0aCBhbmQgYm93cywgdGhyb3dpbmcga25pdmVzLCB0cmFwcyEgVHJ5IHlvdXIgc2tpbGwgYXMgYSB0cnVlIGNvZGluZyBXaXphcmQsIGFuZCB1bmxlYXNoIGEgcG93ZXJmdWwgYXJyYXkgb2YgUHJpbW9yZGlhbCwgTmVjcm9tYW50aWMgb3IgRWxlbWVudGFsIG1hZ2ljIVwiXG4jICAgIGhlcm9fY2FwdGlvbjogXCJFeGNpdGluZyBuZXcgaGVyb2VzIVwiXG4jICAgIHBldF9ibHVyYl8xOiBcIlBldHMgYXJlbid0IGp1c3QgYWRvcmFibGUgY29tcGFuaW9ucywgdGhleSBhbHNvIHByb3ZpZGUgdW5pcXVlIGZ1bmN0aW9uYWxpdHkgYW5kIG1ldGhvZHMuIFRoZSBCYWJ5IEdyaWZmaW4gY2FuIGNhcnJ5IHVuaXRzIHRocm91Z2ggdGhlIGFpciwgdGhlIFdvbGYgUHVwIHBsYXlzIGNhdGNoIHdpdGggZW5lbXkgYXJyb3dzLCB0aGUgQ291Z2FyIGlzIGZvbmQgb2YgY2hhc2luZyBvZ3JlcyBhcm91bmQsIGFuZCB0aGUgTWltaWMgYXR0cmFjdHMgY29pbnMgbGlrZSBhIG1hZ25ldCFcIlxuIyAgICBwZXRfYmx1cmJfMjogXCJDb2xsZWN0IGFsbCB0aGUgcGV0cyB0byBkaXNjb3ZlciB0aGVpciB1bmlxdWUgYWJpbGl0aWVzIVwiXG4jICAgIHBldF9jYXB0aW9uOiBcIkFkb3B0IHBldHMgdG8gYWNjb21wYW55IHlvdXIgaGVybyFcIlxuIyAgICBnYW1lX2Rldl9ibHVyYjogXCJMZWFybiBnYW1lIHNjcmlwdGluZyBhbmQgYnVpbGQgbmV3IGxldmVscyB0byBzaGFyZSB3aXRoIHlvdXIgZnJpZW5kcyEgUGxhY2UgdGhlIGl0ZW1zIHlvdSB3YW50LCB3cml0ZSBjb2RlIGZvciB1bml0IGxvZ2ljIGFuZCBiZWhhdmlvciwgYW5kIHNlZSBpZiB5b3VyIGZyaWVuZHMgY2FuIGJlYXQgdGhlIGxldmVsIVwiXG4jICAgIGdhbWVfZGV2X2NhcHRpb246IFwiRGVzaWduIHlvdXIgb3duIGdhbWVzIHRvIGNoYWxsZW5nZSB5b3VyIGZyaWVuZHMhXCJcbiMgICAgZXZlcnl0aGluZ19pbl9wcmVtaXVtOiBcIkV2ZXJ5dGhpbmcgeW91IGdldCBpbiBDb2RlQ29tYmF0IFByZW1pdW06XCJcbiMgICAgbGlzdF9nZW1zOiBcIlJlY2VpdmUgYm9udXMgZ2VtcyB0byBidXkgZ2VhciwgcGV0cywgYW5kIGhlcm9lc1wiXG4jICAgIGxpc3RfbGV2ZWxzOiBcIkdhaW4gYWNjZXNzIHRvIF9fcHJlbWl1bUxldmVsc0NvdW50X18gbW9yZSBsZXZlbHNcIlxuIyAgICBsaXN0X2hlcm9lczogXCJVbmxvY2sgZXhjbHVzaXZlIGhlcm9lcywgaW5jbHVkZSBSYW5nZXIgYW5kIFdpemFyZCBjbGFzc2VzXCJcbiMgICAgbGlzdF9nYW1lX2RldjogXCJNYWtlIGFuZCBzaGFyZSBnYW1lcyB3aXRoIGZyaWVuZHNcIlxuIyAgICBsaXN0X3dlYl9kZXY6IFwiQnVpbGQgd2Vic2l0ZXMgYW5kIGludGVyYWN0aXZlIGFwcHNcIlxuIyAgICBsaXN0X2l0ZW1zOiBcIkVxdWlwIFByZW1pdW0tb25seSBpdGVtcyBsaWtlIHBldHNcIlxuIyAgICBsaXN0X3N1cHBvcnQ6IFwiR2V0IFByZW1pdW0gc3VwcG9ydCB0byBoZWxwIHlvdSBkZWJ1ZyB0cmlja3kgY29kZVwiXG4jICAgIGxpc3RfY2xhbnM6IFwiQ3JlYXRlIHByaXZhdGUgY2xhbnMgdG8gaW52aXRlIHlvdXIgZnJpZW5kcyBhbmQgY29tcGV0ZSBvbiBhIGdyb3VwIGxlYWRlcmJvYXJkXCJcblxuICBjaG9vc2VfaGVybzpcbiAgICBjaG9vc2VfaGVybzogXCJWw6RsaiBoasOkbHRlXCJcbiAgICBwcm9ncmFtbWluZ19sYW5ndWFnZTogXCJQcm9ncmFtc3Byw6VrXCJcbiAgICBwcm9ncmFtbWluZ19sYW5ndWFnZV9kZXNjcmlwdGlvbjogXCJWaWxrZXQgcHJvZ3JhbXNwcsOlayB2aWxsIGR1IGFudsOkbmRhP1wiXG4gICAgZGVmYXVsdDogXCJTdGFuZGFyZFwiXG4gICAgZXhwZXJpbWVudGFsOiBcIkV4cGVyaW1lbnRlbGxcIlxuICAgIHB5dGhvbl9ibHVyYjogXCJFbmtlbHQgbWVuIMOkbmTDpSBrcmFmdGZ1bGx0LCBwZXJmZWt0IGbDtnIgbnliw7ZyamFyZSBvY2ggZXhwZXJ0ZXIuXCJcbiAgICBqYXZhc2NyaXB0X2JsdXJiOiBcIldlYmJlbnMgc3Byw6VrLiAoSW50ZSBzYW1tYSBzYWsgc29tIEphdmEuKVwiXG4gICAgY29mZmVlc2NyaXB0X2JsdXJiOiBcIlRyZXZsaWdhcmUgSmF2YVNjcmlwdC1zeW50YXguXCJcbiAgICBsdWFfYmx1cmI6IFwiU3Byw6VrIGbDtnIgc3BlbHNrcmlwdC5cIlxuIyAgICBqYXZhX2JsdXJiOiBcIihTdWJzY3JpYmVyIE9ubHkpIEFuZHJvaWQgYW5kIGVudGVycHJpc2UuXCJcbiAgICBzdGF0dXM6IFwiU3RhdHVzXCJcbiAgICB3ZWFwb25zOiBcIlZhcGVuXCJcbiAgICB3ZWFwb25zX3dhcnJpb3I6IFwiU3bDpHJkIC0gS29ydCByw6Rja3ZpZGQsIGluZ2VuIG1hZ2lcIlxuICAgIHdlYXBvbnNfcmFuZ2VyOiBcIkFybWJvcnN0LCBwaXN0b2xlciAtIEzDpW5nIHLDpGNrdmlkZCwgaW5nZW4gbWFnaVwiXG4gICAgd2VhcG9uc193aXphcmQ6IFwiVHJvbGxzcMO2biwgc3RhdmFyIC0gTMOlbmcgcsOkY2t2aWRkLCBtYWdpXCJcbiAgICBhdHRhY2s6IFwiQXR0YWNrXCIgIyBDYW4gYWxzbyB0cmFuc2xhdGUgYXMgXCJBdHRhY2tcIlxuICAgIGhlYWx0aDogXCJIw6Rsc2FcIlxuICAgIHNwZWVkOiBcIkhhc3RpZ2hldFwiXG4gICAgcmVnZW5lcmF0aW9uOiBcIlJlZ2VuZXJhdGlvblwiXG4gICAgcmFuZ2U6IFwiUsOkY2t2aWRkXCIgIyBBcyBpbiBcImF0dGFjayBvciB2aXN1YWwgcmFuZ2VcIlxuICAgIGJsb2NrczogXCJCbG9ja2VyYXJcIiAjIEFzIGluIFwidGhpcyBzaGllbGQgYmxvY2tzIHRoaXMgbXVjaCBkYW1hZ2VcIlxuICAgIGJhY2tzdGFiOiBcIkh1Z2cgaSByeWdnZW5cIiAjIEFzIGluIFwidGhpcyBkYWdnZXIgZG9lcyB0aGlzIG11Y2ggYmFja3N0YWIgZGFtYWdlXCJcbiAgICBza2lsbHM6IFwiRsOkcmRpZ2hldGVyXCJcbiAgICBhdHRhY2tfMTogXCJHw7ZyXCJcbiAgICBhdHRhY2tfMjogXCJhdiBub3RlcmFkIHZhcGVuc2thZGEgZsO2clwiXG4gICAgYXR0YWNrXzM6IFwiLlwiXG4gICAgaGVhbHRoXzE6IFwiRsOlclwiXG4gICAgaGVhbHRoXzI6IFwiYXYgbm90ZXJhZCBydXN0bmluZ3Now6Rsc2EgZsO2clwiXG4gICAgaGVhbHRoXzM6IFwiLlwiXG4gICAgc3BlZWRfMTogXCJSw7ZyIHNpZ1wiXG4gICAgc3BlZWRfMjogXCJtZXRlciBwZXIgc2VrdW5kLlwiXG4gICAgYXZhaWxhYmxlX2Zvcl9wdXJjaGFzZTogXCJUaWxsZ8OkbmxpZyBhdHQga8O2cGFcIiAjIFNob3dzIHVwIHdoZW4geW91IGhhdmUgdW5sb2NrZWQsIGJ1dCBub3QgcHVyY2hhc2VkLCBhIGhlcm8gaW4gdGhlIGhlcm8gc3RvcmVcbiAgICBsZXZlbF90b191bmxvY2s6IFwiTml2w6Ugc29tIGzDpXNlciB1cHA6XCIgIyBMYWJlbCBmb3Igd2hpY2ggbGV2ZWwgeW91IGhhdmUgdG8gYmVhdCB0byB1bmxvY2sgYSBwYXJ0aWN1bGFyIGhlcm8gKGNsaWNrIGEgbG9ja2VkIGhlcm8gaW4gdGhlIHN0b3JlIHRvIHNlZSlcbiAgICByZXN0cmljdGVkX3RvX2NlcnRhaW5faGVyb2VzOiBcIkRldCDDpHIgYmFyYSB2aXNzYSBoasOkbHRhciBzb20ga2FuIHNwZWxhIGRlbiBow6RyIG5pdsOlbi5cIlxuXG4gIHNraWxsX2RvY3M6XG4gICAgZnVuY3Rpb246IFwiZnVua3Rpb25cIiAjIHNraWxsIHR5cGVzXG4gICAgbWV0aG9kOiBcIm1ldG9kXCJcbiMgICAgc25pcHBldDogXCJzbmlwcGV0XCJcbiAgICBudW1iZXI6IFwibnVtbWVyXCJcbiMgICAgYXJyYXk6IFwiYXJyYXlcIlxuICAgIG9iamVjdDogXCJvYmpla3RcIlxuICAgIHN0cmluZzogXCJzdHLDpG5nXCJcbiAgICB3cml0YWJsZTogXCJza3JpdmJhclwiICMgSG92ZXIgb3ZlciBcImF0dGFja1wiIGluIFlvdXIgU2tpbGxzIHdoaWxlIHBsYXlpbmcgYSBsZXZlbCB0byBzZWUgbW9zdCBvZiB0aGlzXG4gICAgcmVhZF9vbmx5OiBcImVuZGFzdCBsw6RzbmluZ1wiXG4gICAgYWN0aW9uOiBcIkhhbmRsaW5nXCJcbiAgICBzcGVsbDogXCJUcm9sbGZvcm1lbFwiXG4gICAgYWN0aW9uX25hbWU6IFwibmFtblwiXG4gICAgYWN0aW9uX2Nvb2xkb3duOiBcIlRhclwiXG4gICAgYWN0aW9uX3NwZWNpZmljX2Nvb2xkb3duOiBcIsOFdGVyaMOkbXRuaW5nc3RpZFwiXG4gICAgYWN0aW9uX2RhbWFnZTogXCJTa2FkYVwiXG4gICAgYWN0aW9uX3JhbmdlOiBcIlLDpGNrdmlkZFwiXG4gICAgYWN0aW9uX3JhZGl1czogXCJSYWRpZVwiXG4gICAgYWN0aW9uX2R1cmF0aW9uOiBcIkzDtnB0aWRcIlxuICAgIGV4YW1wbGU6IFwiRXhhbXBlbFwiXG4gICAgZXg6IFwiZXhcIiAjIEFiYnJldmlhdGlvbiBvZiBcImV4YW1wbGVcIlxuICAgIGN1cnJlbnRfdmFsdWU6IFwiTnV2YXJhbmRlIHbDpHJkZVwiXG4gICAgZGVmYXVsdF92YWx1ZTogXCJTdGFuZGFyZHbDpHJkZVwiXG4gICAgcGFyYW1ldGVyczogXCJQYXJhbWV0cmFyXCJcbiAgICByZXF1aXJlZF9wYXJhbWV0ZXJzOiBcIk9ibGlnYXRvcmlza2EgUGFyYW1ldHJhclwiXG4gICAgb3B0aW9uYWxfcGFyYW1ldGVyczogXCJWYWxmcmlhIHBhcmFtZXRyYXJcIlxuICAgIHJldHVybnM6IFwiUmV0dXJuZXJhclwiXG4gICAgZ3JhbnRlZF9ieTogXCJHZXMgYXZcIlxuXG4gIHNhdmVfbG9hZDpcbiAgICBncmFudWxhcml0eV9zYXZlZF9nYW1lczogXCJTcGFyYXRcIlxuICAgIGdyYW51bGFyaXR5X2NoYW5nZV9oaXN0b3J5OiBcIkhpc3RvcmlrXCJcblxuICBvcHRpb25zOlxuICAgIGdlbmVyYWxfb3B0aW9uczogXCJBbGxtw6RubmEgaW5zdMOkbGxuaW5nYXJcIiAjIENoZWNrIG91dCB0aGUgT3B0aW9ucyB0YWIgaW4gdGhlIEdhbWUgTWVudSB3aGlsZSBwbGF5aW5nIGEgbGV2ZWxcbiAgICB2b2x1bWVfbGFiZWw6IFwiVm9seW1cIlxuICAgIG11c2ljX2xhYmVsOiBcIk11c2lrXCJcbiAgICBtdXNpY19kZXNjcmlwdGlvbjogXCJTdMOkbmcgYXYvc8OkdHQgcMOlIGJha2dydW5kc211c2lrLlwiXG4gICAgZWRpdG9yX2NvbmZpZ190aXRsZTogXCJSZWRpZ2VyYXJpbnN0w6RsbG5pbmdhclwiXG4jICAgIGVkaXRvcl9jb25maWdfbGl2ZWNvbXBsZXRpb25fbGFiZWw6IFwiTGl2ZSBBdXRvY29tcGxldGlvblwiXG4gICAgZWRpdG9yX2NvbmZpZ19saXZlY29tcGxldGlvbl9kZXNjcmlwdGlvbjogXCJWaXNhciBmw7Zyc2xhZyBtZWRhbnMgZHUgc2tyaXZlclwiXG4gICAgZWRpdG9yX2NvbmZpZ19pbnZpc2libGVzX2xhYmVsOiBcIlZpc2Egb3N5bmxpZ2FcIlxuICAgIGVkaXRvcl9jb25maWdfaW52aXNpYmxlc19kZXNjcmlwdGlvbjogXCJWaXNhciBvc3lubGlnYSB0ZWNrZW4sIHRpbGwgZXhlbXBlbCBtZWxsYW5ydW0gb2NoIG55cmFkc3RlY2tlbi5cIlxuICAgIGVkaXRvcl9jb25maWdfaW5kZW50Z3VpZGVzX2xhYmVsOiBcIlZpc2EgaW5kZW50ZXJpbmdzZ3VpZGVyXCJcbiAgICBlZGl0b3JfY29uZmlnX2luZGVudGd1aWRlc19kZXNjcmlwdGlvbjogXCJWaXNhciB2ZXJ0aWthbGEgbGluamVyIGbDtnIgYXR0IGt1bm5hIHNlIGluZGVudGVyaW5nIGLDpHR0cmUuXCJcbiAgICBlZGl0b3JfY29uZmlnX2JlaGF2aW9yc19sYWJlbDogXCJTbWFydCBiZXRlZW5kZVwiXG4gICAgZWRpdG9yX2NvbmZpZ19iZWhhdmlvcnNfZGVzY3JpcHRpb246IFwiQXZzbHV0YSBhdXRvbWF0aXNrdCBoYWtwYXJlbnRlc2VyLCBwYXJlbnRlc2VyLCBvY2ggY2l0YXQuXCJcblxuICBhYm91dDpcbiMgICAgdGl0bGU6IFwiQWJvdXQgQ29kZUNvbWJhdCAtIEVuZ2FnaW5nIFN0dWRlbnRzLCBFbXBvd2VyaW5nIFRlYWNoZXJzLCBJbnNwaXJpbmcgQ3JlYXRpb25cIlxuIyAgICBtZXRhX2Rlc2NyaXB0aW9uOiBcIk91ciBtaXNzaW9uIGlzIHRvIGxldmVsIGNvbXB1dGVyIHNjaWVuY2UgdGhyb3VnaCBnYW1lLWJhc2VkIGxlYXJuaW5nIGFuZCBtYWtlIGNvZGluZyBhY2Nlc3NpYmxlIHRvIGV2ZXJ5IGxlYXJuZXIuIFdlIGJlbGlldmUgcHJvZ3JhbW1pbmcgaXMgbWFnaWMgYW5kIHdhbnQgbGVhcm5lcnMgdG8gYmUgZW1wb3dlcmVkIHRvIHRvIGNyZWF0ZSB0aGluZ3MgZnJvbSBwdXJlIGltYWdpbmF0aW9uLlwiXG4jICAgIGxlYXJuX21vcmU6IFwiTGVhcm4gTW9yZVwiXG4gICAgbWFpbl90aXRsZTogXCJPbSBkdSB2aWxsIGzDpHJhIGRpZyBwcm9ncmFtbWVyYSBiZWhsdmVyIGR1IHNrcml2YSAoZW4gaGVsIGRlbCkga29kLlwiXG4gICAgbWFpbl9kZXNjcmlwdGlvbjogXCJQw4UgQ29kZUNvbWJhdCwgdsOlcnQgam9iYiDDpHIgYXR0IHNlIHRpbGwgYXR0IGR1IGfDtnIgZGV0IG1lZCBldHQgbGVlbmRlIHDDpSBsw6RwcGFybmEuXCJcbiAgICBtaXNzaW9uX2xpbms6IFwiVXBwZHJhZ1wiXG4jICAgIHRlYW1fbGluazogXCJUZWFtXCJcbiMgICAgc3RvcnlfbGluazogXCJTdG9yeVwiXG4jICAgIHByZXNzX2xpbms6IFwiUHJlc3NcIlxuICAgIG1pc3Npb25fdGl0bGU6IFwiVsOlcnQgdXBwZHJhZzogZ8O2cmEgcHJvZ3JhbW1lcmluZyB0aWxsZ8OkbmdsaWd0IGbDtnIgdmFyamUgZWxldiBww6UgSm9yZGVuLlwiXG4jICAgIG1pc3Npb25fZGVzY3JpcHRpb25fMTogXCI8c3Ryb25nPlByb2dyYW1taW5nIGlzIG1hZ2ljPC9zdHJvbmc+LiBJdCdzIHRoZSBhYmlsaXR5IHRvIGNyZWF0ZSB0aGluZ3MgZnJvbSBwdXJlIGltYWdpbmF0aW9uLiBXZSBzdGFydGVkIENvZGVDb21iYXQgdG8gZ2l2ZSBsZWFybmVycyB0aGUgZmVlbGluZyBvZiB3aXphcmRseSBwb3dlciBhdCB0aGVpciBmaW5nZXJ0aXBzIGJ5IHVzaW5nIDxzdHJvbmc+dHlwZWQgY29kZTwvc3Ryb25nPi5cIlxuIyAgICBtaXNzaW9uX2Rlc2NyaXB0aW9uXzI6IFwiQXMgaXQgdHVybnMgb3V0LCB0aGF0IGVuYWJsZXMgdGhlbSB0byBsZWFybiBmYXN0ZXIgdG9vLiBXQVkgZmFzdGVyLiBJdCdzIGxpa2UgaGF2aW5nIGEgY29udmVyc2F0aW9uIGluc3RlYWQgb2YgcmVhZGluZyBhIG1hbnVhbC4gV2Ugd2FudCB0byBicmluZyB0aGF0IGNvbnZlcnNhdGlvbiB0byBldmVyeSBzY2hvb2wgYW5kIHRvIDxzdHJvbmc+ZXZlcnkgc3R1ZGVudDwvc3Ryb25nPiwgYmVjYXVzZSBldmVyeW9uZSBzaG91bGQgaGF2ZSB0aGUgY2hhbmNlIHRvIGxlYXJuIHRoZSBtYWdpYyBvZiBwcm9ncmFtbWluZy5cIlxuIyAgICB0ZWFtX3RpdGxlOiBcIk1lZXQgdGhlIENvZGVDb21iYXQgdGVhbVwiXG4jICAgIHRlYW1fdmFsdWVzOiBcIldlIHZhbHVlIG9wZW4gYW5kIHJlc3BlY3RmdWwgZGlhbG9nLCB3aGVyZSB0aGUgYmVzdCBpZGVhIHdpbnMuIE91ciBkZWNpc2lvbnMgYXJlIGdyb3VuZGVkIGluIGN1c3RvbWVyIHJlc2VhcmNoIGFuZCBvdXIgcHJvY2VzcyBpcyBmb2N1c2VkIG9uIGRlbGl2ZXJpbmcgdGFuZ2libGUgcmVzdWx0cyBmb3IgdGhlbS4gRXZlcnlvbmUgaXMgaGFuZHMtb24sIGZyb20gb3VyIENFTyB0byBvdXIgR2l0SHViIGNvbnRyaWJ1dG9ycywgYmVjYXVzZSB3ZSB2YWx1ZSBncm93dGggYW5kIGxlYXJuaW5nIGluIG91ciB0ZWFtLlwiXG4gICAgbmlja190aXRsZTogXCJNZWRncnVuZGFyZVwiICMge2NoYW5nZX1cbiAgICBtYXR0X3RpdGxlOiBcIk1lZGdydW5kYXJlXCIgIyB7Y2hhbmdlfVxuICAgIGNhdF90aXRsZTogXCJDaGVmc2hhbnR2ZXJrYXJlXCIgIyB7Y2hhbmdlfVxuICAgIHNjb3R0X3RpdGxlOiBcIk1lZGdydW5kYXJlXCIgIyB7Y2hhbmdlfVxuIyAgICBtYWthX3RpdGxlOiBcIkN1c3RvbWVyIEFkdm9jYXRlXCJcbiMgICAgcm9iaW5fdGl0bGU6IFwiU2VuaW9yIFByb2R1Y3QgTWFuYWdlclwiXG4jICAgIG5vbGFuX3RpdGxlOiBcIlNhbGVzIE1hbmFnZXJcIlxuIyAgICBkYXZpZF90aXRsZTogXCJNYXJrZXRpbmcgTGVhZFwiXG4gICAgdGl0bGVzX2NzbTogXCJLdW5kc3VjY2VzY2hlZlwiXG4jICAgIHRpdGxlc190ZXJyaXRvcnlfbWFuYWdlcjogXCJUZXJyaXRvcnkgTWFuYWdlclwiXG4jICAgIGxhd3JlbmNlX3RpdGxlOiBcIkN1c3RvbWVyIFN1Y2Nlc3MgTWFuYWdlclwiXG4jICAgIHNlYW5fdGl0bGU6IFwiU2VuaW9yIEFjY291bnQgRXhlY3V0aXZlXCJcbiMgICAgbGl6X3RpdGxlOiBcIlNlbmlvciBBY2NvdW50IEV4ZWN1dGl2ZVwiXG4jICAgIGphbmVfdGl0bGU6IFwiQWNjb3VudCBFeGVjdXRpdmVcIlxuIyAgICBzaGFuX3RpdGxlOiBcIlBhcnRuZXJzaGlwIERldmVsb3BtZW50IExlYWQsIENoaW5hXCJcbiMgICAgcnVuX3RpdGxlOiBcIkhlYWQgb2YgT3BlcmF0aW9ucywgQ2hpbmFcIlxuIyAgICBsYW5jZV90aXRsZTogXCJTb2Z0d2FyZSBFbmdpbmVlciBJbnRlcm4sIENoaW5hXCJcbiMgICAgbWF0aWFzX3RpdGxlOiBcIlNlbmlvciBTb2Z0d2FyZSBFbmdpbmVlclwiXG4jICAgIHJ5YW5fdGl0bGU6IFwiQ3VzdG9tZXIgU3VwcG9ydCBTcGVjaWFsaXN0XCJcbiMgICAgbWF5YV90aXRsZTogXCJDdXJyaWN1bHVtIERldmVsb3BlclwiXG4jICAgIGJpbGxfdGl0bGU6IFwiR2VuZXJhbCBNYW5hZ2VyLCBDaGluYVwiXG4jICAgIHNoYXNoYV90aXRsZTogXCJQcm9kdWN0IGFuZCBWaXN1YWwgRGVzaWduZXJcIlxuIyAgICBkYW5pZWxhX3RpdGxlOiBcIk1hcmtldGluZyBNYW5hZ2VyXCJcbiMgICAgY2hlbHNlYV90aXRsZTogXCJPcGVyYXRpb25zIE1hbmFnZXJcIlxuIyAgICBjbGFpcmVfdGl0bGU6IFwiRXhlY3V0aXZlIEFzc2lzdGFudFwiXG4jICAgIGJvYmJ5X3RpdGxlOiBcIlNlbmlvciBHYW1lIERlc2lnbmVyXCJcbiMgICAgYnJpYW5fdGl0bGU6IFwiTGVhZCBHYW1lIERlc2lnbmVyXCJcbiMgICAgYW5kcmV3X3RpdGxlOiBcIlNvZnR3YXJlIEVuZ2luZWVyXCJcbiMgICAgc3RlcGhhbmllX3RpdGxlOiBcIkN1c3RvbWVyIFN1cHBvcnQgU3BlY2lhbGlzdFwiXG4jICAgIHJvYl90aXRsZTogXCJTYWxlcyBEZXZlbG9wbWVudCBSZXByZXNlbnRhdGl2ZVwiXG4jICAgIHNodWJoYW5naV90aXRsZTogXCJTb2Z0d2FyZSBFbmdpbmVlclwiXG4jICAgIGJyeXVraF90aXRsZTogXCJHYW1lcGxheSBEZXZlbG9wZXJcIlxuICAgIHJldHJvc3R5bGVfdGl0bGU6IFwiSWxsdXN0cmF0aW9uXCJcbiAgICByZXRyb3N0eWxlX2JsdXJiOiBcIlJldHJvU3R5bGUgR2FtZXNcIlxuIyAgICBicnl1a2hfYmx1cmI6IFwiQ29uc3RydWN0cyBwdXp6bGVzXCJcbiMgICAgY29tbXVuaXR5X3RpdGxlOiBcIi4uLmFuZCBvdXIgb3Blbi1zb3VyY2UgY29tbXVuaXR5XCJcbiMgICAgY29tbXVuaXR5X3N1YnRpdGxlOiBcIk92ZXIgNTAwIGNvbnRyaWJ1dG9ycyBoYXZlIGhlbHBlZCBidWlsZCBDb2RlQ29tYmF0LCB3aXRoIG1vcmUgam9pbmluZyBldmVyeSB3ZWVrIVwiXG4jICAgIGNvbW11bml0eV9kZXNjcmlwdGlvbl8zOiBcIkNvZGVDb21iYXQgaXMgYVwiXG4jICAgIGNvbW11bml0eV9kZXNjcmlwdGlvbl9saW5rXzI6IFwiY29tbXVuaXR5IHByb2plY3RcIlxuIyAgICBjb21tdW5pdHlfZGVzY3JpcHRpb25fMTogXCJ3aXRoIGh1bmRyZWRzIG9mIHBsYXllcnMgdm9sdW50ZWVyaW5nIHRvIGNyZWF0ZSBsZXZlbHMsIGNvbnRyaWJ1dGUgdG8gb3VyIGNvZGUgdG8gYWRkIGZlYXR1cmVzLCBmaXggYnVncywgcGxheXRlc3QsIGFuZCBldmVuIHRyYW5zbGF0ZSB0aGUgZ2FtZSBpbnRvIDUwIGxhbmd1YWdlcyBzbyBmYXIuIEVtcGxveWVlcywgY29udHJpYnV0b3JzIGFuZCB0aGUgc2l0ZSBnYWluIGJ5IHNoYXJpbmcgaWRlYXMgYW5kIHBvb2xpbmcgZWZmb3J0LCBhcyBkb2VzIHRoZSBvcGVuIHNvdXJjZSBjb21tdW5pdHkgaW4gZ2VuZXJhbC4gVGhlIHNpdGUgaXMgYnVpbHQgb24gbnVtZXJvdXMgb3BlbiBzb3VyY2UgcHJvamVjdHMsIGFuZCB3ZSBhcmUgb3BlbiBzb3VyY2VkIHRvIGdpdmUgYmFjayB0byB0aGUgY29tbXVuaXR5IGFuZCBwcm92aWRlIGNvZGUtY3VyaW91cyBwbGF5ZXJzIGEgZmFtaWxpYXIgcHJvamVjdCB0byBleHBsb3JlIGFuZCBleHBlcmltZW50IHdpdGguIEFueW9uZSBjYW4gam9pbiB0aGUgQ29kZUNvbWJhdCBjb21tdW5pdHkhIENoZWNrIG91dCBvdXJcIlxuIyAgICBjb21tdW5pdHlfZGVzY3JpcHRpb25fbGluazogXCJjb250cmlidXRlIHBhZ2VcIlxuIyAgICBjb21tdW5pdHlfZGVzY3JpcHRpb25fMjogXCJmb3IgbW9yZSBpbmZvLlwiXG4jICAgIG51bWJlcl9jb250cmlidXRvcnM6IFwiT3ZlciA0NTAgY29udHJpYnV0b3JzIGhhdmUgbGVudCB0aGVpciBzdXBwb3J0IGFuZCB0aW1lIHRvIHRoaXMgcHJvamVjdC5cIlxuIyAgICBzdG9yeV90aXRsZTogXCJPdXIgc3Rvcnkgc28gZmFyXCJcbiMgICAgc3Rvcnlfc3VidGl0bGU6IFwiU2luY2UgMjAxMywgQ29kZUNvbWJhdCBoYXMgZ3Jvd24gZnJvbSBhIG1lcmUgc2V0IG9mIHNrZXRjaGVzIHRvIGEgbGl2aW5nLCB0aHJpdmluZyBnYW1lLlwiXG4jICAgIHN0b3J5X3N0YXRpc3RpY18xYTogXCI1LDAwMCwwMDArXCJcbiMgICAgc3Rvcnlfc3RhdGlzdGljXzFiOiBcInRvdGFsIHBsYXllcnNcIlxuICAgIHN0b3J5X3N0YXRpc3RpY18xYzogXCJIYXIgYsO2cmphdCBzaW4gcHJvZ3JhbW1lcmluZ3NyZXNhIGdlbm9tIENvZGVDb21iYXRcIlxuICAgIHN0b3J5X3N0YXRpc3RpY18yYTogXCJWaSBoYXIgw7Z2ZXJzYXR0IHRpbGwgw7Z2ZXIgNTAgbGFuZ3VhZ2VzIOKAlCB2w6VyYSBzcGVsYXJlIGtvbW1lciBmcsOlblwiXG4gICAgc3Rvcnlfc3RhdGlzdGljXzJiOiBcIjE5MCsgbMOkbmRlclwiXG4jICAgIHN0b3J5X3N0YXRpc3RpY18zYTogXCJUb2dldGhlciwgdGhleSBoYXZlIHdyaXR0ZW5cIlxuIyAgICBzdG9yeV9zdGF0aXN0aWNfM2I6IFwiMSBiaWxsaW9uIGxpbmVzIG9mIGNvZGUgYW5kIGNvdW50aW5nXCJcbiMgICAgc3Rvcnlfc3RhdGlzdGljXzNjOiBcImFjcm9zcyBtYW55IGRpZmZlcmVudCBwcm9ncmFtbWluZyBsYW5ndWFnZXNcIlxuIyAgICBzdG9yeV9sb25nX3dheV8xOiBcIlRob3VnaCB3ZSd2ZSBjb21lIGEgbG9uZyB3YXkuLi5cIlxuIyAgICBzdG9yeV9za2V0Y2hfY2FwdGlvbjogXCJOaWNrJ3MgdmVyeSBmaXJzdCBza2V0Y2ggZGVwaWN0aW5nIGEgcHJvZ3JhbW1pbmcgZ2FtZSBpbiBhY3Rpb24uXCJcbiMgICAgc3RvcnlfbG9uZ193YXlfMjogXCJ3ZSBzdGlsbCBoYXZlIG11Y2ggdG8gZG8gYmVmb3JlIHdlIGNvbXBsZXRlIG91ciBxdWVzdCwgc28uLi5cIlxuIyAgICBqb2JzX3RpdGxlOiBcIkNvbWUgd29yayB3aXRoIHVzIGFuZCBoZWxwIHdyaXRlIENvZGVDb21iYXQgaGlzdG9yeSFcIlxuIyAgICBqb2JzX3N1YnRpdGxlOiBcIkRvbid0IHNlZSBhIGdvb2QgZml0IGJ1dCBpbnRlcmVzdGVkIGluIGtlZXBpbmcgaW4gdG91Y2g/IFNlZSBvdXIgXFxcIkNyZWF0ZSBZb3VyIE93blxcXCIgbGlzdGluZy5cIlxuIyAgICBqb2JzX2JlbmVmaXRzOiBcIkVtcGxveWVlIEJlbmVmaXRzXCJcbiMgICAgam9ic19iZW5lZml0XzQ6IFwiVW5saW1pdGVkIHZhY2F0aW9uXCJcbiMgICAgam9ic19iZW5lZml0XzU6IFwiUHJvZmVzc2lvbmFsIGRldmVsb3BtZW50IGFuZCBjb250aW51aW5nIGVkdWNhdGlvbiBzdXBwb3J0IOKAkyBmcmVlIGJvb2tzIGFuZCBnYW1lcyFcIlxuIyAgICBqb2JzX2JlbmVmaXRfNjogXCJNZWRpY2FsIChnb2xkKSwgZGVudGFsLCB2aXNpb24sIGNvbW11dGVyLCA0MDFLXCJcbiMgICAgam9ic19iZW5lZml0Xzc6IFwiU2l0LXN0YW5kIGRlc2tzIGZvciBhbGxcIlxuIyAgICBqb2JzX2JlbmVmaXRfOTogXCIxMC15ZWFyIG9wdGlvbiBleGVyY2lzZSB3aW5kb3dcIlxuIyAgICBqb2JzX2JlbmVmaXRfMTA6IFwiTWF0ZXJuaXR5IGxlYXZlOiAxMiB3ZWVrcyBwYWlkLCBuZXh0IDYgQCA1NSUgc2FsYXJ5XCJcbiMgICAgam9ic19iZW5lZml0XzExOiBcIlBhdGVybml0eSBsZWF2ZTogMTIgd2Vla3MgcGFpZFwiXG4jICAgIGpvYnNfY3VzdG9tX3RpdGxlOiBcIkNyZWF0ZSBZb3VyIE93blwiXG4jICAgIGpvYnNfY3VzdG9tX2Rlc2NyaXB0aW9uOiBcIkFyZSB5b3UgcGFzc2lvbmF0ZSBhYm91dCBDb2RlQ29tYmF0IGJ1dCBkb24ndCBzZWUgYSBqb2IgbGlzdGVkIHRoYXQgbWF0Y2hlcyB5b3VyIHF1YWxpZmljYXRpb25zPyBXcml0ZSB1cyBhbmQgc2hvdyBob3cgeW91IHRoaW5rIHlvdSBjYW4gY29udHJpYnV0ZSB0byBvdXIgdGVhbS4gV2UnZCBsb3ZlIHRvIGhlYXIgZnJvbSB5b3UhXCJcbiMgICAgam9ic19jdXN0b21fY29udGFjdF8xOiBcIlNlbmQgdXMgYSBub3RlIGF0XCJcbiMgICAgam9ic19jdXN0b21fY29udGFjdF8yOiBcImludHJvZHVjaW5nIHlvdXJzZWxmIGFuZCB3ZSBtaWdodCBnZXQgaW4gdG91Y2ggaW4gdGhlIGZ1dHVyZSFcIlxuIyAgICBjb250YWN0X3RpdGxlOiBcIlByZXNzICYgQ29udGFjdFwiXG4jICAgIGNvbnRhY3Rfc3VidGl0bGU6IFwiTmVlZCBtb3JlIGluZm9ybWF0aW9uPyBHZXQgaW4gdG91Y2ggd2l0aCB1cyBhdFwiXG4jICAgIHNjcmVlbnNob3RzX3RpdGxlOiBcIkdhbWUgU2NyZWVuc2hvdHNcIlxuIyAgICBzY3JlZW5zaG90c19oaW50OiBcIihjbGljayB0byB2aWV3IGZ1bGwgc2l6ZSlcIlxuIyAgICBkb3dubG9hZHNfdGl0bGU6IFwiRG93bmxvYWQgQXNzZXRzICYgSW5mb3JtYXRpb25cIlxuIyAgICBhYm91dF9jb2RlY29tYmF0OiBcIkFib3V0IENvZGVDb21iYXRcIlxuIyAgICBsb2dvOiBcIkxvZ29cIlxuIyAgICBzY3JlZW5zaG90czogXCJTY3JlZW5zaG90c1wiXG4jICAgIGNoYXJhY3Rlcl9hcnQ6IFwiQ2hhcmFjdGVyIEFydFwiXG4jICAgIGRvd25sb2FkX2FsbDogXCJEb3dubG9hZCBBbGxcIlxuIyAgICBwcmV2aW91czogXCJQcmV2aW91c1wiXG4jICAgIGxvY2F0aW9uX3RpdGxlOiBcIldlJ3JlIGxvY2F0ZWQgaW4gZG93bnRvd24gU0Y6XCJcblxuIyAgdGVhY2hlcnM6XG4jICAgIGxpY2Vuc2VzX25lZWRlZDogXCJMaWNlbnNlcyBuZWVkZWRcIlxuXG4jICBzcGVjaWFsX29mZmVyOlxuIyAgICBzcGVjaWFsX29mZmVyOiBcIlNwZWNpYWwgT2ZmZXJcIlxuIyAgICBwcm9qZWN0X2Jhc2VkX3RpdGxlOiBcIlByb2plY3QtQmFzZWQgQ291cnNlc1wiXG4jICAgIHByb2plY3RfYmFzZWRfZGVzY3JpcHRpb246IFwiV2ViIGFuZCBHYW1lIERldmVsb3BtZW50IGNvdXJzZXMgZmVhdHVyZSBzaGFyZWFibGUgZmluYWwgcHJvamVjdHMuXCJcbiMgICAgZ3JlYXRfZm9yX2NsdWJzX3RpdGxlOiBcIkdyZWF0IGZvciBjbHVicyBhbmQgZWxlY3RpdmVzXCJcbiMgICAgZ3JlYXRfZm9yX2NsdWJzX2Rlc2NyaXB0aW9uOiBcIlRlYWNoZXJzIGNhbiBwdXJjaGFzZSB1cCB0byBfX21heFF1YW50aXR5U3RhcnRlckxpY2Vuc2VzX18gU3RhcnRlciBMaWNlbnNlcy5cIlxuIyAgICBsb3dfcHJpY2VfdGl0bGU6IFwiSnVzdCBfX3N0YXJ0ZXJMaWNlbnNlUHJpY2VfXyBwZXIgc3R1ZGVudFwiXG4jICAgIGxvd19wcmljZV9kZXNjcmlwdGlvbjogXCJTdGFydGVyIExpY2Vuc2VzIGFyZSBhY3RpdmUgZm9yIF9fc3RhcnRlckxpY2Vuc2VMZW5ndGhNb250aHNfXyBtb250aHMgZnJvbSBwdXJjaGFzZS5cIlxuIyAgICB0aHJlZV9ncmVhdF9jb3Vyc2VzOiBcIlRocmVlIGdyZWF0IGNvdXJzZXMgaW5jbHVkZWQgaW4gdGhlIFN0YXJ0ZXIgTGljZW5zZTpcIlxuIyAgICBsaWNlbnNlX2xpbWl0X2Rlc2NyaXB0aW9uOiBcIlRlYWNoZXJzIGNhbiBwdXJjaGFzZSB1cCB0byBfX21heFF1YW50aXR5U3RhcnRlckxpY2Vuc2VzX18gU3RhcnRlciBMaWNlbnNlcy4gWW91IGhhdmUgYWxyZWFkeSBwdXJjaGFzZWQgX19xdWFudGl0eUFscmVhZHlQdXJjaGFzZWRfXy4gSWYgeW91IG5lZWQgbW9yZSwgY29udGFjdCBfX3N1cHBvcnRFbWFpbF9fLiBTdGFydGVyIExpY2Vuc2VzIGFyZSB2YWxpZCBmb3IgX19zdGFydGVyTGljZW5zZUxlbmd0aE1vbnRoc19fIG1vbnRocy5cIlxuIyAgICBzdHVkZW50X3N0YXJ0ZXJfbGljZW5zZTogXCJTdHVkZW50IFN0YXJ0ZXIgTGljZW5zZVwiXG4jICAgIHB1cmNoYXNlX3N0YXJ0ZXJfbGljZW5zZXM6IFwiUHVyY2hhc2UgU3RhcnRlciBMaWNlbnNlc1wiXG4jICAgIHB1cmNoYXNlX3N0YXJ0ZXJfbGljZW5zZXNfdG9fZ3JhbnQ6IFwiUHVyY2hhc2UgU3RhcnRlciBMaWNlbnNlcyB0byBncmFudCBhY2Nlc3MgdG8gX19zdGFydGVyTGljZW5zZUNvdXJzZUxpc3RfX1wiXG4jICAgIHN0YXJ0ZXJfbGljZW5zZXNfY2FuX2JlX3VzZWQ6IFwiU3RhcnRlciBMaWNlbnNlcyBjYW4gYmUgdXNlZCB0byBhc3NpZ24gYWRkaXRpb25hbCBjb3Vyc2VzIGltbWVkaWF0ZWx5IGFmdGVyIHB1cmNoYXNlLlwiXG4jICAgIHBheV9ub3c6IFwiUGF5IE5vd1wiXG4jICAgIHdlX2FjY2VwdF9hbGxfbWFqb3JfY3JlZGl0X2NhcmRzOiBcIldlIGFjY2VwdCBhbGwgbWFqb3IgY3JlZGl0IGNhcmRzLlwiXG4jICAgIGNzMl9kZXNjcmlwdGlvbjogXCJidWlsZHMgb24gdGhlIGZvdW5kYXRpb24gZnJvbSBJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZSwgZGl2aW5nIGludG8gaWYtc3RhdGVtZW50cywgZnVuY3Rpb25zLCBldmVudHMgYW5kIG1vcmUuXCJcbiMgICAgd2QxX2Rlc2NyaXB0aW9uOiBcImludHJvZHVjZXMgdGhlIGJhc2ljcyBvZiBIVE1MIGFuZCBDU1Mgd2hpbGUgdGVhY2hpbmcgc2tpbGxzIG5lZWRlZCBmb3Igc3R1ZGVudHMgdG8gYnVpbGQgdGhlaXIgZmlyc3Qgd2VicGFnZS5cIlxuIyAgICBnZDFfZGVzY3JpcHRpb246IFwidXNlcyBzeW50YXggc3R1ZGVudHMgYXJlIGFscmVhZHkgZmFtaWxpYXIgd2l0aCB0byBzaG93IHRoZW0gaG93IHRvIGJ1aWxkIGFuZCBzaGFyZSB0aGVpciBvd24gcGxheWFibGUgZ2FtZSBsZXZlbHMuXCJcbiMgICAgc2VlX2FuX2V4YW1wbGVfcHJvamVjdDogXCJzZWUgYW4gZXhhbXBsZSBwcm9qZWN0XCJcbiMgICAgZ2V0X3N0YXJ0ZWRfdG9kYXk6IFwiR2V0IHN0YXJ0ZWQgdG9kYXkhXCJcbiMgICAgd2FudF9hbGxfdGhlX2NvdXJzZXM6IFwiV2FudCBhbGwgdGhlIGNvdXJzZXM/IFJlcXVlc3QgaW5mb3JtYXRpb24gb24gb3VyIEZ1bGwgTGljZW5zZXMuXCJcbiMgICAgY29tcGFyZV9saWNlbnNlX3R5cGVzOiBcIkNvbXBhcmUgTGljZW5zZSBUeXBlczpcIlxuIyAgICBjczogXCJDb21wdXRlciBTY2llbmNlXCJcbiMgICAgd2Q6IFwiV2ViIERldmVsb3BtZW50XCJcbiMgICAgd2QxOiBcIldlYiBEZXZlbG9wbWVudCAxXCJcbiMgICAgZ2Q6IFwiR2FtZSBEZXZlbG9wbWVudFwiXG4jICAgIGdkMTogXCJHYW1lIERldmVsb3BtZW50IDFcIlxuIyAgICBtYXhpbXVtX3N0dWRlbnRzOiBcIk1heGltdW0gIyBvZiBTdHVkZW50c1wiXG4jICAgIHVubGltaXRlZDogXCJVbmxpbWl0ZWRcIlxuIyAgICBwcmlvcml0eV9zdXBwb3J0OiBcIlByaW9yaXR5IHN1cHBvcnRcIlxuIyAgICB5ZXM6IFwiWWVzXCJcbiMgICAgcHJpY2VfcGVyX3N0dWRlbnQ6IFwiX19wcmljZV9fIHBlciBzdHVkZW50XCJcbiMgICAgcHJpY2luZzogXCJQcmljaW5nXCJcbiMgICAgZnJlZTogXCJGcmVlXCJcbiMgICAgcHVyY2hhc2U6IFwiUHVyY2hhc2VcIlxuIyAgICBjb3Vyc2VzX3ByZWZpeDogXCJDb3Vyc2VzXCJcbiMgICAgY291cnNlc19zdWZmaXg6IFwiXCJcbiMgICAgY291cnNlX3ByZWZpeDogXCJDb3Vyc2VcIlxuIyAgICBjb3Vyc2Vfc3VmZml4OiBcIlwiXG5cbiMgIHRlYWNoZXJzX3F1b3RlOlxuIyAgICBzdWJ0aXRsZTogXCJHZXQgeW91ciBzdHVkZW50cyBzdGFydGVkIGluIGxlc3MgdGhhbiBhbiBob3VyLiBZb3UnbGwgYmUgYWJsZSB0byA8c3Ryb25nPmNyZWF0ZSBhIGNsYXNzLCBhZGQgc3R1ZGVudHMsIGFuZCBtb25pdG9yIHRoZWlyIHByb2dyZXNzPC9zdHJvbmc+IGFzIHRoZXkgbGVhcm4gY29tcHV0ZXIgc2NpZW5jZS5cIlxuIyAgICBlbWFpbF9leGlzdHM6IFwiVXNlciBleGlzdHMgd2l0aCB0aGlzIGVtYWlsLlwiXG4jICAgIHBob25lX251bWJlcjogXCJQaG9uZSBudW1iZXJcIlxuIyAgICBwaG9uZV9udW1iZXJfaGVscDogXCJXaGF0J3MgdGhlIGJlc3QgbnVtYmVyIHRvIHJlYWNoIHlvdT9cIlxuIyAgICBwcmltYXJ5X3JvbGVfbGFiZWw6IFwiWW91ciBQcmltYXJ5IFJvbGVcIlxuIyAgICByb2xlX2RlZmF1bHQ6IFwiU2VsZWN0IFJvbGVcIlxuIyAgICBwcmltYXJ5X3JvbGVfZGVmYXVsdDogXCJTZWxlY3QgUHJpbWFyeSBSb2xlXCJcbiMgICAgcHVyY2hhc2VyX3JvbGVfZGVmYXVsdDogXCJTZWxlY3QgUHVyY2hhc2VyIFJvbGVcIlxuIyAgICB0ZWNoX2Nvb3JkaW5hdG9yOiBcIlRlY2hub2xvZ3kgY29vcmRpbmF0b3JcIlxuIyAgICBhZHZpc29yOiBcIkN1cnJpY3VsdW0gU3BlY2lhbGlzdC9BZHZpc29yXCJcbiMgICAgcHJpbmNpcGFsOiBcIlByaW5jaXBhbFwiXG4jICAgIHN1cGVyaW50ZW5kZW50OiBcIlN1cGVyaW50ZW5kZW50XCJcbiMgICAgcGFyZW50OiBcIlBhcmVudFwiXG4jICAgIHB1cmNoYXNlcl9yb2xlX2xhYmVsOiBcIllvdXIgUHVyY2hhc2VyIFJvbGVcIlxuIyAgICBpbmZsdWVuY2VfYWR2b2NhdGU6IFwiSW5mbHVlbmNlL0Fkdm9jYXRlXCJcbiMgICAgZXZhbHVhdGVfcmVjb21tZW5kOiBcIkV2YWx1YXRlL1JlY29tbWVuZFwiXG4jICAgIGFwcHJvdmVfZnVuZHM6IFwiQXBwcm92ZSBGdW5kc1wiXG4jICAgIG5vX3B1cmNoYXNlcl9yb2xlOiBcIk5vIHJvbGUgaW4gcHVyY2hhc2UgZGVjaXNpb25zXCJcbiMgICAgZGlzdHJpY3RfbGFiZWw6IFwiRGlzdHJpY3RcIlxuIyAgICBkaXN0cmljdF9uYW1lOiBcIkRpc3RyaWN0IE5hbWVcIlxuIyAgICBkaXN0cmljdF9uYTogXCJFbnRlciBOL0EgaWYgbm90IGFwcGxpY2FibGVcIlxuIyAgICBvcmdhbml6YXRpb25fbGFiZWw6IFwiU2Nob29sXCJcbiMgICAgc2Nob29sX25hbWU6IFwiU2Nob29sIE5hbWVcIlxuIyAgICBjaXR5OiBcIkNpdHlcIlxuIyAgICBzdGF0ZTogXCJTdGF0ZVwiXG4jICAgIGNvdW50cnk6IFwiQ291bnRyeVwiXG4jICAgIG51bV9zdHVkZW50c19oZWxwOiBcIkhvdyBtYW55IHN0dWRlbnRzIHdpbGwgdXNlIENvZGVDb21iYXQ/XCJcbiMgICAgbnVtX3N0dWRlbnRzX2RlZmF1bHQ6IFwiU2VsZWN0IFJhbmdlXCJcbiMgICAgZWR1Y2F0aW9uX2xldmVsX2xhYmVsOiBcIkVkdWNhdGlvbiBMZXZlbCBvZiBTdHVkZW50c1wiXG4jICAgIGVkdWNhdGlvbl9sZXZlbF9oZWxwOiBcIkNob29zZSBhcyBtYW55IGFzIGFwcGx5LlwiXG4jICAgIGVsZW1lbnRhcnlfc2Nob29sOiBcIkVsZW1lbnRhcnkgU2Nob29sXCJcbiMgICAgaGlnaF9zY2hvb2w6IFwiSGlnaCBTY2hvb2xcIlxuIyAgICBwbGVhc2VfZXhwbGFpbjogXCIocGxlYXNlIGV4cGxhaW4pXCJcbiMgICAgbWlkZGxlX3NjaG9vbDogXCJNaWRkbGUgU2Nob29sXCJcbiMgICAgY29sbGVnZV9wbHVzOiBcIkNvbGxlZ2Ugb3IgaGlnaGVyXCJcbiMgICAgcmVmZXJyZXI6IFwiSG93IGRpZCB5b3UgaGVhciBhYm91dCB1cz9cIlxuIyAgICByZWZlcnJlcl9oZWxwOiBcIkZvciBleGFtcGxlOiBmcm9tIGFub3RoZXIgdGVhY2hlciwgYSBjb25mZXJlbmNlLCB5b3VyIHN0dWRlbnRzLCBDb2RlLm9yZywgZXRjLlwiXG4jICAgIHJlZmVycmVyX2RlZmF1bHQ6IFwiU2VsZWN0IE9uZVwiXG4jICAgIHJlZmVycmVyX2NvbmZlcmVuY2U6IFwiQ29uZmVyZW5jZSAoZS5nLiBJU1RFKVwiXG4jICAgIHJlZmVycmVyX2hvYzogXCJDb2RlLm9yZy9Ib3VyIG9mIENvZGVcIlxuIyAgICByZWZlcnJlcl90ZWFjaGVyOiBcIkEgdGVhY2hlclwiXG4jICAgIHJlZmVycmVyX2FkbWluOiBcIkFuIGFkbWluaXN0cmF0b3JcIlxuIyAgICByZWZlcnJlcl9zdHVkZW50OiBcIkEgc3R1ZGVudFwiXG4jICAgIHJlZmVycmVyX3BkOiBcIlByb2Zlc3Npb25hbCB0cmFpbmluZ3Mvd29ya3Nob3BzXCJcbiMgICAgcmVmZXJyZXJfd2ViOiBcIkdvb2dsZVwiXG4jICAgIHJlZmVycmVyX290aGVyOiBcIk90aGVyXCJcbiMgICAgYW55dGhpbmdfZWxzZTogXCJXaGF0IGtpbmQgb2YgY2xhc3MgZG8geW91IGFudGljaXBhdGUgdXNpbmcgQ29kZUNvbWJhdCBmb3I/XCJcbiMgICAgdGhhbmtzX2hlYWRlcjogXCJSZXF1ZXN0IFJlY2VpdmVkIVwiXG4jICAgIHRoYW5rc19zdWJfaGVhZGVyOiBcIlRoYW5rcyBmb3IgZXhwcmVzc2luZyBpbnRlcmVzdCBpbiBDb2RlQ29tYmF0IGZvciB5b3VyIHNjaG9vbC5cIlxuIyAgICB0aGFua3NfcDogXCJXZSdsbCBiZSBpbiB0b3VjaCBzb29uISBJZiB5b3UgbmVlZCB0byBnZXQgaW4gY29udGFjdCwgeW91IGNhbiByZWFjaCB1cyBhdDpcIlxuIyAgICBiYWNrX3RvX2NsYXNzZXM6IFwiQmFjayB0byBDbGFzc2VzXCJcbiMgICAgZmluaXNoX3NpZ251cDogXCJGaW5pc2ggY3JlYXRpbmcgeW91ciB0ZWFjaGVyIGFjY291bnQ6XCJcbiMgICAgZmluaXNoX3NpZ251cF9wOiBcIkNyZWF0ZSBhbiBhY2NvdW50IHRvIHNldCB1cCBhIGNsYXNzLCBhZGQgeW91ciBzdHVkZW50cywgYW5kIG1vbml0b3IgdGhlaXIgcHJvZ3Jlc3MgYXMgdGhleSBsZWFybiBjb21wdXRlciBzY2llbmNlLlwiXG4jICAgIHNpZ251cF93aXRoOiBcIlNpZ24gdXAgd2l0aDpcIlxuIyAgICBjb25uZWN0X3dpdGg6IFwiQ29ubmVjdCB3aXRoOlwiXG4jICAgIGNvbnZlcnNpb25fd2FybmluZzogXCJXQVJOSU5HOiBZb3VyIGN1cnJlbnQgYWNjb3VudCBpcyBhIDxlbT5TdHVkZW50IEFjY291bnQ8L2VtPi4gT25jZSB5b3Ugc3VibWl0IHRoaXMgZm9ybSwgeW91ciBhY2NvdW50IHdpbGwgYmUgdXBkYXRlZCB0byBhIFRlYWNoZXIgQWNjb3VudC5cIlxuIyAgICBsZWFybl9tb3JlX21vZGFsOiBcIlRlYWNoZXIgYWNjb3VudHMgb24gQ29kZUNvbWJhdCBoYXZlIHRoZSBhYmlsaXR5IHRvIG1vbml0b3Igc3R1ZGVudCBwcm9ncmVzcywgYXNzaWduIGxpY2Vuc2VzIGFuZCBtYW5hZ2UgY2xhc3Nyb29tcy4gVGVhY2hlciBhY2NvdW50cyBjYW5ub3QgYmUgYSBwYXJ0IG9mIGEgY2xhc3Nyb29tIC0gaWYgeW91IGFyZSBjdXJyZW50bHkgZW5yb2xsZWQgaW4gYSBjbGFzcyB1c2luZyB0aGlzIGFjY291bnQsIHlvdSB3aWxsIG5vIGxvbmdlciBiZSBhYmxlIHRvIGFjY2VzcyBpdCBvbmNlIHlvdSB1cGRhdGUgdG8gYSBUZWFjaGVyIEFjY291bnQuXCJcbiMgICAgY3JlYXRlX2FjY291bnQ6IFwiQ3JlYXRlIGEgVGVhY2hlciBBY2NvdW50XCJcbiMgICAgY3JlYXRlX2FjY291bnRfc3VidGl0bGU6IFwiR2V0IGFjY2VzcyB0byB0ZWFjaGVyLW9ubHkgdG9vbHMgZm9yIHVzaW5nIENvZGVDb21iYXQgaW4gdGhlIGNsYXNzcm9vbS4gIDxzdHJvbmc+U2V0IHVwIGEgY2xhc3M8L3N0cm9uZz4sIGFkZCB5b3VyIHN0dWRlbnRzLCBhbmQgPHN0cm9uZz5tb25pdG9yIHRoZWlyIHByb2dyZXNzPC9zdHJvbmc+IVwiXG4jICAgIGNvbnZlcnRfYWNjb3VudF90aXRsZTogXCJVcGRhdGUgdG8gVGVhY2hlciBBY2NvdW50XCJcbiMgICAgbm90OiBcIk5vdFwiXG5cbiAgdmVyc2lvbnM6XG4gICAgc2F2ZV92ZXJzaW9uX3RpdGxlOiBcIlNwYXJhIG55IHZlcnNpb25cIlxuICAgIG5ld19tYWpvcl92ZXJzaW9uOiBcIk55IGJldHlkYW5kZSB2ZXJzaW9uXCJcbiAgICBzdWJtaXR0aW5nX3BhdGNoOiBcIlNraWNrYXIgaW4gcsOkdHRuaW5nLi4uXCJcbiAgICBjbGFfcHJlZml4OiBcIkbDtnIgYXR0IHNwYXJhIMOkbmRyaW5nYXIgbcOlc3RlIGR1IGbDtnJzdCBnb2Rrw6RubmEgdsOlclwiXG4gICAgY2xhX3VybDogXCJDTEFcIlxuICAgIGNsYV9zdWZmaXg6IFwiLlwiXG4gICAgY2xhX2FncmVlOiBcIkpBRyBHT0RLw4ROTkVSXCJcbiAgICBvd25lcl9hcHByb3ZlOiBcIkVuIMOkZ2FyZSBtw6VzdGUgZ29ka8Okbm5hIMOkbmRyaW5nZW4gaW5uYW4gZGVuIGthbiBwcm9kdWt0aW9uc3PDpHR0YXMuXCJcblxuICBjb250YWN0OlxuICAgIGNvbnRhY3RfdXM6IFwiS29udGFrdGEgQ29kZUNvbWJhdFwiXG4gICAgd2VsY29tZTogXCJLdWwgYXR0IGjDtnJhIGZyw6VuIGRpZyEgQW52w6RuZCBmb3JtdWzDpHJldCBmw7ZyIGF0dCBza2lja2EgbWVqbCB0aWxsIG9zcy4gXCJcbiAgICBmb3J1bV9wcmVmaXg6IFwiRsO2ciBuw6Vnb250aW5nIG9mZmVudGxpZ3QsIHZhciB2w6RubGlnIHRlc3RhIFwiXG4gICAgZm9ydW1fcGFnZTogXCJ2w6VydCBmb3J1bVwiXG4gICAgZm9ydW1fc3VmZml4OiBcIiBpc3TDpGxsZXQuXCJcbiAgICBmYXFfcHJlZml4OiBcIkRldCBmaW5ucyBvY2tzw6UgZW5cIlxuICAgIGZhcTogXCJGQVFcIlxuICAgIHN1YnNjcmliZV9wcmVmaXg6IFwiT20gZHUgYmVow7Z2ZXIgaGrDpGxwIG1lZCBlbiBuaXbDpSxcIlxuICAgIHN1YnNjcmliZTogXCJrw7ZwIGVuIENvZGVDb21iYXQgcHJlbnVtZXJhdGlvbi5cIlxuICAgIHN1YnNjcmliZV9zdWZmaXg6IFwiU2VkYW4gaGrDpGxwZXIgdmkgZGlnIGfDpHJuYSBtZWQgZGluIGtvZC5cIlxuICAgIHN1YnNjcmliZXJfc3VwcG9ydDogXCJFZnRlcnNvbSBkdSDDpHIgZW4gQ29kZUNvbWJhdC1wcmVudW1lcmFudCBrb21tZXIgZGl0dCBtZWpsIGF0dCBibGkgcHJpb3JpdGVyYXQuXCJcbiAgICBzY3JlZW5zaG90X2luY2x1ZGVkOiBcIklua2x1ZGVyYXIgc2vDpHJtYmlsZC5cIlxuICAgIHdoZXJlX3JlcGx5OiBcIlZhcnQgc2thIHZpIHNraWNrYSBzdmFyZXQ/XCJcbiAgICBzZW5kOiBcIlNraWNrYSBGZWVkYmFja1wiXG5cbiAgYWNjb3VudF9zZXR0aW5nczpcbiAgICB0aXRsZTogXCJLb250b2luc3TDpGxsbmluZ2FyXCJcbiAgICBub3RfbG9nZ2VkX2luOiBcIkxvZ2dhIGluIGVsbGVyIHNrYXBhIGV0dCBrb250byBmw7ZyIGF0dCDDpG5kcmEgZGluYSBpbnN0w6RsbG5pbmdhci5cIlxuICAgIG1lX3RhYjogXCJKYWdcIlxuICAgIHBpY3R1cmVfdGFiOiBcIlByb2ZpbGJpbGRcIlxuICAgIGRlbGV0ZV9hY2NvdW50X3RhYjogXCJUYSBib3J0IGRpdHQga29udG9cIlxuICAgIHdyb25nX2VtYWlsOiBcIkZlbCBtZWpsYWRyZXNzXCJcbiAgICB3cm9uZ19wYXNzd29yZDogXCJGZWxha3RpZ3QgbMO2c2Vub3JkXCJcbiAgICBkZWxldGVfdGhpc19hY2NvdW50OiBcIlRhIGJvcnQgZGV0IGjDpHIga29udG90IGbDtnIgYWxsdGlkXCJcbiAgICByZXNldF9wcm9ncmVzc190YWI6IFwiw4V0ZXJzdMOkbGxhIGFsbGEgbml2w6VlclwiXG4gICAgcmVzZXRfeW91cl9wcm9ncmVzczogXCJWaWxsIGR1IMOldGVyc3TDpGxsYSBhbGxhIG5pdsOlZXIgb2NoIGLDtnJqYSBvbSBmcsOlbiBiw7ZyamFuXCJcbiAgICBnb2RfbW9kZTogXCJBbGxzbcOka3RpZ3QgbMOkZ2VcIlxuICAgIGVtYWlsc190YWI6IFwiTWVqbGFkcmVzc2VyXCJcbiAgICBhZG1pbjogXCJBZG1pbmlzdHJhdMO2clwiXG4gICAgbWFuYWdlX3N1YnNjcmlwdGlvbjogXCJLbGlja2EgaMOkciBmw7ZyIGF0dCBoYW50ZXJhIGRpbiBwcmVudW1lcmF0aW9uLlwiXG4gICAgbmV3X3Bhc3N3b3JkOiBcIk55dHQgbMO2c2Vub3JkXCJcbiAgICBuZXdfcGFzc3dvcmRfdmVyaWZ5OiBcIlZlcmlmaWVyYVwiXG4gICAgdHlwZV9pbl9lbWFpbDogXCJTa3JpdiBpbiBkaW4gbWVqbGFkcmVzcyBmw7ZyIGF0dCBiZWtyw6RmdGEgYm9ydHRhZ2FuZGV0XCIgIyB7Y2hhbmdlfVxuICAgIHR5cGVfaW5fZW1haWxfcHJvZ3Jlc3M6IFwiU2tyaXYgaW4gZGluIGVtYWlsIGbDtnIgYXR0IGJla3LDpGZ0YSBhdHQgZHUgdmlsbCDDpXRlcnN0w6RsbGEgYWxsYSBuaXbDpWVyIG9jaCBiw7ZyamEgb20gZnLDpW4gYsO2cmphbi5cIlxuICAgIHR5cGVfaW5fcGFzc3dvcmQ6IFwiRW4gc2FrIHRpbGwsIHNrcml2IGluIGRpdHQgbMO2c2Vub3JkLlwiXG4gICAgZW1haWxfc3Vic2NyaXB0aW9uczogXCJNZWpscHJlbnVtZXJhdGlvbmVyXCJcbiAgICBlbWFpbF9zdWJzY3JpcHRpb25zX25vbmU6IFwiSW5nYSBtZWpscHJlbnVtZXJhdGlvbmVyLlwiXG4gICAgZW1haWxfYW5ub3VuY2VtZW50czogXCJNZWRkZWxhbmRlblwiXG4gICAgZW1haWxfYW5ub3VuY2VtZW50c19kZXNjcmlwdGlvbjogXCJGw6UgbWVqbCBtZWQgZGUgc2VuYXN0ZSBueWhldGVybmEgb2NoIHV0dmVja2xpbmdlbiBww6UgQ29kZUNvbWJhdC5cIlxuICAgIGVtYWlsX25vdGlmaWNhdGlvbnM6IFwiVW5kZXJyw6R0dGVsc2VyXCJcbiAgICBlbWFpbF9ub3RpZmljYXRpb25zX3N1bW1hcnk6IFwiS29udHJvbGxlciBmw7ZyIHBlcnNvbmxpZ2EsIGF1dG9tYXRpc2thIG1lamx1bmRlcnLDpHR0ZWxzZXIgcmVsYXRlcmFkZSB0aWxsIGRpbiBha3Rpdml0ZXQgcMOlIENvZGVDb21iYXQuXCJcbiAgICBlbWFpbF9hbnlfbm90ZXM6IFwiQWxsYSB1bmRlcnLDpHR0ZWxzZXJcIlxuICAgIGVtYWlsX2FueV9ub3Rlc19kZXNjcmlwdGlvbjogXCJTdMOkbmcgYXYgZsO2ciBhdHQgaGluZHJhIGFsbGEgbWVqbCBvbSBha3Rpdml0ZXRlci5cIlxuICAgIGVtYWlsX25ld3M6IFwiTnloZXRlclwiXG4gICAgZW1haWxfcmVjcnVpdF9ub3RlczogXCJKb2JidGlsbGbDpGxsZW5cIlxuICAgIGVtYWlsX3JlY3J1aXRfbm90ZXNfZGVzY3JpcHRpb246IFwiT20gZHUgc3BlbGFyIHJpa3RpZ3QgYnJhIHPDpSBrYW5za2Ugdmkga29udGFrdGFyIGRpZyBmw7ZyIGF0dCBlcmJqdWRhIGV0dCAoYsOkdHRyZSkgam9iYi5cIlxuICAgIGNvbnRyaWJ1dG9yX2VtYWlsczogXCJNZWpsIGbDtnIgYmlkcmFnYXJlXCJcbiAgICBjb250cmlidXRlX3ByZWZpeDogXCJWaSBzw7ZrZXIgbWVyIGZvbGsgc29tIHZpbGwgdmFyIG1lZCBvY2ggaGrDpGxwYSB0aWxsISBLb2xsYSBpbiBcIlxuICAgIGNvbnRyaWJ1dGVfcGFnZTogXCIgYmlkcmFnYXJzaWRhbiBcIlxuICAgIGNvbnRyaWJ1dGVfc3VmZml4OiBcIiBmw7ZyIGF0dCBmw6UgdmV0YSBtZXIuXCJcbiAgICBlbWFpbF90b2dnbGU6IFwiVsOkeGxhIGFsbGFcIlxuICAgIGVycm9yX3NhdmluZzogXCJFdHQgZmVsIHVwcHN0b2QgbsOkciDDpG5kcmluZ2FybmEgc2t1bGxlIHNwYXJhc1wiXG4gICAgc2F2ZWQ6IFwiw4RuZHJpbmdhciBzcGFyYWRlXCJcbiAgICBwYXNzd29yZF9taXNtYXRjaDogXCJEZSBhbmdpdm5hIGzDtnNlbm9yZGVuIHN0w6RtbWVyIGludGUgw7Z2ZXJlbnMuXCJcbiAgICBwYXNzd29yZF9yZXBlYXQ6IFwiVXBwcmVwYSBkaXR0IGzDtnNlbm9yZC5cIlxuXG4gIGtleWJvYXJkX3Nob3J0Y3V0czpcbiAgICBrZXlib2FyZF9zaG9ydGN1dHM6IFwiS29ydGtvbW1hbmRvblwiXG4gICAgc3BhY2U6IFwiTWVsbGFuc2xhZ1wiXG4gICAgZW50ZXI6IFwiRW50ZXJcIlxuICAgIHByZXNzX2VudGVyOiBcInRyeWNrIGVudGVyXCJcbiAgICBlc2NhcGU6IFwiRXNjYXBlXCJcbiAgICBzaGlmdDogXCJTaGlmdFwiXG4gICAgcnVuX2NvZGU6IFwiS8O2ciBudXZhcmFuZGUga29kLlwiXG4gICAgcnVuX3JlYWxfdGltZTogXCJLw7ZyIGkgcmVhbHRpZC5cIlxuICAgIGNvbnRpbnVlX3NjcmlwdDogXCJGb3J0c8OkdHQgZsO2cmJpIG51dmFyYW5kZSBrb2QuXCJcbiAgICBza2lwX3NjcmlwdHM6IFwiSG9wcGEgw7Z2ZXIgYWxsIGtvZCBzb20ga2FuIGhvcHBhcyDDtnZlci5cIlxuICAgIHRvZ2dsZV9wbGF5YmFjazogXCJTcGVsYS9QYXVzYS5cIlxuICAgIHNjcnViX3BsYXliYWNrOiBcIlNwZWxhIGJha8OldCBvY2ggZnJhbcOldCBnZW5vbSB0aWRlbi5cIlxuICAgIHNpbmdsZV9zY3J1Yl9wbGF5YmFjazogXCJTcGVsYSBiYWvDpXQgb2NoIGZyYW3DpXQgZ2Vub20gdGlkZW4sIGVuIGZyYW1lIGkgdGFnZXQuXCJcbiAgICBzY3J1Yl9leGVjdXRpb246IFwiU3BlbGEgZ2Vub20gbnV2YXJhbmRlIG1hZ2lza2EgdHJvbGxmb3JtZWwuXCJcbiAgICB0b2dnbGVfZGVidWc6IFwiVG9nZ2xhIGRlYnVnIGRpc3BsYXkuXCJcbiAgICB0b2dnbGVfZ3JpZDogXCJUb2dnbGEgZ3JpZCBvdmVybGF5LlwiXG4jICAgIHRvZ2dsZV9wYXRoZmluZGluZzogXCJUb2dnbGUgcGF0aGZpbmRpbmcgb3ZlcmxheS5cIlxuIyAgICBiZWF1dGlmeTogXCJCZWF1dGlmeSB5b3VyIGNvZGUgYnkgc3RhbmRhcmRpemluZyBpdHMgZm9ybWF0dGluZy5cIlxuICAgIG1heGltaXplX2VkaXRvcjogXCJNYXhpbWVyYS9taW5pbWVyYSBrb2RyZWRpZ2VyYXJlbi5cIlxuXG4gIGNvbW11bml0eTpcbiAgICBtYWluX3RpdGxlOiBcIkNvZGVDb21iYXQgQ29tbXVuaXR5XCJcbiAgICBpbnRyb2R1Y3Rpb246IFwiS29sbGEgaW4gcMOlIHZpbGthIHPDpHR0IGR1IGthbiB2YXJhIGRlbGFrdGlnIG9jaCB2w6RsaiBkZXQgc29tIGzDpXRlciBtZXN0IGt1bC4gVmkgc2VyIGZyYW0gZW1vdCBhdHQgam9iYmEgbWVkIGRpZyFcIlxuICAgIGxldmVsX2VkaXRvcl9wcmVmaXg6IFwiQW52w6RuZFwiXG4gICAgbGV2ZWxfZWRpdG9yX3N1ZmZpeDogXCJ0aWxsIGF0dCBza2FwYSBvY2ggw6RuZHJhIG5pdsOlZXIuIEFudsOkbmRhcmUgaGFyIHNrYXBhdCBuaXbDpWVyIHRpbGwgc2luYSBrbGFzc2VyLCB2w6RubmVyLCBoYWNrYXRob25zLCBlbGV2ZXIgb2NoIHN5c2tvbi4gT20gZGV0IGzDpXRlciBzdsOlcnQgYXR0IHNrYXBhIGVuIG5pdsOlIHPDpSBrYW4gZHUgYW52w6RuZGEgZW4gYXYgdsOlcmEgc29tIGdydW5kIVwiXG4gICAgdGhhbmdfZWRpdG9yX3ByZWZpeDogXCJWaSBrYWxsYXIgZW5oZXRlciBpIHNwZWxldCAndGhhbmdzJy4gQW52w6RuZFwiXG4gICAgdGhhbmdfZWRpdG9yX3N1ZmZpeDogXCJ0aWxsIGF0dCDDpG5kcmEgQ29kZUNvbWJhdHMgZ3JhZmlrLiBMw6V0IGVuaGV0ZXIga2FzdGEgc2FrZXIsIMOkbmRyYSByaWt0bmluZ2VuIHDDpSBhbmltZXJpbmdhciwgw6RuZHJhIGVuIGVuaGV0cyBsaXZzbMOkbmdkIGVsbGVyIGxhZGRhIHVwcCBkaW4gZWdlbiB2ZWt0b3JncmFmaWsuXCJcbiAgICBhcnRpY2xlX2VkaXRvcl9wcmVmaXg6IFwiU2V0dCBldHQgbWlzc3RhZyBpIG7DpWdvdCBhdiB2w6VyYSBkb2t1bWVudD8gVmlsbCBkdSBnw7ZyYSBpbnN0cnVrdGlvbmVyIHRpbGwgZGluYSBlZ25hIHNrYXBlbHNlcj8gVGEgZW4gdGl0dCBww6VcIlxuICAgIGFydGljbGVfZWRpdG9yX3N1ZmZpeDogXCJvY2ggaGrDpGxwIENvZGVDb21iYXRzcGVsYXJlIGF0dCBmw6Ugc8OlIG15Y2tldCB1dCBmcsOlbiBzaW4gc3BlbHRpZCBzb20gbcO2amxpZ3QuXCJcbiAgICBmaW5kX3VzOiBcIkjDpHIgaGl0dGFyIGR1IG9zc1wiXG4gICAgc29jaWFsX2dpdGh1YjogXCJLb2xsYSBpbiBhbGwgdsOlciBrb2QgcMOlIEdpdEh1YlwiXG4gICAgc29jaWFsX2Jsb2c6IFwiTMOkcyBDb2RlQ29tYmF0YmxvZ2dlbiBww6UgU2V0dFwiXG4gICAgc29jaWFsX2Rpc2NvdXJjZTogXCJHw6UgbWVkIGkgZGlza3Vzc2lvbmVybmEgaSB2w6VydCBmb3J1bVwiXG4gICAgc29jaWFsX2ZhY2Vib29rOiBcIkdpbGxhIENvZGVDb21iYXQgcMOlIEZhY2Vib29rXCJcbiAgICBzb2NpYWxfdHdpdHRlcjogXCJGw7ZsaiBDb2RlQ29tYmF0IHDDpSBUd2l0dGVyXCJcbiAgICBzb2NpYWxfZ3BsdXM6IFwiRsO2bGogQ29kZUNvbWJhdCBww6UgR29vZ2xlK1wiXG4jICAgIHNvY2lhbF9zbGFjazogXCJDaGF0IHdpdGggdXMgaW4gdGhlIHB1YmxpYyBDb2RlQ29tYmF0IFNsYWNrIGNoYW5uZWxcIlxuICAgIGNvbnRyaWJ1dGVfdG9fdGhlX3Byb2plY3Q6IFwiQmlkcmEgdGlsbCBwcm9qZWt0ZXRcIlxuXG4gIGNsYW5zOlxuIyAgICB0aXRsZTogXCJKb2luIENvZGVDb21iYXQgQ2xhbnMgLSBMZWFybiB0byBDb2RlIGluIFB5dGhvbiwgSmF2YVNjcmlwdCwgYW5kIEhUTUxcIlxuIyAgICBjbGFuX3RpdGxlOiBcIl9fY2xhbl9fIC0gSm9pbiBDb2RlQ29tYmF0IENsYW5zIGFuZCBMZWFybiB0byBDb2RlXCJcbiMgICAgbWV0YV9kZXNjcmlwdGlvbjogXCJKb2luIGEgQ2xhbiBvciBidWlsZCB5b3VyIG93biBjb21tdW5pdHkgb2YgY29kZXJzLiBQbGF5IG11bHRpcGxheWVyIGFyZW5hIGxldmVscyBhbmQgbGV2ZWwgdXAgeW91ciBoZXJvIGFuZCB5b3VyIGNvZGluZyBza2lsbHMuXCJcbiAgICBjbGFuOiBcIktsYW5cIlxuICAgIGNsYW5zOiBcIktsYW5lclwiXG4gICAgbmV3X25hbWU6IFwiTmFtbiBww6Ugbnkga2xhblwiXG4gICAgbmV3X2Rlc2NyaXB0aW9uOiBcIkJlc2tyaXZuaW5nIGF2IG55IGtsYW5cIlxuICAgIG1ha2VfcHJpdmF0ZTogXCJHw7ZyIGtsYW5lbiBwcml2YXRcIlxuICAgIHN1YnNfb25seTogXCJlbmRhc3QgZsO2bGphcmVcIlxuICAgIGNyZWF0ZV9jbGFuOiBcIlNrYXBhIG55IGtsYW5cIlxuICAgIHByaXZhdGVfcHJldmlldzogXCJGw7ZyaGFuZHNncmFuc2thXCJcbiAgICBwcml2YXRlX2NsYW5zOiBcIlByaXZhdGEga2xhbmVyXCJcbiAgICBwdWJsaWNfY2xhbnM6IFwiUHVibGlrIGtsYW5cIlxuICAgIG15X2NsYW5zOiBcIk1pbmEga2xhbmVyXCJcbiAgICBjbGFuX25hbWU6IFwiS2xhbmVucyBuYW1uXCJcbiAgICBuYW1lOiBcIk5hbW5cIlxuIyAgICBjaGllZnRhaW46IFwiQ2hpZWZ0YWluXCJcbiAgICBlZGl0X2NsYW5fbmFtZTogXCLDhG5kcmEga2xhbmVucyBuYW1uXCJcbiAgICBlZGl0X2NsYW5fZGVzY3JpcHRpb246IFwiw4RuZHJhIGJlc2tyaXZuaW5nZW4gYXYga2xhbmVuXCJcbiAgICBlZGl0X25hbWU6IFwiw6RuZHJhIG5hbW5cIlxuICAgIGVkaXRfZGVzY3JpcHRpb246IFwiw6RuZHJhIGJlc2tyaXZuaW5nXCJcbiAgICBwcml2YXRlOiBcIihwcml2YXQpXCJcbiAgICBzdW1tYXJ5OiBcIlN1bW1lcmluZ1wiXG4gICAgYXZlcmFnZV9sZXZlbDogXCJNZWRlbG5pdsOlXCJcbiMgICAgYXZlcmFnZV9hY2hpZXZlbWVudHM6IFwiQXZlcmFnZSBBY2hpZXZlbWVudHNcIlxuICAgIGRlbGV0ZV9jbGFuOiBcIlRhIGJvcnQga2xhblwiXG4gICAgbGVhdmVfY2xhbjogXCJMw6RtbmEga2xhblwiXG4gICAgam9pbl9jbGFuOiBcIkfDpSBtZWQgaSBrbGFuXCJcbiAgICBpbnZpdGVfMTogXCJCanVkIGluOlwiXG4gICAgaW52aXRlXzI6IFwiKkJqdWQgaW4gc3BlbGFyZSB0aWxsIGtsYW5lbiBnZW5vbSBhdHQgc2tpY2thIGRlbm5hIGzDpG5rLlwiXG4gICAgbWVtYmVyczogXCJNZWRsZW1tYXJcIlxuICAgIHByb2dyZXNzOiBcIkZyYW1zdGVnXCJcbiAgICBub3Rfc3RhcnRlZF8xOiBcImVqIHDDpWLDtnJqYWRcIlxuICAgIHN0YXJ0ZWRfMTogXCJww6Viw7ZyamFkXCJcbiAgICBjb21wbGV0ZV8xOiBcImF2a2xhcmFkXCJcbiAgICBleHBfbGV2ZWxzOiBcIkV4cGFuZGVyYSBuaXbDpWVyXCJcbiAgICByZW1faGVybzogXCJUYSBib3J0IGhqw6RsdGVcIlxuICAgIHN0YXR1czogXCJTdGF0dXNcIlxuICAgIGNvbXBsZXRlXzI6IFwiQXZrbGFyYWRcIlxuICAgIHN0YXJ0ZWRfMjogXCJQw6Viw7ZyamFkXCJcbiAgICBub3Rfc3RhcnRlZF8yOiBcIkVqIHDDpWLDtnJqYWRcIlxuICAgIHZpZXdfc29sdXRpb246IFwiS2xpY2thIGbDtnIgYXR0IHNlIGzDtnNuaW5nLlwiXG4gICAgdmlld19hdHRlbXB0OiBcIktsaWNrYSBmw7ZyIGF0dCBzZSBmw7Zyc8O2ay5cIlxuICAgIGxhdGVzdF9hY2hpZXZlbWVudDogXCJTZW5hc3RlIHByZXN0YXRpb25cIlxuICAgIHBsYXl0aW1lOiBcIlNwZWx0aWRcIlxuICAgIGxhc3RfcGxheWVkOiBcIlNlbmFzdCBzcGVsYWRcIlxuIyAgICBsZWFndWVzX2V4cGxhbmF0aW9uOiBcIlBsYXkgaW4gYSBsZWFndWUgYWdhaW5zdCBvdGhlciBjbGFuIG1lbWJlcnMgaW4gdGhlc2UgbXVsdGlwbGF5ZXIgYXJlbmEgaW5zdGFuY2VzLlwiXG4jICAgIHRyYWNrX2NvbmNlcHRzMTogXCJUcmFjayBjb25jZXB0c1wiXG4jICAgIHRyYWNrX2NvbmNlcHRzMmE6IFwibGVhcm5lZCBieSBlYWNoIHN0dWRlbnRcIlxuIyAgICB0cmFja19jb25jZXB0czJiOiBcImxlYXJuZWQgYnkgZWFjaCBtZW1iZXJcIlxuIyAgICB0cmFja19jb25jZXB0czNhOiBcIlRyYWNrIGxldmVscyBjb21wbGV0ZWQgZm9yIGVhY2ggc3R1ZGVudFwiXG4jICAgIHRyYWNrX2NvbmNlcHRzM2I6IFwiVHJhY2sgbGV2ZWxzIGNvbXBsZXRlZCBmb3IgZWFjaCBtZW1iZXJcIlxuIyAgICB0cmFja19jb25jZXB0czRhOiBcIlNlZSB5b3VyIHN0dWRlbnRzJ1wiXG4jICAgIHRyYWNrX2NvbmNlcHRzNGI6IFwiU2VlIHlvdXIgbWVtYmVycydcIlxuIyAgICB0cmFja19jb25jZXB0czU6IFwic29sdXRpb25zXCJcbiMgICAgdHJhY2tfY29uY2VwdHM2YTogXCJTb3J0IHN0dWRlbnRzIGJ5IG5hbWUgb3IgcHJvZ3Jlc3NcIlxuIyAgICB0cmFja19jb25jZXB0czZiOiBcIlNvcnQgbWVtYmVycyBieSBuYW1lIG9yIHByb2dyZXNzXCJcbiMgICAgdHJhY2tfY29uY2VwdHM3OiBcIlJlcXVpcmVzIGludml0YXRpb25cIlxuIyAgICB0cmFja19jb25jZXB0czg6IFwidG8gam9pblwiXG4jICAgIHByaXZhdGVfcmVxdWlyZV9zdWI6IFwiUHJpdmF0ZSBjbGFucyByZXF1aXJlIGEgc3Vic2NyaXB0aW9uIHRvIGNyZWF0ZSBvciBqb2luLlwiXG5cbiAgY291cnNlczpcbiAgICBjcmVhdGVfbmV3X2NsYXNzOiBcIlNrYXBhIG55IGtsYXNzXCJcbiMgICAgaG9jX2JsdXJiMTogXCJUcnkgdGhlXCJcbiMgICAgaG9jX2JsdXJiMjogXCJDb2RlLCBQbGF5LCBTaGFyZVwiXG4jICAgIGhvY19ibHVyYjM6IFwiYWN0aXZpdHkhIENvbnN0cnVjdCBmb3VyIGRpZmZlcmVudCBtaW5pZ2FtZXMgdG8gbGVhcm4gdGhlIGJhc2ljcyBvZiBnYW1lIGRldmVsb3BtZW50LCB0aGVuIG1ha2UgeW91ciBvd24hXCJcbiMgICAgc29sdXRpb25zX3JlcXVpcmVfbGljZW5zZXM6IFwiTGV2ZWwgc29sdXRpb25zIGFyZSBhdmFpbGFibGUgZm9yIHRlYWNoZXJzIHdobyBoYXZlIGxpY2Vuc2VzLlwiXG4jICAgIHVubmFtZWRfY2xhc3M6IFwiVW5uYW1lZCBDbGFzc1wiXG4gICAgZWRpdF9zZXR0aW5nczE6IFwiUmVkaWdlcmEga2xhc3NpbnN0w6RsbG5pbmdhclwiXG4gICAgYWRkX3N0dWRlbnRzOiBcIkzDpGdnIHRpbGwgZWxldmVyXCJcbiAgICBzdGF0czogXCJTdGF0aXN0aWtcIlxuIyAgICBzdHVkZW50X2VtYWlsX2ludml0ZV9ibHVyYjogXCJZb3VyIHN0dWRlbnRzIGNhbiBhbHNvIHVzZSBjbGFzcyBjb2RlIDxzdHJvbmc+X19jbGFzc0NvZGVfXzwvc3Ryb25nPiB3aGVuIGNyZWF0aW5nIGEgU3R1ZGVudCBBY2NvdW50LCBubyBlbWFpbCByZXF1aXJlZC5cIlxuICAgIHRvdGFsX3N0dWRlbnRzOiBcIlRvdGFsdCBhbnRhbCBlbGV2ZXI6XCJcbiAgICBhdmVyYWdlX3RpbWU6IFwiR2Vub21zbml0dGxpZyBzcGVsdGlkOlwiXG4gICAgdG90YWxfdGltZTogXCJUb3RhbCBzcGVsdGlkOlwiXG4gICAgYXZlcmFnZV9sZXZlbHM6IFwiR2Vub21zbml0dGxpZ3QgYW50YWwgbml2w6VlciBhdmtsYXJhZGU6XCJcbiAgICB0b3RhbF9sZXZlbHM6IFwiVG90YXQgYW50YWwgbml2w6VlciBhdmtsYXJhZGVcIlxuICAgIHN0dWRlbnRzOiBcIkVsZXZlclwiXG4gICAgY29uY2VwdHM6IFwiS29uY2VwdFwiXG4gICAgcGxheV90aW1lOiBcIlNwZWx0aWQ6XCJcbiAgICBjb21wbGV0ZWQ6IFwiQXZzbHV0YWRlOlwiXG4jICAgIGVudGVyX2VtYWlsczogXCJTZXBhcmF0ZSBlYWNoIGVtYWlsIGFkZHJlc3MgYnkgYSBsaW5lIGJyZWFrIG9yIGNvbW1hc1wiXG4jICAgIHNlbmRfaW52aXRlczogXCJJbnZpdGUgU3R1ZGVudHNcIlxuIyAgICBudW1iZXJfcHJvZ3JhbW1pbmdfc3R1ZGVudHM6IFwiTnVtYmVyIG9mIFByb2dyYW1taW5nIFN0dWRlbnRzXCJcbiMgICAgbnVtYmVyX3RvdGFsX3N0dWRlbnRzOiBcIlRvdGFsIFN0dWRlbnRzIGluIFNjaG9vbC9EaXN0cmljdFwiXG4jICAgIGVucm9sbDogXCJFbnJvbGxcIlxuIyAgICBlbnJvbGxfcGFpZDogXCJFbnJvbGwgU3R1ZGVudHMgaW4gUGFpZCBDb3Vyc2VzXCJcbiMgICAgZ2V0X2Vucm9sbG1lbnRzOiBcIkdldCBNb3JlIExpY2Vuc2VzXCJcbiMgICAgY2hhbmdlX2xhbmd1YWdlOiBcIkNoYW5nZSBDb3Vyc2UgTGFuZ3VhZ2VcIlxuIyAgICBrZWVwX3VzaW5nOiBcIktlZXAgVXNpbmdcIlxuIyAgICBzd2l0Y2hfdG86IFwiU3dpdGNoIFRvXCJcbiMgICAgZ3JlZXRpbmdzOiBcIkdyZWV0aW5ncyFcIlxuIyAgICBiYWNrX2NsYXNzcm9vbXM6IFwiQmFjayB0byBteSBjbGFzc3Jvb21zXCJcbiMgICAgYmFja19jbGFzc3Jvb206IFwiQmFjayB0byBjbGFzc3Jvb21cIlxuIyAgICBiYWNrX2NvdXJzZXM6IFwiQmFjayB0byBteSBjb3Vyc2VzXCJcbiMgICAgZWRpdF9kZXRhaWxzOiBcIkVkaXQgY2xhc3MgZGV0YWlsc1wiXG4jICAgIHB1cmNoYXNlX2Vucm9sbG1lbnRzOiBcIlB1cmNoYXNlIFN0dWRlbnQgTGljZW5zZXNcIlxuIyAgICByZW1vdmVfc3R1ZGVudDogXCJyZW1vdmUgc3R1ZGVudFwiXG4jICAgIGFzc2lnbjogXCJBc3NpZ25cIlxuIyAgICB0b19hc3NpZ246IFwidG8gYXNzaWduIHBhaWQgY291cnNlcy5cIlxuIyAgICBzdHVkZW50OiBcIlN0dWRlbnRcIlxuIyAgICB0ZWFjaGVyOiBcIlRlYWNoZXJcIlxuIyAgICBhcmVuYTogXCJBcmVuYVwiXG4jICAgIGF2YWlsYWJsZV9sZXZlbHM6IFwiQXZhaWxhYmxlIExldmVsc1wiXG4jICAgIHN0YXJ0ZWQ6IFwic3RhcnRlZFwiXG4jICAgIGNvbXBsZXRlOiBcImNvbXBsZXRlXCJcbiMgICAgcHJhY3RpY2U6IFwicHJhY3RpY2VcIlxuIyAgICByZXF1aXJlZDogXCJyZXF1aXJlZFwiXG4jICAgIHdlbGNvbWVfdG9fY291cnNlczogXCJBZHZlbnR1cmVycywgd2VsY29tZSB0byBDb3Vyc2VzIVwiXG4jICAgIHJlYWR5X3RvX3BsYXk6IFwiUmVhZHkgdG8gcGxheT9cIlxuIyAgICBzdGFydF9uZXdfZ2FtZTogXCJTdGFydCBOZXcgR2FtZVwiXG4jICAgIHBsYXlfbm93X2xlYXJuX2hlYWRlcjogXCJQbGF5IG5vdyB0byBsZWFyblwiXG4jICAgIHBsYXlfbm93X2xlYXJuXzE6IFwiYmFzaWMgc3ludGF4IHRvIGNvbnRyb2wgeW91ciBjaGFyYWN0ZXJcIlxuIyAgICBwbGF5X25vd19sZWFybl8yOiBcIndoaWxlIGxvb3BzIHRvIHNvbHZlIHBlc2t5IHB1enpsZXNcIlxuIyAgICBwbGF5X25vd19sZWFybl8zOiBcInN0cmluZ3MgJiB2YXJpYWJsZXMgdG8gY3VzdG9taXplIGFjdGlvbnNcIlxuIyAgICBwbGF5X25vd19sZWFybl80OiBcImhvdyB0byBkZWZlYXQgYW4gb2dyZSAoaW1wb3J0YW50IGxpZmUgc2tpbGxzISlcIlxuIyAgICB3ZWxjb21lX3RvX3BhZ2U6IFwiTXkgU3R1ZGVudCBEYXNoYm9hcmRcIlxuIyAgICBteV9jbGFzc2VzOiBcIkN1cnJlbnQgQ2xhc3Nlc1wiXG4jICAgIGNsYXNzX2FkZGVkOiBcIkNsYXNzIHN1Y2Nlc3NmdWxseSBhZGRlZCFcIlxuIyAgICB2aWV3X21hcDogXCJ2aWV3IG1hcFwiXG4jICAgIHZpZXdfdmlkZW9zOiBcInZpZXcgdmlkZW9zXCJcbiMgICAgdmlld19wcm9qZWN0X2dhbGxlcnk6IFwidmlldyBteSBjbGFzc21hdGVzJyBwcm9qZWN0c1wiXG4jICAgIGpvaW5fY2xhc3M6IFwiSm9pbiBBIENsYXNzXCJcbiMgICAgam9pbl9jbGFzc18yOiBcIkpvaW4gY2xhc3NcIlxuIyAgICBhc2tfdGVhY2hlcl9mb3JfY29kZTogXCJBc2sgeW91ciB0ZWFjaGVyIGlmIHlvdSBoYXZlIGEgQ29kZUNvbWJhdCBjbGFzcyBjb2RlISBJZiBzbywgZW50ZXIgaXQgYmVsb3c6XCJcbiMgICAgZW50ZXJfY19jb2RlOiBcIjxFbnRlciBDbGFzcyBDb2RlPlwiXG4jICAgIGpvaW46IFwiSm9pblwiXG4jICAgIGpvaW5pbmc6IFwiSm9pbmluZyBjbGFzc1wiXG4jICAgIGNvdXJzZV9jb21wbGV0ZTogXCJDb3Vyc2UgQ29tcGxldGVcIlxuIyAgICBwbGF5X2FyZW5hOiBcIlBsYXkgQXJlbmFcIlxuIyAgICB2aWV3X3Byb2plY3Q6IFwiVmlldyBQcm9qZWN0XCJcbiMgICAgc3RhcnQ6IFwiU3RhcnRcIlxuIyAgICBsYXN0X2xldmVsOiBcIkxhc3QgbGV2ZWwgcGxheWVkXCJcbiMgICAgbm90X3lvdTogXCJOb3QgeW91P1wiXG4jICAgIGNvbnRpbnVlX3BsYXlpbmc6IFwiQ29udGludWUgUGxheWluZ1wiXG4jICAgIG9wdGlvbjFfaGVhZGVyOiBcIkludml0ZSBTdHVkZW50cyBieSBFbWFpbFwiXG4jICAgIHJlbW92ZV9zdHVkZW50MTogXCJSZW1vdmUgU3R1ZGVudFwiXG4jICAgIGFyZV95b3Vfc3VyZTogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoaXMgc3R1ZGVudCBmcm9tIHRoaXMgY2xhc3M/XCJcbiMgICAgcmVtb3ZlX2Rlc2NyaXB0aW9uMTogXCJTdHVkZW50IHdpbGwgbG9zZSBhY2Nlc3MgdG8gdGhpcyBjbGFzc3Jvb20gYW5kIGFzc2lnbmVkIGNsYXNzZXMuIFByb2dyZXNzIGFuZCBnYW1lcGxheSBpcyBOT1QgbG9zdCwgYW5kIHRoZSBzdHVkZW50IGNhbiBiZSBhZGRlZCBiYWNrIHRvIHRoZSBjbGFzc3Jvb20gYXQgYW55IHRpbWUuXCJcbiMgICAgcmVtb3ZlX2Rlc2NyaXB0aW9uMjogXCJUaGUgYWN0aXZhdGVkIHBhaWQgbGljZW5zZSB3aWxsIG5vdCBiZSByZXR1cm5lZC5cIlxuIyAgICBsaWNlbnNlX3dpbGxfcmV2b2tlOiBcIlRoaXMgc3R1ZGVudCdzIHBhaWQgbGljZW5zZSB3aWxsIGJlIHJldm9rZWQgYW5kIG1hZGUgYXZhaWxhYmxlIHRvIGFzc2lnbiB0byBhbm90aGVyIHN0dWRlbnQuXCJcbiMgICAga2VlcF9zdHVkZW50OiBcIktlZXAgU3R1ZGVudFwiXG4jICAgIHJlbW92aW5nX3VzZXI6IFwiUmVtb3ZpbmcgdXNlclwiXG4jICAgIHN1YnRpdGxlOiBcIlJldmlldyBjb3Vyc2Ugb3ZlcnZpZXdzIGFuZCBsZXZlbHNcIiAjIEZsYXQgc3R5bGUgcmVkZXNpZ25cbiMgICAgY2hhbmdlbG9nOiBcIlZpZXcgbGF0ZXN0IGNoYW5nZXMgdG8gY291cnNlIGxldmVscy5cIlxuIyAgICBzZWxlY3RfbGFuZ3VhZ2U6IFwiU2VsZWN0IGxhbmd1YWdlXCJcbiMgICAgc2VsZWN0X2xldmVsOiBcIlNlbGVjdCBsZXZlbFwiXG4jICAgIHBsYXlfbGV2ZWw6IFwiUGxheSBMZXZlbFwiXG4jICAgIGNvbmNlcHRzX2NvdmVyZWQ6IFwiQ29uY2VwdHMgY292ZXJlZFwiXG4jICAgIHZpZXdfZ3VpZGVfb25saW5lOiBcIkxldmVsIE92ZXJ2aWV3cyBhbmQgU29sdXRpb25zXCJcbiMgICAgZ3JhbnRzX2xpZmV0aW1lX2FjY2VzczogXCJHcmFudHMgYWNjZXNzIHRvIGFsbCBDb3Vyc2VzLlwiXG4jICAgIGVucm9sbG1lbnRfY3JlZGl0c19hdmFpbGFibGU6IFwiTGljZW5zZXMgQXZhaWxhYmxlOlwiXG4jICAgIGxhbmd1YWdlX3NlbGVjdDogXCJTZWxlY3QgYSBsYW5ndWFnZVwiICMgQ2xhc3Nyb29tU2V0dGluZ3NNb2RhbFxuIyAgICBsYW5ndWFnZV9jYW5ub3RfY2hhbmdlOiBcIkxhbmd1YWdlIGNhbm5vdCBiZSBjaGFuZ2VkIG9uY2Ugc3R1ZGVudHMgam9pbiBhIGNsYXNzLlwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9sYWJlbDogXCJBdmVyYWdlIFN0dWRlbnQgUHJvZ3JhbW1pbmcgRXhwZXJpZW5jZVwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9kZXNjOiBcIlRoaXMgd2lsbCBoZWxwIHVzIHVuZGVyc3RhbmQgaG93IHRvIHBhY2UgY291cnNlcyBiZXR0ZXIuXCJcbiMgICAgYXZnX3N0dWRlbnRfZXhwX3NlbGVjdDogXCJTZWxlY3QgdGhlIGJlc3Qgb3B0aW9uXCJcbiMgICAgYXZnX3N0dWRlbnRfZXhwX25vbmU6IFwiTm8gRXhwZXJpZW5jZSAtIGxpdHRsZSB0byBubyBleHBlcmllbmNlXCJcbiMgICAgYXZnX3N0dWRlbnRfZXhwX2JlZ2lubmVyOiBcIkJlZ2lubmVyIC0gc29tZSBleHBvc3VyZSBvciBibG9jay1iYXNlZFwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9pbnRlcm1lZGlhdGU6IFwiSW50ZXJtZWRpYXRlIC0gc29tZSBleHBlcmllbmNlIHdpdGggdHlwZWQgY29kZVwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF9hZHZhbmNlZDogXCJBZHZhbmNlZCAtIGV4dGVuc2l2ZSBleHBlcmllbmNlIHdpdGggdHlwZWQgY29kZVwiXG4jICAgIGF2Z19zdHVkZW50X2V4cF92YXJpZWQ6IFwiVmFyaWVkIExldmVscyBvZiBFeHBlcmllbmNlXCJcbiMgICAgc3R1ZGVudF9hZ2VfcmFuZ2VfbGFiZWw6IFwiU3R1ZGVudCBBZ2UgUmFuZ2VcIlxuIyAgICBzdHVkZW50X2FnZV9yYW5nZV95b3VuZ2VyOiBcIllvdW5nZXIgdGhhbiA2XCJcbiMgICAgc3R1ZGVudF9hZ2VfcmFuZ2Vfb2xkZXI6IFwiT2xkZXIgdGhhbiAxOFwiXG4jICAgIHN0dWRlbnRfYWdlX3JhbmdlX3RvOiBcInRvXCJcbiMgICAgZXN0aW1hdGVkX2NsYXNzX2RhdGVzX2xhYmVsOiBcIkVzdGltYXRlZCBDbGFzcyBEYXRlc1wiXG4jICAgIGVzdGltYXRlZF9jbGFzc19mcmVxdWVuY3lfbGFiZWw6IFwiRXN0aW1hdGVkIENsYXNzIEZyZXF1ZW5jeVwiXG4jICAgIGNsYXNzZXNfcGVyX3dlZWs6IFwiY2xhc3NlcyBwZXIgd2Vla1wiXG4jICAgIG1pbnV0ZXNfcGVyX2NsYXNzOiBcIm1pbnV0ZXMgcGVyIGNsYXNzXCJcbiMgICAgY3JlYXRlX2NsYXNzOiBcIkNyZWF0ZSBDbGFzc1wiXG4jICAgIGNsYXNzX25hbWU6IFwiQ2xhc3MgTmFtZVwiXG4jICAgIHRlYWNoZXJfYWNjb3VudF9yZXN0cmljdGVkOiBcIllvdXIgYWNjb3VudCBpcyBhIHRlYWNoZXIgYWNjb3VudCBhbmQgY2Fubm90IGFjY2VzcyBzdHVkZW50IGNvbnRlbnQuXCJcbiMgICAgYWNjb3VudF9yZXN0cmljdGVkOiBcIkEgc3R1ZGVudCBhY2NvdW50IGlzIHJlcXVpcmVkIHRvIGFjY2VzcyB0aGlzIHBhZ2UuXCJcbiMgICAgdXBkYXRlX2FjY291bnRfbG9naW5fdGl0bGU6IFwiTG9nIGluIHRvIHVwZGF0ZSB5b3VyIGFjY291bnRcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90aXRsZTogXCJZb3VyIGFjY291bnQgbmVlZHMgYXR0ZW50aW9uIVwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X2JsdXJiOiBcIkJlZm9yZSB5b3UgY2FuIGFjY2VzcyB5b3VyIGNsYXNzZXMsIGNob29zZSBob3cgeW91IHdhbnQgdG8gdXNlIHRoaXMgYWNjb3VudC5cIlxuIyAgICB1cGRhdGVfYWNjb3VudF9jdXJyZW50X3R5cGU6IFwiQ3VycmVudCBBY2NvdW50IFR5cGU6XCJcbiMgICAgdXBkYXRlX2FjY291bnRfYWNjb3VudF9lbWFpbDogXCJBY2NvdW50IEVtYWlsL1VzZXJuYW1lOlwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X2FtX3RlYWNoZXI6IFwiSSBhbSBhIHRlYWNoZXJcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9rZWVwX2FjY2VzczogXCJLZWVwIGFjY2VzcyB0byBjbGFzc2VzIEkndmUgY3JlYXRlZFwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3RlYWNoZXJzX2NhbjogXCJUZWFjaGVyIGFjY291bnRzIGNhbjpcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90ZWFjaGVyc19jYW4xOiBcIkNyZWF0ZS9tYW5hZ2UvYWRkIGNsYXNzZXNcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90ZWFjaGVyc19jYW4yOiBcIkFzc2lnbi9lbnJvbGwgc3R1ZGVudHMgaW4gY291cnNlc1wiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3RlYWNoZXJzX2NhbjM6IFwiVW5sb2NrIGFsbCBjb3Vyc2UgbGV2ZWxzIHRvIHRyeSBvdXRcIlxuIyAgICB1cGRhdGVfYWNjb3VudF90ZWFjaGVyc19jYW40OiBcIkFjY2VzcyBuZXcgdGVhY2hlci1vbmx5IGZlYXR1cmVzIGFzIHdlIHJlbGVhc2UgdGhlbVwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3RlYWNoZXJzX3dhcm5pbmc6IFwiV2FybmluZzogWW91IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIGFsbCBjbGFzc2VzIHRoYXQgeW91IGhhdmUgcHJldmlvdXNseSBqb2luZWQgYW5kIHdpbGwgbm90IGJlIGFibGUgdG8gcGxheSBhcyBhIHN0dWRlbnQuXCJcbiMgICAgdXBkYXRlX2FjY291bnRfcmVtYWluX3RlYWNoZXI6IFwiUmVtYWluIGEgVGVhY2hlclwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3VwZGF0ZV90ZWFjaGVyOiBcIlVwZGF0ZSB0byBUZWFjaGVyXCJcbiMgICAgdXBkYXRlX2FjY291bnRfYW1fc3R1ZGVudDogXCJJIGFtIGEgc3R1ZGVudFwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3JlbW92ZV9hY2Nlc3M6IFwiUmVtb3ZlIGFjY2VzcyB0byBjbGFzc2VzIEkgaGF2ZSBjcmVhdGVkXCJcbiMgICAgdXBkYXRlX2FjY291bnRfc3R1ZGVudHNfY2FuOiBcIlN0dWRlbnQgYWNjb3VudHMgY2FuOlwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3N0dWRlbnRzX2NhbjE6IFwiSm9pbiBjbGFzc2VzXCJcbiMgICAgdXBkYXRlX2FjY291bnRfc3R1ZGVudHNfY2FuMjogXCJQbGF5IHRocm91Z2ggY291cnNlcyBhcyBhIHN0dWRlbnQgYW5kIHRyYWNrIHlvdXIgb3duIHByb2dyZXNzXCJcbiMgICAgdXBkYXRlX2FjY291bnRfc3R1ZGVudHNfY2FuMzogXCJDb21wZXRlIGFnYWluc3QgY2xhc3NtYXRlcyBpbiBhcmVuYXNcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9zdHVkZW50c19jYW40OiBcIkFjY2VzcyBuZXcgc3R1ZGVudC1vbmx5IGZlYXR1cmVzIGFzIHdlIHJlbGVhc2UgdGhlbVwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3N0dWRlbnRzX3dhcm5pbmc6IFwiV2FybmluZzogWW91IHdpbGwgbm90IGJlIGFibGUgdG8gbWFuYWdlIGFueSBjbGFzc2VzIHRoYXQgeW91IGhhdmUgcHJldmlvdXNseSBjcmVhdGVkIG9yIGNyZWF0ZSBuZXcgY2xhc3Nlcy5cIlxuIyAgICB1bnN1YnNjcmliZV93YXJuaW5nOiBcIldhcm5pbmc6IFlvdSB3aWxsIGJlIHVuc3Vic2NyaWJlZCBmcm9tIHlvdXIgbW9udGhseSBzdWJzY3JpcHRpb24uXCJcbiMgICAgdXBkYXRlX2FjY291bnRfcmVtYWluX3N0dWRlbnQ6IFwiUmVtYWluIGEgU3R1ZGVudFwiXG4jICAgIHVwZGF0ZV9hY2NvdW50X3VwZGF0ZV9zdHVkZW50OiBcIlVwZGF0ZSB0byBTdHVkZW50XCJcbiMgICAgbmVlZF9hX2NsYXNzX2NvZGU6IFwiWW91J2xsIG5lZWQgYSBDbGFzcyBDb2RlIGZvciB0aGUgY2xhc3MgeW91J3JlIGpvaW5pbmc6XCJcbiMgICAgdXBkYXRlX2FjY291bnRfbm90X3N1cmU6IFwiTm90IHN1cmUgd2hpY2ggb25lIHRvIGNob29zZT8gRW1haWxcIlxuIyAgICB1cGRhdGVfYWNjb3VudF9jb25maXJtX3VwZGF0ZV9zdHVkZW50OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byB1cGRhdGUgeW91ciBhY2NvdW50IHRvIGEgU3R1ZGVudCBleHBlcmllbmNlP1wiXG4jICAgIHVwZGF0ZV9hY2NvdW50X2NvbmZpcm1fdXBkYXRlX3N0dWRlbnQyOiBcIllvdSB3aWxsIG5vdCBiZSBhYmxlIHRvIG1hbmFnZSBhbnkgY2xhc3NlcyB0aGF0IHlvdSBoYXZlIHByZXZpb3VzbHkgY3JlYXRlZCBvciBjcmVhdGUgbmV3IGNsYXNzZXMuIFlvdXIgcHJldmlvdXNseSBjcmVhdGVkIGNsYXNzZXMgd2lsbCBiZSByZW1vdmVkIGZyb20gQ29kZUNvbWJhdCBhbmQgY2Fubm90IGJlIHJlc3RvcmVkLlwiXG4jICAgIGluc3RydWN0b3I6IFwiSW5zdHJ1Y3RvcjogXCJcbiMgICAgeW91dmVfYmVlbl9pbnZpdGVkXzE6IFwiWW91J3ZlIGJlZW4gaW52aXRlZCB0byBqb2luIFwiXG4jICAgIHlvdXZlX2JlZW5faW52aXRlZF8yOiBcIiwgd2hlcmUgeW91J2xsIGxlYXJuIFwiXG4jICAgIHlvdXZlX2JlZW5faW52aXRlZF8zOiBcIiB3aXRoIHlvdXIgY2xhc3NtYXRlcyBpbiBDb2RlQ29tYmF0LlwiXG4jICAgIGJ5X2pvaW5pbmdfMTogXCJCeSBqb2luaW5nIFwiXG4jICAgIGJ5X2pvaW5pbmdfMjogXCJ3aWxsIGJlIGFibGUgdG8gaGVscCByZXNldCB5b3VyIHBhc3N3b3JkIGlmIHlvdSBmb3JnZXQgb3IgbG9zZSBpdC4gWW91IGNhbiBhbHNvIHZlcmlmeSB5b3VyIGVtYWlsIGFkZHJlc3Mgc28gdGhhdCB5b3UgY2FuIHJlc2V0IHRoZSBwYXNzd29yZCB5b3Vyc2VsZiFcIlxuIyAgICBzZW50X3ZlcmlmaWNhdGlvbjogXCJXZSd2ZSBzZW50IGEgdmVyaWZpY2F0aW9uIGVtYWlsIHRvOlwiXG4jICAgIHlvdV9jYW5fZWRpdDogXCJZb3UgY2FuIGVkaXQgeW91ciBlbWFpbCBhZGRyZXNzIGluIFwiXG4jICAgIGFjY291bnRfc2V0dGluZ3M6IFwiQWNjb3VudCBTZXR0aW5nc1wiXG4jICAgIHNlbGVjdF95b3VyX2hlcm86IFwiU2VsZWN0IFlvdXIgSGVyb1wiXG4jICAgIHNlbGVjdF95b3VyX2hlcm9fZGVzY3JpcHRpb246IFwiWW91IGNhbiBhbHdheXMgY2hhbmdlIHlvdXIgaGVybyBieSBnb2luZyB0byB5b3VyIENvdXJzZXMgcGFnZSBhbmQgY2xpY2tpbmcgXFxcIkNoYW5nZSBIZXJvXFxcIlwiXG4jICAgIHNlbGVjdF90aGlzX2hlcm86IFwiU2VsZWN0IHRoaXMgSGVyb1wiXG4jICAgIGN1cnJlbnRfaGVybzogXCJDdXJyZW50IEhlcm86XCJcbiMgICAgY3VycmVudF9oZXJvX2ZlbWFsZTogXCJDdXJyZW50IEhlcm86XCJcbiMgICAgd2ViX2Rldl9sYW5ndWFnZV90cmFuc2l0aW9uOiBcIkFsbCBjbGFzc2VzIHByb2dyYW0gaW4gSFRNTCAvIEphdmFTY3JpcHQgZm9yIHRoaXMgY291cnNlLiAgQ2xhc3NlcyB0aGF0IGhhdmUgYmVlbiB1c2luZyBQeXRob24gd2lsbCBzdGFydCB3aXRoIGV4dHJhIEphdmFTY3JpcHQgaW50cm8gbGV2ZWxzIHRvIGVhc2UgdGhlIHRyYW5zaXRpb24uICBDbGFzc2VzIHRoYXQgYXJlIGFscmVhZHkgdXNpbmcgSmF2YVNjcmlwdCB3aWxsIHNraXAgdGhlIGludHJvIGxldmVscy5cIlxuIyAgICBjb3Vyc2VfbWVtYmVyc2hpcF9yZXF1aXJlZF90b19wbGF5OiBcIllvdSdsbCBuZWVkIHRvIGpvaW4gYSBjb3Vyc2UgdG8gcGxheSB0aGlzIGxldmVsLlwiXG4jICAgIGxpY2Vuc2VfcmVxdWlyZWRfdG9fcGxheTogXCJBc2sgeW91ciB0ZWFjaGVyIHRvIGFzc2lnbiBhIGxpY2Vuc2UgdG8geW91IHNvIHlvdSBjYW4gY29udGludWUgdG8gcGxheSBDb2RlQ29tYmF0IVwiXG4jICAgIHVwZGF0ZV9vbGRfY2xhc3Nyb29tOiBcIk5ldyBzY2hvb2wgeWVhciwgbmV3IGxldmVscyFcIlxuIyAgICB1cGRhdGVfb2xkX2NsYXNzcm9vbV9kZXRhaWw6IFwiVG8gbWFrZSBzdXJlIHlvdSdyZSBnZXR0aW5nIHRoZSBtb3N0IHVwLXRvLWRhdGUgbGV2ZWxzLCBtYWtlIHN1cmUgeW91IGNyZWF0ZSBhIG5ldyBjbGFzcyBmb3IgdGhpcyBzZW1lc3RlciBieSBjbGlja2luZyBDcmVhdGUgYSBOZXcgQ2xhc3Mgb24geW91clwiXG4jICAgIHRlYWNoZXJfZGFzaGJvYXJkOiBcInRlYWNoZXIgZGFzaGJvYXJkXCJcbiMgICAgdXBkYXRlX29sZF9jbGFzc3Jvb21fZGV0YWlsXzI6IFwiYW5kIGdpdmluZyBzdHVkZW50cyB0aGUgbmV3IENsYXNzIENvZGUgdGhhdCBhcHBlYXJzLlwiXG4jICAgIHZpZXdfYXNzZXNzbWVudHM6IFwiVmlldyBBc3Nlc3NtZW50c1wiXG4jICAgIHZpZXdfY2hhbGxlbmdlczogXCJ2aWV3IGNoYWxsZW5nZSBsZXZlbHNcIlxuIyAgICB2aWV3X3Jhbmtpbmc6IFwidmlldyByYW5raW5nXCJcbiMgICAgcmFua2luZ19wb3NpdGlvbjogXCJQb3NpdGlvblwiXG4jICAgIHJhbmtpbmdfcGxheWVyczogXCJQbGF5ZXJzXCJcbiMgICAgcmFua2luZ19jb21wbGV0ZWRfbGV2ZXM6IFwiQ29tcGxldGVkIGxldmVsc1wiXG4jICAgIGNoYWxsZW5nZTogXCJDaGFsbGVuZ2U6XCJcbiMgICAgY2hhbGxlbmdlX2xldmVsOiBcIkNoYWxsZW5nZSBMZXZlbDpcIlxuIyAgICBzdGF0dXM6IFwiU3RhdHVzOlwiXG4jICAgIGFzc2Vzc21lbnRzOiBcIkFzc2Vzc21lbnRzXCJcbiMgICAgY2hhbGxlbmdlczogXCJDaGFsbGVuZ2VzXCJcbiMgICAgbGV2ZWxfbmFtZTogXCJMZXZlbCBOYW1lOlwiXG4jICAgIGtlZXBfdHJ5aW5nOiBcIktlZXAgVHJ5aW5nXCJcbiMgICAgc3RhcnRfY2hhbGxlbmdlOiBcIlN0YXJ0IENoYWxsZW5nZVwiXG4jICAgIGxvY2tlZDogXCJMb2NrZWRcIlxuIyAgICBjb25jZXB0c191c2VkOiBcIkNvbmNlcHRzIFVzZWQ6XCJcbiMgICAgc2hvd19jaGFuZ2VfbG9nOiBcIlNob3cgY2hhbmdlcyB0byB0aGlzIGNvdXJzZSdzIGxldmVsc1wiXG4jICAgIGhpZGVfY2hhbmdlX2xvZzogXCJIaWRlIGNoYW5nZXMgdG8gdGhpcyBjb3Vyc2UncyBsZXZlbHNcIlxuIyAgICBjb25jZXB0X3ZpZGVvczogXCJDb25jZXB0IFZpZGVvc1wiXG4jICAgIGNvbmNlcHQ6IFwiQ29uY2VwdDpcIlxuIyAgICBiYXNpY19zeW50YXg6IFwiQmFzaWMgU3ludGF4XCJcbiMgICAgd2hpbGVfbG9vcHM6IFwiV2hpbGUgTG9vcHNcIlxuIyAgICB2YXJpYWJsZXM6IFwiVmFyaWFibGVzXCJcbiMgICAgYmFzaWNfc3ludGF4X2Rlc2M6IFwiU3ludGF4IGlzIGhvdyB3ZSB3cml0ZSBjb2RlLiBKdXN0IGFzIHNwZWxsaW5nIGFuZCBncmFtbWFyIGFyZSBpbXBvcnRhbnQgaW4gd3JpdGluZyBuYXJyYXRpdmVzIGFuZCBlc3NheXMsIHN5bnRheCBpcyBpbXBvcnRhbnQgd2hlbiB3cml0aW5nIGNvZGUuIEh1bWFucyBhcmUgZ29vZCBhdCBmaWd1cmluZyBvdXQgd2hhdCBzb21ldGhpbmcgbWVhbnMsIGV2ZW4gaWYgaXQgaXNuJ3QgZXhhY3RseSBjb3JyZWN0LCBidXQgY29tcHV0ZXJzIGFyZW4ndCB0aGF0IHNtYXJ0LCBhbmQgdGhleSBuZWVkIHlvdSB0byB3cml0ZSB2ZXJ5IHByZWNpc2VseS5cIlxuIyAgICB3aGlsZV9sb29wc19kZXNjOiBcIkEgbG9vcCBpcyBhIHdheSBvZiByZXBlYXRpbmcgYWN0aW9ucyBpbiBhIHByb2dyYW0uIFlvdSBjYW4gdXNlIHRoZW0gc28geW91IGRvbid0IGhhdmUgdG8ga2VlcCB3cml0aW5nIHJlcGV0aXRpdmUgY29kZSwgYW5kIHdoZW4geW91IGRvbid0IGtub3cgZXhhY3RseSBob3cgbWFueSB0aW1lcyBhbiBhY3Rpb24gd2lsbCBuZWVkIHRvIG9jY3VyIHRvIGFjY29tcGxpc2ggYSB0YXNrLlwiXG4jICAgIHZhcmlhYmxlc19kZXNjOiBcIldvcmtpbmcgd2l0aCB2YXJpYWJsZXMgaXMgbGlrZSBvcmdhbml6aW5nIHRoaW5ncyBpbiBzaG9lYm94ZXMuIFlvdSBnaXZlIHRoZSBzaG9lYm94IGEgbmFtZSwgbGlrZSBcXFwiU2Nob29sIFN1cHBsaWVzXFxcIiwgYW5kIHRoZW4geW91IHB1dCB0aGluZ3MgaW5zaWRlLiBUaGUgZXhhY3QgY29udGVudHMgb2YgdGhlIGJveCBtaWdodCBjaGFuZ2Ugb3ZlciB0aW1lLCBidXQgd2hhdGV2ZXIncyBpbnNpZGUgd2lsbCBhbHdheXMgYmUgY2FsbGVkIFxcXCJTY2hvb2wgU3VwcGxpZXNcXFwiLiBJbiBwcm9ncmFtbWluZywgdmFyaWFibGVzIGFyZSBzeW1ib2xzIHVzZWQgdG8gc3RvcmUgZGF0YSB0aGF0IHdpbGwgY2hhbmdlIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgcHJvZ3JhbS4gVmFyaWFibGVzIGNhbiBob2xkIGEgdmFyaWV0eSBvZiBkYXRhIHR5cGVzLCBpbmNsdWRpbmcgbnVtYmVycyBhbmQgc3RyaW5ncy5cIlxuIyAgICBsb2NrZWRfdmlkZW9zX2Rlc2M6IFwiS2VlcCBwbGF5aW5nIHRoZSBnYW1lIHRvIHVubG9jayB0aGUgX19jb25jZXB0X25hbWVfXyBjb25jZXB0IHZpZGVvLlwiXG4jICAgIHVubG9ja2VkX3ZpZGVvc19kZXNjOiBcIlJldmlldyB0aGUgX19jb25jZXB0X25hbWVfXyBjb25jZXB0IHZpZGVvLlwiXG4jICAgIHZpZGVvX3Nob3duX2JlZm9yZTogXCJzaG93biBiZWZvcmUgX19sZXZlbF9fXCJcbiMgICAgbGlua19nb29nbGVfY2xhc3Nyb29tOiBcIkxpbmsgR29vZ2xlIENsYXNzcm9vbVwiXG4jICAgIHNlbGVjdF95b3VyX2NsYXNzcm9vbTogXCJTZWxlY3QgWW91ciBDbGFzc3Jvb21cIlxuIyAgICBub19jbGFzc3Jvb21zX2ZvdW5kOiBcIk5vIGNsYXNzcm9vbXMgZm91bmRcIlxuIyAgICBjcmVhdGVfY2xhc3Nyb29tX21hbnVhbGx5OiBcIkNyZWF0ZSBjbGFzc3Jvb20gbWFudWFsbHlcIlxuIyAgICBjbGFzc2VzOiBcIkNsYXNzZXNcIlxuIyAgICBjZXJ0aWZpY2F0ZV9idG5fcHJpbnQ6IFwiUHJpbnRcIlxuIyAgICBjZXJ0aWZpY2F0ZV9idG5fdG9nZ2xlOiBcIlRvZ2dsZVwiXG5cbiAgcHJvamVjdF9nYWxsZXJ5OlxuICAgIG5vX3Byb2plY3RzX3B1Ymxpc2hlZDogXCJWYXIgZsO2cnN0IG1lZCBhdHQgcHVibGljZXJhIGV0dCBwcm9qZWt0IGkgZGVuIGjDpHIga3Vyc2VuIVwiXG4gICAgdmlld19wcm9qZWN0OiBcIlZpc2EgcHJvamVrdFwiXG4gICAgZWRpdF9wcm9qZWN0OiBcIlJlZGlnZXJhIHByb2plbHRcIlxuXG4jICB0ZWFjaGVyOlxuIyAgICBhc3NpZ25pbmdfY291cnNlOiBcIkFzc2lnbmluZyBjb3Vyc2VcIlxuIyAgICBiYWNrX3RvX3RvcDogXCJCYWNrIHRvIFRvcFwiXG4jICAgIGNsaWNrX3N0dWRlbnRfY29kZTogXCJDbGljayBvbiBhbnkgbGV2ZWwgdGhhdCB0aGUgc3R1ZGVudCBoYXMgc3RhcnRlZCBvciBjb21wbGV0ZWQgYmVsb3cgdG8gdmlldyB0aGUgY29kZSB0aGV5IHdyb3RlLlwiXG4jICAgIGNvZGU6IFwiX19uYW1lX18ncyBDb2RlXCJcbiMgICAgY29tcGxldGVfc29sdXRpb246IFwiQ29tcGxldGUgU29sdXRpb25cIlxuIyAgICBjb3Vyc2Vfbm90X3N0YXJ0ZWQ6IFwiU3R1ZGVudCBoYXMgbm90IHN0YXJ0ZWQgdGhpcyBjb3Vyc2UgeWV0LlwiXG4jICAgIGFwcHJlY2lhdGlvbl93ZWVrX2JsdXJiMTogXCJGb3IgPHN0cm9uZz5UZWFjaGVyIEFwcHJlY2lhdGlvbiBXZWVrIDIwMTk8L3N0cm9uZz4sIHdlIGFyZSBvZmZlcmluZyBmcmVlIDEtd2VlayBsaWNlbnNlcyE8YnIgLz5FbWFpbCBSb2IgQXJldmFsbyAoPGEgaHJlZj1cXFwibWFpbHRvOnJvYmFyZXZAY29kZWNvbWJhdC5jb20/c3ViamVjdD1UZWFjaGVyIEFwcHJlY2lhdGlvbiBXZWVrXFxcIj5yb2JhcmV2QGNvZGVjb21iYXQuY29tPC9hPikgd2l0aCBzdWJqZWN0IGxpbmUgXFxcIjxzdHJvbmc+VGVhY2hlciBBcHByZWNpYXRpb24gV2Vlazwvc3Ryb25nPlxcXCIsIGFuZCBpbmNsdWRlOlwiXG4jICAgIGFwcHJlY2lhdGlvbl93ZWVrX2JsdXJiMjogXCJ0aGUgcXVhbnRpdHkgb2YgMS13ZWVrIGxpY2Vuc2VzIHlvdSdkIGxpa2UgKDEgcGVyIHN0dWRlbnQpXCJcbiMgICAgYXBwcmVjaWF0aW9uX3dlZWtfYmx1cmIzOiBcInRoZSBlbWFpbCBhZGRyZXNzIG9mIHlvdXIgQ29kZUNvbWJhdCB0ZWFjaGVyIGFjY291bnRcIlxuIyAgICBhcHByZWNpYXRpb25fd2Vla19ibHVyYjQ6IFwid2hldGhlciB5b3UnZCBsaWtlIGxpY2Vuc2VzIGZvciBXZWVrIDEgKE1heSA2LTEwKSBvciBXZWVrIDIgKE1heSAxMy0xNylcIlxuIyAgICBob2NfaGFwcHlfZWRfd2VlazogXCJIYXBweSBDb21wdXRlciBTY2llbmNlIEVkdWNhdGlvbiBXZWVrIVwiXG4jICAgIGhvY19ibHVyYjE6IFwiTGVhcm4gYWJvdXQgdGhlIGZyZWVcIlxuIyAgICBob2NfYmx1cmIyOiBcIkNvZGUsIFBsYXksIFNoYXJlXCJcbiMgICAgaG9jX2JsdXJiMzogXCJhY3Rpdml0eSwgZG93bmxvYWQgYSBuZXcgdGVhY2hlciBsZXNzb24gcGxhbiwgYW5kIHRlbGwgeW91ciBzdHVkZW50cyB0byBsb2cgaW4gdG8gcGxheSFcIlxuIyAgICBob2NfYnV0dG9uX3RleHQ6IFwiVmlldyBBY3Rpdml0eVwiXG4jICAgIG5vX2NvZGVfeWV0OiBcIlN0dWRlbnQgaGFzIG5vdCB3cml0dGVuIGFueSBjb2RlIGZvciB0aGlzIGxldmVsIHlldC5cIlxuIyAgICBvcGVuX2VuZGVkX2xldmVsOiBcIk9wZW4tRW5kZWQgTGV2ZWxcIlxuIyAgICBwYXJ0aWFsX3NvbHV0aW9uOiBcIlBhcnRpYWwgU29sdXRpb25cIlxuIyAgICByZW1vdmluZ19jb3Vyc2U6IFwiUmVtb3ZpbmcgY291cnNlXCJcbiMgICAgc29sdXRpb25fYXJlbmFfYmx1cmI6IFwiU3R1ZGVudHMgYXJlIGVuY291cmFnZWQgdG8gc29sdmUgYXJlbmEgbGV2ZWxzIGNyZWF0aXZlbHkuIFRoZSBzb2x1dGlvbiBwcm92aWRlZCBiZWxvdyBtZWV0cyB0aGUgcmVxdWlyZW1lbnRzIG9mIHRoZSBhcmVuYSBsZXZlbC5cIlxuIyAgICBzb2x1dGlvbl9jaGFsbGVuZ2VfYmx1cmI6IFwiU3R1ZGVudHMgYXJlIGVuY291cmFnZWQgdG8gc29sdmUgb3Blbi1lbmRlZCBjaGFsbGVuZ2UgbGV2ZWxzIGNyZWF0aXZlbHkuIE9uZSBwb3NzaWJsZSBzb2x1dGlvbiBpcyBkaXNwbGF5ZWQgYmVsb3cuXCJcbiMgICAgc29sdXRpb25fcHJvamVjdF9ibHVyYjogXCJTdHVkZW50cyBhcmUgZW5jb3VyYWdlZCB0byBidWlsZCBhIGNyZWF0aXZlIHByb2plY3QgaW4gdGhpcyBsZXZlbC4gUGxlYXNlIHJlZmVyIHRvIGN1cnJpY3VsdW0gZ3VpZGVzIGluIHRoZSBSZXNvdXJjZSBIdWIgZm9yIGluZm9ybWF0aW9uIG9uIGhvdyB0byBldmFsdWF0ZSB0aGVzZSBwcm9qZWN0cy5cIlxuIyAgICBzdHVkZW50c19jb2RlX2JsdXJiOiBcIkEgY29ycmVjdCBzb2x1dGlvbiB0byBlYWNoIGxldmVsIGlzIHByb3ZpZGVkIHdoZXJlIGFwcHJvcHJpYXRlLiBJbiBzb21lIGNhc2VzLCBpdOKAmXMgcG9zc2libGUgZm9yIGEgc3R1ZGVudCB0byBzb2x2ZSBhIGxldmVsIHVzaW5nIGRpZmZlcmVudCBjb2RlLiBTb2x1dGlvbnMgYXJlIG5vdCBzaG93biBmb3IgbGV2ZWxzIHRoZSBzdHVkZW50IGhhcyBub3Qgc3RhcnRlZC5cIlxuIyAgICBjb3Vyc2Vfc29sdXRpb246IFwiQ291cnNlIFNvbHV0aW9uXCJcbiMgICAgbGV2ZWxfb3ZlcnZpZXdfc29sdXRpb25zOiBcIkxldmVsIE92ZXJ2aWV3IGFuZCBTb2x1dGlvbnNcIlxuIyAgICBub19zdHVkZW50X2Fzc2lnbmVkOiBcIk5vIHN0dWRlbnRzIGhhdmUgYmVlbiBhc3NpZ25lZCB0aGlzIGNvdXJzZS5cIlxuIyAgICBwYXJlbl9uZXc6IFwiKG5ldylcIlxuIyAgICBzdHVkZW50X2NvZGU6IFwiX19uYW1lX18ncyBTdHVkZW50IENvZGVcIlxuIyAgICB0ZWFjaGVyX2Rhc2hib2FyZDogXCJUZWFjaGVyIERhc2hib2FyZFwiICMgTmF2YmFyXG4jICAgIG15X2NsYXNzZXM6IFwiTXkgQ2xhc3Nlc1wiXG4jICAgIGNvdXJzZXM6IFwiQ291cnNlIEd1aWRlc1wiXG4jICAgIGVucm9sbG1lbnRzOiBcIlN0dWRlbnQgTGljZW5zZXNcIlxuIyAgICByZXNvdXJjZXM6IFwiUmVzb3VyY2VzXCJcbiMgICAgaGVscDogXCJIZWxwXCJcbiMgICAgbGFuZ3VhZ2U6IFwiTGFuZ3VhZ2VcIlxuIyAgICBlZGl0X2NsYXNzX3NldHRpbmdzOiBcImVkaXQgY2xhc3Mgc2V0dGluZ3NcIlxuIyAgICBhY2Nlc3NfcmVzdHJpY3RlZDogXCJBY2NvdW50IFVwZGF0ZSBSZXF1aXJlZFwiXG4jICAgIHRlYWNoZXJfYWNjb3VudF9yZXF1aXJlZDogXCJBIHRlYWNoZXIgYWNjb3VudCBpcyByZXF1aXJlZCB0byBhY2Nlc3MgdGhpcyBjb250ZW50LlwiXG4jICAgIGNyZWF0ZV90ZWFjaGVyX2FjY291bnQ6IFwiQ3JlYXRlIFRlYWNoZXIgQWNjb3VudFwiXG4jICAgIHdoYXRfaXNfYV90ZWFjaGVyX2FjY291bnQ6IFwiV2hhdCdzIGEgVGVhY2hlciBBY2NvdW50P1wiXG4jICAgIHRlYWNoZXJfYWNjb3VudF9leHBsYW5hdGlvbjogXCJBIENvZGVDb21iYXQgVGVhY2hlciBhY2NvdW50IGFsbG93cyB5b3UgdG8gc2V0IHVwIGNsYXNzcm9vbXMsIG1vbml0b3Igc3R1ZGVudHPigJkgcHJvZ3Jlc3MgYXMgdGhleSB3b3JrIHRocm91Z2ggY291cnNlcywgbWFuYWdlIGxpY2Vuc2VzIGFuZCBhY2Nlc3MgcmVzb3VyY2VzIHRvIGFpZCBpbiB5b3VyIGN1cnJpY3VsdW0tYnVpbGRpbmcuXCJcbiMgICAgY3VycmVudF9jbGFzc2VzOiBcIkN1cnJlbnQgQ2xhc3Nlc1wiXG4jICAgIGFyY2hpdmVkX2NsYXNzZXM6IFwiQXJjaGl2ZWQgQ2xhc3Nlc1wiXG4jICAgIGFyY2hpdmVkX2NsYXNzZXNfYmx1cmI6IFwiQ2xhc3NlcyBjYW4gYmUgYXJjaGl2ZWQgZm9yIGZ1dHVyZSByZWZlcmVuY2UuIFVuYXJjaGl2ZSBhIGNsYXNzIHRvIHZpZXcgaXQgaW4gdGhlIEN1cnJlbnQgQ2xhc3NlcyBsaXN0IGFnYWluLlwiXG4jICAgIHZpZXdfY2xhc3M6IFwidmlldyBjbGFzc1wiXG4jICAgIGFyY2hpdmVfY2xhc3M6IFwiYXJjaGl2ZSBjbGFzc1wiXG4jICAgIHVuYXJjaGl2ZV9jbGFzczogXCJ1bmFyY2hpdmUgY2xhc3NcIlxuIyAgICB1bmFyY2hpdmVfdGhpc19jbGFzczogXCJVbmFyY2hpdmUgdGhpcyBjbGFzc1wiXG4jICAgIG5vX3N0dWRlbnRzX3lldDogXCJUaGlzIGNsYXNzIGhhcyBubyBzdHVkZW50cyB5ZXQuXCJcbiMgICAgbm9fc3R1ZGVudHNfeWV0X3ZpZXdfY2xhc3M6IFwiVmlldyBjbGFzcyB0byBhZGQgc3R1ZGVudHMuXCJcbiMgICAgdHJ5X3JlZnJlc2hpbmc6IFwiKFlvdSBtYXkgbmVlZCB0byByZWZyZXNoIHRoZSBwYWdlKVwiXG4jICAgIGNyZWF0ZV9uZXdfY2xhc3M6IFwiQ3JlYXRlIGEgTmV3IENsYXNzXCJcbiMgICAgY2xhc3Nfb3ZlcnZpZXc6IFwiQ2xhc3MgT3ZlcnZpZXdcIiAjIFZpZXcgQ2xhc3MgcGFnZVxuIyAgICBhdmdfcGxheXRpbWU6IFwiQXZlcmFnZSBsZXZlbCBwbGF5dGltZVwiXG4jICAgIHRvdGFsX3BsYXl0aW1lOiBcIlRvdGFsIHBsYXkgdGltZVwiXG4jICAgIGF2Z19jb21wbGV0ZWQ6IFwiQXZlcmFnZSBsZXZlbHMgY29tcGxldGVkXCJcbiMgICAgdG90YWxfY29tcGxldGVkOiBcIlRvdGFsIGxldmVscyBjb21wbGV0ZWRcIlxuIyAgICBjcmVhdGVkOiBcIkNyZWF0ZWRcIlxuIyAgICBjb25jZXB0c19jb3ZlcmVkOiBcIkNvbmNlcHRzIGNvdmVyZWRcIlxuIyAgICBlYXJsaWVzdF9pbmNvbXBsZXRlOiBcIkVhcmxpZXN0IGluY29tcGxldGUgbGV2ZWxcIlxuIyAgICBsYXRlc3RfY29tcGxldGU6IFwiTGF0ZXN0IGNvbXBsZXRlZCBsZXZlbFwiXG4jICAgIGVucm9sbF9zdHVkZW50OiBcIkVucm9sbCBzdHVkZW50XCJcbiMgICAgYXBwbHlfbGljZW5zZTogXCJBcHBseSBMaWNlbnNlXCJcbiMgICAgcmV2b2tlX2xpY2Vuc2U6IFwiUmV2b2tlIExpY2Vuc2VcIlxuIyAgICByZXZva2VfbGljZW5zZXM6IFwiUmV2b2tlIEFsbCBMaWNlbnNlc1wiXG4jICAgIGNvdXJzZV9wcm9ncmVzczogXCJDb3Vyc2UgUHJvZ3Jlc3NcIlxuIyAgICBub3RfYXBwbGljYWJsZTogXCJOL0FcIlxuIyAgICBlZGl0OiBcImVkaXRcIlxuIyAgICBlZGl0XzI6IFwiRWRpdFwiXG4jICAgIHJlbW92ZTogXCJyZW1vdmVcIlxuIyAgICBsYXRlc3RfY29tcGxldGVkOiBcIkxhdGVzdCBjb21wbGV0ZWQ6XCJcbiMgICAgc29ydF9ieTogXCJTb3J0IGJ5XCJcbiMgICAgcHJvZ3Jlc3M6IFwiUHJvZ3Jlc3NcIlxuIyAgICBjb25jZXB0c191c2VkOiBcIkNvbmNlcHRzIHVzZWQgYnkgU3R1ZGVudDpcIlxuIyAgICBjb25jZXB0X2NoZWNrZWQ6IFwiQ29uY2VwdCBjaGVja2VkOlwiXG4jICAgIGNvbXBsZXRlZDogXCJDb21wbGV0ZWRcIlxuIyAgICBwcmFjdGljZTogXCJQcmFjdGljZVwiXG4jICAgIHN0YXJ0ZWQ6IFwiU3RhcnRlZFwiXG4jICAgIG5vX3Byb2dyZXNzOiBcIk5vIHByb2dyZXNzXCJcbiMgICAgbm90X3JlcXVpcmVkOiBcIk5vdCByZXF1aXJlZFwiXG4jICAgIHZpZXdfc3R1ZGVudF9jb2RlOiBcIkNsaWNrIHRvIHZpZXcgc3R1ZGVudCBjb2RlXCJcbiMgICAgc2VsZWN0X2NvdXJzZTogXCJTZWxlY3QgY291cnNlIHRvIHZpZXdcIlxuIyAgICBwcm9ncmVzc19jb2xvcl9rZXk6IFwiUHJvZ3Jlc3MgY29sb3Iga2V5OlwiXG4jICAgIGxldmVsX2luX3Byb2dyZXNzOiBcIkxldmVsIGluIFByb2dyZXNzXCJcbiMgICAgbGV2ZWxfbm90X3N0YXJ0ZWQ6IFwiTGV2ZWwgTm90IFN0YXJ0ZWRcIlxuIyAgICBwcm9qZWN0X29yX2FyZW5hOiBcIlByb2plY3Qgb3IgQXJlbmFcIlxuIyAgICBzdHVkZW50c19ub3RfYXNzaWduZWQ6IFwiU3R1ZGVudHMgd2hvIGhhdmUgbm90IGJlZW4gYXNzaWduZWQge3tjb3Vyc2VOYW1lfX1cIlxuIyAgICBjb3Vyc2Vfb3ZlcnZpZXc6IFwiQ291cnNlIE92ZXJ2aWV3XCJcbiMgICAgY29weV9jbGFzc19jb2RlOiBcIkNvcHkgQ2xhc3MgQ29kZVwiXG4jICAgIGNsYXNzX2NvZGVfYmx1cmI6IFwiU3R1ZGVudHMgY2FuIGpvaW4geW91ciBjbGFzcyB1c2luZyB0aGlzIENsYXNzIENvZGUuIE5vIGVtYWlsIGFkZHJlc3MgaXMgcmVxdWlyZWQgd2hlbiBjcmVhdGluZyBhIFN0dWRlbnQgYWNjb3VudCB3aXRoIHRoaXMgQ2xhc3MgQ29kZS5cIlxuIyAgICBjb3B5X2NsYXNzX3VybDogXCJDb3B5IENsYXNzIFVSTFwiXG4jICAgIGNsYXNzX2pvaW5fdXJsX2JsdXJiOiBcIllvdSBjYW4gYWxzbyBwb3N0IHRoaXMgdW5pcXVlIGNsYXNzIFVSTCB0byBhIHNoYXJlZCB3ZWJwYWdlLlwiXG4jICAgIGFkZF9zdHVkZW50c19tYW51YWxseTogXCJJbnZpdGUgU3R1ZGVudHMgYnkgRW1haWxcIlxuIyAgICBidWxrX2Fzc2lnbjogXCJTZWxlY3QgY291cnNlXCJcbiMgICAgYXNzaWduZWRfbXNnXzE6IFwie3tudW1iZXJBc3NpZ25lZH19IHN0dWRlbnRzIHdlcmUgYXNzaWduZWQge3tjb3Vyc2VOYW1lfX0uXCJcbiMgICAgYXNzaWduZWRfbXNnXzI6IFwie3tudW1iZXJFbnJvbGxlZH19IGxpY2Vuc2VzIHdlcmUgYXBwbGllZC5cIlxuIyAgICBhc3NpZ25lZF9tc2dfMzogXCJZb3Ugbm93IGhhdmUge3tyZW1haW5pbmdTcG90c319IGF2YWlsYWJsZSBsaWNlbnNlcyByZW1haW5pbmcuXCJcbiMgICAgYXNzaWduX2NvdXJzZTogXCJBc3NpZ24gQ291cnNlXCJcbiMgICAgcmVtb3ZlZF9jb3Vyc2VfbXNnOiBcInt7bnVtYmVyUmVtb3ZlZH19IHN0dWRlbnRzIHdlcmUgcmVtb3ZlZCBmcm9tIHt7Y291cnNlTmFtZX19LlwiXG4jICAgIHJlbW92ZV9jb3Vyc2U6IFwiUmVtb3ZlIENvdXJzZVwiXG4jICAgIG5vdF9hc3NpZ25lZF9tb2RhbF90aXRsZTogXCJDb3Vyc2VzIHdlcmUgbm90IGFzc2lnbmVkXCJcbiMgICAgbm90X2Fzc2lnbmVkX21vZGFsX3N0YXJ0ZXJfYm9keV8xOiBcIlRoaXMgY291cnNlIHJlcXVpcmVzIGEgU3RhcnRlciBMaWNlbnNlLiBZb3UgZG8gbm90IGhhdmUgZW5vdWdoIFN0YXJ0ZXIgTGljZW5zZXMgYXZhaWxhYmxlIHRvIGFzc2lnbiB0aGlzIGNvdXJzZSB0byBhbGwgX19zZWxlY3RlZF9fIHNlbGVjdGVkIHN0dWRlbnRzLlwiXG4jICAgIG5vdF9hc3NpZ25lZF9tb2RhbF9zdGFydGVyX2JvZHlfMjogXCJQdXJjaGFzZSBTdGFydGVyIExpY2Vuc2VzIHRvIGdyYW50IGFjY2VzcyB0byB0aGlzIGNvdXJzZS5cIlxuIyAgICBub3RfYXNzaWduZWRfbW9kYWxfZnVsbF9ib2R5XzE6IFwiVGhpcyBjb3Vyc2UgcmVxdWlyZXMgYSBGdWxsIExpY2Vuc2UuIFlvdSBkbyBub3QgaGF2ZSBlbm91Z2ggRnVsbCBMaWNlbnNlcyBhdmFpbGFibGUgdG8gYXNzaWduIHRoaXMgY291cnNlIHRvIGFsbCBfX3NlbGVjdGVkX18gc2VsZWN0ZWQgc3R1ZGVudHMuXCJcbiMgICAgbm90X2Fzc2lnbmVkX21vZGFsX2Z1bGxfYm9keV8yOiBcIllvdSBvbmx5IGhhdmUgX19udW1GdWxsTGljZW5zZXNBdmFpbGFibGVfXyBGdWxsIExpY2Vuc2VzIGF2YWlsYWJsZSAoX19udW1TdHVkZW50c1dpdGhvdXRGdWxsTGljZW5zZXNfXyBzdHVkZW50cyBkbyBub3QgY3VycmVudGx5IGhhdmUgYSBGdWxsIExpY2Vuc2UgYWN0aXZlKS5cIlxuIyAgICBub3RfYXNzaWduZWRfbW9kYWxfZnVsbF9ib2R5XzM6IFwiUGxlYXNlIHNlbGVjdCBmZXdlciBzdHVkZW50cywgb3IgcmVhY2ggb3V0IHRvIF9fc3VwcG9ydEVtYWlsX18gZm9yIGFzc2lzdGFuY2UuXCJcbiMgICAgYXNzaWduZWQ6IFwiQXNzaWduZWRcIlxuIyAgICBlbnJvbGxfc2VsZWN0ZWRfc3R1ZGVudHM6IFwiRW5yb2xsIFNlbGVjdGVkIFN0dWRlbnRzXCJcbiMgICAgbm9fc3R1ZGVudHNfc2VsZWN0ZWQ6IFwiTm8gc3R1ZGVudHMgd2VyZSBzZWxlY3RlZC5cIlxuIyAgICBzaG93X3N0dWRlbnRzX2Zyb206IFwiU2hvdyBzdHVkZW50cyBmcm9tXCIgIyBFbnJvbGwgc3R1ZGVudHMgbW9kYWxcbiMgICAgYXBwbHlfbGljZW5zZXNfdG9fdGhlX2ZvbGxvd2luZ19zdHVkZW50czogXCJBcHBseSBMaWNlbnNlcyB0byB0aGUgRm9sbG93aW5nIFN0dWRlbnRzXCJcbiMgICAgc3R1ZGVudHNfaGF2ZV9saWNlbnNlczogXCJUaGUgZm9sbG93aW5nIHN0dWRlbnRzIGFscmVhZHkgaGF2ZSBsaWNlbnNlcyBhcHBsaWVkOlwiXG4jICAgIGFsbF9zdHVkZW50czogXCJBbGwgU3R1ZGVudHNcIlxuIyAgICBhcHBseV9saWNlbnNlczogXCJBcHBseSBMaWNlbnNlc1wiXG4jICAgIG5vdF9lbm91Z2hfZW5yb2xsbWVudHM6IFwiTm90IGVub3VnaCBsaWNlbnNlcyBhdmFpbGFibGUuXCJcbiMgICAgZW5yb2xsbWVudHNfYmx1cmI6IFwiU3R1ZGVudHMgYXJlIHJlcXVpcmVkIHRvIGhhdmUgYSBsaWNlbnNlIHRvIGFjY2VzcyBhbnkgY29udGVudCBhZnRlciB0aGUgZmlyc3QgY291cnNlLlwiXG4jICAgIGhvd190b19hcHBseV9saWNlbnNlczogXCJIb3cgdG8gQXBwbHkgTGljZW5zZXNcIlxuIyAgICBleHBvcnRfc3R1ZGVudF9wcm9ncmVzczogXCJFeHBvcnQgU3R1ZGVudCBQcm9ncmVzcyAoQ1NWKVwiXG4jICAgIHNlbmRfZW1haWxfdG86IFwiU2VuZCBSZWNvdmVyIFBhc3N3b3JkIEVtYWlsIHRvOlwiXG4jICAgIGVtYWlsX3NlbnQ6IFwiRW1haWwgc2VudFwiXG4jICAgIHNlbmRfcmVjb3ZlcnlfZW1haWw6IFwiU2VuZCByZWNvdmVyeSBlbWFpbFwiXG4jICAgIGVudGVyX25ld19wYXNzd29yZF9iZWxvdzogXCJFbnRlciBuZXcgcGFzc3dvcmQgYmVsb3c6XCJcbiMgICAgY2hhbmdlX3Bhc3N3b3JkOiBcIkNoYW5nZSBQYXNzd29yZFwiXG4jICAgIGNoYW5nZWQ6IFwiQ2hhbmdlZFwiXG4jICAgIGF2YWlsYWJsZV9jcmVkaXRzOiBcIkF2YWlsYWJsZSBMaWNlbnNlc1wiXG4jICAgIHBlbmRpbmdfY3JlZGl0czogXCJQZW5kaW5nIExpY2Vuc2VzXCJcbiMgICAgZW1wdHlfY3JlZGl0czogXCJFeGhhdXN0ZWQgTGljZW5zZXNcIlxuIyAgICBsaWNlbnNlX3JlbWFpbmluZzogXCJsaWNlbnNlIHJlbWFpbmluZ1wiXG4jICAgIGxpY2Vuc2VzX3JlbWFpbmluZzogXCJsaWNlbnNlcyByZW1haW5pbmdcIlxuIyAgICBvbmVfbGljZW5zZV91c2VkOiBcIjEgb3V0IG9mIF9fdG90YWxMaWNlbnNlc19fIGxpY2Vuc2VzIGhhcyBiZWVuIHVzZWRcIlxuIyAgICBudW1fbGljZW5zZXNfdXNlZDogXCJfX251bUxpY2Vuc2VzVXNlZF9fIG91dCBvZiBfX3RvdGFsTGljZW5zZXNfXyBsaWNlbnNlcyBoYXZlIGJlZW4gdXNlZFwiXG4jICAgIHN0YXJ0ZXJfbGljZW5zZXM6IFwic3RhcnRlciBsaWNlbnNlc1wiXG4jICAgIHN0YXJ0X2RhdGU6IFwic3RhcnQgZGF0ZTpcIlxuIyAgICBlbmRfZGF0ZTogXCJlbmQgZGF0ZTpcIlxuIyAgICBnZXRfZW5yb2xsbWVudHNfYmx1cmI6IFwiIFdlJ2xsIGhlbHAgeW91IGJ1aWxkIGEgc29sdXRpb24gdGhhdCBtZWV0cyB0aGUgbmVlZHMgb2YgeW91ciBjbGFzcywgc2Nob29sIG9yIGRpc3RyaWN0LlwiXG4jICAgIGhvd190b19hcHBseV9saWNlbnNlc19ibHVyYl8xOiBcIldoZW4gYSB0ZWFjaGVyIGFzc2lnbnMgYSBjb3Vyc2UgdG8gYSBzdHVkZW50IGZvciB0aGUgZmlyc3QgdGltZSwgd2XigJlsbCBhdXRvbWF0aWNhbGx5IGFwcGx5IGEgbGljZW5zZS4gVXNlIHRoZSBidWxrLWFzc2lnbiBkcm9wZG93biBpbiB5b3VyIGNsYXNzcm9vbSB0byBhc3NpZ24gYSBjb3Vyc2UgdG8gc2VsZWN0ZWQgc3R1ZGVudHM6XCJcbiMgICAgaG93X3RvX2FwcGx5X2xpY2Vuc2VzX2JsdXJiXzI6IFwiQ2FuIEkgc3RpbGwgYXBwbHkgYSBsaWNlbnNlIHdpdGhvdXQgYXNzaWduaW5nIGEgY291cnNlP1wiXG4jICAgIGhvd190b19hcHBseV9saWNlbnNlc19ibHVyYl8zOiBcIlllcyDigJQgZ28gdG8gdGhlIExpY2Vuc2UgU3RhdHVzIHRhYiBpbiB5b3VyIGNsYXNzcm9vbSBhbmQgY2xpY2sgXFxcIkFwcGx5IExpY2Vuc2VcXFwiIHRvIGFueSBzdHVkZW50IHdobyBkb2VzIG5vdCBoYXZlIGFuIGFjdGl2ZSBsaWNlbnNlLlwiXG4jICAgIHJlcXVlc3Rfc2VudDogXCJSZXF1ZXN0IFNlbnQhXCJcbiMgICAgYXNzZXNzbWVudHM6IFwiQXNzZXNzbWVudHNcIlxuIyAgICBsaWNlbnNlX3N0YXR1czogXCJMaWNlbnNlIFN0YXR1c1wiXG4jICAgIHN0YXR1c19leHBpcmVkOiBcIkV4cGlyZWQgb24ge3tkYXRlfX1cIlxuIyAgICBzdGF0dXNfbm90X2Vucm9sbGVkOiBcIk5vdCBFbnJvbGxlZFwiXG4jICAgIHN0YXR1c19lbnJvbGxlZDogXCJFeHBpcmVzIG9uIHt7ZGF0ZX19XCJcbiMgICAgc2VsZWN0X2FsbDogXCJTZWxlY3QgQWxsXCJcbiMgICAgcHJvamVjdDogXCJQcm9qZWN0XCJcbiMgICAgcHJvamVjdF9nYWxsZXJ5OiBcIlByb2plY3QgR2FsbGVyeVwiXG4jICAgIHZpZXdfcHJvamVjdDogXCJWaWV3IFByb2plY3RcIlxuIyAgICB1bnB1Ymxpc2hlZDogXCIodW5wdWJsaXNoZWQpXCJcbiMgICAgdmlld19hcmVuYV9sYWRkZXI6IFwiVmlldyBBcmVuYSBMYWRkZXJcIlxuIyAgICByZXNvdXJjZV9odWI6IFwiUmVzb3VyY2UgSHViXCJcbiMgICAgcGFjaW5nX2d1aWRlczogXCJDbGFzc3Jvb20taW4tYS1Cb3ggUGFjaW5nIEd1aWRlc1wiXG4jICAgIHBhY2luZ19ndWlkZXNfZGVzYzogXCJMZWFybiBob3cgdG8gaW5jb3Jwb3JhdGUgYWxsIG9mIENvZGVDb21iYXQncyByZXNvdXJjZXMgdG8gcGxhbiB5b3VyIHNjaG9vbCB5ZWFyIVwiXG4jICAgIHBhY2luZ19ndWlkZXNfZWxlbTogXCJFbGVtZW50YXJ5IFNjaG9vbCBQYWNpbmcgR3VpZGVcIlxuIyAgICBwYWNpbmdfZ3VpZGVzX21pZGRsZTogXCJNaWRkbGUgU2Nob29sIFBhY2luZyBHdWlkZVwiXG4jICAgIHBhY2luZ19ndWlkZXNfaGlnaDogXCJIaWdoIFNjaG9vbCBQYWNpbmcgR3VpZGVcIlxuIyAgICBnZXR0aW5nX3N0YXJ0ZWQ6IFwiR2V0dGluZyBTdGFydGVkXCJcbiMgICAgZWR1Y2F0b3JfZmFxOiBcIkVkdWNhdG9yIEZBUVwiXG4jICAgIGVkdWNhdG9yX2ZhcV9kZXNjOiBcIkZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zIGFib3V0IHVzaW5nIENvZGVDb21iYXQgaW4geW91ciBjbGFzc3Jvb20gb3Igc2Nob29sLlwiXG4jICAgIHRlYWNoZXJfZ2V0dGluZ19zdGFydGVkOiBcIlRlYWNoZXIgR2V0dGluZyBTdGFydGVkIEd1aWRlXCJcbiMgICAgdGVhY2hlcl9nZXR0aW5nX3N0YXJ0ZWRfZGVzYzogXCJOZXcgdG8gQ29kZUNvbWJhdD8gRG93bmxvYWQgdGhpcyBUZWFjaGVyIEdldHRpbmcgU3RhcnRlZCBHdWlkZSB0byBzZXQgdXAgeW91ciBhY2NvdW50LCBjcmVhdGUgeW91ciBmaXJzdCBjbGFzcywgYW5kIGludml0ZSBzdHVkZW50cyB0byB0aGUgZmlyc3QgY291cnNlLlwiXG4jICAgIHN0dWRlbnRfZ2V0dGluZ19zdGFydGVkOiBcIlN0dWRlbnQgUXVpY2sgU3RhcnQgR3VpZGVcIlxuIyAgICBzdHVkZW50X2dldHRpbmdfc3RhcnRlZF9kZXNjOiBcIllvdSBjYW4gZGlzdHJpYnV0ZSB0aGlzIGd1aWRlIHRvIHlvdXIgc3R1ZGVudHMgYmVmb3JlIHN0YXJ0aW5nIENvZGVDb21iYXQgc28gdGhhdCB0aGV5IGNhbiBmYW1pbGlhcml6ZSB0aGVtc2VsdmVzIHdpdGggdGhlIGNvZGUgZWRpdG9yLiBUaGlzIGd1aWRlIGNhbiBiZSB1c2VkIGZvciBib3RoIFB5dGhvbiBhbmQgSmF2YVNjcmlwdCBjbGFzc3Jvb21zLlwiXG4jICAgIGFwX2NzX3ByaW5jaXBsZXM6IFwiQVAgQ29tcHV0ZXIgU2NpZW5jZSBQcmluY2lwbGVzXCJcbiMgICAgYXBfY3NfcHJpbmNpcGxlc19kZXNjOiBcIkFQIENvbXB1dGVyIFNjaWVuY2UgUHJpbmNpcGxlcyBnaXZlcyBzdHVkZW50cyBhIGJyb2FkIGludHJvZHVjdGlvbiB0byB0aGUgcG93ZXIsIGltcGFjdCwgYW5kIHBvc3NpYmlsaXRpZXMgb2YgQ29tcHV0ZXIgU2NpZW5jZS4gVGhlIGNvdXJzZSBlbXBoYXNpemVzIGNvbXB1dGF0aW9uYWwgdGhpbmtpbmcgYW5kIHByb2JsZW0gc29sdmluZyB3aGlsZSBhbHNvIHRlYWNoaW5nIHRoZSBiYXNpY3Mgb2YgcHJvZ3JhbW1pbmcuXCJcbiMgICAgY3MxOiBcIkludHJvZHVjdGlvbiB0byBDb21wdXRlciBTY2llbmNlXCJcbiMgICAgY3MyOiBcIkNvbXB1dGVyIFNjaWVuY2UgMlwiXG4jICAgIGNzMzogXCJDb21wdXRlciBTY2llbmNlIDNcIlxuIyAgICBjczQ6IFwiQ29tcHV0ZXIgU2NpZW5jZSA0XCJcbiMgICAgY3M1OiBcIkNvbXB1dGVyIFNjaWVuY2UgNVwiXG4jICAgIGNzMV9zeW50YXhfcHl0aG9uOiBcIkNvdXJzZSAxIFB5dGhvbiBTeW50YXggR3VpZGVcIlxuIyAgICBjczFfc3ludGF4X3B5dGhvbl9kZXNjOiBcIkNoZWF0c2hlZXQgd2l0aCByZWZlcmVuY2VzIHRvIGNvbW1vbiBQeXRob24gc3ludGF4IHRoYXQgc3R1ZGVudHMgd2lsbCBsZWFybiBpbiBJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZS5cIlxuIyAgICBjczFfc3ludGF4X2phdmFzY3JpcHQ6IFwiQ291cnNlIDEgSmF2YVNjcmlwdCBTeW50YXggR3VpZGVcIlxuIyAgICBjczFfc3ludGF4X2phdmFzY3JpcHRfZGVzYzogXCJDaGVhdHNoZWV0IHdpdGggcmVmZXJlbmNlcyB0byBjb21tb24gSmF2YVNjcmlwdCBzeW50YXggdGhhdCBzdHVkZW50cyB3aWxsIGxlYXJuIGluIEludHJvZHVjdGlvbiB0byBDb21wdXRlciBTY2llbmNlLlwiXG4jICAgIGNvbWluZ19zb29uOiBcIkFkZGl0aW9uYWwgZ3VpZGVzIGNvbWluZyBzb29uIVwiXG4jICAgIGVuZ2luZWVyaW5nX2N5Y2xlX3dvcmtzaGVldDogXCJFbmdpbmVlcmluZyBDeWNsZSBXb3Jrc2hlZXRcIlxuIyAgICBlbmdpbmVlcmluZ19jeWNsZV93b3Jrc2hlZXRfZGVzYzogXCJVc2UgdGhpcyB3b3Jrc2hlZXQgdG8gdGVhY2ggc3R1ZGVudHMgdGhlIGJhc2ljcyBvZiB0aGUgZW5naW5lZXJpbmcgY3ljbGU6IEFzc2VzcywgRGVzaWduLCBJbXBsZW1lbnQgYW5kIERlYnVnLiBSZWZlciB0byB0aGUgY29tcGxldGVkIGV4YW1wbGUgd29ya3NoZWV0IGFzIGEgZ3VpZGUuXCJcbiMgICAgZW5naW5lZXJpbmdfY3ljbGVfd29ya3NoZWV0X2xpbms6IFwiVmlldyBleGFtcGxlXCJcbiMgICAgcHJvZ3Jlc3Nfam91cm5hbDogXCJQcm9ncmVzcyBKb3VybmFsXCJcbiMgICAgcHJvZ3Jlc3Nfam91cm5hbF9kZXNjOiBcIkVuY291cmFnZSBzdHVkZW50cyB0byBrZWVwIHRyYWNrIG9mIHRoZWlyIHByb2dyZXNzIHZpYSBhIHByb2dyZXNzIGpvdXJuYWwuXCJcbiMgICAgY3MxX2N1cnJpY3VsdW06IFwiSW50cm9kdWN0aW9uIHRvIENvbXB1dGVyIFNjaWVuY2UgLSBDdXJyaWN1bHVtIEd1aWRlXCJcbiMgICAgY3MxX2N1cnJpY3VsdW1fZGVzYzogXCJTY29wZSBhbmQgc2VxdWVuY2UsIGxlc3NvbiBwbGFucywgYWN0aXZpdGllcyBhbmQgbW9yZSBmb3IgQ291cnNlIDEuXCJcbiMgICAgYXJlbmFzX2N1cnJpY3VsdW06IFwiQXJlbmEgTGV2ZWxzIC0gVGVhY2hlciBHdWlkZVwiXG4jICAgIGFyZW5hc19jdXJyaWN1bHVtX2Rlc2M6IFwiSW5zdHJ1Y3Rpb25zIG9uIGhvdyB0byBydW4gV2Fra2EgTWF1bCwgQ3Jvc3MgQm9uZXMgYW5kIFBvd2VyIFBlYWsgbXVsdGlwbGF5ZXIgYXJlbmFzIHdpdGggeW91ciBjbGFzcy5cIlxuIyAgICBhc3Nlc3NtZW50c19jdXJyaWN1bHVtOiBcIkFzc2Vzc21lbnQgTGV2ZWxzIC0gVGVhY2hlciBHdWlkZVwiXG4jICAgIGFzc2Vzc21lbnRzX2N1cnJpY3VsdW1fZGVzYzogXCJMZWFybiBob3cgdG8gdXNlIENoYWxsZW5nZSBMZXZlbHMgYW5kIENvbWJvIENoYWxsZW5nZSBsZXZlbHMgdG8gYXNzZXNzIHN0dWRlbnRzJyBsZWFybmluZyBvdXRjb21lcy5cIlxuIyAgICBjczJfY3VycmljdWx1bTogXCJDb21wdXRlciBTY2llbmNlIDIgLSBDdXJyaWN1bHVtIEd1aWRlXCJcbiMgICAgY3MyX2N1cnJpY3VsdW1fZGVzYzogXCJTY29wZSBhbmQgc2VxdWVuY2UsIGxlc3NvbiBwbGFucywgYWN0aXZpdGllcyBhbmQgbW9yZSBmb3IgQ291cnNlIDIuXCJcbiMgICAgY3MzX2N1cnJpY3VsdW06IFwiQ29tcHV0ZXIgU2NpZW5jZSAzIC0gQ3VycmljdWx1bSBHdWlkZVwiXG4jICAgIGNzM19jdXJyaWN1bHVtX2Rlc2M6IFwiU2NvcGUgYW5kIHNlcXVlbmNlLCBsZXNzb24gcGxhbnMsIGFjdGl2aXRpZXMgYW5kIG1vcmUgZm9yIENvdXJzZSAzLlwiXG4jICAgIGNzNF9jdXJyaWN1bHVtOiBcIkNvbXB1dGVyIFNjaWVuY2UgNCAtIEN1cnJpY3VsdW0gR3VpZGVcIlxuIyAgICBjczRfY3VycmljdWx1bV9kZXNjOiBcIlNjb3BlIGFuZCBzZXF1ZW5jZSwgbGVzc29uIHBsYW5zLCBhY3Rpdml0aWVzIGFuZCBtb3JlIGZvciBDb3Vyc2UgNC5cIlxuIyAgICBjczVfY3VycmljdWx1bV9qczogXCJDb21wdXRlciBTY2llbmNlIDUgLSBDdXJyaWN1bHVtIEd1aWRlIChKYXZhU2NyaXB0KVwiXG4jICAgIGNzNV9jdXJyaWN1bHVtX2Rlc2NfanM6IFwiU2NvcGUgYW5kIHNlcXVlbmNlLCBsZXNzb24gcGxhbnMsIGFjdGl2aXRpZXMgYW5kIG1vcmUgZm9yIENvdXJzZSA1IGNsYXNzZXMgdXNpbmcgSmF2YVNjcmlwdC5cIlxuIyAgICBjczVfY3VycmljdWx1bV9weTogXCJDb21wdXRlciBTY2llbmNlIDUgLSBDdXJyaWN1bHVtIEd1aWRlIChQeXRob24pXCJcbiMgICAgY3M1X2N1cnJpY3VsdW1fZGVzY19weTogXCJTY29wZSBhbmQgc2VxdWVuY2UsIGxlc3NvbiBwbGFucywgYWN0aXZpdGllcyBhbmQgbW9yZSBmb3IgQ291cnNlIDUgY2xhc3NlcyB1c2luZyBQeXRob24uXCJcbiMgICAgY3MxX3BhaXJwcm9ncmFtbWluZzogXCJQYWlyIFByb2dyYW1taW5nIEFjdGl2aXR5XCJcbiMgICAgY3MxX3BhaXJwcm9ncmFtbWluZ19kZXNjOiBcIkludHJvZHVjZSBzdHVkZW50cyB0byBhIHBhaXIgcHJvZ3JhbW1pbmcgZXhlcmNpc2UgdGhhdCB3aWxsIGhlbHAgdGhlbSBiZWNvbWUgYmV0dGVyIGxpc3RlbmVycyBhbmQgY29tbXVuaWNhdG9ycy5cIlxuIyAgICBnZDE6IFwiR2FtZSBEZXZlbG9wbWVudCAxXCJcbiMgICAgZ2QxX2d1aWRlOiBcIkdhbWUgRGV2ZWxvcG1lbnQgMSAtIFByb2plY3QgR3VpZGVcIlxuIyAgICBnZDFfZ3VpZGVfZGVzYzogXCJVc2UgdGhpcyB0byBndWlkZSB5b3VyIHN0dWRlbnRzIGFzIHRoZXkgY3JlYXRlIHRoZWlyIGZpcnN0IHNoYXJlYWJsZSBnYW1lIHByb2plY3QgaW4gNSBkYXlzLlwiXG4jICAgIGdkMV9ydWJyaWM6IFwiR2FtZSBEZXZlbG9wbWVudCAxIC0gUHJvamVjdCBSdWJyaWNcIlxuIyAgICBnZDFfcnVicmljX2Rlc2M6IFwiVXNlIHRoaXMgcnVicmljIHRvIGFzc2VzcyBzdHVkZW50IHByb2plY3RzIGF0IHRoZSBlbmQgb2YgR2FtZSBEZXZlbG9wbWVudCAxLlwiXG4jICAgIGdkMjogXCJHYW1lIERldmVsb3BtZW50IDJcIlxuIyAgICBnZDJfY3VycmljdWx1bTogXCJHYW1lIERldmVsb3BtZW50IDIgLSBDdXJyaWN1bHVtIEd1aWRlXCJcbiMgICAgZ2QyX2N1cnJpY3VsdW1fZGVzYzogXCJMZXNzb24gcGxhbnMgZm9yIEdhbWUgRGV2ZWxvcG1lbnQgMi5cIlxuIyAgICBnZDM6IFwiR2FtZSBEZXZlbG9wbWVudCAzXCJcbiMgICAgZ2QzX2N1cnJpY3VsdW06IFwiR2FtZSBEZXZlbG9wbWVudCAzIC0gQ3VycmljdWx1bSBHdWlkZVwiXG4jICAgIGdkM19jdXJyaWN1bHVtX2Rlc2M6IFwiTGVzc29uIHBsYW5zIGZvciBHYW1lIERldmVsb3BtZW50IDMuXCJcbiMgICAgd2QxOiBcIldlYiBEZXZlbG9wbWVudCAxXCJcbiMgICAgd2QxX2N1cnJpY3VsdW06IFwiV2ViIERldmVsb3BtZW50IDEgLSBDdXJyaWN1bHVtIEd1aWRlXCJcbiMgICAgd2QxX2N1cnJpY3VsdW1fZGVzYzogXCJTY29wZSBhbmQgc2VxdWVuY2UsIGxlc3NvbiBwbGFucywgYWN0aXZpdGllcywgYW5kIG1vcmUgZm9yIFdlYiBEZXZlbG9wbWVudCAxLlwiXG4jICAgIHdkMV9oZWFkbGluZXM6IFwiSGVhZGxpbmVzICYgSGVhZGVycyBBY3Rpdml0eVwiXG4jICAgIHdkMV9oZWFkbGluZXNfZXhhbXBsZTogXCJWaWV3IHNhbXBsZSBzb2x1dGlvblwiXG4jICAgIHdkMV9oZWFkbGluZXNfZGVzYzogXCJXaHkgYXJlIHBhcmFncmFwaCBhbmQgaGVhZGVyIHRhZ3MgaW1wb3J0YW50PyBVc2UgdGhpcyBhY3Rpdml0eSB0byBzaG93IGhvdyB3ZWxsLWNob3NlbiBoZWFkZXJzIG1ha2Ugd2ViIHBhZ2VzIGVhc2llciB0byByZWFkLiBUaGVyZSBhcmUgbWFueSBjb3JyZWN0IHNvbHV0aW9ucyB0byB0aGlzIVwiXG4jICAgIHdkMV9odG1sX3N5bnRheDogXCJIVE1MIFN5bnRheCBHdWlkZVwiXG4jICAgIHdkMV9odG1sX3N5bnRheF9kZXNjOiBcIk9uZS1wYWdlIHJlZmVyZW5jZSBmb3IgdGhlIEhUTUwgc3R5bGUgc3R1ZGVudHMgd2lsbCBsZWFybiBpbiBXZWIgRGV2ZWxvcG1lbnQgMS5cIlxuIyAgICB3ZDFfY3NzX3N5bnRheDogXCJDU1MgU3ludGF4IEd1aWRlXCJcbiMgICAgd2QxX2Nzc19zeW50YXhfZGVzYzogXCJPbmUtcGFnZSByZWZlcmVuY2UgZm9yIHRoZSBDU1MgYW5kIFN0eWxlIHN5bnRheCBzdHVkZW50cyB3aWxsIGxlYXJuIGluIFdlYiBEZXZlbG9wbWVudCAxLlwiXG4jICAgIHdkMjogXCJXZWIgRGV2ZWxvcG1lbnQgMlwiXG4jICAgIHdkMl9qcXVlcnlfc3ludGF4OiBcImpRdWVyeSBGdW5jdGlvbnMgU3ludGF4IEd1aWRlXCJcbiMgICAgd2QyX2pxdWVyeV9zeW50YXhfZGVzYzogXCJPbmUtcGFnZSByZWZlcmVuY2UgZm9yIHRoZSBqUXVlcnkgZnVuY3Rpb25zIHN0dWRlbnRzIHdpbGwgbGVhcm4gaW4gV2ViIERldmVsb3BtZW50IDIuXCJcbiMgICAgd2QyX3F1aXpsZXRfd29ya3NoZWV0OiBcIlF1aXpsZXQgUGxhbm5pbmcgV29ya3NoZWV0XCJcbiMgICAgd2QyX3F1aXpsZXRfd29ya3NoZWV0X2luc3RydWN0aW9uczogXCJWaWV3IGluc3RydWN0aW9ucyAmIGV4YW1wbGVzXCJcbiMgICAgd2QyX3F1aXpsZXRfd29ya3NoZWV0X2Rlc2M6IFwiQmVmb3JlIHlvdXIgc3R1ZGVudHMgYnVpbGQgdGhlaXIgcGVyc29uYWxpdHkgcXVpeiBwcm9qZWN0IGF0IHRoZSBlbmQgb2YgV2ViIERldmVsb3BtZW50IDIsIHRoZXkgc2hvdWxkIHBsYW4gb3V0IHRoZWlyIHF1aXogcXVlc3Rpb25zLCBvdXRjb21lcyBhbmQgcmVzcG9uc2VzIHVzaW5nIHRoaXMgd29ya3NoZWV0LiBUZWFjaGVycyBjYW4gZGlzdHJpYnV0ZSB0aGUgaW5zdHJ1Y3Rpb25zIGFuZCBleGFtcGxlcyBmb3Igc3R1ZGVudHMgdG8gcmVmZXIgdG8uXCJcbiMgICAgc3R1ZGVudF9vdmVydmlldzogXCJPdmVydmlld1wiXG4jICAgIHN0dWRlbnRfZGV0YWlsczogXCJTdHVkZW50IERldGFpbHNcIlxuIyAgICBzdHVkZW50X25hbWU6IFwiU3R1ZGVudCBOYW1lXCJcbiMgICAgbm9fbmFtZTogXCJObyBuYW1lIHByb3ZpZGVkLlwiXG4jICAgIG5vX3VzZXJuYW1lOiBcIk5vIHVzZXJuYW1lIHByb3ZpZGVkLlwiXG4jICAgIG5vX2VtYWlsOiBcIlN0dWRlbnQgaGFzIG5vIGVtYWlsIGFkZHJlc3Mgc2V0LlwiXG4jICAgIHN0dWRlbnRfcHJvZmlsZTogXCJTdHVkZW50IFByb2ZpbGVcIlxuIyAgICBwbGF5dGltZV9kZXRhaWw6IFwiUGxheXRpbWUgRGV0YWlsXCJcbiMgICAgc3R1ZGVudF9jb21wbGV0ZWQ6IFwiU3R1ZGVudCBDb21wbGV0ZWRcIlxuIyAgICBzdHVkZW50X2luX3Byb2dyZXNzOiBcIlN0dWRlbnQgaW4gUHJvZ3Jlc3NcIlxuIyAgICBjbGFzc19hdmVyYWdlOiBcIkNsYXNzIEF2ZXJhZ2VcIlxuIyAgICBub3RfYXNzaWduZWQ6IFwiaGFzIG5vdCBiZWVuIGFzc2lnbmVkIHRoZSBmb2xsb3dpbmcgY291cnNlc1wiXG4jICAgIHBsYXl0aW1lX2F4aXM6IFwiUGxheXRpbWUgaW4gU2Vjb25kc1wiXG4jICAgIGxldmVsc19heGlzOiBcIkxldmVscyBpblwiXG4jICAgIHN0dWRlbnRfc3RhdGU6IFwiSG93IGlzXCJcbiMgICAgc3R1ZGVudF9zdGF0ZV8yOiBcImRvaW5nP1wiXG4jICAgIHN0dWRlbnRfZ29vZDogXCJpcyBkb2luZyB3ZWxsIGluXCJcbiMgICAgc3R1ZGVudF9nb29kX2RldGFpbDogXCJUaGlzIHN0dWRlbnQgaXMga2VlcGluZyBwYWNlIHdpdGggdGhlIGNsYXNzLlwiXG4jICAgIHN0dWRlbnRfd2FybjogXCJtaWdodCBuZWVkIHNvbWUgaGVscCBpblwiXG4jICAgIHN0dWRlbnRfd2Fybl9kZXRhaWw6IFwiVGhpcyBzdHVkZW50IG1pZ2h0IG5lZWQgc29tZSBoZWxwIHdpdGggbmV3IGNvbmNlcHRzIHRoYXQgaGF2ZSBiZWVuIGludHJvZHVjZWQgaW4gdGhpcyBjb3Vyc2UuXCJcbiMgICAgc3R1ZGVudF9ncmVhdDogXCJpcyBkb2luZyBncmVhdCBpblwiXG4jICAgIHN0dWRlbnRfZ3JlYXRfZGV0YWlsOiBcIlRoaXMgc3R1ZGVudCBtaWdodCBiZSBhIGdvb2QgY2FuZGlkYXRlIHRvIGhlbHAgb3RoZXIgc3R1ZGVudHMgd29ya2luZyB0aHJvdWdoIHRoaXMgY291cnNlLlwiXG4jICAgIGZ1bGxfbGljZW5zZTogXCJGdWxsIExpY2Vuc2VcIlxuIyAgICBzdGFydGVyX2xpY2Vuc2U6IFwiU3RhcnRlciBMaWNlbnNlXCJcbiMgICAgdHJpYWw6IFwiVHJpYWxcIlxuIyAgICBob2Nfd2VsY29tZTogXCJIYXBweSBDb21wdXRlciBTY2llbmNlIEVkdWNhdGlvbiBXZWVrXCJcbiMgICAgaG9jX3RpdGxlOiBcIkhvdXIgb2YgQ29kZSBHYW1lcyAtIEZyZWUgQWN0aXZpdGllcyB0byBMZWFybiBSZWFsIENvZGluZyBMYW5ndWFnZXNcIlxuIyAgICBob2NfbWV0YV9kZXNjcmlwdGlvbjogXCJNYWtlIHlvdXIgb3duIGdhbWUgb3IgY29kZSB5b3VyIHdheSBvdXQgb2YgYSBkdW5nZW9uISBDb2RlQ29tYmF0IGhhcyBmb3VyIGRpZmZlcmVudCBIb3VyIG9mIENvZGUgYWN0aXZpdGllcyBhbmQgb3ZlciA2MCBsZXZlbHMgdG8gbGVhcm4gY29kZSwgcGxheSwgYW5kIGNyZWF0ZS5cIlxuIyAgICBob2NfaW50cm86IFwiVGhlcmUgYXJlIHRocmVlIHdheXMgZm9yIHlvdXIgY2xhc3MgdG8gcGFydGljaXBhdGUgaW4gSG91ciBvZiBDb2RlIHdpdGggQ29kZUNvbWJhdFwiXG4jICAgIGhvY19zZWxmX2xlZDogXCJTZWxmLUxlZCBHYW1lcGxheVwiXG4jICAgIGhvY19zZWxmX2xlZF9kZXNjOiBcIlN0dWRlbnRzIGNhbiBwbGF5IHRocm91Z2ggdHdvIEhvdXIgb2YgQ29kZSBDb2RlQ29tYmF0IHR1dG9yaWFscyBvbiB0aGVpciBvd25cIlxuIyAgICBob2NfZ2FtZV9kZXY6IFwiR2FtZSBEZXZlbG9wbWVudFwiXG4jICAgIGhvY19hbmQ6IFwiYW5kXCJcbiMgICAgaG9jX3Byb2dyYW1taW5nOiBcIkphdmFTY3JpcHQvUHl0aG9uIFByb2dyYW1taW5nXCJcbiMgICAgaG9jX3RlYWNoZXJfbGVkOiBcIlRlYWNoZXItTGVkIExlc3NvbnNcIlxuIyAgICBob2NfdGVhY2hlcl9sZWRfZGVzYzE6IFwiRG93bmxvYWQgb3VyXCJcbiMgICAgaG9jX3RlYWNoZXJfbGVkX2xpbms6IFwiSW50cm9kdWN0aW9uIHRvIENvbXB1dGVyIFNjaWVuY2UgbGVzc29uIHBsYW5zXCJcbiMgICAgaG9jX3RlYWNoZXJfbGVkX2Rlc2MyOiBcInRvIGludHJvZHVjZSB5b3VyIHN0dWRlbnRzIHRvIHByb2dyYW1taW5nIGNvbmNlcHRzIHVzaW5nIG9mZmxpbmUgYWN0aXZpdGllc1wiXG4jICAgIGhvY19ncm91cDogXCJHcm91cCBHYW1lcGxheVwiXG4jICAgIGhvY19ncm91cF9kZXNjXzE6IFwiVGVhY2hlcnMgY2FuIHVzZSB0aGUgbGVzc29ucyBpbiBjb25qdW5jdGlvbiB3aXRoIG91ciBJbnRyb2R1Y3Rpb24gdG8gQ29tcHV0ZXIgU2NpZW5jZSBjb3Vyc2UgdG8gdHJhY2sgc3R1ZGVudCBwcm9ncmVzcy4gU2VlIG91clwiXG4jICAgIGhvY19ncm91cF9saW5rOiBcIkdldHRpbmcgU3RhcnRlZCBHdWlkZVwiXG4jICAgIGhvY19ncm91cF9kZXNjXzI6IFwiZm9yIG1vcmUgZGV0YWlsc1wiXG4jICAgIGhvY19hZGRpdGlvbmFsX2Rlc2MxOiBcIkZvciBhZGRpdGlvbmFsIENvZGVDb21iYXQgcmVzb3VyY2VzIGFuZCBhY3Rpdml0aWVzLCBzZWUgb3VyXCJcbiMgICAgaG9jX2FkZGl0aW9uYWxfZGVzYzI6IFwiUXVlc3Rpb25zXCJcbiMgICAgaG9jX2FkZGl0aW9uYWxfY29udGFjdDogXCJHZXQgaW4gdG91Y2hcIlxuIyAgICByZXZva2VfY29uZmlybTogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmV2b2tlIGEgRnVsbCBMaWNlbnNlIGZyb20ge3tzdHVkZW50X25hbWV9fT8gVGhlIGxpY2Vuc2Ugd2lsbCBiZWNvbWUgYXZhaWxhYmxlIHRvIGFzc2lnbiB0byBhbm90aGVyIHN0dWRlbnQuXCJcbiMgICAgcmV2b2tlX2FsbF9jb25maXJtOiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZXZva2UgRnVsbCBMaWNlbnNlcyBmcm9tIGFsbCBzdHVkZW50cyBpbiB0aGlzIGNsYXNzP1wiXG4jICAgIHJldm9raW5nOiBcIlJldm9raW5nLi4uXCJcbiMgICAgdW51c2VkX2xpY2Vuc2VzOiBcIllvdSBoYXZlIHVudXNlZCBMaWNlbnNlcyB0aGF0IGFsbG93IHlvdSB0byBhc3NpZ24gc3R1ZGVudHMgcGFpZCBjb3Vyc2VzIHdoZW4gdGhleSdyZSByZWFkeSB0byBsZWFybiBtb3JlIVwiXG4jICAgIHJlbWVtYmVyX25ld19jb3Vyc2VzOiBcIlJlbWVtYmVyIHRvIGFzc2lnbiBuZXcgY291cnNlcyFcIlxuIyAgICBtb3JlX2luZm86IFwiTW9yZSBJbmZvXCJcbiMgICAgaG93X3RvX2Fzc2lnbl9jb3Vyc2VzOiBcIkhvdyB0byBBc3NpZ24gQ291cnNlc1wiXG4jICAgIHNlbGVjdF9zdHVkZW50czogXCJTZWxlY3QgU3R1ZGVudHNcIlxuIyAgICBzZWxlY3RfaW5zdHJ1Y3Rpb25zOiBcIkNsaWNrIHRoZSBjaGVja2JveCBuZXh0IHRvIGVhY2ggc3R1ZGVudCB5b3Ugd2FudCB0byBhc3NpZ24gY291cnNlcyB0by5cIlxuIyAgICBjaG9vc2VfY291cnNlOiBcIkNob29zZSBDb3Vyc2VcIlxuIyAgICBjaG9vc2VfaW5zdHJ1Y3Rpb25zOiBcIlNlbGVjdCB0aGUgY291cnNlIGZyb20gdGhlIGRyb3Bkb3duIG1lbnUgeW914oCZZCBsaWtlIHRvIGFzc2lnbiwgdGhlbiBjbGljayDigJxBc3NpZ24gdG8gU2VsZWN0ZWQgU3R1ZGVudHMu4oCdXCJcbiMgICAgcHVzaF9wcm9qZWN0czogXCJXZSByZWNvbW1lbmQgYXNzaWduaW5nIFdlYiBEZXZlbG9wbWVudCAxIG9yIEdhbWUgRGV2ZWxvcG1lbnQgMSBhZnRlciBzdHVkZW50cyBoYXZlIGZpbmlzaGVkIEludHJvZHVjdGlvbiB0byBDb21wdXRlciBTY2llbmNlISBTZWUgb3VyIHt7cmVzb3VyY2VfaHVifX0gZm9yIG1vcmUgZGV0YWlscyBvbiB0aG9zZSBjb3Vyc2VzLlwiXG4jICAgIHRlYWNoZXJfcXVlc3Q6IFwiVGVhY2hlcidzIFF1ZXN0IGZvciBTdWNjZXNzXCJcbiMgICAgcXVlc3RzX2NvbXBsZXRlOiBcIlF1ZXN0cyBDb21wbGV0ZVwiXG4jICAgIHRlYWNoZXJfcXVlc3RfY3JlYXRlX2NsYXNzcm9vbTogXCJDcmVhdGUgQ2xhc3Nyb29tXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9hZGRfc3R1ZGVudHM6IFwiQWRkIFN0dWRlbnRzXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF9tZXRob2RzOiBcIkhlbHAgeW91ciBzdHVkZW50cyBsZWFybiBob3cgdG8gYGNhbGwgbWV0aG9kc2AuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF9tZXRob2RzX3N0ZXAxOiBcIkdldCA3NSUgb2YgYXQgbGVhc3Qgb25lIGNsYXNzIHRocm91Z2ggdGhlIGZpcnN0IGxldmVsLCBfX0R1bmdlb25zIG9mIEtpdGhnYXJkX19cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX21ldGhvZHNfc3RlcDI6IFwiUHJpbnQgb3V0IHRoZSBbU3R1ZGVudCBRdWljayBTdGFydCBHdWlkZV0oaHR0cDovL2ZpbGVzLmNvZGVjb21iYXQuY29tL2RvY3MvcmVzb3VyY2VzL1N0dWRlbnRRdWlja1N0YXJ0R3VpZGUucGRmKSBpbiB0aGUgUmVzb3VyY2UgSHViLlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfc3RyaW5nczogXCJEb24ndCBzdHJpbmcgeW91ciBzdHVkZW50cyBhbG9uZywgdGVhY2ggdGhlbSBgc3RyaW5nc2AuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF9zdHJpbmdzX3N0ZXAxOiBcIkdldCA3NSUgb2YgYXQgbGVhc3Qgb25lIGNsYXNzIHRocm91Z2ggX19UcnVlIE5hbWVzX19cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX3N0cmluZ3Nfc3RlcDI6IFwiVXNlIHRoZSBUZWFjaGVyIExldmVsIFNlbGVjdG9yIG9uIFtDb3Vyc2UgR3VpZGVzXSgvdGVhY2hlcnMvY291cnNlcykgcGFnZSB0byBwcmV2aWV3IF9fVHJ1ZSBOYW1lc19fLlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfdGVhY2hfbG9vcHM6IFwiS2VlcCB5b3VyIHN0dWRlbnRzIGluIHRoZSBsb29wIGFib3V0IGBsb29wc2AuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF9sb29wc19zdGVwMTogXCJHZXQgNzUlIG9mIGF0IGxlYXN0IG9uZSBjbGFzcyB0aHJvdWdoIF9fRmlyZSBEYW5jaW5nX18uXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF9sb29wc19zdGVwMjogXCJVc2UgdGhlIF9fTG9vcHMgQWN0aXZpdHlfXyBpbiB0aGUgW0NTMSBDdXJyaWN1bHVtIGd1aWRlXSgvdGVhY2hlcnMvcmVzb3VyY2VzL2NzMSkgdG8gcmVpbmZvcmNlIHRoaXMgY29uY2VwdC5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3RlYWNoX3ZhcmlhYmxlczogXCJWYXJ5IGl0IHVwIHdpdGggYHZhcmlhYmxlc2AuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF92YXJpYWJsZXNfc3RlcDE6IFwiR2V0IDc1JSBvZiBhdCBsZWFzdCBvbmUgY2xhc3MgdGhyb3VnaCBfX0tub3duIEVuZW15X18uXCJcbiMgICAgdGVhY2hlcl9xdWVzdF90ZWFjaF92YXJpYWJsZXNfc3RlcDI6IFwiRW5jb3VyYWdlIGNvbGxhYm9yYXRpb24gYnkgdXNpbmcgdGhlIFtQYWlyIFByb2dyYW1taW5nIEFjdGl2aXR5XSgvdGVhY2hlcnMvcmVzb3VyY2VzL3BhaXItcHJvZ3JhbW1pbmcpLlwiXG4jICAgIHRlYWNoZXJfcXVlc3Rfa2l0aGdhcmRfZ2F0ZXNfMTAwOiBcIkVzY2FwZSB0aGUgS2l0aGdhcmQgR2F0ZXMgd2l0aCB5b3VyIGNsYXNzLlwiXG4jICAgIHRlYWNoZXJfcXVlc3Rfa2l0aGdhcmRfZ2F0ZXNfMTAwX3N0ZXAxOiBcIkdldCA3NSUgb2YgYXQgbGVhc3Qgb25lIGNsYXNzIHRocm91Z2ggX19LaXRoZ2FyZCBHYXRlc19fLlwiXG4jICAgIHRlYWNoZXJfcXVlc3Rfa2l0aGdhcmRfZ2F0ZXNfMTAwX3N0ZXAyOiBcIkd1aWRlIHN0dWRlbnRzIHRvIHRoaW5rIHRocm91Z2ggaGFyZCBwcm9ibGVtcyB1c2luZyB0aGUgW0VuZ2luZWVyaW5nIEN5Y2xlIFdvcmtzaGVldF0oaHR0cDovL2ZpbGVzLmNvZGVjb21iYXQuY29tL2RvY3MvcmVzb3VyY2VzL0VuZ2luZWVyaW5nQ3ljbGVXb3Jrc2hlZXQucGRmKS5cIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3dha2thX21hdWxfMTAwOiBcIlByZXBhcmUgdG8gZHVlbCBpbiBXYWtrYSBNYXVsLlwiXG4jICAgIHRlYWNoZXJfcXVlc3Rfd2Fra2FfbWF1bF8xMDBfc3RlcDE6IFwiR2V0IDc1JSBvZiBhdCBsZWFzdCBvbmUgY2xhc3MgdG8gX19XYWtrYSBNYXVsX18uXCJcbiMgICAgdGVhY2hlcl9xdWVzdF93YWtrYV9tYXVsXzEwMF9zdGVwMjogXCJTZWUgdGhlIFtBcmVuYSBHdWlkZV0oL3RlYWNoZXJzL3Jlc291cmNlcy9hcmVuYXMpIGluIHRoZSBbUmVzb3VyY2UgSHViXSgvdGVhY2hlcnMvcmVzb3VyY2VzKSBmb3IgdGlwcyBvbiBob3cgdG8gcnVuIGEgc3VjY2Vzc2Z1bCBhcmVuYSBkYXkuXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9yZWFjaF9nYW1lZGV2OiBcIkV4cGxvcmUgbmV3IHdvcmxkcyFcIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X3JlYWNoX2dhbWVkZXZfc3RlcDE6IFwiW0dldCBsaWNlbnNlc10oL3RlYWNoZXJzL2xpY2Vuc2VzKSBzbyB0aGF0IHlvdXIgc3R1ZGVudHMgY2FuIGV4cGxvcmUgbmV3IHdvcmxkcywgbGlrZSBHYW1lIERldmVsb3BtZW50IGFuZCBXZWIgRGV2ZWxvcG1lbnQhXCJcbiMgICAgdGVhY2hlcl9xdWVzdF9kb25lOiBcIldhbnQgeW91ciBzdHVkZW50cyB0byBsZWFybiBldmVuIG1vcmUgY29kZT8gR2V0IGluIHRvdWNoIHdpdGggb3VyIFtzY2hvb2wgc3BlY2lhbGlzdHNdKG1haWx0bzpzY2hvb2xzQGNvZGVjb21iYXQuY29tKSB0b2RheSFcIlxuIyAgICB0ZWFjaGVyX3F1ZXN0X2tlZXBfZ29pbmc6IFwiS2VlcCBnb2luZyEgSGVyZSdzIHdoYXQgeW91IGNhbiBkbyBuZXh0OlwiXG4jICAgIHRlYWNoZXJfcXVlc3RfbW9yZTogXCJTZWUgYWxsIHF1ZXN0c1wiXG4jICAgIHRlYWNoZXJfcXVlc3RfbGVzczogXCJTZWUgZmV3ZXIgcXVlc3RzXCJcbiMgICAgcmVmcmVzaF90b191cGRhdGU6IFwiKHJlZnJlc2ggdGhlIHBhZ2UgdG8gc2VlIHVwZGF0ZXMpXCJcbiMgICAgdmlld19wcm9qZWN0X2dhbGxlcnk6IFwiVmlldyBQcm9qZWN0IEdhbGxlcnlcIlxuIyAgICBvZmZpY2VfaG91cnM6IFwiVGVhY2hlciBXZWJpbmFyc1wiXG4jICAgIG9mZmljZV9ob3Vyc19kZXRhaWw6IFwiTGVhcm4gaG93IHRvIGtlZXAgdXAgd2l0aCB3aXRoIHlvdXIgc3R1ZGVudHMgYXMgdGhleSBjcmVhdGUgZ2FtZXMgYW5kIGVtYmFyayBvbiB0aGVpciBjb2Rpbmcgam91cm5leSEgQ29tZSBhbmQgYXR0ZW5kIG91clwiXG4jICAgIG9mZmljZV9ob3Vyc19saW5rOiBcInRlYWNoZXIgd2ViaW5hclwiXG4jICAgIG9mZmljZV9ob3Vyc19kZXRhaWxfMjogXCJzZXNzaW9ucy5cIlxuIyAgICBzdWNjZXNzOiBcIlN1Y2Nlc3NcIlxuIyAgICBpbl9wcm9ncmVzczogXCJJbiBQcm9ncmVzc1wiXG4jICAgIG5vdF9zdGFydGVkOiBcIk5vdCBTdGFydGVkXCJcbiMgICAgbWlkX2NvdXJzZTogXCJNaWQtQ291cnNlXCJcbiMgICAgZW5kX2NvdXJzZTogXCJFbmQgb2YgQ291cnNlXCJcbiMgICAgbm9uZTogXCJOb25lIGRldGVjdGVkIHlldFwiXG4jICAgIGV4cGxhaW5fb3Blbl9lbmRlZDogXCJOb3RlOiBTdHVkZW50cyBhcmUgZW5jb3VyYWdlZCB0byBzb2x2ZSB0aGlzIGxldmVsIGNyZWF0aXZlbHkg4oCUIG9uZSBwb3NzaWJsZSBzb2x1dGlvbiBpcyBwcm92aWRlZCBiZWxvdy5cIlxuIyAgICBsZXZlbF9sYWJlbDogXCJMZXZlbDpcIlxuIyAgICB0aW1lX3BsYXllZF9sYWJlbDogXCJUaW1lIFBsYXllZDpcIlxuIyAgICBiYWNrX3RvX3Jlc291cmNlX2h1YjogXCJCYWNrIHRvIFJlc291cmNlIEh1YlwiXG4jICAgIGJhY2tfdG9fY291cnNlX2d1aWRlczogXCJCYWNrIHRvIENvdXJzZSBHdWlkZXNcIlxuIyAgICBwcmludF9ndWlkZTogXCJQcmludCB0aGlzIGd1aWRlXCJcbiMgICAgY29tYm86IFwiQ29tYm9cIlxuIyAgICBjb21ib19leHBsYW5hdGlvbjogXCJTdHVkZW50cyBwYXNzIENvbWJvIGNoYWxsZW5nZSBsZXZlbHMgYnkgdXNpbmcgYXQgbGVhc3Qgb25lIGxpc3RlZCBjb25jZXB0LiBSZXZpZXcgc3R1ZGVudCBjb2RlIGJ5IGNsaWNraW5nIHRoZSBwcm9ncmVzcyBkb3QuXCJcbiMgICAgY29uY2VwdDogXCJDb25jZXB0XCJcbiMgICAgc3luY19nb29nbGVfY2xhc3Nyb29tOiBcIlN5bmMgR29vZ2xlIENsYXNzcm9vbVwiXG5cbiMgIHNoYXJlX2xpY2Vuc2VzOlxuIyAgICBzaGFyZV9saWNlbnNlczogXCJTaGFyZSBMaWNlbnNlc1wiXG4jICAgIHNoYXJlZF9ieTogXCJTaGFyZWQgQnk6XCJcbiMgICAgYWRkX3RlYWNoZXJfbGFiZWw6IFwiRW50ZXIgZXhhY3QgdGVhY2hlciBlbWFpbDpcIlxuIyAgICBhZGRfdGVhY2hlcl9idXR0b246IFwiQWRkIFRlYWNoZXJcIlxuIyAgICBzdWJoZWFkZXI6IFwiWW91IGNhbiBtYWtlIHlvdXIgbGljZW5zZXMgYXZhaWxhYmxlIHRvIG90aGVyIHRlYWNoZXJzIGluIHlvdXIgb3JnYW5pemF0aW9uLiBFYWNoIGxpY2Vuc2UgY2FuIG9ubHkgYmUgdXNlZCBmb3Igb25lIHN0dWRlbnQgYXQgYSB0aW1lLlwiXG4jICAgIHRlYWNoZXJfbm90X2ZvdW5kOiBcIlRlYWNoZXIgbm90IGZvdW5kLiBQbGVhc2UgbWFrZSBzdXJlIHRoaXMgdGVhY2hlciBoYXMgYWxyZWFkeSBjcmVhdGVkIGEgVGVhY2hlciBBY2NvdW50LlwiXG4jICAgIHRlYWNoZXJfbm90X3ZhbGlkOiBcIlRoaXMgaXMgbm90IGEgdmFsaWQgVGVhY2hlciBBY2NvdW50LiBPbmx5IHRlYWNoZXIgYWNjb3VudHMgY2FuIHNoYXJlIGxpY2Vuc2VzLlwiXG4jICAgIGFscmVhZHlfc2hhcmVkOiBcIllvdSd2ZSBhbHJlYWR5IHNoYXJlZCB0aGVzZSBsaWNlbnNlcyB3aXRoIHRoYXQgdGVhY2hlci5cIlxuIyAgICB0ZWFjaGVyc191c2luZ190aGVzZTogXCJUZWFjaGVycyB3aG8gY2FuIGFjY2VzcyB0aGVzZSBsaWNlbnNlczpcIlxuIyAgICBmb290ZXI6IFwiV2hlbiB0ZWFjaGVycyByZXZva2UgbGljZW5zZXMgZnJvbSBzdHVkZW50cywgdGhlIGxpY2Vuc2VzIHdpbGwgYmUgcmV0dXJuZWQgdG8gdGhlIHNoYXJlZCBwb29sIGZvciBvdGhlciB0ZWFjaGVycyBpbiB0aGlzIGdyb3VwIHRvIHVzZS5cIlxuIyAgICB5b3U6IFwiKHlvdSlcIlxuIyAgICBvbmVfbGljZW5zZV91c2VkOiBcIigxIGxpY2Vuc2UgdXNlZClcIlxuIyAgICBsaWNlbnNlc191c2VkOiBcIihfX2xpY2Vuc2VzVXNlZF9fIGxpY2Vuc2VzIHVzZWQpXCJcbiMgICAgbW9yZV9pbmZvOiBcIk1vcmUgaW5mb1wiXG5cbiMgIHNoYXJpbmc6XG4jICAgIGdhbWU6IFwiR2FtZVwiXG4jICAgIHdlYnBhZ2U6IFwiV2VicGFnZVwiXG4jICAgIHlvdXJfc3R1ZGVudHNfcHJldmlldzogXCJZb3VyIHN0dWRlbnRzIHdpbGwgY2xpY2sgaGVyZSB0byBzZWUgdGhlaXIgZmluaXNoZWQgcHJvamVjdHMhIFVuYXZhaWxhYmxlIGluIHRlYWNoZXIgcHJldmlldy5cIlxuIyAgICB1bmF2YWlsYWJsZTogXCJMaW5rIHNoYXJpbmcgbm90IGF2YWlsYWJsZSBpbiB0ZWFjaGVyIHByZXZpZXcuXCJcbiMgICAgc2hhcmVfZ2FtZTogXCJTaGFyZSBUaGlzIEdhbWVcIlxuIyAgICBzaGFyZV93ZWI6IFwiU2hhcmUgVGhpcyBXZWJwYWdlXCJcbiMgICAgdmljdG9yeV9zaGFyZV9wcmVmaXg6IFwiU2hhcmUgdGhpcyBsaW5rIHRvIGludml0ZSB5b3VyIGZyaWVuZHMgJiBmYW1pbHkgdG9cIlxuIyAgICB2aWN0b3J5X3NoYXJlX3ByZWZpeF9zaG9ydDogXCJJbnZpdGUgcGVvcGxlIHRvXCJcbiMgICAgdmljdG9yeV9zaGFyZV9nYW1lOiBcInBsYXkgeW91ciBnYW1lIGxldmVsXCJcbiMgICAgdmljdG9yeV9zaGFyZV93ZWI6IFwidmlldyB5b3VyIHdlYnBhZ2VcIlxuIyAgICB2aWN0b3J5X3NoYXJlX3N1ZmZpeDogXCIuXCJcbiMgICAgdmljdG9yeV9jb3Vyc2Vfc2hhcmVfcHJlZml4OiBcIlRoaXMgbGluayB3aWxsIGxldCB5b3VyIGZyaWVuZHMgJiBmYW1pbHlcIlxuIyAgICB2aWN0b3J5X2NvdXJzZV9zaGFyZV9nYW1lOiBcInBsYXkgdGhlIGdhbWVcIlxuIyAgICB2aWN0b3J5X2NvdXJzZV9zaGFyZV93ZWI6IFwidmlldyB0aGUgd2VicGFnZVwiXG4jICAgIHZpY3RvcnlfY291cnNlX3NoYXJlX3N1ZmZpeDogXCJ5b3UganVzdCBjcmVhdGVkLlwiXG4jICAgIGNvcHlfdXJsOiBcIkNvcHkgVVJMXCJcbiMgICAgc2hhcmVfd2l0aF90ZWFjaGVyX2VtYWlsOiBcIlNlbmQgdG8geW91ciB0ZWFjaGVyXCJcblxuIyAgZ2FtZV9kZXY6XG4jICAgIGNyZWF0b3I6IFwiQ3JlYXRvclwiXG5cbiMgIHdlYl9kZXY6XG4jICAgIGltYWdlX2dhbGxlcnlfdGl0bGU6IFwiSW1hZ2UgR2FsbGVyeVwiXG4jICAgIHNlbGVjdF9hbl9pbWFnZTogXCJTZWxlY3QgYW4gaW1hZ2UgeW91IHdhbnQgdG8gdXNlXCJcbiMgICAgc2Nyb2xsX2Rvd25fZm9yX21vcmVfaW1hZ2VzOiBcIihTY3JvbGwgZG93biBmb3IgbW9yZSBpbWFnZXMpXCJcbiMgICAgY29weV90aGVfdXJsOiBcIkNvcHkgdGhlIFVSTCBiZWxvd1wiXG4jICAgIGNvcHlfdGhlX3VybF9kZXNjcmlwdGlvbjogXCJVc2VmdWwgaWYgeW91IHdhbnQgdG8gcmVwbGFjZSBhbiBleGlzdGluZyBpbWFnZS5cIlxuIyAgICBjb3B5X3RoZV9pbWdfdGFnOiBcIkNvcHkgdGhlIDxpbWc+IHRhZ1wiXG4jICAgIGNvcHlfdGhlX2ltZ190YWdfZGVzY3JpcHRpb246IFwiVXNlZnVsIGlmIHlvdSB3YW50IHRvIGluc2VydCBhIG5ldyBpbWFnZS5cIlxuIyAgICBjb3B5X3VybDogXCJDb3B5IFVSTFwiXG4jICAgIGNvcHlfaW1nOiBcIkNvcHkgPGltZz5cIlxuIyAgICBob3dfdG9fY29weV9wYXN0ZTogXCJIb3cgdG8gQ29weS9QYXN0ZVwiXG4jICAgIGNvcHk6IFwiQ29weVwiXG4jICAgIHBhc3RlOiBcIlBhc3RlXCJcbiMgICAgYmFja190b19lZGl0aW5nOiBcIkJhY2sgdG8gRWRpdGluZ1wiXG5cbiAgY2xhc3NlczpcbiAgICBhcmNobWFnZV90aXRsZTogXCLDhHJrZW1hZ2lrZXJcIlxuICAgIGFyY2htYWdlX3RpdGxlX2Rlc2NyaXB0aW9uOiBcIihLb2RhcmUpXCJcbiAgICBhcmNobWFnZV9zdW1tYXJ5OiBcIk9tIGR1IMOkciBlbiB1dHZlY2tsYXJlIHNvbSDDpHIgaW50cmVzc2VyYWQgYXYgYXR0IGtvZGEgdXRiaWxkbmluZ3NzcGVsLCBibGkgZMOlIGVuIMOkcmtlbWFnaWtlciBvY2ggaGrDpGxwIG9zcyBieWdnYSBDb2RlQ29tYmF0IVwiXG4gICAgYXJ0aXNhbl90aXRsZTogXCJIYW50dmVya2FyZVwiXG4gICAgYXJ0aXNhbl90aXRsZV9kZXNjcmlwdGlvbjogXCIoTml2w6VieWdnYXJlKVwiXG4gICAgYXJ0aXNhbl9zdW1tYXJ5OiBcIkJ5Z2cgb2NoIGRlbGEgbml2w6VlciB0aWxsIGRpZyBvY2ggZGluYSB2w6RubmVyLiBCbGkgZW4gaGFudHZlcmthcmUgZsO2ciBhdHQgbMOkcmEgZGlnIGtvbnN0ZW4gYXR0IGzDpHJhIGFuZHJhIGF0dCBrb2RhLlwiXG4gICAgYWR2ZW50dXJlcl90aXRsZTogXCLDhHZlbnR5cmFyZVwiXG4gICAgYWR2ZW50dXJlcl90aXRsZV9kZXNjcmlwdGlvbjogXCIoTml2w6V0ZXN0YXJlKVwiXG4gICAgYWR2ZW50dXJlcl9zdW1tYXJ5OiBcIkbDpSBueWEgbml2w6VlciAodGlsbCBvY2ggbWVkIHByZW51bWVyYW50aW5uZWjDpWxsKSBncmF0aXMgZW4gdmVja2EgaW5uYW4gYWxsYSBhbmRyYSBvY2ggaGrDpGxwIG9zcyBmaXhhIGJ1Z2dhciBpbm5hbiBuaXbDpWVybmEgYmxpciBwdWJsaWthLlwiXG4gICAgc2NyaWJlX3RpdGxlOiBcIlNrcmlmdGzDpHJkXCJcbiAgICBzY3JpYmVfdGl0bGVfZGVzY3JpcHRpb246IFwiKEFydGlrZWxyZWRpZ2VyYXJlKVwiXG4gICAgc2NyaWJlX3N1bW1hcnk6IFwiQnJhIGtvZCBiZWjDtnZlciBicmEgZG9rdW1lbnRhdGlvbi4gU2tyaXYsIMOkbmRyYSBvY2ggZsO2cmLDpHR0cmEgZG9rdW1lbnRlbiBzb20gbMOkc2VzIGF2IG1pbGpvbmVyIHNwZWxhcmUgw7Z2ZXIgaGVsYSB2w6RybGRlbi5cIlxuICAgIGRpcGxvbWF0X3RpdGxlOiBcIkRpcGxvbWF0XCJcbiAgICBkaXBsb21hdF90aXRsZV9kZXNjcmlwdGlvbjogXCIow5Z2ZXJzw6R0dGFyZSlcIlxuICAgIGRpcGxvbWF0X3N1bW1hcnk6IFwiQ29kZUNvbWJhdCDDpHIgw7Z2ZXJzw6R0dHMgdGlsbCDDtnZlciA0NSBzcHLDpWsgYXYgdsOlcmEgZGlwbG9tYXRlci4gSGrDpGxwIG9zcyBnZW5vbSBhdHQgZ8O2cmEgw7Z2ZXJzw6R0dG5pbmdhci5cIlxuICAgIGFtYmFzc2Fkb3JfdGl0bGU6IFwiQW1iYXNzYWTDtnJcIlxuICAgIGFtYmFzc2Fkb3JfdGl0bGVfZGVzY3JpcHRpb246IFwiKFN1cHBvcnQpXCJcbiAgICBhbWJhc3NhZG9yX3N1bW1hcnk6IFwiVMOkbWogZm9ydW1hbnbDpG5kYXJuYSBvY2ggaGrDpGxwIGRlbSBzb20gaGFyIGZyw6Vnb3IuIEFtYmFzc2Fkw7ZyZXJuYSByZXByZXNlbnRlcmFyIENvZGVDb21iYXQgdXRlIGkgdsOkcmxkZW4uXCJcbiAgICB0ZWFjaGVyX3RpdGxlOiBcIkzDpHJhcmVcIlxuXG4gIGVkaXRvcjpcbiAgICBtYWluX3RpdGxlOiBcIlJlZGlnZXJhcmU6IENvZGVDb21iYXRcIlxuICAgIGFydGljbGVfdGl0bGU6IFwiUmVkaWdlcmFyZTogQXJ0aWtsYXJcIlxuICAgIHRoYW5nX3RpdGxlOiBcIlJlZGlnZXJhcmU6IEVuaGV0ZXJcIlxuICAgIGxldmVsX3RpdGxlOiBcIlJlZGlnZXJhcmU6IE5pdsOlZXJcIlxuICAgIGNvdXJzZV90aXRsZTogXCJSZWRpZ2VyYXJlOiBLdXJzZXJcIlxuICAgIGFjaGlldmVtZW50X3RpdGxlOiBcIlJlZGlnZXJhcmU6IFByZXN0YXRpb25lclwiXG4gICAgcG9sbF90aXRsZTogXCJSZWRpZ2VyYXJlOiBPbXLDtnN0bmluZ1wiXG4gICAgYmFjazogXCJCYWNrYVwiXG4gICAgcmV2ZXJ0OiBcIsOFdGVyc3TDpGxsXCJcbiAgICByZXZlcnRfbW9kZWxzOiBcIsOFdGVyc3TDpGxsIG1vZGVsbGVyXCJcbiAgICBwaWNrX2FfdGVycmFpbjogXCJWw6RsaiB0ZXJyw6RuZ1wiXG4gICAgZHVuZ2VvbjogXCJIw6VsYVwiXG4gICAgaW5kb29yOiBcIklub21odXNcIlxuICAgIGRlc2VydDogXCLDlmtlblwiXG4gICAgZ3Jhc3N5OiBcIkdyw6RzXCJcbiAgICBtb3VudGFpbjogXCJCZXJnXCJcbiAgICBnbGFjaWVyOiBcIkdsYWNpw6RyXCJcbiAgICBzbWFsbDogXCJMaXRlblwiXG4gICAgbGFyZ2U6IFwiU3RvclwiXG4jICAgIGZvcmtfdGl0bGU6IFwiRm9yayBOZXcgVmVyc2lvblwiXG4jICAgIGZvcmtfY3JlYXRpbmc6IFwiQ3JlYXRpbmcgRm9yay4uLlwiXG4jICAgIGdlbmVyYXRlX3RlcnJhaW46IFwiR2VuZXJhdGUgVGVycmFpblwiXG4gICAgbW9yZTogXCJNZXJcIlxuICAgIHdpa2k6IFwiV2lraVwiXG4jICAgIGxpdmVfY2hhdDogXCJMaXZlIENoYXRcIlxuIyAgICB0aGFuZ19tYWluOiBcIk1haW5cIlxuIyAgICB0aGFuZ19zcHJpdGVzaGVldHM6IFwiU3ByaXRlc2hlZXRzXCJcbiAgICB0aGFuZ19jb2xvcnM6IFwiRsOkcmdlclwiXG4gICAgbGV2ZWxfc29tZV9vcHRpb25zOiBcIk7DpWdyYSBpbnN0w6RsbG5pbmdhcj9cIlxuICAgIGxldmVsX3RhYl90aGFuZ3M6IFwiRW5oZXRlclwiXG4gICAgbGV2ZWxfdGFiX3NjcmlwdHM6IFwiU2tyaXB0XCJcbiAgICBsZXZlbF90YWJfY29tcG9uZW50czogXCJLb21wb25lbnRlclwiXG4gICAgbGV2ZWxfdGFiX3N5c3RlbXM6IFwiU3lzdGVtXCJcbiAgICBsZXZlbF90YWJfZG9jczogXCJEb2t1bWVudGF0aW9uXCJcbiAgICBsZXZlbF90YWJfdGhhbmdzX3RpdGxlOiBcIk51dmFyYW5kZSBlbmhldGVyXCJcbiAgICBsZXZlbF90YWJfdGhhbmdzX2FsbDogXCJBbGxhXCJcbiAgICBsZXZlbF90YWJfdGhhbmdzX2NvbmRpdGlvbnM6IFwiU3RhcnR2aWxsa29yXCJcbiAgICBsZXZlbF90YWJfdGhhbmdzX2FkZDogXCJMw6RnZyB0aWxsIGVuaGV0ZXJcIlxuICAgIGxldmVsX3RhYl90aGFuZ3Nfc2VhcmNoOiBcIlPDtmsgZW5oZXRlclwiXG4gICAgYWRkX2NvbXBvbmVudHM6IFwiTMOkZ2cgdGlsbCBrb21wb25lbnRlclwiXG4gICAgY29tcG9uZW50X2NvbmZpZ3M6IFwiS29uZmlndXJlcmEga29tcG9uZW50ZXJcIlxuICAgIGNvbmZpZ190aGFuZzogXCJEdWJiZWxrbGlja2EgZsO2ciBhdHQga29uZmlndXJlcmEgZW4gZW5oZXRcIlxuICAgIGRlbGV0ZTogXCJUYSBib3J0XCJcbiAgICBkdXBsaWNhdGU6IFwiRHVwbGljZXJhXCJcbiAgICBzdG9wX2R1cGxpY2F0ZTogXCJTbHV0YSBkdXBsaWNlcmFcIlxuICAgIHJvdGF0ZTogXCJSb3RlcmFcIlxuICAgIGxldmVsX2NvbXBvbmVudF90YWJfdGl0bGU6IFwiTnV2YXJhbmRlIGtvbXBvbmVudGVyXCJcbiAgICBsZXZlbF9jb21wb25lbnRfYnRuX25ldzogXCJTa2FwYSBueSBrb21wb25lbnRcIlxuICAgIGxldmVsX3N5c3RlbXNfdGFiX3RpdGxlOiBcIk51dmFyYW5kZSBzeXN0ZW1cIlxuICAgIGxldmVsX3N5c3RlbXNfYnRuX25ldzogXCJTa2FwYSBueXR0IHN5c3RlbVwiXG4gICAgbGV2ZWxfc3lzdGVtc19idG5fYWRkOiBcIkzDpGdnIHRpbGwgc3lzdGVtXCJcbiAgICBsZXZlbF9jb21wb25lbnRzX3RpdGxlOiBcIlRpbGxiYWthIHRpbGwgYWxsYSBlbmhldGVyXCJcbiAgICBsZXZlbF9jb21wb25lbnRzX3R5cGU6IFwiVHlwXCJcbiAgICBsZXZlbF9jb21wb25lbnRfZWRpdF90aXRsZTogXCJSZWRpZ2VyYSBrb21wb25lbnRcIlxuICAgIGxldmVsX2NvbXBvbmVudF9jb25maWdfc2NoZW1hOiBcIktvbmZpZ3VyZXJhIHNjaGVtYVwiXG4gICAgbGV2ZWxfc3lzdGVtX2VkaXRfdGl0bGU6IFwiUmVkaWdlcmEgc3lzdGVtXCJcbiAgICBjcmVhdGVfc3lzdGVtX3RpdGxlOiBcIlNrYXBhIG55dHQgc3lzdGVtXCJcbiAgICBuZXdfY29tcG9uZW50X3RpdGxlOiBcIlNrYXBhIG55IGtvbXBvbmVudFwiXG4gICAgbmV3X2NvbXBvbmVudF9maWVsZF9zeXN0ZW06IFwiU3lzdGVtXCJcbiAgICBuZXdfYXJ0aWNsZV90aXRsZTogXCJTa2FwYSBueSBhcnRpa2VsXCJcbiAgICBuZXdfdGhhbmdfdGl0bGU6IFwiU2thcGEgbnkgZW5oZXRzdHlwXCJcbiAgICBuZXdfbGV2ZWxfdGl0bGU6IFwiU2thcGEgbnkgbml2w6VcIlxuICAgIG5ld19hcnRpY2xlX3RpdGxlX2xvZ2luOiBcIkxvZ2dhIGluIGbDtnIgYXR0IHNrYXBhIGVuIG55IGFydGlrZWxcIlxuICAgIG5ld190aGFuZ190aXRsZV9sb2dpbjogXCJMb2dnYSBpbiBmw7ZyIGF0dCBza2EgZW4gbnkgdHlwIGF2IGVuaGV0XCJcbiAgICBuZXdfbGV2ZWxfdGl0bGVfbG9naW46IFwiTG9nZ2EgaW4gZsO2ciBhdHQgc2thcGEgZW4gbnkgbml2w6VcIlxuICAgIG5ld19hY2hpZXZlbWVudF90aXRsZTogXCJTa2FwYSBlbiBueSBwcmVzdGF0aW9uXCJcbiAgICBuZXdfYWNoaWV2ZW1lbnRfdGl0bGVfbG9naW46IFwiTG9nZ2EgaW4gZsO2ciBhdHQgc2thcGEgZW4gbnkgcHJlc3RhdGlvblwiXG4gICAgbmV3X3BvbGxfdGl0bGU6IFwiU2thcGEgZW4gbnkgb21yw7ZzdG5pbmdcIlxuICAgIG5ld19wb2xsX3RpdGxlX2xvZ2luOiBcIkxvZ2dhIGluIGbDtnIgYXR0IHNrYXBhIGVuIG55IG9tcsO2c3RuaW5nXCJcbiAgICBhcnRpY2xlX3NlYXJjaF90aXRsZTogXCJTw7ZrIGFydGlrbGFyIGjDpHJcIlxuICAgIHRoYW5nX3NlYXJjaF90aXRsZTogXCJTw7ZrIGVuaGV0c3R5cGVyIGjDpHJcIlxuICAgIGxldmVsX3NlYXJjaF90aXRsZTogXCJTw7ZrIG5pdsOlZXIgaMOkclwiXG4gICAgYWNoaWV2ZW1lbnRfc2VhcmNoX3RpdGxlOiBcIlPDtmsgcHJlc3RhdGlvbmVyXCJcbiAgICBwb2xsX3NlYXJjaF90aXRsZTogXCJTw7ZrIHLDtnN0bmluZ2FyXCJcbiMgICAgcmVhZF9vbmx5X3dhcm5pbmcyOiBcIk5vdGU6IHlvdSBjYW4ndCBzYXZlIGFueSBlZGl0cyBoZXJlLCBiZWNhdXNlIHlvdSdyZSBub3QgbG9nZ2VkIGluLlwiXG4gICAgbm9fYWNoaWV2ZW1lbnRzOiBcIkluZ2EgcHJlc3RhdGlvbmVyIGhhciBsYWd0cyB0aWxsIGbDtnIgZGVuIGjDpHIgbml2w6VuIMOkbi5cIlxuIyAgICBhY2hpZXZlbWVudF9xdWVyeV9taXNjOiBcIktleSBhY2hpZXZlbWVudCBvZmYgb2YgbWlzY2VsbGFuZWFcIlxuIyAgICBhY2hpZXZlbWVudF9xdWVyeV9nb2FsczogXCJLZXkgYWNoaWV2ZW1lbnQgb2ZmIG9mIGxldmVsIGdvYWxzXCJcbiMgICAgbGV2ZWxfY29tcGxldGlvbjogXCJMZXZlbCBDb21wbGV0aW9uXCJcbiMgICAgcG9wX2kxOG46IFwiUG9wdWxhdGUgSTE4TlwiXG4jICAgIHRhc2tzOiBcIlRhc2tzXCJcbiAgICBjbGVhcl9zdG9yYWdlOiBcIlJlbnNhIGRpbmEgbG9rYWxhIMOkbmRyaW5nYXJcIlxuIyAgICBhZGRfc3lzdGVtX3RpdGxlOiBcIkFkZCBTeXN0ZW1zIHRvIExldmVsXCJcbiMgICAgZG9uZV9hZGRpbmc6IFwiRG9uZSBBZGRpbmdcIlxuXG4gIGFydGljbGU6XG4gICAgZWRpdF9idG5fcHJldmlldzogXCJGw7ZyaGFuZHNncmFuc2thXCJcbiAgICBlZGl0X2FydGljbGVfdGl0bGU6IFwiUmVkaWdlcmEgYXJ0aWtlbFwiXG5cbiAgcG9sbHM6XG4gICAgcHJpb3JpdHk6IFwiUHJpb3JpdGV0XCJcblxuICBjb250cmlidXRlOlxuICAgIHBhZ2VfdGl0bGU6IFwiQXR0IGJpZHJhXCJcbiAgICBpbnRyb19ibHVyYjogXCJDb2RlQ29tYmF0IMOkciAxMDAlIMO2cHBlbiBrw6RsbGtvZCEgSHVuZHJhdGFscyBow6RuZ2l2bmEgc3BlbGFyZSBoYXIgaGrDpGxwdCB0aWxsIGF0dCBza2FwYSBkZXQgc3BlbCBkdSBzZXIgaWRhZy4gSMOkbmcgbWVkIG9zcyBvY2ggc2tyaXYgbsOkc3RhIGthcGl0ZWwgaSBDb2RlQ29tYmF0cyB1cHBkcmFnIGF0dCBsw6RyYSB2w6RybGRlbiBhdHQga29kYSFcIiAjIHtjaGFuZ2V9XG4gICAgYWxlcnRfYWNjb3VudF9tZXNzYWdlX2ludHJvOiBcIkhlaiBkw6RyIVwiXG4gICAgYWxlcnRfYWNjb3VudF9tZXNzYWdlOiBcIkbDtnIgYXR0IHByZW51bWVyZXJhIHDDpSBrbGFzc21lamwgYmVow7Z2ZXIgZHUgdmFyYSBpbmxvZ2dhZCBmw7Zyc3QuXCJcbiAgICBhcmNobWFnZV9pbnRyb2R1Y3Rpb246IFwiRW4gYXYgZGUgYsOkc3RhIGRlbGFybmEgbWVkIGF0dCBieWdnYSBzcGVsIMOkciBhdHQgZGUgc3ludGV0aXNlcmFyIHPDpSBtw6VuZ2Egb2xpa2Egc2FrZXIuIEdyYWZpaywgbGp1ZCwgcmVhbHRpZHNuw6R0dmVya2FuZGUsIHNvY2lhbHQgbmV0dsOkcmthbmRlIG9jaCBzw6Uga2xhcnQgbcOlbmdhIGF2IGRlIHZhbmxpZ2FyZSBhc3Bla3Rlcm5hIGF2IHByb2dyYW1tZXJpbmcsIGZyw6VuIGRhdGFiYXNoYW50ZXJpbmcgb2NoIHNlcnZlcmFkbWluaXN0cmF0aW9uIHDDpSBsw6VnIG5pdsOlIHRpbGwgYW52w6RuZGFyZ3LDpG5zc25pdHQgb2NoIGdyw6Ruc25pdHRzYnlnZ2FuZGUuIERldCBmaW5ucyBteWNrZXQgYXR0IGfDtnJhLCBvY2ggb20gZHUgw6RyIGVuIGVyZmFyZW4gcHJvZ3JhbW1lcmFyZSBzb20gbMOkbmd0YXIgZWZ0ZXIgYXR0IGR5a2EgbmVyIGkgQ29kZUNvbWJhdHMgZGV0YWxqZXIga2FuIGRlbiBow6RyIGtsYXNzZW4gdmFyYSBmw7ZyIGRpZy4gVmkgc2t1bGxlIMOkbHNrYSBkaW4gaGrDpGxwIG1lZCBhdHQgYnlnZ2EgZGV0IGLDpHN0YSBwcm9ncmFtbWVyaW5nc3NwZWxldCBuw6Vnb25zaW4uXCJcbiAgICBjbGFzc19hdHRyaWJ1dGVzOiBcIktsYXNzYXR0cmlidXRcIlxuICAgIGFyY2htYWdlX2F0dHJpYnV0ZV8xX3ByZWY6IFwiS3Vuc2thcCBvbSBcIlxuICAgIGFyY2htYWdlX2F0dHJpYnV0ZV8xX3N1ZjogXCIsIGVsbGVyIGVuIHZpbGphIGF0dCBsw6RyYS4gRGV0IG1lc3RhIGF2IHbDpXIga29kIMOkciBpIGRldCBow6RyIHNwcsOla2V0LiDDhHIgZHUgZXR0IGZhbiBhdiBSdWJ5IGVsbGVyIFB5dGhvbiBrb21tZXIgZHUgYXR0IGvDpG5uYSBkaWcgaGVtbWEuIERldCDDpHIgSmF2YXNjcmlwdCwgbWVuIG1lZCBlbiB0cmV2bGlnYXJlIHN5bnRheC5cIlxuICAgIGFyY2htYWdlX2F0dHJpYnV0ZV8yOiBcIlZpc3MgZXJmYXJlbmhldCBhdiBwcm9ncmFtbWVyaW5nIG9jaCBwZXJzb25saWd0IGluaXRpYXRpdi4gVmkgaGrDpGxwZXIgZGlnIGF0dCBibGkgb3JpZW50ZXJhZCwgbWVuIGthbiBpbnRlIGzDpGdnYSBteWNrZXQgdGlkIHDDpSBhdHQgdHLDpG5hIGRpZy5cIlxuICAgIGhvd190b19qb2luOiBcIkh1ciBtYW4gZ8OlciBtZWRcIlxuICAgIGpvaW5fZGVzY18xOiBcIkFsbGEga2FuIGhqw6RscGEgdGlsbCEgS29sbGEgYmFyYSBpbiB2w6VyIFwiXG4gICAgam9pbl9kZXNjXzI6IFwiZsO2ciBhdHQga29tbWEgaWfDpW5nLCBvY2gga3J5c3NhIGkgcnV0YW4gbmVkYW5mw7ZyIGbDtnIgYXR0IG1hcmtlcmEgYXR0IGR1IMOkciBlbiBtb2RpZyDDpHJrZW1hZ2lrZXIgb2NoIGbDpSBkZSBzZW5hc3RlIG55aGV0ZXJuYSB2aWEgZW1haWwuIFZpbGwgZHUgY2hhdHRhIG9tIHZhZCBzb20gc2thIGfDtnJhcyBlbGxlciBodXIgZHUgYmxpIG1lciBpbnZvbHZlcmFkP1wiXG4gICAgam9pbl9kZXNjXzM6IFwiLCBlbGxlciBoaXR0YSBvc3MgaSB2w6VyIFwiXG4gICAgam9pbl9kZXNjXzQ6IFwic8OlIHRhciB2aSBkZXQgZMOkcmlmcsOlbiFcIlxuICAgIGpvaW5fdXJsX2VtYWlsOiBcIk1haWxhIG9zc1wiXG4gICAgam9pbl91cmxfc2xhY2s6IFwicHVibGlrIFNsYWNra2FuYWxcIlxuICAgIGFyY2htYWdlX3N1YnNjcmliZV9kZXNjOiBcIkbDpSBtYWlsIG9tIG55YSBrb2Rtw7ZqbGlnaGV0ZXIgb2NoIHRpbGxrw6RubmFnaXZhbmRlbi5cIlxuICAgIGFydGlzYW5faW50cm9kdWN0aW9uX3ByZWY6IFwiVmkgbcOlc3RlIGJ5Z2dhIGZsZXIgbml2w6VlciEgTcOkbm5pc2tvciBrcsOkdmVyIG1lciBpbm5laMOlbGwsIG9jaCB2aSBrYW4gYmFyYSBieWdnYSBlbiB2aXNzIG3DpG5nZCBzasOkbHZhLiBKdXN0IG51IMOkciBhcmJldHNzdGF0aW9uIG5pdsOlIGV0dDsgdsOlciBuaXbDpXJlZGlnZXJhcmUgw6RyIGtuYXBwdCBhbnbDpG5kYmFyIGVucyBhdiBkZXNzIHNrYXBhcmUsIHPDpSB2YXIgdXBwbcOkcmtzYW0uIE9tIGR1IGhhciB2aXNpb25lciBhdiBrYW1wYW5qZXIgc29tIHN0csOkY2tlciBzaWcgZnLDpW4gZm9yLWxvb3BhciB0aWxsXCJcbiAgICBhcnRpc2FuX2ludHJvZHVjdGlvbl9zdWY6IFwiLCDDpHIgZGVuIGjDpHIga2xhc3NlbiBrYW5za2UgbsOlZ290IGbDtnIgZGlnLlwiXG4gICAgYXJ0aXNhbl9hdHRyaWJ1dGVfMTogXCJOw6Vnb24gZXJmYXJlbmhldCBhdiBhdHQgYnlnZ2EgbGlrbmFuZGUgaW5uZWjDpWxsIHZvcmUgYnJhLCBzb20gdGlsbCBleGVtcGVsIEJsaXp6YXJkcyBuaXbDpXJlZGlnZXJhcmUuIERldCDDpHIgZG9jayBpbmdldCBrcmF2IVwiXG4gICAgYXJ0aXNhbl9hdHRyaWJ1dGVfMjogXCJFbiB2aWxqYSBhdHQgZ8O2cmEgZW4gaGVsIGRlbCB0ZXN0YW5kZSBvY2ggdXBwcmVwbmluZy4gRsO2ciBhdHQgZ8O2cmEgYnJhIG5pdsOlZXIsIG3DpXN0ZSBkdSB0YSBkZW0gdGlsbCBhbmRyYSBvY2ggc2UgZGVtIHNwZWxhIGRlbiwgb2NoIHZhcmEgYmVyZWRkIHDDpSBhdHQgaGl0dGEgbcOlbmdhIHNha2VyIGF0dCBsYWdhLlwiXG4gICAgYXJ0aXNhbl9hdHRyaWJ1dGVfMzogXCJGw7ZyIHRpbGxmw6RsbGV0LCB1dGjDpWxsaWdoZXQgaSBrbGFzcyBtZWQgZW4gw6R2ZW50eXJhcmUuIFbDpXIgbml2w6VyZWRpZ2VyYXJlIMOkciB2w6RsZGlndCBwcmVsaW1pbsOkciBvY2ggZnJ1c3RyZXJhbmRlIGF0dCBhbnbDpG5kYS4gRHUgw6RyIHZhcm5hZCFcIlxuICAgIGFydGlzYW5fam9pbl9kZXNjOiBcIkFudsOkbmQgbml2w6VyZWRpZ2VyYXJlbiBpIGRlc3NhIHN0ZWcsIG1lciBlbGxlciBtaW5kcmU6XCJcbiAgICBhcnRpc2FuX2pvaW5fc3RlcDE6IFwiTMOkcyBkb2t1bWVudGF0aW9uZW4uXCJcbiAgICBhcnRpc2FuX2pvaW5fc3RlcDI6IFwiU2thcGEgZW4gbnkgbml2w6Ugb2NoIHV0Zm9yc2thIGV4aXN0ZXJhbmRlIG5pdsOlZXIuXCJcbiAgICBhcnRpc2FuX2pvaW5fc3RlcDM6IFwiSGl0dGEgb3NzIGkgdsOlcnQgb2ZmZW50bGlnYSBTbGFjay1ydW0gZsO2ciBoasOkbHAuXCJcbiAgICBhcnRpc2FuX2pvaW5fc3RlcDQ6IFwiQW5zbMOlIGRpbmEgbml2w6VlciBww6UgZm9ydW1ldCBmw7ZyIGZlZWRiYWNrLlwiXG4gICAgYXJ0aXNhbl9zdWJzY3JpYmVfZGVzYzogXCJGw6UgbWFpbCBvbSBuaXbDpXJlZGlnZXJhcnVwcGRhdGVyaW5nYXIgb2NoIHRpbGxrw6RubmFnaXZhbmRlblwiXG4gICAgYWR2ZW50dXJlcl9pbnRyb2R1Y3Rpb246IFwiTMOldCBvc3MgdmFyYSB0eWRsaWdhIG1lZCBkaW4gcm9sbDogZHUgw6RyIHRhbmtlbi4gRHUga29tbWVyIGF0dCB0YSBzdG9yIHNrYWRhLiBWaSBiZWjDtnZlciBtw6Rubmlza29yIHNvbSBrYW4gdGVzdGEgc3BsaXR0ZXJueWEgbml2w6VlciBvY2ggaGrDpGxwYSB0aWxsIGF0dCBpZGVudGlmaWVyYSBodXIgbWFuIGthbiBnw7ZyYSBzYWtlciBiw6R0dHJlLiBTbcOkcnRhbiBrb21tZXIgYXR0IHZhcmEgZW5vcm07IGF0dCBnw7ZyYSBicmEgc3BlbCDDpHIgZW4gbMOlbmcgcHJvY2VzcyBvY2ggaW5nZW4gZ8O2ciByw6R0dCBmw7Zyc3RhIGfDpW5nZW4uIE9tIGR1IGthbiBow6RyZGEgdXQgb2NoIHTDpWwgbXlja2V0IHN0cnlrIMOkciBkZXQgaMOkciBrbGFzc2VuIGbDtnIgZGlnLlwiXG4gICAgYWR2ZW50dXJlcl9hdHRyaWJ1dGVfMTogXCJFbiB0w7Zyc3QgZWZ0ZXIgYXR0IGzDpHJhIHNpZy4gRHUgdmlsbCBsw6RyYSBkaWcgYXR0IGtvZGEgb2NoIHZpIHZpbGwgbMOkcmEgZGlnIGF0dCBrb2RhLiBEdSBrb21tZXIgZsO2cm1vZGxpZ2VuIGF0dCB2YXJhIGRlbiBzb20gbMOkciB1dCBtZXN0IGkgZGV0IGjDpHIgZmFsbGV0LCBkb2NrLlwiXG4gICAgYWR2ZW50dXJlcl9hdHRyaWJ1dGVfMjogXCJLYXJpc21hdGlzay4gVmFyIHZhcnNhbW1lbiB0eWRsaWcgbWVkIHZhZCBzb20gYmVow7Z2ZXIgZsO2cmLDpHR0cmFzLCBvY2ggZXJianVkIGbDtnJzbGFnIHDDpSBodXIgZsO2cmLDpHR0cmluZ2FyIGthbiBza2UuXCJcbiAgICBhZHZlbnR1cmVyX2pvaW5fcHJlZjogXCJBbnRpbmdlbiB0csOkZmZhciAoZWxsZXIgcmVrcnl0ZXJhciEpIGR1IGVuIGhhbnR2ZXJrYXJlIG9jaCBqb2JiYXIgbWVkIGRlbm5hLCBlbGxlciBzw6Uga3J5c3NhciBkdSBpIHJ1dGFuIG5lZGFuZsO2ciBmw7ZyIGF0dCBmw6UgbWFpbCBuw6RyIGRldCBmaW5ucyBueWEgbml2w6VlciBhdHQgdGVzdGEuIFZpIGtvbW1lciBvY2tzw6UgYXR0IGFuc2zDpSBuaXbDpWVyIHNvbSBiZWjDtnZlciBncmFuc2thcyBww6UgbsOkdHZlcmsgc29tXCJcbiAgICBhZHZlbnR1cmVyX2ZvcnVtX3VybDogXCJ2w6VydCBmb3J1bVwiXG4gICAgYWR2ZW50dXJlcl9qb2luX3N1ZjogXCJzw6Ugb20gZHUgZsO2cmVkcmFyIGF0dCBibGkgbm90aWZpZXJhZCBww6Ugc8OlZGFuYSBzw6R0dCwgYmxpIG1lZGxlbSBkw6RyIVwiXG4gICAgYWR2ZW50dXJlcl9zdWJzY3JpYmVfZGVzYzogXCJGw6UgbWFpbCBuw6RyIGRldCBmaW5ucyBueWEgbml2w6VlciBhdHQgdGVzdGEuXCJcbiAgICBzY3JpYmVfaW50cm9kdWN0aW9uX3ByZWY6IFwiQ29kZUNvbWJhdCBrb21tZXIgaW50ZSBhdHQgdmFyYSBiYXJhIGV0dCBnw6RuZyBuaXbDpWVyLiBEZXQga29tbWVyIG9ja3PDpSBhdHQgaW5rbHVkZXJhIGVuIHJlc3VycyBmw7ZyIGt1bnNrYXAsIGVuIHdpa2kgYXYgcHJvZ3JhbW1lcmluZ3Nrb25jZXB0IHNvbSBuaXbDpWVyIGthbiBhbnNsdXRhIHRpbGwuIFDDpSBkZXQgc8OkdHRldCBzbGlwcGVyIHZhcmplIGhhbnR2ZXJrYXJlIGbDtnJrbGFyYSBpIGRldGFsaiB2YWQgZW4gasOkbWbDtnJlbHNlb3BlcmF0b3Igw6RyLCB1dGFuIGthbiBiYXJhIGzDpG5rYSBzaW4gbml2w6UgdGlsbCBhcnRpa2VsbiBzb20gZsO2cmtsYXJhciBkZXQgb2NoIHJlZGFuIMOkciBza3JpdmVuLCB0aWxsIHNwZWxhcmVucyB1cHBieWdnZWxzZS4gTsOlZ29udGluZyBpIHN0aWwgbWVkIHZhZCBcIlxuICAgIHNjcmliZV9pbnRyb2R1Y3Rpb25fdXJsX21vemlsbGE6IFwiTW96aWxsYSBEZXZlbG9wZXIgTmV0d29ya1wiXG4gICAgc2NyaWJlX2ludHJvZHVjdGlvbl9zdWY6IFwiIGhhciBieWdndC4gT20gZHUgdHlja2VyIGF0dCBkZXQgw6RyIGt1bCBhdHQgdXR0cnlja2EgcHJvZ3JhbW1lcmluZ3Nrb25jZXB0IGkgTWFya2Rvd24tZm9ybSwgw6RyIGRldCBow6RyIGtsYXNzZW4gZsO2ciBkaWcuXCJcbiAgICBzY3JpYmVfYXR0cmlidXRlXzE6IFwiRsO2cm3DpWdhIG1lZCBvcmQgw6RyIGkgcHJpbmNpcCBhbGx0IGR1IGJlaMO2dmVyLiBJbnRlIGJhcmEgZ3JhbW1hdGlrIG9jaCBzdGF2bmluZywgdXRhbiBmw7ZybcOlZ2EgYXR0IGbDtnJtZWRsYSBrb21wbGljZXJhZGUgaWTDqWVyIHRpbGwgYW5kcmEuXCJcbiAgICBjb250YWN0X3VzX3VybDogXCJLb250YWt0YSBvc3NcIiAjIHtjaGFuZ2V9XG4gICAgc2NyaWJlX2pvaW5fZGVzY3JpcHRpb246IFwiQmVyw6R0dGEgbGl0ZSBvbSBkaWcgc2rDpGx2LCBkaW4gZXJmYXJlbmhldCBtZWQgcHJvZ3JhbW1lcmluZyBvY2ggdmlsa2Egc2FrZXIgZHUgc2t1bGxlIHZpbGphIHNrcml2YSBvbS4gVmkgZ8OlciB2aWRhcmUgZMOkcmlmcsOlbiFcIlxuICAgIHNjcmliZV9zdWJzY3JpYmVfZGVzYzogXCJGw6UgbWFpbCBvbSB0aWxsa8Okbm5hZ2l2YW5kZW4gb20gYXJ0aWtsYXIuXCJcbiAgICBkaXBsb21hdF9pbnRyb2R1Y3Rpb25fcHJlZjogXCJPbSB2aSBsw6RyZGUgb3NzIG7DpWdvbnRpbmcgZnLDpW4gXCJcbiAgICBkaXBsb21hdF9sYXVuY2hfdXJsOiBcImxhbnNlcmluZ2VuIGkgb2t0b2JlclwiXG4gICAgZGlwbG9tYXRfaW50cm9kdWN0aW9uX3N1ZjogXCLDpHIgZGV0IGF0dCBkZXQgZmlubnMgZXR0IHN0b3J0IGludHJlc3NlIGbDtnIgQ29kZUNvbWJhdCBpIGFuZHJhIGzDpG5kZXIhIFZpIGJ5Z2dlciBlbiBrw6VyIGF2IMO2dmVyc8OkdHRhcmUgaXZyaWdhIGF0dCBmw7ZydmFuZGxhIGVuIHNhbWxpbmcgb3JkIHRpbGwgZW4gYW5uYW4gc2FtbGluZyBvcmQgZsO2ciBhdHQgZsOlIENvZGVDb21iYXQgc8OlIHRpbGxnw6RuZ2xpZyBpIHbDpHJsZGVuIHNvbSBtw7ZqbGlndC4gT20gZHUgZ2lsbGFyIGF0dCBmw6UgdGp1dmtpa2FyIHDDpSBrb21tYW5kZSBpbm5laMOlbGwgb2NoIGF0dCBmw6UgZGVzc2Egbml2w6VlciB0aWxsIGRlIGFuZHJhIGkgZGl0dCBsYW5kIHPDpSBzbmFydCBzb20gbcO2amxpZ3Qgw6RyIGRldCBow6RyIGthbnNrZSBrbGFzc2VuIGbDtnIgZGlnLlwiXG4gICAgZGlwbG9tYXRfYXR0cmlidXRlXzE6IFwiRmx5dGFuZGUgZW5nZWxza2Egb2NoIHNwcsOla2V0IGR1IHZpbGwgw7Z2ZXJzw6R0dGEgdGlsbC4gTsOkciBtYW4gZsO2cm1lZGxhciBrb21wbGljZXJhZGUgaWTDqWVyIMOkciBkZXQgdmlrdGlndCBhdHQgaGEgZXR0IHN0YXJrdCBncmVwcCBvbSBiw6VkYSFcIlxuICAgIGRpcGxvbWF0X2kxOG5fcGFnZV9wcmVmaXg6IFwiRHUga2FuIGLDtnJqYSDDtnZlcnPDpHR0YSBuaXbDpWVyIGdlbm9tIGF0dCBnw6UgdGlsbCB2w6VyXCJcbiAgICBkaXBsb21hdF9pMThuX3BhZ2U6IFwiw7Z2ZXJzw6R0dG5pbmdzc2lkYVwiXG4gICAgZGlwbG9tYXRfaTE4bl9wYWdlX3N1ZmZpeDogXCIsIGVsbGVyIGFudsOkbmRhIHbDpXJ0IGdyw6Ruc3NuaXR0IG9jaCBoZW1zaWRhIHDDpSBHaXRIdWIuXCJcbiAgICBkaXBsb21hdF9qb2luX3ByZWZfZ2l0aHViOiBcIkhpdHRhIGRpdHQgc3Byw6VrcyBsb2NhbGUtZmlsIFwiXG4gICAgZGlwbG9tYXRfZ2l0aHViX3VybDogXCJww6UgR2l0SHViXCJcbiAgICBkaXBsb21hdF9qb2luX3N1Zl9naXRodWI6IFwiLCByZWRpZ2VyYSBkZW4gb25saW5lLCBvY2ggc2tpY2thIGVuIHJ5Y2tmw7ZyZnLDpWdhbi4gS3J5c3NhIG9ja3PDpSBpIHJ1dGFuIGjDpHIgbmVkYW5mw7ZyIGbDtnIgYXR0IGjDpWxsYSBkaWcgdXBwZGF0ZXJhZCBvbSBueWEgaW50ZXJuYXRpb25hbGlzZXJpbmdzdXR2ZWNrbGluZ2FyLlwiXG4gICAgZGlwbG9tYXRfc3Vic2NyaWJlX2Rlc2M6IFwiRsOlIG1haWwgb20gaTE4bi11dHZlY2tsaW5nYXIgb2NoIG5pdsOlZXIgYXR0IMO2dmVyc8OkdHRhLlwiXG4gICAgYW1iYXNzYWRvcl9pbnRyb2R1Y3Rpb246IFwiRGV0IMOkciBlbiBnZW1lbnNrYXAgdmkgYnlnZ2VyLCBvY2ggZHUgw6RyIGFuc2x1dG5pbmdhcm5hLiBWaSBoYXIgT2xhcmstY2hhdHRlciwgbWFpbCBvY2ggc29jaWFsYSBuw6R0dmVyayBtZWQgbcOlbmdhIG3DpG5uaXNrb3IgYXR0IHByYXRhIG1lZCBvY2ggaGrDpGxwYSBiZWthbnRhIHNpZyBtZWQgc3BlbGV0IG9jaCBsw6RyYSBzaWcgZnLDpW4uIE9tIGR1IHZpbGwgaGrDpGxwYSBtw6Rubmlza29yIGF0dCBibGkgaW52b2x2ZXJhZGUgb2NoIGhhIGt1bCwgb2NoIGhhIGJyYSBrb2xsIHDDpSBDb2RlQ29tYmF0cyBwdWxzIG9jaCB2YXIgdmkgw6RyIHDDpSB2w6RnLCBrYW5za2UgZGV0IGjDpHIgw6RyIGtsYXNzZW4gZsO2ciBkaWcuXCJcbiAgICBhbWJhc3NhZG9yX2F0dHJpYnV0ZV8xOiBcIktvbW11bmlrYXRpb25zZsOkcmRpZ2hldGVyLiBLdW5uYSBpZGVudGlmaWVyYSBwcm9ibGVtZW4gc3BlbGFybmEgaGFyIG9jaCBoasOkbHBhIHRpbGwgYXR0IGzDtnNhIGRlbS4gT2Nrc8OlIGF0dCBow6VsbGEgcmVzdGVuIGF2IG9zcyBpbmZvcm1lcmFkZSBvbSB2YWQgc3BlbGFybmEgc8OkZ2VyLCB2YWQgZGUgZ2lsbGFyIG9jaCB2YWQgZGUgaW50ZSBnaWxsYXIgb2NoIHZhZCBkZSB2aWxsIGhhIG1lciBhdiFcIlxuICAgIGFtYmFzc2Fkb3Jfam9pbl9kZXNjOiBcImJlcsOkdHRhIG9tIGRpZyBzasOkbHYsIHZhZCBkdSBoYXIgZ2pvcnQgb2NoIHZhZCBkdSBza3VsbGUgdmFyYSBpbnRyZXNzZXJhZCBhdiBhdHQgZ8O2cmEuIFZpIHRhciBkZXQgZMOkcmlmcsOlbiFcIlxuICAgIGFtYmFzc2Fkb3Jfam9pbl9ub3RlX3N0cm9uZzogXCJOb3RlcmFcIlxuICAgIGFtYmFzc2Fkb3Jfam9pbl9ub3RlX2Rlc2M6IFwiRW4gYXYgdsOlcmEgaMO2Z3N0YSBwcmlvcml0ZXJpbmdhciDDpHIgYXR0IGJ5Z2dhIGV0dCBmbGVyc3BlbGFybMOkZ2UgZMOkciBzcGVsYXJlIHNvbSBoYXIgcHJvYmxlbSBtZWQgYXR0IGzDtnNhIG5pdsOlZXIga2FuIGthbGxhIHDDpSB0cm9sbGthcmxhciBhdiBlbiBow7ZncmUgbml2w6UgZsO2ciBhdHQgaGrDpGxwYSBkZW0uIERldCBrb21tZXIgYXR0IHZhcmEgZXR0IGrDpHR0ZWJyYSBzw6R0dCBmw7ZyIGFtYmFzc2Fkw7ZyZXIgYXR0IGfDtnJhIHNpbiBncmVqLiBWaSBow6VsbGVyIGRpZyBpbmZvcm1lcmFkIVwiXG4gICAgYW1iYXNzYWRvcl9zdWJzY3JpYmVfZGVzYzogXCJGw6UgbWFpbCBvbSBzdXBwb3J0dXBwZGF0ZXJpbmdhciBvY2ggZmxlcnNwZWxhcnV0dmVja2xpbmdhclwiXG4jICAgIHRlYWNoZXJfc3Vic2NyaWJlX2Rlc2M6IFwiR2V0IGVtYWlscyBvbiB1cGRhdGVzIGFuZCBhbm5vdW5jZW1lbnRzIGZvciB0ZWFjaGVycy5cIlxuICAgIGNoYW5nZXNfYXV0b19zYXZlOiBcIkbDtnLDpG5kcmluZ2FyIHNwYXJhcyBhdXRvbWF0aXNrdCBuw6RyIGR1IMOkbmRyYXIga3J5c3NydXRvci5cIlxuICAgIGRpbGlnZW50X3NjcmliZXM6IFwiVsOlcmEgZmxpdGlnYSBza3JpZnRsw6RyZGE6XCJcbiAgICBwb3dlcmZ1bF9hcmNobWFnZXM6IFwiVsOlcmEga3JhZnRmdWxsYSDDpHJrZW1hZ2lrZXI6XCJcbiAgICBjcmVhdGl2ZV9hcnRpc2FuczogXCJWw6VyYSBrcmVhdGl2YSBoYW50dmVya2FyZTpcIlxuICAgIGJyYXZlX2FkdmVudHVyZXJzOiBcIlbDpXJhIG1vZGlnYSDDpHZlbnR5cmFyZTpcIlxuICAgIHRyYW5zbGF0aW5nX2RpcGxvbWF0czogXCJWw6VyYSDDtnZlcnPDpHR0YW5kZSBkaXBsb21hdGVyOlwiXG4gICAgaGVscGZ1bF9hbWJhc3NhZG9yczogXCJWw6VyYSBoasOkbHBmdWxsYSBhbWJhc3NhZMO2cmVyOlwiXG5cbiAgbGFkZGVyOlxuIyAgICB0aXRsZTogXCJNdWx0aXBsYXllciBBcmVuYXNcIlxuIyAgICBhcmVuYV90aXRsZTogXCJfX2FyZW5hX18gfCBNdWx0aXBsYXllciBBcmVuYXNcIlxuICAgIG15X21hdGNoZXM6IFwiTWluYSBtYXRjaGVyXCJcbiAgICBzaW11bGF0ZTogXCJTaW11bGVyYVwiXG4gICAgc2ltdWxhdGlvbl9leHBsYW5hdGlvbjogXCJHZW5vbSBhdHQgc2ltdWxlcmEgbWF0Y2hlciBrYW4gZHUgZsOlIGRpbmEgbWF0Y2hlciByYW5rYWRlIGZvcnRhcmUuXCJcbiMgICAgc2ltdWxhdGlvbl9leHBsYW5hdGlvbl9sZWFndWVzOiBcIllvdSB3aWxsIG1haW5seSBoZWxwIHNpbXVsYXRlIGdhbWVzIGZvciBhbGxpZWQgcGxheWVycyBpbiB5b3VyIGNsYW5zIGFuZCBjb3Vyc2VzLlwiXG4gICAgc2ltdWxhdGVfZ2FtZXM6IFwiU2ltdWxlcmEgbWF0Y2hlciFcIlxuICAgIGdhbWVzX3NpbXVsYXRlZF9ieTogXCJTcGVsIHNpbXVsZXJhZGUgYXYgZGlnOlwiXG4gICAgZ2FtZXNfc2ltdWxhdGVkX2ZvcjogXCJTcGVsIHNpbXVsZXJhZGUgw6V0IGRpZzpcIlxuIyAgICBnYW1lc19pbl9xdWV1ZTogXCJHYW1lcyBjdXJyZW50bHkgaW4gdGhlIHF1ZXVlOlwiXG4gICAgZ2FtZXNfc2ltdWxhdGVkOiBcIlNpbXVsZXJhZGUgc3BlbFwiXG4gICAgZ2FtZXNfcGxheWVkOiBcIlNwZWxhZGUgc3BlbFwiXG4gICAgcmF0aW86IFwiRsO2cmjDpWxsYW5kZVwiXG4gICAgbGVhZGVyYm9hcmQ6IFwiUmVzdWx0YXR0YXZsYVwiXG4gICAgYmF0dGxlX2FzOiBcIkvDpG1wYSBzb20gXCJcbiAgICBzdW1tYXJ5X3lvdXI6IFwiRGluYSBcIlxuICAgIHN1bW1hcnlfbWF0Y2hlczogXCJNYXRjaGVyIC0gXCJcbiAgICBzdW1tYXJ5X3dpbnM6IFwiIFZpbnN0ZXIsIFwiXG4gICAgc3VtbWFyeV9sb3NzZXM6IFwiIEbDtnJsdXN0YXJcIlxuICAgIHJhbmtfbm9fY29kZTogXCJJbmdlbiBueSBrb2QgYXR0IHJhbmthXCJcbiAgICByYW5rX215X2dhbWU6IFwiUmFua2EgbWluIG1hdGNoIVwiXG4gICAgcmFua19zdWJtaXR0aW5nOiBcIlNraWNrYXIuLi5cIlxuICAgIHJhbmtfc3VibWl0dGVkOiBcIkluc2tpY2thZCBmw7ZyIHJhbmtuaW5nXCJcbiAgICByYW5rX2ZhaWxlZDogXCJLdW5kZSBpbnRlIHJhbmthXCJcbiAgICByYW5rX2JlaW5nX3JhbmtlZDogXCJNYXRjaGVuIGJsaXIgcmFua2FkXCJcbiMgICAgcmFua19sYXN0X3N1Ym1pdHRlZDogXCJzdWJtaXR0ZWQgXCJcbiAgICBoZWxwX3NpbXVsYXRlOiBcIkhqw6RscCB0aWxsIGF0dCBzaW11bGVyYSBzcGVsP1wiXG4gICAgY29kZV9iZWluZ19zaW11bGF0ZWQ6IFwiRGluIG55YSBrb2QgaMOlbGxlciBww6UgYXR0IGJsaSBzaW11bGVyYWQgYXYgYW5kcmEgc3BlbGFyZSBmw7ZyIHJhbmtuaW5nLiBEZXR0YSBrb21tZXIgYXR0IHVwcGRhdGVyYXMgYWxsdCBlZnRlcnNvbSBueWEgbWF0Y2hlciBrb21tZXIgaW4uXCJcbiAgICBub19yYW5rZWRfbWF0Y2hlc19wcmU6IFwiSW5nYSByYW5rYWRlIG1hdGNoZXIgZsO2ciBcIlxuICAgIG5vX3JhbmtlZF9tYXRjaGVzX3Bvc3Q6IFwiIGxhZ2V0ISBTcGVsYSBtb3QgbsOlZ3JhIG1vdHN0w6VuZGFyZSBvY2gga29tIHNlZGFuIHRpbGxiYWthIGl0IGbDtnIgYXR0IGbDpSBkaW4gbWF0Y2ggcmFua2FkLlwiXG4gICAgY2hvb3NlX29wcG9uZW50OiBcIlbDpGxqIGVuIG1vdHN0w6VuZGFyZVwiXG4gICAgc2VsZWN0X3lvdXJfbGFuZ3VhZ2U6IFwiVsOkbGogc3Byw6VrIVwiXG4gICAgdHV0b3JpYWxfcGxheTogXCJTcGVsYSB0dXRvcmlhbFwiXG4gICAgdHV0b3JpYWxfcmVjb21tZW5kZWQ6IFwiUmVrb21tZW5kZXJhcyBvbSBkdSBhbGRyaWcgaGFyIHNwZWxhdCB0aWRpZ2FyZVwiXG4gICAgdHV0b3JpYWxfc2tpcDogXCJIb3BwYSDDtnZlciB0dXRvcmlhbFwiXG4gICAgdHV0b3JpYWxfbm90X3N1cmU6IFwiSW50ZSBzw6RrZXIgcMOlIHZhZCBzb20gaMOkbmRlcj9cIlxuICAgIHR1dG9yaWFsX3BsYXlfZmlyc3Q6IFwiU3BlbGEgdHV0b3JpYWwgZsO2cnN0LlwiXG4gICAgc2ltcGxlX2FpOiBcIkVua2VsIEFJXCIgIyB7Y2hhbmdlfVxuICAgIHdhcm11cDogXCJVcHB2w6RybW5pbmdcIlxuICAgIGZyaWVuZHNfcGxheWluZzogXCJWw6RubmVyIHNwZWxhclwiXG4gICAgbG9nX2luX2Zvcl9mcmllbmRzOiBcIkxvZ2dhIGluIGbDtnIgYXR0IHNwZWxhIG1lZCBkaW5hIHbDpG5uZXIhXCJcbiMgICAgc29jaWFsX2Nvbm5lY3RfYmx1cmI6IFwiQ29ubmVjdCBhbmQgcGxheSBhZ2FpbnN0IHlvdXIgZnJpZW5kcyFcIlxuIyAgICBpbnZpdGVfZnJpZW5kc190b19iYXR0bGU6IFwiSW52aXRlIHlvdXIgZnJpZW5kcyB0byBqb2luIHlvdSBpbiBiYXR0bGUhXCJcbiMgICAgZmlnaHQ6IFwiRmlnaHQhXCJcbiAgICB3YXRjaF92aWN0b3J5OiBcIlNlIGRpbiBzZWdlclwiXG4jICAgIGRlZmVhdF90aGU6IFwiRGVmZWF0IHRoZVwiXG4jICAgIHdhdGNoX2JhdHRsZTogXCJXYXRjaCB0aGUgYmF0dGxlXCJcbiAgICB0b3VybmFtZW50X3N0YXJ0ZWQ6IFwiLCBiw7ZyamFkZVwiXG4gICAgdG91cm5hbWVudF9lbmRzOiBcIlR1cm5lcmluZyBzbHV0YXJcIlxuICAgIHRvdXJuYW1lbnRfZW5kZWQ6IFwiVHVybmVyaW5nIHNsdXRhZGVcIlxuICAgIHRvdXJuYW1lbnRfcnVsZXM6IFwiVHVybmVyaW5nc3JlZ2xlclwiXG4jICAgIHRvdXJuYW1lbnRfYmx1cmI6IFwiV3JpdGUgY29kZSwgY29sbGVjdCBnb2xkLCBidWlsZCBhcm1pZXMsIGNydXNoIGZvZXMsIHdpbiBwcml6ZXMsIGFuZCB1cGdyYWRlIHlvdXIgY2FyZWVyIGluIG91ciAkNDAsMDAwIEdyZWVkIHRvdXJuYW1lbnQhIENoZWNrIG91dCB0aGUgZGV0YWlsc1wiXG4jICAgIHRvdXJuYW1lbnRfYmx1cmJfY3Jpc3NfY3Jvc3M6IFwiV2luIGJpZHMsIGNvbnN0cnVjdCBwYXRocywgb3V0d2l0IG9wcG9uZW50cywgZ3JhYiBnZW1zLCBhbmQgdXBncmFkZSB5b3VyIGNhcmVlciBpbiBvdXIgQ3Jpc3MtQ3Jvc3MgdG91cm5hbWVudCEgQ2hlY2sgb3V0IHRoZSBkZXRhaWxzXCJcbiMgICAgdG91cm5hbWVudF9ibHVyYl96ZXJvX3N1bTogXCJVbmxlYXNoIHlvdXIgY29kaW5nIGNyZWF0aXZpdHkgaW4gYm90aCBnb2xkIGdhdGhlcmluZyBhbmQgYmF0dGxlIHRhY3RpY3MgaW4gdGhpcyBhbHBpbmUgbWlycm9yIG1hdGNoIGJldHdlZW4gcmVkIHNvcmNlcmVyIGFuZCBibHVlIHNvcmNlcmVyLiBUaGUgdG91cm5hbWVudCBiZWdhbiBvbiBGcmlkYXksIE1hcmNoIDI3IGFuZCB3aWxsIHJ1biB1bnRpbCBNb25kYXksIEFwcmlsIDYgYXQgNVBNIFBEVC4gQ29tcGV0ZSBmb3IgZnVuIGFuZCBnbG9yeSEgQ2hlY2sgb3V0IHRoZSBkZXRhaWxzXCJcbiMgICAgdG91cm5hbWVudF9ibHVyYl9hY2Vfb2ZfY29kZXJzOiBcIkJhdHRsZSBpdCBvdXQgaW4gdGhlIGZyb3plbiBnbGFjaWVyIGluIHRoaXMgZG9taW5hdGlvbi1zdHlsZSBtaXJyb3IgbWF0Y2ghIFRoZSB0b3VybmFtZW50IGJlZ2FuIG9uIFdlZG5lc2RheSwgU2VwdGVtYmVyIDE2IGFuZCB3aWxsIHJ1biB1bnRpbCBXZWRuZXNkYXksIE9jdG9iZXIgMTQgYXQgNVBNIFBEVC4gQ2hlY2sgb3V0IHRoZSBkZXRhaWxzXCJcbiMgICAgdG91cm5hbWVudF9ibHVyYl9ibG9nOiBcIm9uIG91ciBibG9nXCJcbiAgICBydWxlczogXCJSZWdsZXJcIlxuICAgIHdpbm5lcnM6IFwiVmlubmFyZVwiXG4jICAgIGxlYWd1ZTogXCJMZWFndWVcIlxuIyAgICByZWRfYWk6IFwiUmVkIENQVVwiICMgXCJSZWQgQUkgV2luc1wiLCBhdCBlbmQgb2YgbXVsdGlwbGF5ZXIgbWF0Y2ggcGxheWJhY2tcbiMgICAgYmx1ZV9haTogXCJCbHVlIENQVVwiXG4jICAgIHdpbnM6IFwiV2luc1wiICMgQXQgZW5kIG9mIG11bHRpcGxheWVyIG1hdGNoIHBsYXliYWNrXG4jICAgIGh1bWFuczogXCJSZWRcIiAjIExhZGRlciBwYWdlIGRpc3BsYXkgdGVhbSBuYW1lXG4jICAgIG9ncmVzOiBcIkJsdWVcIlxuIyAgICBsaXZlX3RvdXJuYW1lbnQ6IFwiTGl2ZSBUb3VybmFtZW50XCJcbiMgICAgYXdhaXRpbmdfdG91cm5hbWVudF90aXRsZTogXCJUb3VybmFtZW50IEluYWN0aXZlXCJcbiMgICAgYXdhaXRpbmdfdG91cm5hbWVudF9ibHVyYjogXCJUaGUgdG91cm5hbWVudCBhcmVuYSBpcyBub3QgY3VycmVudGx5IGFjdGl2ZS5cIlxuXG4gIHVzZXI6XG4jICAgIHVzZXJfdGl0bGU6IFwiX19uYW1lX18gLSBMZWFybiB0byBDb2RlIHdpdGggQ29kZUNvbWJhdFwiXG4gICAgc3RhdHM6IFwiU3RhdHNcIlxuICAgIHNpbmdsZXBsYXllcl90aXRsZTogXCJFbnNwZWxhcm5pdsOlZXJcIlxuICAgIG11bHRpcGxheWVyX3RpdGxlOiBcIkZsZXJzcGVsYXJuaXbDpWVyXCJcbiAgICBhY2hpZXZlbWVudHNfdGl0bGU6IFwiUHJlc3RhdGlvbmVyXCJcbiAgICBsYXN0X3BsYXllZDogXCJTZW5hc3Qgc3BlbGFkXCJcbiAgICBzdGF0dXM6IFwiU3RhdHVzXCJcbiAgICBzdGF0dXNfY29tcGxldGVkOiBcIkF2a2xhcmFkXCJcbiAgICBzdGF0dXNfdW5maW5pc2hlZDogXCJFaiBhdmtsYXJhZFwiXG4gICAgbm9fc2luZ2xlcGxheWVyOiBcIkluZ2Egc3BlbCBpIGVua2Vsc3BlbGFybMOkZ2Ugw6RuLlwiXG4gICAgbm9fbXVsdGlwbGF5ZXI6IFwiSW5nYSBzcGVsIGkgZmxlcnNwZWxhcmzDpGdlIMOkbi5cIlxuICAgIG5vX2FjaGlldmVtZW50czogXCJJbmdhIHByZXN0YXRpb25lciDDpG4uXCJcbiAgICBmYXZvcml0ZV9wcmVmaXg6IFwiRmF2b3JpdHNwcsOlazogXCJcbiMgICAgZmF2b3JpdGVfcG9zdGZpeDogXCIuXCJcbiAgICBub3RfbWVtYmVyX29mX2NsYW5zOiBcIkludGUgbWVkbGVtIGF2IG7DpWdvbiBrbGFuIMOkbi5cIlxuICAgIGNlcnRpZmljYXRlX3ZpZXc6IFwiVmlzYSBjZXJ0aWZpa2F0XCJcbiAgICBjZXJ0aWZpY2F0ZV9jbGlja190b192aWV3OiBcIktsaWNrYSBmw7ZyIGF0dCB2aXNhIGNlcnRpZmlrYXRcIlxuIyAgICBjZXJ0aWZpY2F0ZV9jb3Vyc2VfaW5jb21wbGV0ZTogXCJjb3Vyc2UgaW5jb21wbGV0ZVwiXG4jICAgIGNlcnRpZmljYXRlX29mX2NvbXBsZXRpb246IFwiQ2VydGlmaWNhdGUgb2YgQ29tcGxldGlvblwiXG4jICAgIGNlcnRpZmljYXRlX2VuZG9yc2VkX2J5OiBcIkVuZG9yc2VkIGJ5XCJcbiMgICAgY2VydGlmaWNhdGVfc3RhdHM6IFwiQ291cnNlIFN0YXRzXCJcbiMgICAgY2VydGlmaWNhdGVfbGluZXNfb2Y6IFwibGluZXMgb2ZcIlxuIyAgICBjZXJ0aWZpY2F0ZV9sZXZlbHNfY29tcGxldGVkOiBcImxldmVscyBjb21wbGV0ZWRcIlxuIyAgICBjZXJ0aWZpY2F0ZV9mb3I6IFwiRm9yXCJcbiMgICAgY2VydGlmaWNhdGVfbnVtYmVyOiBcIk5vLlwiXG5cbiAgYWNoaWV2ZW1lbnRzOlxuICAgIGxhc3RfZWFybmVkOiBcIlNlbmFzdCBmw7ZydsOkcnZhZCBkZW5cIlxuICAgIGFtb3VudF9hY2hpZXZlZDogXCJBbnRhbFwiXG4gICAgYWNoaWV2ZW1lbnQ6IFwiUHJlc3RhdGlvblwiXG4jICAgIGN1cnJlbnRfeHBfcHJlZml4OiBcIlwiXG4jICAgIGN1cnJlbnRfeHBfcG9zdGZpeDogXCIgaW4gdG90YWxcIlxuIyAgICBuZXdfeHBfcHJlZml4OiBcIlwiXG4jICAgIG5ld194cF9wb3N0Zml4OiBcIiBlYXJuZWRcIlxuIyAgICBsZWZ0X3hwX3ByZWZpeDogXCJcIlxuIyAgICBsZWZ0X3hwX2luZml4OiBcIiB1bnRpbCBsZXZlbCBcIlxuIyAgICBsZWZ0X3hwX3Bvc3RmaXg6IFwiXCJcblxuICBhY2NvdW50OlxuIyAgICB0aXRsZTogXCJBY2NvdW50XCJcbiMgICAgc2V0dGluZ3NfdGl0bGU6IFwiQWNjb3VudCBTZXR0aW5nc1wiXG4jICAgIHVuc3Vic2NyaWJlX3RpdGxlOiBcIlVuc3Vic2NyaWJlXCJcbiMgICAgcGF5bWVudHNfdGl0bGU6IFwiUGF5bWVudHNcIlxuIyAgICBzdWJzY3JpcHRpb25fdGl0bGU6IFwiU3Vic2NyaXB0aW9uXCJcbiMgICAgaW52b2ljZXNfdGl0bGU6IFwiSW52b2ljZXNcIlxuIyAgICBwcmVwYWlkc190aXRsZTogXCJQcmVwYWlkc1wiXG4gICAgcGF5bWVudHM6IFwiQmV0YWxuaW5nYXJcIlxuIyAgICBwcmVwYWlkX2NvZGVzOiBcIlByZXBhaWQgQ29kZXNcIlxuIyAgICBwdXJjaGFzZWQ6IFwiUHVyY2hhc2VkXCJcbiMgICAgc3Vic2NyaWJlX2Zvcl9nZW1zOiBcIlN1YnNjcmliZSBmb3IgZ2Vtc1wiXG4gICAgc3Vic2NyaXB0aW9uOiBcIlByZW51bWVyYXRpb25cIlxuICAgIGludm9pY2VzOiBcIkZha3R1cm9yXCJcbiMgICAgc2VydmljZV9hcHBsZTogXCJBcHBsZVwiXG4gICAgc2VydmljZV93ZWI6IFwiV2ViYlwiXG4gICAgcGFpZF9vbjogXCJCZXRhbGF0IGRlblwiXG4jICAgIHNlcnZpY2U6IFwiU2VydmljZVwiXG4gICAgcHJpY2U6IFwiUHJpc1wiXG4gICAgZ2VtczogXCLDhGRlbHN0ZW5hclwiXG4gICAgYWN0aXZlOiBcIkFrdGl2XCJcbiMgICAgc3Vic2NyaWJlZDogXCJTdWJzY3JpYmVkXCJcbiMgICAgdW5zdWJzY3JpYmVkOiBcIlVuc3Vic2NyaWJlZFwiXG4jICAgIGFjdGl2ZV91bnRpbDogXCJBY3RpdmUgVW50aWxcIlxuICAgIGNvc3Q6IFwiS29zdG5hZFwiXG4gICAgbmV4dF9wYXltZW50OiBcIk7DpHN0YSBiZXRhbG5pbmdcIlxuICAgIGNhcmQ6IFwiS29ydFwiXG4jICAgIHN0YXR1c191bnN1YnNjcmliZWRfYWN0aXZlOiBcIllvdSdyZSBub3Qgc3Vic2NyaWJlZCBhbmQgd29uJ3QgYmUgYmlsbGVkLCBidXQgeW91ciBhY2NvdW50IGlzIHN0aWxsIGFjdGl2ZSBmb3Igbm93LlwiXG4jICAgIHN0YXR1c191bnN1YnNjcmliZWQ6IFwiR2V0IGFjY2VzcyB0byBuZXcgbGV2ZWxzLCBoZXJvZXMsIGl0ZW1zLCBhbmQgYm9udXMgZ2VtcyB3aXRoIGEgQ29kZUNvbWJhdCBzdWJzY3JpcHRpb24hXCJcbiMgICAgbm90X3lldF92ZXJpZmllZDogXCJOb3QgeWV0IHZlcmlmaWVkLlwiXG4jICAgIHJlc2VuZF9lbWFpbDogXCJSZXNlbmQgZW1haWxcIlxuIyAgICBlbWFpbF9zZW50OiBcIkVtYWlsIHNlbnQhIENoZWNrIHlvdXIgaW5ib3guXCJcbiMgICAgdmVyaWZ5aW5nX2VtYWlsOiBcIlZlcmlmeWluZyB5b3VyIGVtYWlsIGFkZHJlc3MuLi5cIlxuIyAgICBzdWNjZXNzZnVsbHlfdmVyaWZpZWQ6IFwiWW91J3ZlIHN1Y2Nlc3NmdWxseSB2ZXJpZmllZCB5b3VyIGVtYWlsIGFkZHJlc3MhXCJcbiMgICAgdmVyaWZ5X2Vycm9yOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nIHdoZW4gdmVyaWZ5aW5nIHlvdXIgZW1haWwgOihcIlxuIyAgICB1bnN1YnNjcmliZV9mcm9tX21hcmtldGluZzogXCJVbnN1YnNjcmliZSBfX2VtYWlsX18gZnJvbSBhbGwgQ29kZUNvbWJhdCBtYXJrZXRpbmcgZW1haWxzP1wiXG4jICAgIHVuc3Vic2NyaWJlX2J1dHRvbjogXCJZZXMsIHVuc3Vic2NyaWJlXCJcbiMgICAgdW5zdWJzY3JpYmVfZmFpbGVkOiBcIkZhaWxlZFwiXG4jICAgIHVuc3Vic2NyaWJlX3N1Y2Nlc3M6IFwiU3VjY2Vzc1wiXG5cbiMgIGFjY291bnRfaW52b2ljZXM6XG4jICAgIGFtb3VudDogXCJBbW91bnQgaW4gVVMgZG9sbGFyc1wiXG4jICAgIGRlY2xpbmVkOiBcIllvdXIgY2FyZCB3YXMgZGVjbGluZWRcIlxuIyAgICBpbnZhbGlkX2Ftb3VudDogXCJQbGVhc2UgZW50ZXIgYSBVUyBkb2xsYXIgYW1vdW50LlwiXG4jICAgIG5vdF9sb2dnZWRfaW46IFwiTG9nIGluIG9yIGNyZWF0ZSBhbiBhY2NvdW50IHRvIGFjY2VzcyBpbnZvaWNlcy5cIlxuIyAgICBwYXk6IFwiUGF5IEludm9pY2VcIlxuIyAgICBwdXJjaGFzaW5nOiBcIlB1cmNoYXNpbmcuLi5cIlxuIyAgICByZXRyeWluZzogXCJTZXJ2ZXIgZXJyb3IsIHJldHJ5aW5nLlwiXG4jICAgIHN1Y2Nlc3M6IFwiU3VjY2Vzc2Z1bGx5IHBhaWQuIFRoYW5rcyFcIlxuXG4jICBhY2NvdW50X3ByZXBhaWQ6XG4jICAgIHB1cmNoYXNlX2NvZGU6IFwiUHVyY2hhc2UgYSBTdWJzY3JpcHRpb24gQ29kZVwiXG4jICAgIHB1cmNoYXNlX2NvZGUxOiBcIlN1YnNjcmlwdGlvbiBDb2RlcyBjYW4gYmUgcmVkZWVtZWQgdG8gYWRkIHByZW1pdW0gc3Vic2NyaXB0aW9uIHRpbWUgdG8gb25lIG9yIG1vcmUgYWNjb3VudHMgZm9yIHRoZSBIb21lIHZlcnNpb24gb2YgQ29kZUNvbWJhdC5cIlxuIyAgICBwdXJjaGFzZV9jb2RlMjogXCJFYWNoIENvZGVDb21iYXQgYWNjb3VudCBjYW4gb25seSByZWRlZW0gYSBwYXJ0aWN1bGFyIFN1YnNjcmlwdGlvbiBDb2RlIG9uY2UuXCJcbiMgICAgcHVyY2hhc2VfY29kZTM6IFwiU3Vic2NyaXB0aW9uIENvZGUgbW9udGhzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZCBvZiBhbnkgZXhpc3Rpbmcgc3Vic2NyaXB0aW9uIG9uIHRoZSBhY2NvdW50LlwiXG4jICAgIHB1cmNoYXNlX2NvZGU0OiBcIlN1YnNjcmlwdGlvbiBDb2RlcyBhcmUgZm9yIGFjY291bnRzIHBsYXlpbmcgdGhlIEhvbWUgdmVyc2lvbiBvZiBDb2RlQ29tYmF0LCB0aGV5IGNhbm5vdCBiZSB1c2VkIGluIHBsYWNlIG9mIFN0dWRlbnQgTGljZW5zZXMgZm9yIHRoZSBDbGFzc3Jvb20gdmVyc2lvbi5cIlxuIyAgICBwdXJjaGFzZV9jb2RlNTogXCJGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBTdHVkZW50IExpY2Vuc2VzLCByZWFjaCBvdXQgdG9cIlxuIyAgICB1c2VyczogXCJVc2Vyc1wiXG4jICAgIG1vbnRoczogXCJNb250aHNcIlxuIyAgICBwdXJjaGFzZV90b3RhbDogXCJUb3RhbFwiXG4jICAgIHB1cmNoYXNlX2J1dHRvbjogXCJTdWJtaXQgUHVyY2hhc2VcIlxuIyAgICB5b3VyX2NvZGVzOiBcIllvdXIgQ29kZXNcIlxuIyAgICByZWRlZW1fY29kZXM6IFwiUmVkZWVtIGEgU3Vic2NyaXB0aW9uIENvZGVcIlxuIyAgICBwcmVwYWlkX2NvZGU6IFwiUHJlcGFpZCBDb2RlXCJcbiMgICAgbG9va3VwX2NvZGU6IFwiTG9va3VwIHByZXBhaWQgY29kZVwiXG4jICAgIGFwcGx5X2FjY291bnQ6IFwiQXBwbHkgdG8geW91ciBhY2NvdW50XCJcbiMgICAgY29weV9saW5rOiBcIllvdSBjYW4gY29weSB0aGUgY29kZSdzIGxpbmsgYW5kIHNlbmQgaXQgdG8gc29tZW9uZS5cIlxuIyAgICBxdWFudGl0eTogXCJRdWFudGl0eVwiXG4jICAgIHJlZGVlbWVkOiBcIlJlZGVlbWVkXCJcbiMgICAgbm9fY29kZXM6IFwiTm8gY29kZXMgeWV0IVwiXG4jICAgIHlvdV9jYW4xOiBcIllvdSBjYW5cIlxuIyAgICB5b3VfY2FuMjogXCJwdXJjaGFzZSBhIHByZXBhaWQgY29kZVwiXG4jICAgIHlvdV9jYW4zOiBcInRoYXQgY2FuIGJlIGFwcGxpZWQgdG8geW91ciBvd24gYWNjb3VudCBvciBnaXZlbiB0byBvdGhlcnMuXCJcblxuICBsb2FkaW5nX2Vycm9yOlxuICAgIGNvdWxkX25vdF9sb2FkOiBcIkZlbCB2aWQgbGFkZG5pbmcgZnLDpW4gc2VydmVyblwiXG4gICAgY29ubmVjdGlvbl9mYWlsdXJlOiBcIkFuc2x1dG5pbmcgTWlzc2x5Y2thZGVzXCJcbiAgICBjb25uZWN0aW9uX2ZhaWx1cmVfZGVzYzogXCJEZXQgc2VyIGludGUgdXQgc29tIGR1IMOkciBhbnNsdXRlbiB0aWxsIGludGVybmV0ISBLb250cm9sbGVyYSBkaW4gbsOkdHZlcmtzYW5zbHV0bmluZyBvY2ggbGFkZGEgb20gc2lkYW4uXCJcbiAgICBsb2dpbl9yZXF1aXJlZDogXCJJbmxvZ2duaW5nIGtyw6R2c1wiXG4gICAgbG9naW5fcmVxdWlyZWRfZGVzYzogXCJEdSBiZWjDtnZlciB2YXJhIGlubG9nZ2FkIGbDtnIgYXR0IGtvbW1hIMOldCBzaWRhbi5cIlxuICAgIHVuYXV0aG9yaXplZDogXCJEdSBiZWjDtnZlciB2YXJhIGlubG9nZ2FkLiBIYXIgZHUga2Frb3IgYXZha3JpdmVyYWRlP1wiXG4gICAgZm9yYmlkZGVuOiBcIkbDtnJianVkZXRcIlxuICAgIGZvcmJpZGRlbl9kZXNjOiBcIsOFaCBuZWosIGRldCBmaW5ucyBpbmdldCB2aSBrYW4gdmlzYSBkaWcgaMOkciEgU2UgdGlsbCBhdHQgZHUgw6RyIGlubG9nZ2FkIG1lZCByw6R0dCBrb250bywgZWxsZXIgYmVzw7ZrIGVuIGF2IGzDpG5rYXJuYSB1bmRlciBmw7ZyIGF0dCBnw6UgdGlsbGJha2EgdGlsbCBwcm9ncmFtbWVyaW5nZW4hXCJcbiMgICAgbm90X2ZvdW5kOiBcIk5vdCBGb3VuZFwiXG4gICAgbm90X2ZvdW5kX2Rlc2M6IFwiSG0sIGRldCBmaW5ucyBpbmdldCBow6RyLiBCZXPDtmsgZW4gYXYgZsO2bGphbmRlIGzDpG5rYXIgZsO2ciBhdHQga29tbWEgdGlsbGJha2EgdGlsbCBwcm9ncmFtbWVyaW5nZW4hXCJcbiAgICBub3RfYWxsb3dlZDogXCJNZXRvZCBlaiB0aWxsw6V0ZW4uXCJcbiMgICAgdGltZW91dDogXCJTZXJ2ZXIgVGltZW91dFwiXG4jICAgIGNvbmZsaWN0OiBcIlJlc291cmNlIGNvbmZsaWN0LlwiXG4jICAgIGJhZF9pbnB1dDogXCJCYWQgaW5wdXQuXCJcbiAgICBzZXJ2ZXJfZXJyb3I6IFwiU2VydmVyZmVsLlwiXG4gICAgdW5rbm93bjogXCJPa8OkbnQgZmVsXCJcbiMgICAgZXJyb3I6IFwiRVJST1JcIlxuICAgIGdlbmVyYWxfZGVzYzogXCJOw6Vnb3QgZ2ljayBmZWwsIG9jaCBkZXQgw6RyIGFudGFnbGlnZW4gdsOlcnQgZmVsLiBQcm92YSB2w6RudGEgZW4gc3R1bmQgb2NoIGxhZGRhIG9tIHNpZGFuLCBlbGxlciBiZXPDtmsgZW4gYXYgZsO2bGphbmRlIGzDpG5rYXIgZsO2ciBhdHQgZ8OlIHRpbGxiYWthIHRpbGwgcHJvZ3JhbW1lcmluZ2VuIVwiXG5cbiMgIHJlc291cmNlczpcbiMgICAgbGV2ZWw6IFwiTGV2ZWxcIlxuIyAgICBwYXRjaDogXCJQYXRjaFwiXG4jICAgIHBhdGNoZXM6IFwiUGF0Y2hlc1wiXG4jICAgIHN5c3RlbTogXCJTeXN0ZW1cIlxuIyAgICBzeXN0ZW1zOiBcIlN5c3RlbXNcIlxuIyAgICBjb21wb25lbnQ6IFwiQ29tcG9uZW50XCJcbiMgICAgY29tcG9uZW50czogXCJDb21wb25lbnRzXCJcbiMgICAgaGVybzogXCJIZXJvXCJcbiMgICAgY2FtcGFpZ25zOiBcIkNhbXBhaWduc1wiXG5cbiMgIGNvbmNlcHRzOlxuIyAgICBhZHZhbmNlZF9jc3NfcnVsZXM6IFwiQWR2YW5jZWQgQ1NTIFJ1bGVzXCJcbiMgICAgYWR2YW5jZWRfY3NzX3NlbGVjdG9yczogXCJBZHZhbmNlZCBDU1MgU2VsZWN0b3JzXCJcbiMgICAgYWR2YW5jZWRfaHRtbF9hdHRyaWJ1dGVzOiBcIkFkdmFuY2VkIEhUTUwgQXR0cmlidXRlc1wiXG4jICAgIGFkdmFuY2VkX2h0bWxfdGFnczogXCJBZHZhbmNlZCBIVE1MIFRhZ3NcIlxuIyAgICBhbGdvcml0aG1fYXZlcmFnZTogXCJBbGdvcml0aG0gQXZlcmFnZVwiXG4jICAgIGFsZ29yaXRobV9maW5kX21pbm1heDogXCJBbGdvcml0aG0gRmluZCBNaW4vTWF4XCJcbiMgICAgYWxnb3JpdGhtX3NlYXJjaF9iaW5hcnk6IFwiQWxnb3JpdGhtIFNlYXJjaCBCaW5hcnlcIlxuIyAgICBhbGdvcml0aG1fc2VhcmNoX2dyYXBoOiBcIkFsZ29yaXRobSBTZWFyY2ggR3JhcGhcIlxuIyAgICBhbGdvcml0aG1fc29ydDogXCJBbGdvcml0aG0gU29ydFwiXG4jICAgIGFsZ29yaXRobV9zdW06IFwiQWxnb3JpdGhtIFN1bVwiXG4jICAgIGFyZ3VtZW50czogXCJBcmd1bWVudHNcIlxuIyAgICBhcml0aG1ldGljOiBcIkFyaXRobWV0aWNcIlxuIyAgICBhcnJheV8yZDogXCIyRCBBcnJheVwiXG4jICAgIGFycmF5X2luZGV4OiBcIkFycmF5IEluZGV4aW5nXCJcbiMgICAgYXJyYXlfaXRlcmF0aW5nOiBcIkl0ZXJhdGluZyBPdmVyIEFycmF5c1wiXG4jICAgIGFycmF5X2xpdGVyYWxzOiBcIkFycmF5IExpdGVyYWxzXCJcbiMgICAgYXJyYXlfc2VhcmNoaW5nOiBcIkFycmF5IFNlYXJjaGluZ1wiXG4jICAgIGFycmF5X3NvcnRpbmc6IFwiQXJyYXkgU29ydGluZ1wiXG4jICAgIGFycmF5czogXCJBcnJheXNcIlxuIyAgICBiYXNpY19jc3NfcnVsZXM6IFwiQmFzaWMgQ1NTIHJ1bGVzXCJcbiMgICAgYmFzaWNfY3NzX3NlbGVjdG9yczogXCJCYXNpYyBDU1Mgc2VsZWN0b3JzXCJcbiMgICAgYmFzaWNfaHRtbF9hdHRyaWJ1dGVzOiBcIkJhc2ljIEhUTUwgQXR0cmlidXRlc1wiXG4jICAgIGJhc2ljX2h0bWxfdGFnczogXCJCYXNpYyBIVE1MIFRhZ3NcIlxuIyAgICBiYXNpY19zeW50YXg6IFwiQmFzaWMgU3ludGF4XCJcbiMgICAgYmluYXJ5OiBcIkJpbmFyeVwiXG4jICAgIGJvb2xlYW5fYW5kOiBcIkJvb2xlYW4gQW5kXCJcbiMgICAgYm9vbGVhbl9pbmVxdWFsaXR5OiBcIkJvb2xlYW4gSW5lcXVhbGl0eVwiXG4jICAgIGJvb2xlYW5fZXF1YWxpdHk6IFwiQm9vbGVhbiBFcXVhbGl0eVwiXG4jICAgIGJvb2xlYW5fZ3JlYXRlcl9sZXNzOiBcIkJvb2xlYW4gR3JlYXRlci9MZXNzXCJcbiMgICAgYm9vbGVhbl9sb2dpY19zaG9ydGNpcmN1aXQ6IFwiQm9vbGVhbiBMb2dpYyBTaG9ydGNpcmN1aXRpbmdcIlxuIyAgICBib29sZWFuX25vdDogXCJCb29sZWFuIE5vdFwiXG4jICAgIGJvb2xlYW5fb3BlcmF0b3JfcHJlY2VkZW5jZTogXCJCb29sZWFuIE9wZXJhdG9yIFByZWNlZGVuY2VcIlxuIyAgICBib29sZWFuX29yOiBcIkJvb2xlYW4gT3JcIlxuIyAgICBib29sZWFuX3dpdGhfeHljb29yZGluYXRlczogXCJDb29yZGluYXRlIENvbXBhcmlzb25cIlxuIyAgICBib290c3RyYXA6IFwiQm9vdHN0cmFwXCJcbiMgICAgYnJlYWtfc3RhdGVtZW50czogXCJCcmVhayBTdGF0ZW1lbnRzXCJcbiMgICAgY2xhc3NlczogXCJDbGFzc2VzXCJcbiMgICAgY29udGludWVfc3RhdGVtZW50czogXCJDb250aW51ZSBTdGF0ZW1lbnRzXCJcbiMgICAgZG9tX2V2ZW50czogXCJET00gRXZlbnRzXCJcbiMgICAgZHluYW1pY19zdHlsaW5nOiBcIkR5bmFtaWMgU3R5bGluZ1wiXG4jICAgIGV2ZW50czogXCJFdmVudHNcIlxuIyAgICBldmVudF9jb25jdXJyZW5jeTogXCJFdmVudCBDb25jdXJyZW5jeVwiXG4jICAgIGV2ZW50X2RhdGE6IFwiRXZlbnQgRGF0YVwiXG4jICAgIGV2ZW50X2hhbmRsZXJzOiBcIkV2ZW50IEhhbmRsZXJzXCJcbiMgICAgZXZlbnRfc3Bhd246IFwiU3Bhd24gRXZlbnRcIlxuIyAgICBmb3JfbG9vcHM6IFwiRm9yIExvb3BzXCJcbiMgICAgZm9yX2xvb3BzX25lc3RlZDogXCJOZXN0ZWQgRm9yIExvb3BzXCJcbiMgICAgZm9yX2xvb3BzX3JhbmdlOiBcIkZvciBMb29wcyBSYW5nZVwiXG4jICAgIGZ1bmN0aW9uczogXCJGdW5jdGlvbnNcIlxuIyAgICBmdW5jdGlvbnNfcGFyYW1ldGVyczogXCJQYXJhbWV0ZXJzXCJcbiMgICAgZnVuY3Rpb25zX211bHRpcGxlX3BhcmFtZXRlcnM6IFwiTXVsdGlwbGUgUGFyYW1ldGVyc1wiXG4jICAgIGdhbWVfYWk6IFwiR2FtZSBBSVwiXG4jICAgIGdhbWVfZ29hbHM6IFwiR2FtZSBHb2Fsc1wiXG4jICAgIGdhbWVfc3Bhd246IFwiR2FtZSBTcGF3blwiXG4jICAgIGdyYXBoaWNzOiBcIkdyYXBoaWNzXCJcbiMgICAgZ3JhcGhzOiBcIkdyYXBoc1wiXG4jICAgIGhlYXBzOiBcIkhlYXBzXCJcbiMgICAgaWZfY29uZGl0aW9uOiBcIkNvbmRpdGlvbmFsIElmIFN0YXRlbWVudHNcIlxuIyAgICBpZl9lbHNlX2lmOiBcIklmL0Vsc2UgSWYgU3RhdGVtZW50c1wiXG4jICAgIGlmX2Vsc2Vfc3RhdGVtZW50czogXCJJZi9FbHNlIFN0YXRlbWVudHNcIlxuIyAgICBpZl9zdGF0ZW1lbnRzOiBcIklmIFN0YXRlbWVudHNcIlxuIyAgICBpZl9zdGF0ZW1lbnRzX25lc3RlZDogXCJOZXN0ZWQgSWYgU3RhdGVtZW50c1wiXG4jICAgIGluZGV4aW5nOiBcIkFycmF5IEluZGV4ZXNcIlxuIyAgICBpbnB1dF9oYW5kbGluZ19mbGFnczogXCJJbnB1dCBIYW5kbGluZyAtIEZsYWdzXCJcbiMgICAgaW5wdXRfaGFuZGxpbmdfa2V5Ym9hcmQ6IFwiSW5wdXQgSGFuZGxpbmcgLSBLZXlib2FyZFwiXG4jICAgIGlucHV0X2hhbmRsaW5nX21vdXNlOiBcIklucHV0IEhhbmRsaW5nIC0gTW91c2VcIlxuIyAgICBpbnRlcm1lZGlhdGVfY3NzX3J1bGVzOiBcIkludGVybWVkaWF0ZSBDU1MgUnVsZXNcIlxuIyAgICBpbnRlcm1lZGlhdGVfY3NzX3NlbGVjdG9yczogXCJJbnRlcm1lZGlhdGUgQ1NTIFNlbGVjdG9yc1wiXG4jICAgIGludGVybWVkaWF0ZV9odG1sX2F0dHJpYnV0ZXM6IFwiSW50ZXJtZWRpYXRlIEhUTUwgQXR0cmlidXRlc1wiXG4jICAgIGludGVybWVkaWF0ZV9odG1sX3RhZ3M6IFwiSW50ZXJtZWRpYXRlIEhUTUwgVGFnc1wiXG4jICAgIGpxdWVyeTogXCJqUXVlcnlcIlxuIyAgICBqcXVlcnlfYW5pbWF0aW9uczogXCJqUXVlcnkgQW5pbWF0aW9uc1wiXG4jICAgIGpxdWVyeV9maWx0ZXJpbmc6IFwialF1ZXJ5IEVsZW1lbnQgRmlsdGVyaW5nXCJcbiMgICAganF1ZXJ5X3NlbGVjdG9yczogXCJqUXVlcnkgU2VsZWN0b3JzXCJcbiMgICAgbGVuZ3RoOiBcIkFycmF5IExlbmd0aFwiXG4jICAgIG1hdGhfY29vcmRpbmF0ZXM6IFwiQ29vcmRpbmF0ZSBNYXRoXCJcbiMgICAgbWF0aF9nZW9tZXRyeTogXCJHZW9tZXRyeVwiXG4jICAgIG1hdGhfb3BlcmF0aW9uczogXCJNYXRoIExpYnJhcnkgT3BlcmF0aW9uc1wiXG4jICAgIG1hdGhfcHJvcG9ydGlvbnM6IFwiUHJvcG9ydGlvbiBNYXRoXCJcbiMgICAgbWF0aF90cmlnb25vbWV0cnk6IFwiVHJpZ29ub21ldHJ5XCJcbiMgICAgb2JqZWN0X2xpdGVyYWxzOiBcIk9iamVjdCBMaXRlcmFsc1wiXG4jICAgIHBhcmFtZXRlcnM6IFwiUGFyYW1ldGVyc1wiXG4jICAgIHByb2dyYW1zOiBcIlByb2dyYW1zXCJcbiMgICAgcHJvcGVydGllczogXCJQcm9wZXJ0aWVzXCJcbiMgICAgcHJvcGVydHlfYWNjZXNzOiBcIkFjY2Vzc2luZyBQcm9wZXJ0aWVzXCJcbiMgICAgcHJvcGVydHlfYXNzaWdubWVudDogXCJBc3NpZ25pbmcgUHJvcGVydGllc1wiXG4jICAgIHByb3BlcnR5X2Nvb3JkaW5hdGU6IFwiQ29vcmRpbmF0ZSBQcm9wZXJ0eVwiXG4jICAgIHF1ZXVlczogXCJEYXRhIFN0cnVjdHVyZXMgLSBRdWV1ZXNcIlxuIyAgICByZWFkaW5nX2RvY3M6IFwiUmVhZGluZyB0aGUgRG9jc1wiXG4jICAgIHJlY3Vyc2lvbjogXCJSZWN1cnNpb25cIlxuIyAgICByZXR1cm5fc3RhdGVtZW50czogXCJSZXR1cm4gU3RhdGVtZW50c1wiXG4jICAgIHN0YWNrczogXCJEYXRhIFN0cnVjdHVyZXMgLSBTdGFja3NcIlxuIyAgICBzdHJpbmdzOiBcIlN0cmluZ3NcIlxuIyAgICBzdHJpbmdzX2NvbmNhdGVuYXRpb246IFwiU3RyaW5nIENvbmNhdGVuYXRpb25cIlxuIyAgICBzdHJpbmdzX3N1YnN0cmluZ3M6IFwiU3Vic3RyaW5nXCJcbiMgICAgdHJlZXM6IFwiRGF0YSBTdHJ1Y3R1cmVzIC0gVHJlZXNcIlxuIyAgICB2YXJpYWJsZXM6IFwiVmFyaWFibGVzXCJcbiMgICAgdmVjdG9yczogXCJWZWN0b3JzXCJcbiMgICAgd2hpbGVfY29uZGl0aW9uX2xvb3BzOiBcIldoaWxlIExvb3BzIHdpdGggQ29uZGl0aW9uYWxzXCJcbiMgICAgd2hpbGVfbG9vcHNfc2ltcGxlOiBcIldoaWxlIExvb3BzXCJcbiMgICAgd2hpbGVfbG9vcHNfbmVzdGVkOiBcIk5lc3RlZCBXaGlsZSBMb29wc1wiXG4jICAgIHh5X2Nvb3JkaW5hdGVzOiBcIkNvb3JkaW5hdGUgUGFpcnNcIlxuIyAgICBhZHZhbmNlZF9zdHJpbmdzOiBcIkFkdmFuY2VkIFN0cmluZ3NcIiAjIFJlc3Qgb2YgY29uY2VwdHMgYXJlIGRlcHJlY2F0ZWRcbiMgICAgYWxnb3JpdGhtczogXCJBbGdvcml0aG1zXCJcbiMgICAgYm9vbGVhbl9sb2dpYzogXCJCb29sZWFuIExvZ2ljXCJcbiMgICAgYmFzaWNfaHRtbDogXCJCYXNpYyBIVE1MXCJcbiMgICAgYmFzaWNfY3NzOiBcIkJhc2ljIENTU1wiXG4jICAgIGJhc2ljX3dlYl9zY3JpcHRpbmc6IFwiQmFzaWMgV2ViIFNjcmlwdGluZ1wiXG4jICAgIGludGVybWVkaWF0ZV9odG1sOiBcIkludGVybWVkaWF0ZSBIVE1MXCJcbiMgICAgaW50ZXJtZWRpYXRlX2NzczogXCJJbnRlcm1lZGlhdGUgQ1NTXCJcbiMgICAgaW50ZXJtZWRpYXRlX3dlYl9zY3JpcHRpbmc6IFwiSW50ZXJtZWRpYXRlIFdlYiBTY3JpcHRpbmdcIlxuIyAgICBhZHZhbmNlZF9odG1sOiBcIkFkdmFuY2VkIEhUTUxcIlxuIyAgICBhZHZhbmNlZF9jc3M6IFwiQWR2YW5jZWQgQ1NTXCJcbiMgICAgYWR2YW5jZWRfd2ViX3NjcmlwdGluZzogXCJBZHZhbmNlZCBXZWIgU2NyaXB0aW5nXCJcbiMgICAgaW5wdXRfaGFuZGxpbmc6IFwiSW5wdXQgSGFuZGxpbmdcIlxuIyAgICB3aGlsZV9sb29wczogXCJXaGlsZSBMb29wc1wiXG4jICAgIHBsYWNlX2dhbWVfb2JqZWN0czogXCJQbGFjZSBnYW1lIG9iamVjdHNcIlxuIyAgICBjb25zdHJ1Y3RfbWF6ZXM6IFwiQ29uc3RydWN0IG1hemVzXCJcbiMgICAgY3JlYXRlX3BsYXlhYmxlX2dhbWU6IFwiQ3JlYXRlIGEgcGxheWFibGUsIHNoYXJhYmxlIGdhbWUgcHJvamVjdFwiXG4jICAgIGFsdGVyX2V4aXN0aW5nX3dlYl9wYWdlczogXCJBbHRlciBleGlzdGluZyB3ZWIgcGFnZXNcIlxuIyAgICBjcmVhdGVfc2hhcmFibGVfd2ViX3BhZ2U6IFwiQ3JlYXRlIGEgc2hhcmFibGUgd2ViIHBhZ2VcIlxuIyAgICBiYXNpY19pbnB1dF9oYW5kbGluZzogXCJCYXNpYyBJbnB1dCBIYW5kbGluZ1wiXG4jICAgIGJhc2ljX2dhbWVfYWk6IFwiQmFzaWMgR2FtZSBBSVwiXG4jICAgIGJhc2ljX2phdmFzY3JpcHQ6IFwiQmFzaWMgSmF2YVNjcmlwdFwiXG4jICAgIGJhc2ljX2V2ZW50X2hhbmRsaW5nOiBcIkJhc2ljIEV2ZW50IEhhbmRsaW5nXCJcbiMgICAgY3JlYXRlX3NoYXJhYmxlX2ludGVyYWN0aXZlX3dlYl9wYWdlOiBcIkNyZWF0ZSBhIHNoYXJhYmxlIGludGVyYWN0aXZlIHdlYiBwYWdlXCJcblxuIyAgYW5vbnltb3VzX3RlYWNoZXI6XG4jICAgIG5vdGlmeV90ZWFjaGVyOiBcIk5vdGlmeSBUZWFjaGVyXCJcbiMgICAgY3JlYXRlX3RlYWNoZXJfYWNjb3VudDogXCJDcmVhdGUgZnJlZSB0ZWFjaGVyIGFjY291bnRcIlxuIyAgICBlbnRlcl9zdHVkZW50X25hbWU6IFwiWW91ciBuYW1lOlwiXG4jICAgIGVudGVyX3RlYWNoZXJfZW1haWw6IFwiWW91ciB0ZWFjaGVyJ3MgZW1haWw6XCJcbiMgICAgdGVhY2hlcl9lbWFpbF9wbGFjZWhvbGRlcjogXCJ0ZWFjaGVyLmVtYWlsQGV4YW1wbGUuY29tXCJcbiMgICAgc3R1ZGVudF9uYW1lX3BsYWNlaG9sZGVyOiBcInR5cGUgeW91ciBuYW1lIGhlcmVcIlxuIyAgICB0ZWFjaGVyc19zZWN0aW9uOiBcIlRlYWNoZXJzOlwiXG4jICAgIHN0dWRlbnRzX3NlY3Rpb246IFwiU3R1ZGVudHM6XCJcbiMgICAgdGVhY2hlcl9ub3RpZmllZDogXCJXZSd2ZSBub3RpZmllZCB5b3VyIHRlYWNoZXIgdGhhdCB5b3Ugd2FudCB0byBwbGF5IG1vcmUgQ29kZUNvbWJhdCBpbiB5b3VyIGNsYXNzcm9vbSFcIlxuXG4gIGRlbHRhOlxuIyAgICBhZGRlZDogXCJBZGRlZFwiXG4jICAgIG1vZGlmaWVkOiBcIk1vZGlmaWVkXCJcbiMgICAgbm90X21vZGlmaWVkOiBcIk5vdCBNb2RpZmllZFwiXG4jICAgIGRlbGV0ZWQ6IFwiRGVsZXRlZFwiXG4jICAgIG1vdmVkX2luZGV4OiBcIk1vdmVkIEluZGV4XCJcbiMgICAgdGV4dF9kaWZmOiBcIlRleHQgRGlmZlwiXG4jICAgIG1lcmdlX2NvbmZsaWN0X3dpdGg6IFwiTUVSR0UgQ09ORkxJQ1QgV0lUSFwiXG4gICAgbm9fY2hhbmdlczogXCJJbmdhIMOkbmRyaW5nYXJcIlxuXG4gIGxlZ2FsOlxuICAgIHBhZ2VfdGl0bGU6IFwiSnVyaWRpa1wiXG4jICAgIG9wZW5zb3VyY2VfaW50cm9kdWN0aW9uOiBcIkNvZGVDb21iYXQgaXMgcGFydCBvZiB0aGUgb3BlbiBzb3VyY2UgY29tbXVuaXR5LlwiXG4gICAgb3BlbnNvdXJjZV9kZXNjcmlwdGlvbl9wcmVmaXg6IFwiU3BhbmEgaW4gXCJcbiAgICBnaXRodWJfdXJsOiBcInbDpXIgR2l0SHViXCJcbiAgICBvcGVuc291cmNlX2Rlc2NyaXB0aW9uX2NlbnRlcjogXCIgb2NoIGhqw6RscCB0aWxsIG9tIGR1IHZpbGwhIENvZGVDb21iYXQgw6RyIGJ5Z2d0IHDDpSBkdXNzaW50YWxzIHByb2pla3QgbWVkIMO2cHBlbiBrw6RsbGtvZCwgb2NoIHZpIMOkbHNrYXIgZGVtLiBTZSBcIlxuICAgIGFyY2htYWdlX3dpa2lfdXJsOiBcInbDpXIgw4Rya2VtYWdpa2VyLXdpa2lcIlxuICAgIG9wZW5zb3VyY2VfZGVzY3JpcHRpb25fc3VmZml4OiBcImbDtnIgZW4gbGlzdGEgw7Z2ZXIgbWp1a3ZhcmFuIHNvbSBnw7ZyIGRldHRhIHNwZWwgbcO2amxpZ3QuXCJcbiAgICBwcmFjdGljZXNfdGl0bGU6IFwiUmVzcGVrdGZ1bGxhIFxcXCJiZXN0IHByYWN0aWNlc1xcXCJcIlxuICAgIHByYWN0aWNlc19kZXNjcmlwdGlvbjogXCJEZXNzYSDDpHIgdsOlcmEgbMO2ZnRlbiB0aWxsIGRpZywgc3BlbGFyZW4sIHDDpSBsaXRlIG1pbmRyZSBqdXJpc3RzcHLDpWsuXCJcbiAgICBwcml2YWN5X3RpdGxlOiBcIkludGVncml0ZXRcIlxuIyAgICBwcml2YWN5X2Rlc2NyaXB0aW9uOiBcIldlIHdpbGwgbm90IHNlbGwgYW55IG9mIHlvdXIgcGVyc29uYWwgaW5mb3JtYXRpb24uXCJcbiAgICBzZWN1cml0eV90aXRsZTogXCJTw6RrZXJoZXRcIlxuICAgIHNlY3VyaXR5X2Rlc2NyaXB0aW9uOiBcIlZpIHN0csOkdmFyIGVmdGVyIGF0dCBow6VsbGEgZGluIHBlcnNvbmxpZ2EgaW5mb3JtYXRpb24gc8Oka2VyLiBFZnRlcnNvbSB2w6VyIGvDpGxsa29kIMOkciDDtnBwZW4gw6RyIHbDpXIgZGV0IGZyaXR0IGZyYW0gZsO2ciB2ZW0gc29tIGhlbHN0IGF0dCBncmFuc2thIG9jaCBmw7ZyYsOkdHRyYSB2w6VyYSBzw6RrZXJoZXRzc3lzdGVtLlwiXG4gICAgZW1haWxfdGl0bGU6IFwiTWVqbFwiXG4gICAgZW1haWxfZGVzY3JpcHRpb25fcHJlZml4OiBcIlZpIGtvbW1lciBpbnRlIGF0dCDDtnZlcnN2w6RtbWEgZGlnIG1lZCBzcGFtLiBHZW5vbSBcIlxuICAgIGVtYWlsX3NldHRpbmdzX3VybDogXCJkaW5hIG1lamxpbnN0w6RsbG5pbmdhclwiXG4gICAgZW1haWxfZGVzY3JpcHRpb25fc3VmZml4OiBcImVsbGVyIGdlbm9tIGzDpG5rYXIgaSBtZWpsZW4gdmkgc2tpY2thciBrYW4gZHUgw6RuZHJhIGRpbmEgaW5zdMOkbGxuaW5nYXIgb2NoIGzDpHR0IGF2cHJlbnVtZXJlcmEgbsOkciBzb20gaGVsc3QuXCJcbiAgICBjb3N0X3RpdGxlOiBcIktvc3RuYWRcIlxuIyAgICBjb3N0X2Rlc2NyaXB0aW9uOiBcIkNvZGVDb21iYXQgaXMgZnJlZSB0byBwbGF5IGZvciBhbGwgb2YgaXRzIGNvcmUgbGV2ZWxzLCB3aXRoIGEgJHt7cHJpY2V9fSBVU0QvbW8gc3Vic2NyaXB0aW9uIGZvciBhY2Nlc3MgdG8gZXh0cmEgbGV2ZWwgYnJhbmNoZXMgYW5kIHt7Z2Vtc319IGJvbnVzIGdlbXMgcGVyIG1vbnRoLiBZb3UgY2FuIGNhbmNlbCB3aXRoIGEgY2xpY2ssIGFuZCB3ZSBvZmZlciBhIDEwMCUgbW9uZXktYmFjayBndWFyYW50ZWUuXCJcbiAgICBjb3B5cmlnaHRzX3RpdGxlOiBcIlVwcGhvdnNyw6R0dCBvY2ggbGljZW5zZXJcIlxuICAgIGNvbnRyaWJ1dG9yX3RpdGxlOiBcIsOWdmVyZW5za29tbWVsc2UgZsO2ciBiaWRyYWdhcmxpY2Vuc1wiXG4gICAgY29udHJpYnV0b3JfZGVzY3JpcHRpb25fcHJlZml4OiBcIkFsbGEgYmlkcmFnLCBiw6VkZSBww6Ugc2FqdGVuIG9jaCBww6UgdsOlcnQgR2l0SHViLXJlcG8sIGZhbGxlciB1bmRlciB2w6VyXCJcbiAgICBjbGFfdXJsOiBcIkNMQVwiXG4gICAgY29udHJpYnV0b3JfZGVzY3JpcHRpb25fc3VmZml4OiBcIiwgc29tIGR1IGJvcmRlIGdvZGvDpG5uYSBpbm5hbiBkdSBiw7ZyamFyIGJpZHJhLlwiXG4gICAgY29kZV90aXRsZTogXCJLb2QgLSBNSVRcIlxuIyAgICBjbGllbnRfY29kZV9kZXNjcmlwdGlvbl9wcmVmaXg6IFwiQWxsIGNsaWVudC1zaWRlIGNvZGUgZm9yIGNvZGVjb21iYXQuY29tIGluIHRoZSBwdWJsaWMgR2l0SHViIHJlcG9zaXRvcnkgYW5kIGluIHRoZSBjb2RlY29tYmF0LmNvbSBkYXRhYmFzZSwgaXMgbGljZW5zZWQgdW5kZXIgdGhlXCJcbiAgICBtaXRfbGljZW5zZV91cmw6IFwiTUlUIGxpY2Vuc2VcIlxuICAgIGNvZGVfZGVzY3JpcHRpb25fc3VmZml4OiBcIkRldHRhIGlua2x1ZGVyYXIgYWxsIGtvZCBpIHN5c3RlbSBvY2gga29tcG9uZW50ZXIgc29tIGdqb3J0cyB0aWxsZ8OkbmdsaWcgZsO2ciBDb2RlQ29tYmF0IGkgc3lmdGV0IGF0dCBza2FwYSBuaXbDpWVyLlwiXG4gICAgYXJ0X3RpdGxlOiBcIktvbnN0L011c2lrIC0gQ3JlYXRpdmUgQ29tbW9ucyBcIlxuICAgIGFydF9kZXNjcmlwdGlvbl9wcmVmaXg6IFwiQWxsdCBnZW1lbnNhbXQgaW5uZWjDpWxsIMOkciB0aWxsZ8OkbmdsaWd0IHVuZGVyXCJcbiAgICBjY19saWNlbnNlX3VybDogXCJDcmVhdGl2ZSBDb21tb25zIEVya8Okbm5hbmRlIDQuMCBJbnRlcm5hdGlvbmVsbC1saWNlbnNlblwiXG4gICAgYXJ0X2Rlc2NyaXB0aW9uX3N1ZmZpeDogXCJHZW1lbnNhbXQgaW5uZWjDpWxsIMOkciB2YWQgc29tIGhlbHN0IHNvbSBnam9ydHMgYWxsbcOkbnQgdGlsbGfDpG5nbGlndCBmw7ZyIENvZGVDb21iYXQgaSBzeWZ0ZSBhdHQgc2thcGEgbml2w6Vlci4gRGV0dGEgaW5rbHVkZXJhcjpcIlxuICAgIGFydF9tdXNpYzogXCJNdXNpa1wiXG4gICAgYXJ0X3NvdW5kOiBcIkxqdWRcIlxuICAgIGFydF9hcnR3b3JrOiBcIklsbHVzdHJhdGlvbmVyXCJcbiAgICBhcnRfc3ByaXRlczogXCJTcHJpdGVzXCJcbiAgICBhcnRfb3RoZXI6IFwiQWxsdCAoaWNrZS1rb2QpIGtyZWF0aXZ0IGFyYmV0ZSBzb20gZ8O2cnMgdGlsbGfDpG5nbGlnYSBuw6RyIG5pdsOlZXIgc2thcGFzLlwiXG4gICAgYXJ0X2FjY2VzczogXCJGw7ZyIHRpbGxmw6RsbGV0IGZpbm5zIGRldCBpbmdldCB1bml2ZXJzZWxsdCwgZW5rZWx0IHN5c3RlbSBmw7ZyIGF0dCBow6RtdGEgZGVzc2EgdGlsbGfDpW5nYXIuIEFsbG3DpG50IGfDpGxsZXI6IGjDpG10YSBkZW0gZnLDpW4gVVJMOmVybmEgc29tIHNhanRlbiBhbnbDpG5kZXIsIGtvbnRha3RhIG9zcyBmw7ZyIGhqw6RscCwgZWxsZXIgaGrDpGxwIG9zcyBhdHQgdXTDtmthIHNhanRlbiBmw7ZyIGF0dCBnw7ZyYSBkZXNzYSB0aWxsZ8OlbmdhciBtZXIgbMOkdHRpbGxnw6RuZ2xpZ2EuXCJcbiAgICBhcnRfcGFyYWdyYXBoXzE6IFwiRsO2ciB0aWxsc2tyaXZuaW5nLCB2YXIgdsOkbmxpZyBuYW1uZ2Ugb2NoIGzDpG5rYSB0aWxsIGNvZGVjb21iYXQuY29tIGkgbsOkcmhldGVuIGF2IHZhciBrw6RsbGFuIGFudsOkbmRzIGVsbGVyIGTDpHIgZGV0IMOkciBwYXNzYW5kZSBmw7ZyIG1lZGlldC4gVGlsbCBleGVtcGVsOlwiXG4gICAgdXNlX2xpc3RfMTogXCJPbSBkZXQgYW52w6RuZHMgaSBlbiBmaWxtIGVsbGVyIGV0dCBhbm5hdCBzcGVsLCBpbmtsdWRlcmEgY29kZWNvbWJhdC5jb20gaSBlZnRlcnRleHRlcm5hLlwiXG4gICAgdXNlX2xpc3RfMjogXCJPbSBkZXQgYW52w6RuZHMgcMOlIGVuIHdlYmJwbGF0cywgaW5rbHVkZXJhIGVuIGzDpG5rIG7DpHJhIGFudsOkbmRhbmRldCwgdGlsbCBleGVtcGVsIHVuZGVyIGVuIGJpbGQgZWxsZXIgaSBlbiBhbGxtw6RuIHRpbGxkZWxuaW5nc3NpZGEgZMOkciBkdSBvY2tzw6Uga2FuIG7DpG1uYSBhbmRyYSBDcmVhdGUgQ29tbW9ucy1yZXN1cnNlciBvY2ggw7ZwcGVuIHByb2dyYW12YXJhIHNvbSBhbnbDpG5kcyBww6Ugd2ViYnBsYXRzZW4uIE7DpWdvbnRpbmcgc29tIHJlZGFuIHR5ZGxpZ3QgcmVmZXJlcmFyIHRpbGwgQ29kZUNvbWJhdCwgZXhlbXBlbHZpcyBlbiBibG9nZ3Bvc3Qgc29tIG7DpG1uZXIgQ29kZUNvbWJhdCwgYmVow7Z2ZXIgaW5nZW4gc2VwYXJhdCB0aWxsc2tyaXZuaW5nLlwiXG4gICAgYXJ0X3BhcmFncmFwaF8yOiBcIk9tIGlubmVow6VsbGV0IHNvbSBhbnbDpG5kcyBpbnRlIMOkciBza2FwYXQgYXYgQ29kZUNvbWJhdCB1dGFuIGlzdMOkbGxldCBhdiBlbiBhbnbDpG5kYXJlIGF2IGNvZGVjb21iYXQuY29tLCB0aWxsc2tyaXYgZGVtIGlzdMOkbGxldCwgb2NoIGbDtmxqIHRpbGxza3Jpdm5pbmdzaW5zdHJ1a3Rpb25lciBzb20gZ2VzIGkgZGVuIHJlc3Vyc2VucyBiZXNrcml2bmluZyBvbSBkZXQgZmlubnMgbsOlZ3JhLlwiXG4gICAgcmlnaHRzX3RpdGxlOiBcIlLDpHR0aWdoZXRlciBmw7ZyYmVow6VsbHNcIlxuICAgIHJpZ2h0c19kZXNjOiBcIkFsbGEgcsOkdHRpZ2hldGVyIGbDtnJiZWjDpWxscyBmw7ZyIHNqw6RsdmEgbml2w6Vlcm5hLiBEZXR0YSBpbmtsdWRlcmFyOlwiXG4gICAgcmlnaHRzX3NjcmlwdHM6IFwiU2NyaXB0XCJcbiAgICByaWdodHNfdW5pdDogXCJFbmhldHNrb25maWd1cmF0aW9uXCJcbiAgICByaWdodHNfd3JpdGluZ3M6IFwiU2tpZnRlclwiXG4gICAgcmlnaHRzX21lZGlhOiBcIk1lZGlhIChsanVkLCBtdXNpaykgb2NoIGFubmF0IGtyZWF0aXZ0IGlubmVow6VsbCBzb20gc2thcGF0cyBzcGVjaWZpa3QgZsO2ciBkZW5uYSBuaXbDpSBvY2ggaW50ZSBnam9ydHMgYWxsbcOkbnQgdGlsbGfDpG5nbGlndCBuw6RyIG5pdsOlZXIgc2thcGF0cy5cIlxuICAgIHJpZ2h0c19jbGFyaWZpY2F0aW9uOiBcIkbDtnIgYXR0IGtsYXJnw7ZyYSwgYWxsdCBzb20gZ2pvcnRzIHRpbGxnw6RuZ2xpZ3QgaSBuaXbDpXJlZGlnZXJhcmVuIGkgc3lmdGUgYXR0IHNrYXBhIG5pdsOlZXIgw6RyIHVuZGVyIENDLCBtZWRhbiBpbm5laMOlbGxldCBza2FwYXQgbWVkIG5pdsOlcmVkaWdlcmFyZW4gZWxsZXIgdXBwbGFkZGF0IHVuZGVyIHNrYXBhbmRldCBpbnRlIMOkciBkZXR0YS5cIlxuICAgIG51dHNoZWxsX3RpdGxlOiBcIkkgZXR0IG7DtnRza2FsXCJcbiAgICBudXRzaGVsbF9kZXNjcmlwdGlvbjogXCJBbGxhIHJlc3Vyc2VyIHZpIHRpbGxoYW5kYWjDpWxsZXIgaSBuaXbDpXJlZGlnZXJhcmVuIMOkciBncmF0aXMgYXR0IGFudsOkbmRhIHNvbSBkdSB2aWxsIGbDtnIgYXR0IHNrYXBhIG5pdsOlZXIuIE1lbiB2aSByZXNlcnZlcmFyIG9zcyByw6R0dGlnaGV0ZW4gYXR0IGJlZ3LDpG5zYSBkaXN0cmlidXRpb24gYXYgbml2w6Vlcm5hIHNqw6RsdmEgKHNvbSBza2FwYXMgcMOlIGNvZGVjb21iYXQuY29tKSBzw6UgYXR0IGRlIGthbiB0YXMgYmV0YWx0IGbDtnIgaSBmcmFtdGlkZW4sIG9tIGRldCDDpHIgc8OlIGRldCBibGlyLlwiXG4jICAgIG51dHNoZWxsX3NlZV9hbHNvOiBcIlNlZSBhbHNvOlwiXG4gICAgY2Fub25pY2FsOiBcIkRlbiBlbmdlbHNrYSB2ZXJzaW9uZW4gYXYgZGV0dGEgZG9rdW1lbnQgw6RyIGRlbiBkZWZpbml0aXZhLCBlcmvDpG5kYSB2ZXJzaW9uZW4uIE9tIGRldCBmaW5ucyBuw6VncmEgc2tpbGxuYWRlciBtZWxsYW4gw7Z2ZXJzw6R0dG5pbmdhciDDpHIgZGV0IGRldCBlbmdlbHNrYSBkb2t1bWVudGV0IHNvbSB0YXIgZsO2cmV0csOkZGUuXCJcbiMgICAgdGhpcmRfcGFydHlfdGl0bGU6IFwiVGhpcmQgUGFydHkgU2VydmljZXNcIlxuIyAgICB0aGlyZF9wYXJ0eV9kZXNjcmlwdGlvbjogXCJDb2RlQ29tYmF0IHVzZXMgdGhlIGZvbGxvd2luZyB0aGlyZCBwYXJ0eSBzZXJ2aWNlcyAoYW1vbmcgb3RoZXJzKTpcIlxuIyAgICBjb29raWVzX21lc3NhZ2U6IFwiQ29kZUNvbWJhdCB1c2VzIGEgZmV3IGVzc2VudGlhbCBhbmQgbm9uLWVzc2VudGlhbCBjb29raWVzLlwiXG4jICAgIGNvb2tpZXNfZGVueTogXCJEZWNsaW5lIG5vbi1lc3NlbnRpYWwgY29va2llc1wiXG5cbiMgIGxhZGRlcl9wcml6ZXM6XG4jICAgIHRpdGxlOiBcIlRvdXJuYW1lbnQgUHJpemVzXCIgIyBUaGlzIHNlY3Rpb24gd2FzIGZvciBhbiBvbGQgdG91cm5hbWVudCBhbmQgZG9lc24ndCBuZWVkIG5ldyB0cmFuc2xhdGlvbnMgbm93LlxuIyAgICBibHVyYl8xOiBcIlRoZXNlIHByaXplcyB3aWxsIGJlIGF3YXJkZWQgYWNjb3JkaW5nIHRvXCJcbiMgICAgYmx1cmJfMjogXCJ0aGUgdG91cm5hbWVudCBydWxlc1wiXG4jICAgIGJsdXJiXzM6IFwidG8gdGhlIHRvcCBodW1hbiBhbmQgb2dyZSBwbGF5ZXJzLlwiXG4jICAgIGJsdXJiXzQ6IFwiVHdvIHRlYW1zIG1lYW5zIGRvdWJsZSB0aGUgcHJpemVzIVwiXG4jICAgIGJsdXJiXzU6IFwiKFRoZXJlIHdpbGwgYmUgdHdvIGZpcnN0IHBsYWNlIHdpbm5lcnMsIHR3byBzZWNvbmQtcGxhY2Ugd2lubmVycywgZXRjLilcIlxuIyAgICByYW5rOiBcIlJhbmtcIlxuIyAgICBwcml6ZXM6IFwiUHJpemVzXCJcbiMgICAgdG90YWxfdmFsdWU6IFwiVG90YWwgVmFsdWVcIlxuIyAgICBpbl9jYXNoOiBcImluIGNhc2hcIlxuIyAgICBjdXN0b21fd2l6YXJkOiBcIkN1c3RvbSBDb2RlQ29tYmF0IFdpemFyZFwiXG4jICAgIGN1c3RvbV9hdmF0YXI6IFwiQ3VzdG9tIENvZGVDb21iYXQgYXZhdGFyXCJcbiMgICAgaGVhcDogXCJmb3Igc2l4IG1vbnRocyBvZiBcXFwiU3RhcnR1cFxcXCIgYWNjZXNzXCJcbiMgICAgY3JlZGl0czogXCJjcmVkaXRzXCJcbiMgICAgb25lX21vbnRoX2NvdXBvbjogXCJjb3Vwb246IGNob29zZSBlaXRoZXIgUmFpbHMgb3IgSFRNTFwiXG4jICAgIG9uZV9tb250aF9kaXNjb3VudDogXCJkaXNjb3VudCwgMzAlIG9mZjogY2hvb3NlIGVpdGhlciBSYWlscyBvciBIVE1MXCJcbiMgICAgbGljZW5zZTogXCJsaWNlbnNlXCJcbiMgICAgb3JlaWxseTogXCJlYm9vayBvZiB5b3VyIGNob2ljZVwiXG5cbiAgY2FsZW5kYXI6XG4gICAgeWVhcjogXCLDhXJcIlxuICAgIGRheTogXCJEYWdcIlxuICAgIG1vbnRoOiBcIk3DpW5hZFwiXG4gICAgamFudWFyeTogXCJKYW51YXJpXCJcbiAgICBmZWJydWFyeTogXCJGZWJydWFyaVwiXG4gICAgbWFyY2g6IFwiTWFyc1wiXG4gICAgYXByaWw6IFwiQXByaWxcIlxuICAgIG1heTogXCJNYWpcIlxuICAgIGp1bmU6IFwiSnVuaVwiXG4gICAganVseTogXCJKdWxpXCJcbiAgICBhdWd1c3Q6IFwiQXVndXN0aVwiXG4gICAgc2VwdGVtYmVyOiBcIlNlcHRlbWJlclwiXG4gICAgb2N0b2JlcjogXCJPa3RvYmVyXCJcbiAgICBub3ZlbWJlcjogXCJOb3ZlbWJlclwiXG4gICAgZGVjZW1iZXI6IFwiRGVjZW1iZXJcIlxuXG4jICBjb2RlX3BsYXlfY3JlYXRlX2FjY291bnRfbW9kYWw6XG4jICAgIHRpdGxlOiBcIllvdSBkaWQgaXQhXCIgIyBUaGlzIHNlY3Rpb24gaXMgb25seSBuZWVkZWQgaW4gVVMsIFVLLCBNZXhpY28sIEluZGlhLCBhbmQgR2VybWFueVxuIyAgICBib2R5OiBcIllvdSBhcmUgbm93IG9uIHlvdXIgd2F5IHRvIGJlY29taW5nIGEgbWFzdGVyIGNvZGVyLiBTaWduIHVwIHRvIHJlY2VpdmUgYW4gZXh0cmEgPHN0cm9uZz4xMDAgR2Vtczwvc3Ryb25nPiAmIHlvdSB3aWxsIGFsc28gYmUgZW50ZXJlZCBmb3IgYSBjaGFuY2UgdG8gPHN0cm9uZz53aW4gJDIsNTAwICYgb3RoZXIgTGVub3ZvIFByaXplczwvc3Ryb25nPi5cIlxuIyAgICBzaWduX3VwOiBcIlNpZ24gdXAgJiBrZWVwIGNvZGluZyDilrZcIlxuIyAgICB2aWN0b3J5X3NpZ25fdXBfcG9rZTogXCJDcmVhdGUgYSBmcmVlIGFjY291bnQgdG8gc2F2ZSB5b3VyIGNvZGUgJiBiZSBlbnRlcmVkIGZvciBhIGNoYW5jZSB0byB3aW4gcHJpemVzIVwiXG4jICAgIHZpY3Rvcnlfc2lnbl91cDogXCJTaWduIHVwICYgYmUgZW50ZXJlZCB0byA8c3Ryb25nPndpbiAkMiw1MDA8L3N0cm9uZz5cIlxuXG4gIHNlcnZlcl9lcnJvcjpcbiAgICBlbWFpbF90YWtlbjogXCJFcG9zdGFkcmVzcyByZWRhbiB0YWdldFwiXG4gICAgdXNlcm5hbWVfdGFrZW46IFwiQW52w6RuZGFybmFtbiByZWRhbiB0YWdldFwiXG5cbiAgZXNwZXI6XG4gICAgbGluZV9ubzogXCJSYWQgJDE6IFwiXG4jICAgIHVuY2F1Z2h0OiBcIlVuY2F1Z2h0ICQxXCIgIyAkMSB3aWxsIGJlIGFuIGVycm9yIHR5cGUsIGVnIFwiVW5jYXVnaHQgU3ludGF4RXJyb3JcIlxuICAgIHJlZmVyZW5jZV9lcnJvcjogXCJSZWZlcmVuc2ZlbDogXCJcbiAgICBhcmd1bWVudF9lcnJvcjogXCJBcmd1bWVudGZlbDogXCJcbiAgICB0eXBlX2Vycm9yOiBcIlR5cGZlbDogXCJcbiAgICBzeW50YXhfZXJyb3I6IFwiU3ludGF4ZmVsOiBcIlxuICAgIGVycm9yOiBcIkZlbDogXCJcbiAgICB4X25vdF9hX2Z1bmN0aW9uOiBcIiQxIMOkciBpbmdlbiBmdW5rdGlvblwiXG4gICAgeF9ub3RfZGVmaW5lZDogXCIkMSDDpHIgaW50ZSBkZWZpbmVyYWRcIlxuICAgIHNwZWxsaW5nX2lzc3VlczogXCJTZSB1cHAgZsO2ciBzdGF2ZmVsOiBtZW5hZGUgZHUgYCQxYCBpc3TDpGxsZXQgZsO2ciBgJDJgP1wiXG4gICAgY2FwaXRhbGl6YXRpb25faXNzdWVzOiBcIlNlIHVwcCBmw7ZyIGthcGl0YWxpc2VyaW5nOiBgJDFgIGJvcmRlIHZhcmEgYCQyYC5cIlxuICAgIHB5X2VtcHR5X2Jsb2NrOiBcIlRvbSAkMS4gU8OkdHQgNCBtZWxsYW5zbGFnIGZyYW1mw7ZyIHNhdHNlcm5hIGludXRpICQyIHNhdHNlbi5cIlxuICAgIGZ4X21pc3NpbmdfcGFyZW46IFwiT20gZHUgdmlsbCBhbnbDpG5kYSBgJDFgIHNvbSBlbiBmdW5rdGlvbiBiZWjDtnZlciBkdWAoKWBcIlxuIyAgICB1bm1hdGNoZWRfdG9rZW46IFwiVW5tYXRjaGVkIGAkMWAuICBFdmVyeSBvcGVuaW5nIGAkMmAgbmVlZHMgYSBjbG9zaW5nIGAkM2AgdG8gbWF0Y2ggaXQuXCJcbiAgICB1bnRlcm1pbmF0ZWRfc3RyaW5nOiBcIk9hdnNsdXRhdCBzdHLDpG5nLiBMw6RnZyB0aWxsIGVuIG1hdGNoYW5kZSBgXFxcImAgaSBzbHV0ZXQgYXYgZGluIHN0csOkbmcuXCJcbiAgICBtaXNzaW5nX3NlbWljb2xvbjogXCJTYWtuYXIgc2VtaWtvbG9uLlwiXG4gICAgbWlzc2luZ19xdW90ZXM6IFwiU2FrbmFyIGNpdGF0dGVja2VuLiBQcm92YSBgJDFgXCJcbiAgICBhcmd1bWVudF90eXBlOiBcImAkMWBzIGFyZ3VtZW50IGAkMmAgYm9yZGUgaGEgdHlwZW4gYCQzYCwgbWVuIGZpY2sgYCQ0YDogYCQ1YC5cIlxuICAgIGFyZ3VtZW50X3R5cGUyOiBcImAkMWBzIGFyZ3VtZW50IGAkMmAgYm9yZGUgaGEgdHlwZW4gYCQzYCwgbWVuIGZpY2sgYCQ0YC5cIlxuIyAgICB0YXJnZXRfYV91bml0OiBcIlRhcmdldCBhIHVuaXQuXCJcbiAgICBhdHRhY2tfY2FwaXRhbGl6YXRpb246IFwiQXR0YWNrZXJhICQxLCBpbnRlICQyLiAoVmVyc2FsZXIgw6RyIHZpa3RpZ2EuKVwiXG4jICAgIGVtcHR5X3doaWxlOiBcIkVtcHR5IHdoaWxlIHN0YXRlbWVudC4gUHV0IDQgc3BhY2VzIGluIGZyb250IG9mIHN0YXRlbWVudHMgaW5zaWRlIHRoZSB3aGlsZSBzdGF0ZW1lbnQuXCJcbiMgICAgbGluZV9vZl9zaXRlOiBcImAkMWAncyBhcmd1bWVudCBgJDJgIGhhcyBhIHByb2JsZW0uIElzIHRoZXJlIGFuIGVuZW15IHdpdGhpbiB5b3VyIGxpbmUtb2Ytc2lnaHQgeWV0P1wiXG4jICAgIG5lZWRfYV9hZnRlcl93aGlsZTogXCJOZWVkIGEgYCQxYCBhZnRlciBgJDJgLlwiXG4jICAgIHRvb19tdWNoX2luZGVudGF0aW9uOiBcIlRvbyBtdWNoIGluZGVudGF0aW9uIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBsaW5lLlwiXG4jICAgIG1pc3NpbmdfaGVybzogXCJNaXNzaW5nIGAkMWAga2V5d29yZDsgc2hvdWxkIGJlIGAkMmAuXCJcbiMgICAgdGFrZXNfbm9fYXJndW1lbnRzOiBcImAkMWAgdGFrZXMgbm8gYXJndW1lbnRzLlwiXG4jICAgIG5vX29uZV9uYW1lZDogXCJUaGVyZSdzIG5vIG9uZSBuYW1lZCBcXFwiJDFcXFwiIHRvIHRhcmdldC5cIlxuIyAgICBzZXBhcmF0ZWRfYnlfY29tbWE6IFwiRnVuY3Rpb24gY2FsbHMgcGFyYW1hdGVycyBtdXN0IGJlIHNlcGVyYXRlZCBieSBgLGBzXCJcbiMgICAgcHJvdGVjdGVkX3Byb3BlcnR5OiBcIkNhbid0IHJlYWQgcHJvdGVjdGVkIHByb3BlcnR5OiAkMVwiXG4jICAgIG5lZWRfcGFyZW5zX3RvX2NhbGw6IFwiSWYgeW91IHdhbnQgdG8gY2FsbCBgJDFgIGFzIGZ1bmN0aW9uLCB5b3UgbmVlZCBgKClgJ3NcIlxuIyAgICBleHBlY3RlZF9hbl9pZGVudGlmaWVyOiBcIkV4cGVjdGVkIGFuIGlkZW50aWZpZXIgYW5kIGluc3RlYWQgc2F3ICckMScuXCJcbiMgICAgdW5leHBlY3RlZF9pZGVudGlmaWVyOiBcIlVuZXhwZWN0ZWQgaWRlbnRpZmllclwiXG4jICAgIHVuZXhwZWN0ZWRfZW5kX29mOiBcIlVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0XCJcbiMgICAgdW5uZWNlc3Nhcnlfc2VtaWNvbG9uOiBcIlVubmVjZXNzYXJ5IHNlbWljb2xvbi5cIlxuIyAgICB1bmV4cGVjdGVkX3Rva2VuX2V4cGVjdGVkOiBcIlVuZXhwZWN0ZWQgdG9rZW46IGV4cGVjdGVkICQxIGJ1dCBmb3VuZCAkMiB3aGlsZSBwYXJzaW5nICQzXCJcbiMgICAgdW5leHBlY3RlZF90b2tlbjogXCJVbmV4cGVjdGVkIHRva2VuICQxXCJcbiMgICAgdW5leHBlY3RlZF90b2tlbjI6IFwiVW5leHBlY3RlZCB0b2tlblwiXG4jICAgIHVuZXhwZWN0ZWRfbnVtYmVyOiBcIlVuZXhwZWN0ZWQgbnVtYmVyXCJcbiMgICAgdW5leHBlY3RlZDogXCJVbmV4cGVjdGVkICckMScuXCJcbiMgICAgZXNjYXBlX3ByZXNzZWRfY29kZTogXCJFc2NhcGUgcHJlc3NlZDsgY29kZSBhYm9ydGVkLlwiXG4jICAgIHRhcmdldF9hbl9lbmVteTogXCJUYXJnZXQgYW4gZW5lbXkgYnkgbmFtZSwgbGlrZSBgJDFgLCBub3QgdGhlIHN0cmluZyBgJDJgLlwiXG4jICAgIHRhcmdldF9hbl9lbmVteV8yOiBcIlRhcmdldCBhbiBlbmVteSBieSBuYW1lLCBsaWtlICQxLlwiXG4jICAgIGNhbm5vdF9yZWFkX3Byb3BlcnR5OiBcIkNhbm5vdCByZWFkIHByb3BlcnR5ICckMScgb2YgdW5kZWZpbmVkXCJcbiMgICAgYXR0ZW1wdGVkX3RvX2Fzc2lnbjogXCJBdHRlbXB0ZWQgdG8gYXNzaWduIHRvIHJlYWRvbmx5IHByb3BlcnR5LlwiXG4jICAgIHVuZXhwZWN0ZWRfZWFybHlfZW5kOiBcIlVuZXhwZWN0ZWQgZWFybHkgZW5kIG9mIHByb2dyYW0uXCJcbiMgICAgeW91X25lZWRfYV9zdHJpbmc6IFwiWW91IG5lZWQgYSBzdHJpbmcgdG8gYnVpbGQ7IG9uZSBvZiAkMVwiXG4jICAgIHVuYWJsZV90b19nZXRfcHJvcGVydHk6IFwiVW5hYmxlIHRvIGdldCBwcm9wZXJ0eSAnJDEnIG9mIHVuZGVmaW5lZCBvciBudWxsIHJlZmVyZW5jZVwiICMgVE9ETzogRG8gd2UgdHJhbnNsYXRlIHVuZGVmaW5lZC9udWxsP1xuIyAgICBjb2RlX25ldmVyX2ZpbmlzaGVkX2l0czogXCJDb2RlIG5ldmVyIGZpbmlzaGVkLiBJdCdzIGVpdGhlciByZWFsbHkgc2xvdyBvciBoYXMgYW4gaW5maW5pdGUgbG9vcC5cIlxuIyAgICB1bmNsb3NlZF9zdHJpbmc6IFwiVW5jbG9zZWQgc3RyaW5nLlwiXG4jICAgIHVubWF0Y2hlZDogXCJVbm1hdGNoZWQgJyQxJy5cIlxuIyAgICBlcnJvcl95b3Vfc2FpZF9hY2hvbzogXCJZb3Ugc2FpZDogJDEsIGJ1dCB0aGUgcGFzc3dvcmQgaXM6ICQyLiAoQ2FwaXRhbCBsZXR0ZXJzIGFyZSBpbXBvcnRhbnQuKVwiXG4jICAgIGluZGVudGF0aW9uX2Vycm9yX3VuaW5kZW50X2RvZXM6IFwiSW5kZW50YXRpb24gRXJyb3I6IHVuaW5kZW50IGRvZXMgbm90IG1hdGNoIGFueSBvdXRlciBpbmRlbnRhdGlvbiBsZXZlbFwiXG4jICAgIGluZGVudGF0aW9uX2Vycm9yOiBcIkluZGVudGF0aW9uIGVycm9yLlwiXG4jICAgIG5lZWRfYV9vbl90aGU6IFwiTmVlZCBhIGA6YCBvbiB0aGUgZW5kIG9mIHRoZSBsaW5lIGZvbGxvd2luZyBgJDFgLlwiXG4jICAgIGF0dGVtcHRfdG9fY2FsbF91bmRlZmluZWQ6IFwiYXR0ZW1wdCB0byBjYWxsICckMScgKGEgbmlsIHZhbHVlKVwiXG4jICAgIHVudGVybWluYXRlZDogXCJVbnRlcm1pbmF0ZWQgYCQxYFwiXG4jICAgIHRhcmdldF9hbl9lbmVteV92YXJpYWJsZTogXCJUYXJnZXQgYW4gJDEgdmFyaWFibGUsIG5vdCB0aGUgc3RyaW5nICQyLiAoVHJ5IHVzaW5nICQzLilcIlxuIyAgICBlcnJvcl91c2VfdGhlX3ZhcmlhYmxlOiBcIlVzZSB0aGUgdmFyaWFibGUgbmFtZSBsaWtlIGAkMWAgaW5zdGVhZCBvZiBhIHN0cmluZyBsaWtlIGAkMmBcIlxuIyAgICBpbmRlbnRhdGlvbl91bmluZGVudF9kb2VzX25vdDogXCJJbmRlbnRhdGlvbiB1bmluZGVudCBkb2VzIG5vdCBtYXRjaCBhbnkgb3V0ZXIgaW5kZW50YXRpb24gbGV2ZWxcIlxuIyAgICB1bmNsb3NlZF9wYXJlbl9pbl9mdW5jdGlvbl9hcmd1bWVudHM6IFwiVW5jbG9zZWQgJDEgaW4gZnVuY3Rpb24gYXJndW1lbnRzLlwiXG4jICAgIHVuZXhwZWN0ZWRfZW5kX29mX2lucHV0OiBcIlVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0XCJcbiMgICAgdGhlcmVfaXNfbm9fZW5lbXk6IFwiVGhlcmUgaXMgbm8gYCQxYC4gVXNlIGAkMmAgZmlyc3QuXCIgIyBIaW50cyBzdGFydCBoZXJlXG4jICAgIHRyeV9oZXJvZmluZG5lYXJlc3RlbmVteTogXCJUcnkgYCQxYFwiXG4jICAgIHRoZXJlX2lzX25vX2Z1bmN0aW9uOiBcIlRoZXJlIGlzIG5vIGZ1bmN0aW9uIGAkMWAsIGJ1dCBgJDJgIGhhcyBhIG1ldGhvZCBgJDNgLlwiXG4jICAgIGF0dGFja3NfYXJndW1lbnRfZW5lbXlfaGFzOiBcImAkMWAncyBhcmd1bWVudCBgJDJgIGhhcyBhIHByb2JsZW0uXCJcbiMgICAgaXNfdGhlcmVfYW5fZW5lbXk6IFwiSXMgdGhlcmUgYW4gZW5lbXkgd2l0aGluIHlvdXIgbGluZS1vZi1zaWdodCB5ZXQ/XCJcbiMgICAgdGFyZ2V0X2lzX251bGxfaXM6IFwiVGFyZ2V0IGlzICQxLiBJcyB0aGVyZSBhbHdheXMgYSB0YXJnZXQgdG8gYXR0YWNrPyAoVXNlICQyPylcIlxuIyAgICBoZXJvX2hhc19ub19tZXRob2Q6IFwiYCQxYCBoYXMgbm8gbWV0aG9kIGAkMmAuXCJcbiMgICAgdGhlcmVfaXNfYV9wcm9ibGVtOiBcIlRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHlvdXIgY29kZS5cIlxuIyAgICBkaWRfeW91X21lYW46IFwiRGlkIHlvdSBtZWFuICQxPyBZb3UgZG8gbm90IGhhdmUgYW4gaXRlbSBlcXVpcHBlZCB3aXRoIHRoYXQgc2tpbGwuXCJcbiMgICAgbWlzc2luZ19hX3F1b3RhdGlvbl9tYXJrOiBcIk1pc3NpbmcgYSBxdW90YXRpb24gbWFyay4gXCJcbiMgICAgbWlzc2luZ192YXJfdXNlX3ZhcjogXCJNaXNzaW5nIGAkMWAuIFVzZSBgJDJgIHRvIG1ha2UgYSBuZXcgdmFyaWFibGUuXCJcbiMgICAgeW91X2RvX25vdF9oYXZlOiBcIllvdSBkbyBub3QgaGF2ZSBhbiBpdGVtIGVxdWlwcGVkIHdpdGggdGhlICQxIHNraWxsLlwiXG4jICAgIHB1dF9lYWNoX2NvbW1hbmRfb246IFwiUHV0IGVhY2ggY29tbWFuZCBvbiBhIHNlcGFyYXRlIGxpbmVcIlxuIyAgICBhcmVfeW91X21pc3NpbmdfYTogXCJBcmUgeW91IG1pc3NpbmcgYSAnJDEnIGFmdGVyICckMic/IFwiXG4jICAgIHlvdXJfcGFyZW50aGVzZXNfbXVzdF9tYXRjaDogXCJZb3VyIHBhcmVudGhlc2VzIG11c3QgbWF0Y2guXCJcblxuIyAgYXBjc3A6XG4jICAgIHRpdGxlOiBcIkFQIENvbXB1dGVyIFNjaWVuY2UgUHJpbmNpcGFscyB8IENvbGxlZ2UgQm9hcmQgRW5kb3JzZWRcIlxuIyAgICBtZXRhX2Rlc2NyaXB0aW9uOiBcIkNvZGVDb21iYXTigJlzIGNvbXByZWhlbnNpdmUgY3VycmljdWx1bSBhbmQgcHJvZmVzc2lvbmFsIGRldmVsb3BtZW50IHByb2dyYW0gYXJlIGFsbCB5b3UgbmVlZCB0byBvZmZlciBDb2xsZWdlIEJvYXJk4oCZcyBuZXdlc3QgY29tcHV0ZXIgc2NpZW5jZSBjb3Vyc2UgdG8geW91ciBzdHVkZW50cy5cIlxuIyAgICBzeWxsYWJ1czogXCJBUCBDUyBQcmluY2lwbGVzIFN5bGxhYnVzXCJcbiMgICAgc3lsbGFidXNfZGVzY3JpcHRpb246IFwiVXNlIHRoaXMgcmVzb3VyY2UgdG8gcGxhbiBDb2RlQ29tYmF0IGN1cnJpY3VsdW0gZm9yIHlvdXIgQVAgQ29tcHV0ZXIgU2NpZW5jZSBQcmluY2lwbGVzIGNsYXNzLlwiXG4jICAgIGNvbXB1dGF0aW9uYWxfdGhpbmtpbmdfcHJhY3RpY2VzOiBcIkNvbXB1dGF0aW9uYWwgVGhpbmtpbmcgUHJhY3RpY2VzXCJcbiMgICAgbGVhcm5pbmdfb2JqZWN0aXZlczogXCJMZWFybmluZyBPYmplY3RpdmVzXCJcbiMgICAgY3VycmljdWxhcl9yZXF1aXJlbWVudHM6IFwiQ3VycmljdWxhciBSZXF1aXJlbWVudHNcIlxuIyAgICB1bml0XzE6IFwiVW5pdCAxOiBDcmVhdGl2ZSBUZWNobm9sb2d5XCJcbiMgICAgdW5pdF8xX2FjdGl2aXR5XzE6IFwiVW5pdCAxIEFjdGl2aXR5OiBUZWNobm9sb2d5IFVzYWJpbGl0eSBSZXZpZXdcIlxuIyAgICB1bml0XzI6IFwiVW5pdCAyOiBDb21wdXRhdGlvbmFsIFRoaW5raW5nXCJcbiMgICAgdW5pdF8yX2FjdGl2aXR5XzE6IFwiVW5pdCAyIEFjdGl2aXR5OiBCaW5hcnkgU2VxdWVuY2VzXCJcbiMgICAgdW5pdF8yX2FjdGl2aXR5XzI6IFwiVW5pdCAyIEFjdGl2aXR5OiBDb21wdXRpbmcgTGVzc29uIFByb2plY3RcIlxuIyAgICB1bml0XzM6IFwiVW5pdCAzOiBBbGdvcml0aG1zXCJcbiMgICAgdW5pdF8zX2FjdGl2aXR5XzE6IFwiVW5pdCAzIEFjdGl2aXR5OiBBbGdvcml0aG1zIC0gSGl0Y2hoaWtlcidzIEd1aWRlXCJcbiMgICAgdW5pdF8zX2FjdGl2aXR5XzI6IFwiVW5pdCAzIEFjdGl2aXR5OiBTaW11bGF0aW9uIC0gUHJlZGF0b3IgJiBQcmV5XCJcbiMgICAgdW5pdF8zX2FjdGl2aXR5XzM6IFwiVW5pdCAzIEFjdGl2aXR5OiBBbGdvcml0aG1zIC0gUGFpciBEZXNpZ24gYW5kIFByb2dyYW1taW5nXCJcbiMgICAgdW5pdF80OiBcIlVuaXQgNDogUHJvZ3JhbW1pbmdcIlxuIyAgICB1bml0XzRfYWN0aXZpdHlfMTogXCJVbml0IDQgQWN0aXZpdHk6IEFic3RyYWN0aW9uc1wiXG4jICAgIHVuaXRfNF9hY3Rpdml0eV8yOiBcIlVuaXQgNCBBY3Rpdml0eTogU2VhcmNoaW5nICYgU29ydGluZ1wiXG4jICAgIHVuaXRfNF9hY3Rpdml0eV8zOiBcIlVuaXQgNCBBY3Rpdml0eTogUmVmYWN0b3JpbmdcIlxuIyAgICB1bml0XzU6IFwiVW5pdCA1OiBUaGUgSW50ZXJuZXRcIlxuIyAgICB1bml0XzVfYWN0aXZpdHlfMTogXCJVbml0IDUgQWN0aXZpdHk6IEhvdyB0aGUgSW50ZXJuZXQgV29ya3NcIlxuIyAgICB1bml0XzVfYWN0aXZpdHlfMjogXCJVbml0IDUgQWN0aXZpdHk6IEludGVybmV0IFNpbXVsYXRvclwiXG4jICAgIHVuaXRfNV9hY3Rpdml0eV8zOiBcIlVuaXQgNSBBY3Rpdml0eTogQ2hhdCBSb29tIFNpbXVsYXRpb25cIlxuIyAgICB1bml0XzVfYWN0aXZpdHlfNDogXCJVbml0IDUgQWN0aXZpdHk6IEN5YmVyc2VjdXJpdHlcIlxuIyAgICB1bml0XzY6IFwiVW5pdCA2OiBEYXRhXCJcbiMgICAgdW5pdF82X2FjdGl2aXR5XzE6IFwiVW5pdCA2IEFjdGl2aXR5OiBJbnRyb2R1Y3Rpb24gdG8gRGF0YVwiXG4jICAgIHVuaXRfNl9hY3Rpdml0eV8yOiBcIlVuaXQgNiBBY3Rpdml0eTogQmlnIERhdGFcIlxuIyAgICB1bml0XzZfYWN0aXZpdHlfMzogXCJVbml0IDYgQWN0aXZpdHk6IExvc3N5ICYgTG9zc2xlc3MgQ29tcHJlc3Npb25cIlxuIyAgICB1bml0Xzc6IFwiVW5pdCA3OiBQZXJzb25hbCAmIEdsb2JhbCBJbXBhY3RcIlxuIyAgICB1bml0XzdfYWN0aXZpdHlfMTogXCJVbml0IDcgQWN0aXZpdHk6IFBlcnNvbmFsICYgR2xvYmFsIEltcGFjdFwiXG4jICAgIHVuaXRfN19hY3Rpdml0eV8yOiBcIlVuaXQgNyBBY3Rpdml0eTogQ3Jvd2Rzb3VyY2luZ1wiXG4jICAgIHVuaXRfODogXCJVbml0IDg6IFBlcmZvcm1hbmNlIFRhc2tzXCJcbiMgICAgdW5pdF84X2Rlc2NyaXB0aW9uOiBcIlByZXBhcmUgc3R1ZGVudHMgZm9yIHRoZSBDcmVhdGUgVGFzayBieSBidWlsZGluZyB0aGVpciBvd24gZ2FtZXMgYW5kIHByYWN0aWNpbmcga2V5IGNvbmNlcHRzLlwiXG4jICAgIHVuaXRfOF9hY3Rpdml0eV8xOiBcIkNyZWF0ZSBUYXNrIFByYWN0aWNlIDE6IEdhbWUgRGV2ZWxvcG1lbnQgMVwiXG4jICAgIHVuaXRfOF9hY3Rpdml0eV8yOiBcIkNyZWF0ZSBUYXNrIFByYWN0aWNlIDI6IEdhbWUgRGV2ZWxvcG1lbnQgMlwiXG4jICAgIHVuaXRfOF9hY3Rpdml0eV8zOiBcIkNyZWF0ZSBUYXNrIFByYWN0aWNlIDM6IEdhbWUgRGV2ZWxvcG1lbnQgM1wiXG4jICAgIHVuaXRfOTogXCJVbml0IDk6IEFQIFJldmlld1wiXG4jICAgIHVuaXRfMTA6IFwiVW5pdCAxMDogUG9zdC1BUFwiXG4jICAgIHVuaXRfMTBfYWN0aXZpdHlfMTogXCJVbml0IDEwIEFjdGl2aXR5OiBXZWIgUXVpelwiXG5cbiMgIHBhcmVudF9sYW5kaW5nOlxuIyAgICBzbG9nYW5fcXVvdGU6IFwiXFxcIkNvZGVDb21iYXQgaXMgcmVhbGx5IGZ1biwgYW5kIHlvdSBsZWFybiBhIGxvdC5cXFwiXCJcbiMgICAgcXVvdGVfYXR0cjogXCI1dGggR3JhZGVyLCBPYWtsYW5kLCBDQVwiXG4jICAgIHJlZmVyX3RlYWNoZXI6IFwiUmVmZXIgYSBUZWFjaGVyXCJcbiMgICAgZm9jdXNfcXVvdGU6IFwiVW5sb2NrIHlvdXIgY2hpbGQncyBmdXR1cmVcIlxuIyAgICB2YWx1ZV9oZWFkMTogXCJUaGUgbW9zdCBlbmdhZ2luZyB3YXkgdG8gbGVhcm4gdHlwZWQgY29kZVwiXG4jICAgIHZhbHVlX2NvcHkxOiBcIkNvZGVDb21iYXQgaXMgY2hpbGTigJlzIHBlcnNvbmFsIHR1dG9yLiBDb3ZlcmluZyBtYXRlcmlhbCBhbGlnbmVkIHdpdGggbmF0aW9uYWwgY3VycmljdWx1bSBzdGFuZGFyZHMsIHlvdXIgY2hpbGQgd2lsbCBwcm9ncmFtIGFsZ29yaXRobXMsIGJ1aWxkIHdlYnNpdGVzIGFuZCBldmVuIGRlc2lnbiB0aGVpciBvd24gZ2FtZXMuXCJcbiMgICAgdmFsdWVfaGVhZDI6IFwiQnVpbGRpbmcgY3JpdGljYWwgc2tpbGxzIGZvciB0aGUgMjFzdCBjZW50dXJ5XCJcbiMgICAgdmFsdWVfY29weTI6IFwiWW91ciBraWRzIHdpbGwgbGVhcm4gaG93IHRvIG5hdmlnYXRlIGFuZCBiZWNvbWUgY2l0aXplbnMgaW4gdGhlIGRpZ2l0YWwgd29ybGQuIENvZGVDb21iYXQgaXMgYSBzb2x1dGlvbiB0aGF0IGVuaGFuY2VzIHlvdXIgY2hpbGTigJlzIGNyaXRpY2FsIHRoaW5raW5nIGFuZCByZXNpbGllbmNlLlwiXG4jICAgIHZhbHVlX2hlYWQzOiBcIkhlcm9lcyB0aGF0IHlvdXIgY2hpbGQgd2lsbCBsb3ZlXCJcbiMgICAgdmFsdWVfY29weTM6IFwiV2Uga25vdyBob3cgaW1wb3J0YW50IGZ1biBhbmQgZW5nYWdlbWVudCBpcyBmb3IgdGhlIGRldmVsb3BpbmcgYnJhaW4sIHNvIHdl4oCZdmUgcGFja2VkIGluIGFzIG11Y2ggbGVhcm5pbmcgYXMgd2UgY2FuIHdoaWxlIHdyYXBwaW5nIGl0IHVwIGluIGEgZ2FtZSB0aGV5J2xsIGxvdmUuXCJcbiMgICAgZGl2ZV9oZWFkMTogXCJOb3QganVzdCBmb3Igc29mdHdhcmUgZW5naW5lZXJzXCJcbiMgICAgZGl2ZV9pbnRybzogXCJDb21wdXRlciBzY2llbmNlIHNraWxscyBoYXZlIGEgd2lkZSByYW5nZSBvZiBhcHBsaWNhdGlvbnMuIFRha2UgYSBsb29rIGF0IGEgZmV3IGV4YW1wbGVzIGJlbG93IVwiXG4jICAgIG1lZGljYWxfZmxhZzogXCJNZWRpY2FsIEFwcGxpY2F0aW9uc1wiXG4jICAgIG1lZGljYWxfZmxhZ19jb3B5OiBcIkZyb20gbWFwcGluZyBvZiB0aGUgaHVtYW4gZ2Vub21lIHRvIE1SSSBtYWNoaW5lcywgY29kaW5nIGFsbG93cyB1cyB0byB1bmRlcnN0YW5kIHRoZSBib2R5IGluIHdheXMgd2XigJl2ZSBuZXZlciBiZWVuIGFibGUgdG8gYmVmb3JlLlwiXG4jICAgIGV4cGxvcmVfZmxhZzogXCJTcGFjZSBFeHBsb3JhdGlvblwiXG4jICAgIGV4cGxvcmVfZmxhZ19jb3B5OiBcIkFwb2xsbyBnb3QgdG8gdGhlIE1vb24gdGhhbmtzIHRvIGhhcmR3b3JraW5nIGh1bWFuIGNvbXB1dGVycywgYW5kIHNjaWVudGlzdHMgdXNlIGNvbXB1dGVyIHByb2dyYW1zIHRvIGFuYWx5emUgdGhlIGdyYXZpdHkgb2YgcGxhbmV0cyBhbmQgc2VhcmNoIGZvciBuZXcgc3RhcnMuXCJcbiMgICAgZmlsbWFraW5nX2ZsYWc6IFwiRmlsbW1ha2luZyBhbmQgQW5pbWF0aW9uXCJcbiMgICAgZmlsbWFraW5nX2ZsYWdfY29weTogXCJGcm9tIHRoZSByb2JvdGljcyBvZiBKdXJhc3NpYyBQYXJrIHRvIHRoZSBpbmNyZWRpYmxlIGFuaW1hdGlvbiBvZiBEcmVhbXdvcmtzIGFuZCBQaXhhciwgZmlsbXMgd291bGRu4oCZdCBiZSB0aGUgc2FtZSB3aXRob3V0IHRoZSBkaWdpdGFsIGNyZWF0aXZlcyBiZWhpbmQgdGhlIHNjZW5lcy5cIlxuIyAgICBkaXZlX2hlYWQyOiBcIkdhbWVzIGFyZSBpbXBvcnRhbnQgZm9yIGxlYXJuaW5nXCJcbiMgICAgZGl2ZV9wYXIxOiBcIk11bHRpcGxlIHN0dWRpZXMgaGF2ZSBmb3VuZCB0aGF0IGdhbWUtYmFzZWQgbGVhcm5pbmcgcHJvbW90ZXNcIlxuIyAgICBkaXZlX2xpbmsxOiBcImNvZ25pdGl2ZSBkZXZlbG9wbWVudFwiXG4jICAgIGRpdmVfcGFyMjogXCJpbiBraWRzIHdoaWxlIGFsc28gcHJvdmluZyB0byBiZVwiXG4jICAgIGRpdmVfbGluazI6IFwibW9yZSBlZmZlY3RpdmVcIlxuIyAgICBkaXZlX3BhcjM6IFwiaW4gaGVscGluZyBzdHVkZW50c1wiXG4jICAgIGRpdmVfbGluazM6IFwibGVhcm4gYW5kIHJldGFpbiBrbm93bGVkZ2VcIlxuIyAgICBkaXZlX3BhcjQ6IFwiLFwiXG4jICAgIGRpdmVfbGluazQ6IFwiY29uY2VudHJhdGVcIlxuIyAgICBkaXZlX3BhcjU6IFwiLCBhbmQgcGVyZm9ybSBhdCBhIGhpZ2hlciBsZXZlbCBvZiBhY2hpZXZlbWVudC5cIlxuIyAgICBkaXZlX3BhcjY6IFwiR2FtZSBiYXNlZCBsZWFybmluZyBpcyBhbHNvIGdvb2QgZm9yIGRldmVsb3BpbmdcIlxuIyAgICBkaXZlX2xpbms1OiBcInJlc2lsaWVuY2VcIlxuIyAgICBkaXZlX3Bhcjc6IFwiLCBjb2duaXRpdmUgcmVhc29uaW5nLCBhbmRcIlxuIyAgICBkaXZlX3Bhcjg6IFwiLiBTY2llbmNlIGlzIGp1c3QgdGVsbGluZyB1cyB3aGF0IGxlYXJuZXJzIGFscmVhZHkga25vdy4gQ2hpbGRyZW4gbGVhcm4gYmVzdCBieSBwbGF5aW5nLlwiXG4jICAgIGRpdmVfbGluazY6IFwiZXhlY3V0aXZlIGZ1bmN0aW9uc1wiXG4jICAgIGRpdmVfaGVhZDM6IFwiVGVhbSB1cCB3aXRoIHRlYWNoZXJzXCJcbiMgICAgZGl2ZV8zX3BhcjE6IFwiSW4gdGhlIGZ1dHVyZSwgXCJcbiMgICAgZGl2ZV8zX2xpbmsxOiBcImNvZGluZyBpcyBnb2luZyB0byBiZSBhcyBmdW5kYW1lbnRhbCBhcyBsZWFybmluZyB0byByZWFkIGFuZCB3cml0ZVwiXG4jICAgIGRpdmVfM19wYXIyOiBcIi4gV2XigJl2ZSB3b3JrZWQgY2xvc2VseSB3aXRoIHRlYWNoZXJzIHRvIGRlc2lnbiBhbmQgZGV2ZWxvcCBvdXIgY29udGVudCwgYW5kIHdlIGNhbid0IHdhaXQgdG8gZ2V0IHlvdXIga2lkcyBsZWFybmluZy4gRWR1Y2F0aW9uYWwgdGVjaG5vbG9neSBwcm9ncmFtcyBsaWtlIENvZGVDb21iYXQgd29yayBiZXN0IHdoZW4gdGhlIHRlYWNoZXJzIGltcGxlbWVudCB0aGVtIGNvbnNpc3RlbnRseS4gSGVscCB1cyBtYWtlIHRoYXQgY29ubmVjdGlvbiBieSBpbnRyb2R1Y2luZyB1cyB0byB5b3VyIGNoaWxk4oCZcyB0ZWFjaGVycyFcIlxuIyAgICBtaXNzaW9uOiBcIk91ciBtaXNzaW9uOiB0byB0ZWFjaCBhbmQgZW5nYWdlXCJcbiMgICAgbWlzc2lvbjFfaGVhZGluZzogXCJDb2RpbmcgZm9yIHRvZGF5J3MgZ2VuZXJhdGlvblwiXG4jICAgIG1pc3Npb24yX2hlYWRpbmc6IFwiUHJlcGFyaW5nIGZvciB0aGUgZnV0dXJlXCJcbiMgICAgbWlzc2lvbjNfaGVhZGluZzogXCJTdXBwb3J0ZWQgYnkgcGFyZW50cyBsaWtlIHlvdVwiXG4jICAgIG1pc3Npb24xX2NvcHk6IFwiT3VyIGVkdWNhdGlvbiBzcGVjaWFsaXN0cyB3b3JrIGNsb3NlbHkgd2l0aCB0ZWFjaGVycyB0byBtZWV0IGNoaWxkcmVuIHdoZXJlIHRoZXkgYXJlIGluIHRoZSBlZHVjYXRpb25hbCBsYW5kc2NhcGUuIEtpZHMgbGVhcm4gc2tpbGxzIHRoYXQgY2FuIGJlIGFwcGxpZWQgb3V0c2lkZSBvZiB0aGUgZ2FtZSBiZWNhdXNlIHRoZXkgbGVhcm4gaG93IHRvIHNvbHZlIHByb2JsZW1zLCBubyBtYXR0ZXIgd2hhdCB0aGVpciBsZWFybmluZyBzdHlsZSBpcy5cIlxuIyAgICBtaXNzaW9uMl9jb3B5OiBcIkEgMjAxNiBzdXJ2ZXkgc2hvd2VkIHRoYXQgNjQlIG9mIGdpcmxzIGluIDMtNXRoIGdyYWRlIHdhbnQgdG8gbGVhcm4gaG93IHRvIGNvZGUuIFRoZXJlIHdlcmUgNyBtaWxsaW9uIGpvYiBvcGVuaW5ncyBpbiAyMDE1IHJlcXVpcmVkIGNvZGluZyBza2lsbHMuIFdlIGJ1aWx0IENvZGVDb21iYXQgYmVjYXVzZSBldmVyeSBjaGlsZCBzaG91bGQgYmUgZ2l2ZW4gYSBjaGFuY2UgdG8gY3JlYXRlIHRoZWlyIGJlc3QgZnV0dXJlLlwiXG4jICAgIG1pc3Npb24zX2NvcHk6IFwiQXQgQ29kZUNvbWJhdCwgd2XigJlyZSBwYXJlbnRzLiBXZeKAmXJlIGNvZGVycy4gV2XigJlyZSBlZHVjYXRvcnMuIEJ1dCBtb3N0IG9mIGFsbCwgd2XigJlyZSBwZW9wbGUgd2hvIGJlbGlldmUgaW4gZ2l2aW5nIG91ciBraWRzIHRoZSBiZXN0IG9wcG9ydHVuaXR5IGZvciBzdWNjZXNzIGluIHdoYXRldmVyIGl0IGlzIHRoZXkgZGVjaWRlIHRvIGRvLlwiXG5cbiMgIHBhcmVudF9tb2RhbDpcbiMgICAgcmVmZXJfdGVhY2hlcjogXCJSZWZlciBUZWFjaGVyXCJcbiMgICAgbmFtZTogXCJZb3VyIE5hbWVcIlxuIyAgICBwYXJlbnRfZW1haWw6IFwiWW91ciBFbWFpbFwiXG4jICAgIHRlYWNoZXJfZW1haWw6IFwiVGVhY2hlcidzIEVtYWlsXCJcbiMgICAgbWVzc2FnZTogXCJNZXNzYWdlXCJcbiMgICAgY3VzdG9tX21lc3NhZ2U6IFwiSSBqdXN0IGZvdW5kIENvZGVDb21iYXQgYW5kIHRob3VnaHQgaXQnZCBiZSBhIGdyZWF0IHByb2dyYW0gZm9yIHlvdXIgY2xhc3Nyb29tISBJdCdzIGEgY29tcHV0ZXIgc2NpZW5jZSBsZWFybmluZyBwbGF0Zm9ybSB3aXRoIHN0YW5kYXJkcy1hbGlnbmVkIGN1cnJpY3VsdW0uXFxuXFxuQ29tcHV0ZXIgbGl0ZXJhY3kgaXMgc28gaW1wb3J0YW50IGFuZCBJIHRoaW5rIHRoaXMgd291bGQgYmUgYSBncmVhdCB3YXkgdG8gZ2V0IHN0dWRlbnRzIGVuZ2FnZWQgaW4gbGVhcm5pbmcgdG8gY29kZS5cIlxuIyAgICBzZW5kOiBcIlNlbmQgRW1haWxcIlxuXG4jICBob2NfMjAxODpcbiMgICAgYmFubmVyOiBcIkhhcHB5IENvbXB1dGVyIFNjaWVuY2UgRWR1Y2F0aW9uIFdlZWsgMjAxOCFcIlxuIyAgICBwYWdlX2hlYWRpbmc6IFwiWW91ciBzdHVkZW50cyB3aWxsIGxlYXJuIHRvIGNvZGUgYnkgYnVpbGRpbmcgdGhlaXIgb3duIGdhbWUhXCJcbiMgICAgc3RlcF8xOiBcIlN0ZXAgMTogV2F0Y2ggVmlkZW8gT3ZlcnZpZXdcIlxuIyAgICBzdGVwXzI6IFwiU3RlcCAyOiBUcnkgaXQgWW91cnNlbGZcIlxuIyAgICBzdGVwXzM6IFwiU3RlcCAzOiBEb3dubG9hZCBMZXNzb24gUGxhblwiXG4jICAgIHRyeV9hY3Rpdml0eTogXCJUcnkgQWN0aXZpdHlcIlxuIyAgICBkb3dubG9hZF9wZGY6IFwiRG93bmxvYWQgUERGXCJcbiMgICAgdGVhY2hlcl9zaWdudXBfaGVhZGluZzogXCJUdXJuIEhvdXIgb2YgQ29kZSBpbnRvIGEgWWVhciBvZiBDb2RlXCJcbiMgICAgdGVhY2hlcl9zaWdudXBfYmx1cmI6IFwiRXZlcnl0aGluZyB5b3UgbmVlZCB0byB0ZWFjaCBjb21wdXRlciBzY2llbmNlLCBubyBwcmlvciBleHBlcmllbmNlIG5lZWRlZC5cIlxuIyAgICB0ZWFjaGVyX3NpZ251cF9pbnB1dF9ibHVyYjogXCJHZXQgZmlyc3QgY291cnNlIGZyZWU6XCJcbiMgICAgdGVhY2hlcl9zaWdudXBfaW5wdXRfcGxhY2Vob2xkZXI6IFwiVGVhY2hlciBlbWFpbCBhZGRyZXNzXCJcbiMgICAgdGVhY2hlcl9zaWdudXBfaW5wdXRfYnV0dG9uOiBcIkdldCBDUzEgRnJlZVwiXG4jICAgIGFjdGl2aXRpZXNfaGVhZGVyOiBcIk1vcmUgSG91ciBvZiBDb2RlIEFjdGl2aXRpZXNcIlxuIyAgICBhY3Rpdml0eV9sYWJlbF8xOiBcIkVzY2FwZSB0aGUgRHVuZ2VvbiFcIlxuIyAgICBhY3Rpdml0eV9sYWJlbF8yOiBcIiBCZWdpbm5lcjogQnVpbGQgYSBHYW1lIVwiXG4jICAgIGFjdGl2aXR5X2xhYmVsXzM6IFwiQWR2YW5jZWQ6IEJ1aWxkIGFuIEFyY2FkZSBHYW1lIVwiXG4jICAgIGFjdGl2aXR5X2J1dHRvbl8xOiBcIlZpZXcgTGVzc29uXCJcbiMgICAgYWJvdXQ6IFwiQWJvdXQgQ29kZUNvbWJhdFwiXG4jICAgIGFib3V0X2NvcHk6IFwiQSBnYW1lLWJhc2VkLCBzdGFuZGFyZHMtYWxpZ25lZCBjb21wdXRlciBzY2llbmNlIHByb2dyYW0gdGhhdCB0ZWFjaGVzIHJlYWwsIHR5cGVkIFB5dGhvbiBhbmQgSmF2YVNjcmlwdC5cIlxuIyAgICBwb2ludDE6IFwi4pyTIFNjYWZmb2xkZWRcIlxuIyAgICBwb2ludDI6IFwi4pyTIERpZmZlcmVudGlhdGVkXCJcbiMgICAgcG9pbnQzOiBcIuKckyBBc3Nlc3NtZW50c1wiXG4jICAgIHBvaW50NDogXCLinJMgUHJvamVjdC1iYXNlZCBjb3Vyc2VzXCJcbiMgICAgcG9pbnQ1OiBcIuKckyBTdHVkZW50IHRyYWNraW5nXCJcbiMgICAgcG9pbnQ2OiBcIuKckyBGdWxsIGxlc3NvbiBwbGFuc1wiXG4jICAgIHRpdGxlOiBcIkhPVVIgT0YgQ09ERSAyMDE4XCJcbiMgICAgYWNyb255bTogXCJIT0NcIlxuXG4jICBob2NfMjAxOF9pbnRlcnN0aXRpYWw6XG4jICAgIHdlbGNvbWU6IFwiV2VsY29tZSB0byBDb2RlQ29tYmF0J3MgSG91ciBvZiBDb2RlIDIwMTghXCJcbiMgICAgZWR1Y2F0b3I6IFwiSSdtIGFuIGVkdWNhdG9yXCJcbiMgICAgc2hvd19yZXNvdXJjZXM6IFwiU2hvdyBtZSB0ZWFjaGVyIHJlc291cmNlcyFcIlxuIyAgICBzdHVkZW50OiBcIkknbSBhIHN0dWRlbnRcIlxuIyAgICByZWFkeV90b19jb2RlOiBcIkknbSByZWFkeSB0byBjb2RlIVwiXG5cbiMgIGhvY18yMDE4X2NvbXBsZXRpb246XG4jICAgIGNvbmdyYXR1bGF0aW9uczogXCJDb25ncmF0dWxhdGlvbnMgb24gY29tcGxldGluZyA8Yj5Db2RlLCBQbGF5LCBTaGFyZSE8L2I+XCJcbiMgICAgc2VuZDogXCJTZW5kIHlvdXIgSG91ciBvZiBDb2RlIGdhbWUgdG8gZnJpZW5kcyBhbmQgZmFtaWx5IVwiXG4jICAgIGNvcHk6IFwiQ29weSBVUkxcIlxuIyAgICBnZXRfY2VydGlmaWNhdGU6IFwiR2V0IGEgY2VydGlmaWNhdGUgb2YgY29tcGxldGlvbiB0byBjZWxlYnJhdGUgd2l0aCB5b3VyIGNsYXNzIVwiXG4jICAgIGdldF9jZXJ0X2J0bjogXCJHZXQgQ2VydGlmaWNhdGVcIlxuIyAgICBmaXJzdF9uYW1lOiBcIkZpcnN0IE5hbWVcIlxuIyAgICBsYXN0X2luaXRpYWw6IFwiTGFzdCBJbml0aWFsXCJcbiMgICAgdGVhY2hlcl9lbWFpbDogXCJUZWFjaGVyJ3MgZW1haWwgYWRkcmVzc1wiXG5cbiMgIHNjaG9vbF9hZG1pbmlzdHJhdG9yOlxuIyAgICB0aXRsZTogXCJTY2hvb2wgQWRtaW5pc3RyYXRvciBEYXNoYm9hcmRcIlxuIyAgICBteV90ZWFjaGVyczogXCJNeSBUZWFjaGVyc1wiXG4jICAgIGxhc3RfbG9naW46IFwiTGFzdCBMb2dpblwiXG4jICAgIGxpY2Vuc2VzX3VzZWQ6IFwibGljZW5zZXMgdXNlZFwiXG4jICAgIHRvdGFsX3N0dWRlbnRzOiBcInRvdGFsIHN0dWRlbnRzXCJcbiMgICAgYWN0aXZlX3N0dWRlbnRzOiBcImFjdGl2ZSBzdHVkZW50c1wiXG4jICAgIHByb2plY3RzX2NyZWF0ZWQ6IFwicHJvamVjdHMgY3JlYXRlZFwiXG4jICAgIG90aGVyOiBcIk90aGVyXCJcbiMgICAgbm90aWNlOiBcIlRoZSBmb2xsb3dpbmcgc2Nob29sIGFkbWluaXN0cmF0b3JzIGhhdmUgdmlldy1vbmx5IGFjY2VzcyB0byB5b3VyIGNsYXNzcm9vbSBkYXRhOlwiXG4jICAgIGFkZF9hZGRpdGlvbmFsX3RlYWNoZXI6IFwiTmVlZCB0byBhZGQgYW4gYWRkaXRpb25hbCB0ZWFjaGVyPyBDb250YWN0IHlvdXIgQ29kZUNvbWJhdCBBY2NvdW50IE1hbmFnZXIgb3IgZW1haWwgc3VwcG9ydEBjb2RlY29tYmF0LmNvbS4gXCJcbiMgICAgbGljZW5zZV9zdGF0X2Rlc2NyaXB0aW9uOiBcIkxpY2Vuc2VzIGF2YWlsYWJsZSBhY2NvdW50cyBmb3IgdGhlIHRvdGFsIG51bWJlciBvZiBsaWNlbnNlcyBhdmFpbGFibGUgdG8gdGhlIHRlYWNoZXIsIGluY2x1ZGluZyBTaGFyZWQgTGljZW5zZXMuXCJcbiMgICAgc3R1ZGVudHNfc3RhdF9kZXNjcmlwdGlvbjogXCJUb3RhbCBzdHVkZW50cyBhY2NvdW50cyBmb3IgYWxsIHN0dWRlbnRzIGFjcm9zcyBhbGwgY2xhc3Nyb29tcywgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZXkgaGF2ZSBsaWNlbnNlcyBhcHBsaWVkLlwiXG4jICAgIGFjdGl2ZV9zdHVkZW50c19zdGF0X2Rlc2NyaXB0aW9uOiBcIkFjdGl2ZSBzdHVkZW50cyBjb3VudHMgdGhlIG51bWJlciBvZiBzdHVkZW50cyB0aGF0IGhhdmUgbG9nZ2VkIGludG8gQ29kZUNvbWJhdCBpbiB0aGUgbGFzdCA2MCBkYXlzLlwiXG4jICAgIHByb2plY3Rfc3RhdF9kZXNjcmlwdGlvbjogXCJQcm9qZWN0cyBjcmVhdGVkIGNvdW50cyB0aGUgdG90YWwgbnVtYmVyIG9mIEdhbWUgYW5kIFdlYiBkZXZlbG9wbWVudCBwcm9qZWN0cyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkLlwiXG4jICAgIG5vX3RlYWNoZXJzOiBcIllvdSBhcmUgbm90IGFkbWluaXN0cmF0aW5nIGFueSB0ZWFjaGVycy5cIlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXBwL2xvY2FsZS9zdi5jb2ZmZWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1082\n");

/***/ })

});