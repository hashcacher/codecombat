/*! hash:345dfe6c0e434e9c7378, chunkhash:374f91a8acc5295444dc, name:locale/bg, filebase:bg.bundle.js, query:, file:javascripts/chunks/locale/bg.bundle.js */
webpackJsonp([73],{

/***/ 1035:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"български език\",\n  englishDescription: \"Bulgarian\",\n  translation: {\n    new_home: {\n      slogan: \"Най-завладяващата игра за учене на програмиране.\",\n      classroom_edition: \"За училища:\",\n      learn_to_code: \"Научи се да програмираш:\",\n      play_now: \"Започни играта\",\n      im_a_teacher: \"Аз съм учител\",\n      im_a_student: \"Аз съм ученик\",\n      learn_more: \"Научи повече\",\n      classroom_in_a_box: \"Учебна стая в кутия за обучение по компютърни науки.\",\n      codecombat_is: \"CodeCombat е платформа <strong>за ученици</strong> за учене на компютърни науки с истинска игра.\",\n      our_courses: \"Нашите курсове са специално проверени за тяхното <strong>превъзходство в клас</strong>, дори от учители с малък до никакъв опит в програмирането.\",\n      top_screenshots_hint: \"Учениците пишат код и виждат обновяването на техните промени в реално време\",\n      designed_with: \"Проектирани с мисъл за учителите\",\n      real_code: \"Истински, типизиран код\",\n      from_the_first_level: \"от първото ниво\",\n      getting_students: \"Въвеждането на учениците в използване на типизиран код колкото се може по-бързо е ключово за научаването на програмния синтаксис и правилното структуриране.\",\n      educator_resources: \"Материали и ръководства\",\n      course_guides: \"за обучаващите\",\n      teaching_computer_science: \"Воденето на обучение по компютърни науки не изисква скъпи степени, защото ние предлагаме инструменти в помощ на учители с всякаква квалификация.\",\n      accessible_to: \"Достъпна за\",\n      everyone: \"всеки\",\n      democratizing: \"Демократизирането на процеса на учене на програмиране е в сърцето на философията ни. Всеки трябва да може да се научи да пише код.\",\n      forgot_learning: \"Мисля, че те всъщност забравиха, че всъщност учат нещо.\",\n      wanted_to_do: \"Писането на код е нещо, което винаги съм искал да правя, и не мислех, че ще мога да науча това в училище.\",\n      why_games: \"Защо ученето чрез игра е важно?\",\n      games_reward: \"Игрите награждават продуктивното усилие.\",\n      encourage: \"Игрите са медиум, който окуражава взаимодействието, откритията и процеса на проба и грешка. Добрата игра предизвиква играча да овладява умения с течение на времето - което е същия важен процес, през който учениците минават докато учат.\",\n      excel: \"Игрите са превъзходни в награждаването\",\n      struggle: \"продуктивно усилие\",\n      kind_of_struggle: \"видът усилие, което води до учене и което е завладяващо и\",\n      motivating: \"мотивиращо\",\n      not_tedious: \"не досадно.\",\n      gaming_is_good: \"Изследвания показват, че игрите влияят добре на мозъците на децата. (вярно е!)\",\n      game_based: \"Когато обучаващи системи базирани на игри се\",\n      compared: \"сравнят\",\n      conventional: \"с конвенционални методи за оценка, разликата е ясна: игрите са по-добри в подпомагането на учениците да запазят познанието, да се концентрират и\",\n      perform_at_higher_level: \"да се представят на по-високо ниво на постивения\",\n      feedback: \"Игрите също така дават обратна връзка в реално време. Тя позволява на учениците да настроят пътя си на достигане до решение и да разберат концепциите по-холистично, вместо да бъдат ограничени до просто “правилни” и “грешни” отговори.\",\n      real_game: \"Истинска игра, играна с истинско писане на код.\",\n      great_game: \"Чудесната игра е повече от значки и постижения - тя изисква пътешествие на играча, добре замислени главоблъсканици и възможността да се пребориш с предизвикателствата със самостоятелност и увереност.\",\n      agency: \"CodeCombat е игра, която дава на играчите тази самостоятелност и увереност посредством каления ни процесор за типизиран код, който помага еднакво добре на начинаещи и напреднали ученици да пишат хубав, валиден код.\",\n      request_demo_title: \"Нека учениците ти започнат още днес!\",\n      request_demo_subtitle: \"Поръчай демонстрация и включи учениците си за по-малко от час.\",\n      get_started_title: \"Задай класа си днес\",\n      get_started_subtitle: \"Задай клас, добави ученици и следи прогреса им на изучаване на компютърни науки.\",\n      request_demo: \"Поръчай демонстрация\",\n      setup_a_class: \"Задай клас\",\n      have_an_account: \"Вече имаш акаунт?\",\n      logged_in_as: \"Влязъл си като\",\n      computer_science: \"Курсове по компютърни науки за всички възрасти\",\n      ffa: \"Достъпно за всички ученици\",\n      coming_soon: \"Очаквай скоро!\",\n      courses_available_in: \"Курсовете са налични в JavaScript, Python, и Java (очаквай скоро!)\",\n      boast: \"Boasts riddles that are complex enough to fascinate gamers and coders alike.\",\n      winning: \"Печеливша комбинация от ролева игра и домашна работа по програмиране, която с пълно основание можем да кажем, че прави обучението за деца забавно.\",\n      run_class: \"Всичко от което се нуждаеш да водиш уроци по компютърни науки в училището си още днес. Опит с компютърни науки не е необходим.\",\n      goto_classes: \"Калсовете ми\",\n      view_profile: \"Моя профил\",\n      view_progress: \"Прегледай прогреса\",\n      want_coco: \"Искаш ли CodeCombat в училището си?\"\n    },\n    nav: {\n      play: \"Нива\",\n      community: \"Общност\",\n      courses: \"Курсове\",\n      blog: \"Блог\",\n      forum: \"Форум\",\n      account: \"Акаунт\",\n      profile: \"Профил\",\n      home: \"Начало\",\n      contribute: \"Допринеси\",\n      legal: \"Юридическа информация\",\n      about: \"За нас\",\n      contact: \"Контакти\",\n      twitter_follow: \"Започни да следиш\",\n      careers: \"Кариери\"\n    },\n    modal: {\n      close: \"Затвори\",\n      okay: \"Добре\"\n    },\n    not_found: {\n      page_not_found: \"Страницата не е намерена\"\n    },\n    diplomat_suggestion: {\n      title: \"Помогни да преведем CodeCombat!\",\n      sub_heading: \"Имаме нужда от твоите езикови познания!\",\n      pitch_body: \"Ние разработихме CodeCombat на английски, но имаме играчи от целият свят. Много от тях искат да играят на български, защото не знаят английски, така че ако знаете и двата езика можете да се регистрирате като Дипломат и да помогнете в българският превод както на сайта на CodeCombat, така и на всички нива.\",\n      missing_translations: \"До момента, в който всичко бъде преведено на български, някои неща ще са на английски.\",\n      learn_more: \"Научи повече за това как да станеш Дипломат\",\n      subscribe_as_diplomat: \"Стани дипломат\"\n    },\n    play: {\n      play_as: \"Играй като\",\n      spectate: \"Наблюдател\",\n      players: \"Играчи\",\n      hours_played: \"Изиграни часове\",\n      items: \"Предмети\",\n      unlock: \"Отключи\",\n      confirm: \"Потвърди\",\n      owned: \"Придобити\",\n      locked: \"Заключено\",\n      available: \"Достъпен\",\n      skills_granted: \"Умението е получено\",\n      heroes: \"Герои\",\n      achievements: \"Постижения\",\n      settings: \"Настройки\",\n      poll: \"Допитване\",\n      next: \"Напред\",\n      change_hero: \"Смени герой\",\n      buy_gems: \"Купи скъпоценни камъни\",\n      anonymous: \"Анонимен играч\",\n      level_difficulty: \"Трудност\",\n      awaiting_levels_adventurer_prefix: \"5 нови нива всяка седмица\",\n      awaiting_levels_adventurer: \"Стани Търсач на приключения\",\n      awaiting_levels_adventurer_suffix: \"за да бъдеш първият, който играе нови нива.\",\n      adjust_volume: \"Настрой звук\",\n      campaign_multiplayer: \"Арени за мултиплейър\",\n      campaign_multiplayer_description: \"... където се състезаваш по програмиране с други играчи.\"\n    },\n    share_progress_modal: {\n      blurb: \"Справяш се чудесно! Сподели с родителите си, колко много научи чрез CodeCombat.\",\n      email_invalid: \"Имейл адресът е невалиден\",\n      form_blurb: \"Въведете email адреса им, и ние ще им покажем!\",\n      form_label: \"Електронна поща\",\n      placeholder: \"Имейл адрес\",\n      title: \"Отлична работа, Ученико!\"\n    },\n    login: {\n      sign_up: \"Създай Профил\",\n      log_in: \"Вход\",\n      logging_in: \"Влизане...\",\n      log_out: \"Изход\",\n      forgot_password: \"Забравена парола?\",\n      finishing: \"Завършване\",\n      sign_in_with_facebook: \"Вписване чрез Facebook\",\n      sign_in_with_gplus: \"Вписване чрез G+\",\n      signup_switch: \"Създаване на нов акаунт?\"\n    },\n    signup: {\n      email_announcements: \"Получавай анонси по имейл\",\n      creating: \"Създаване на профил...\",\n      sign_up: \"Регистриране\",\n      log_in: \"Вход с парола\",\n      required: \"Трабва да влезеш преди можеш да ходиш на там.\",\n      login_switch: \"Вече имаш акаунт?\"\n    },\n    recover: {\n      recover_account_title: \"Възстанови Акаунт\",\n      send_password: \"Изпрати парола за възстановяване\",\n      recovery_sent: \"Писмото за възстановяване на парола е изпратено.\"\n    },\n    items: {\n      primary: \"Основни\",\n      secondary: \"Второстепенни\",\n      armor: \"Броня\",\n      accessories: \"Аксесоари\",\n      misc: \"Разни\",\n      books: \"Книги\"\n    },\n    common: {\n      back: \"Назад\",\n      \"continue\": \"Продължи\",\n      loading: \"Зареждане...\",\n      saving: \"Записване...\",\n      sending: \"Изпращане...\",\n      send: \"Изпрати\",\n      cancel: \"Отказ\",\n      save: \"Запис\",\n      publish: \"Публикувай\",\n      create: \"Създай\",\n      fork: \"Разклоняване\",\n      play: \"Играй\",\n      retry: \"Отново\",\n      actions: \"Действия\",\n      info: \"Инфо\",\n      help: \"Помощ\",\n      watch: \"Наблюдавай\",\n      unwatch: \"Не наблюдавай\",\n      submit_patch: \"Изпрати кръпка\",\n      submit_changes: \"Изпрати промените\",\n      save_changes: \"Запази промените\"\n    },\n    general: {\n      and: \"и\",\n      name: \"Име\",\n      date: \"Дата\",\n      body: \"Съдържание\",\n      version: \"Версия\",\n      pending: \"Изчакващ\",\n      accepted: \"Прието\",\n      rejected: \"Отказано\",\n      withdrawn: \"Отменено\",\n      submitter: \"Изпращач\",\n      submitted: \"Изпратено\",\n      commit_msg: \"Съпровождащо съобщение\",\n      version_history: \"Предишни версии\",\n      version_history_for: \"Предишни версии на: \",\n      select_changes: \"Избери две промени за да видиш разликата между тях.\",\n      undo_prefix: \"Отмени\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Възстанови\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Предварителен превод на текущото ниво\",\n      result: \"Резултат\",\n      results: \"Резултати\",\n      description: \"Описание\",\n      or: \"или\",\n      subject: \"Тема\",\n      email: \"Email\",\n      password: \"Парола\",\n      message: \"Съобщение\",\n      code: \"Код\",\n      ladder: \"Стълба\",\n      when: \"Кога\",\n      opponent: \"Опонент\",\n      rank: \"Ранг\",\n      score: \"Точки\",\n      win: \"Победа\",\n      loss: \"Загуба\",\n      tie: \"Наравно\",\n      easy: \"Лесно\",\n      medium: \"Средно\",\n      hard: \"Трудно\",\n      player: \"Играч\",\n      player_level: \"Ниво\",\n      warrior: \"Боец\",\n      ranger: \"Рейнджър\",\n      wizard: \"Магьосник\"\n    },\n    units: {\n      second: \"секунда\",\n      seconds: \"секунди\",\n      minute: \"минута\",\n      minutes: \"минути\",\n      hour: \"час\",\n      hours: \"часа\",\n      day: \"ден\",\n      days: \"дена\",\n      week: \"седмица\",\n      weeks: \"седмици\",\n      month: \"месец\",\n      months: \"месеци\",\n      year: \"година\",\n      years: \"години\"\n    },\n    play_level: {\n      done: \"Готово\",\n      home: \"На главната\",\n      level: \"Ниво\",\n      skip: \"Прескочи\",\n      game_menu: \"Главно Меню\",\n      restart: \"Рестарт\",\n      goals: \"Цели\",\n      goal: \"Цел\",\n      running: \"Изпълнява се...\",\n      success: \"Успех!\",\n      incomplete: \"Недовършен\",\n      timed_out: \"Времето изтече\",\n      failing: \"Неуспех\",\n      reload: \"Презареди\",\n      reload_title: \"Презареди целият код?\",\n      reload_really: \"Сигурен ли сте, че искате да презаредите нивото и да започнете отначало?\",\n      reload_confirm: \"Презареди всички\",\n      victory: \"Победа\",\n      victory_title_prefix: \"Ниво \",\n      victory_title_suffix: \" завършено!\",\n      victory_sign_up: \"Регистрирай се за да запишеш напредъка си\",\n      victory_sign_up_poke: \"Регистрирайте се безплатно за да запазите прогреса си!\",\n      victory_rate_the_level: \"Оценете нивото: \",\n      victory_return_to_ladder: \"Обратно към Стълбата\",\n      victory_saving_progress: \"Записване на напредъка\",\n      victory_go_home: \"На Главната\",\n      victory_review: \"Разкажи ни повече!\",\n      victory_review_placeholder: \"Как беше нивото?\",\n      victory_hour_of_code_done: \"Готов ли си?\",\n      victory_hour_of_code_done_yes: \"Да аз съм готов с моят Hour of Code™!\",\n      victory_experience_gained: \"Спечелен опит\",\n      victory_gems_gained: \"Спечелени скъпоценни камъни\",\n      victory_new_item: \"Нов Предмет\",\n      victory_viking_code_school: \"О да - това ниво беше наистина тежко! Ти или си програмист, или обезателно трябва да станеш такъв! Току що се доближи до приемането си във Викингското Училище по Програмиране, където ще научиш много нови неща и ще станеш професионален уеб програмист за 14 седмици.\",\n      victory_become_a_viking: \"Стани Викинг\",\n      tome_cast_button_run: \"Стартиране\",\n      tome_cast_button_running: \"В Процес...\",\n      tome_cast_button_ran: \"Стартирано\",\n      tome_submit_button: \"Изпращане\",\n      tome_reload_method: \"Презареди оригиналния код за този метод\",\n      tome_available_spells: \"Достъпни Заклинания\",\n      tome_your_skills: \"Твоите Умения\",\n      code_saved: \"Кодът е записан\",\n      skip_tutorial: \"Пропусни (esc)\",\n      keyboard_shortcuts: \"Клавишни комбинации\",\n      loading_start: \"Стартирай Ниво\",\n      problem_alert_title: \"Оправи си кода.\",\n      time_current: \"Текущо време:\",\n      time_total: \"Максимално:\",\n      time_goto: \"Иди на:\",\n      non_user_code_problem_title: \"Нивото не може да се зареди\",\n      infinite_loop_title: \"Открит е безкраен цикъл\",\n      infinite_loop_description: \"Кодът за сътворение на света никога не свършва. Или е много бавен, или има безкраен цикъл. Или може да има бъг. Можете да опитате да стартирате този код отново, или да нулирате кода до изходното му състояние. Ако нещата не се оправят, моля, съобщете ни.\",\n      check_dev_console: \"Също така можете да отворите конзолата за разработчици, за да видите какво не е наред.\",\n      check_dev_console_link: \"(инструкции)\",\n      infinite_loop_try_again: \"Пробвай отново\",\n      infinite_loop_reset_level: \"Нулиране на Ниво\",\n      infinite_loop_comment_out: \"Коментирай моят Код\",\n      tip_toggle_play: \"Превключвайте възпроизвеждане/пауза с Ctrl+P.\",\n      tip_scrub_shortcut: \"Използвайте Ctrl+[ и Ctrl+] за бързо превъртане напред и назад.\",\n      tip_guide_exists: \"Кликнете на ръководството в менюто(в горната част на страницата), за полезна информация.\",\n      tip_open_source: \"CodeCombat e 100% проект с отворен код!\",\n      tip_tell_friends: \"Насладихте ли се на CodeCombat? Разкажете на приятелите си за нас!\",\n      tip_beta_launch: \"CodeCombat стартира своята beta през Октомври, 2013.\",\n      tip_think_solution: \"Помисли върху решението, не проблема.\",\n      tip_theory_practice: \"На теория няма разлика между теорията и практиката. Но на практика има. - Yogi Berra\",\n      tip_error_free: \"Има само два начина да напишеш безгрешна програма; само третия работи. - Alan Perlis\",\n      tip_debugging_program: \"Ако дебъгването е процес на премахване на бъгове, тогава програмирането трябва да е процес на поставянето им. - Edsger W. Dijkstra\",\n      tip_forums: \"Идете на форумите и кажете какво мислите!\",\n      tip_baby_coders: \"В бъдещето дори бебетата ще са Архимагове.\",\n      tip_morale_improves: \"Зареждането ще продължи докато бойният дух не се възстанови.\",\n      tip_all_species: \"Ние вярваме в равните възможности на всички видове да се научат да програмират.\",\n      tip_reticulating: \"Да замрежим бодлите!\",\n      tip_harry: \"Ти си Магьосник, \",\n      tip_great_responsibility: \"С големите програмистки умения идват големите отговорности по дебъга.\",\n      tip_munchkin: \"Ако не си изядеш зеленчуците, Торбалан ще дойде и ще те вземе, когато заспиш.\",\n      tip_binary: \"Има само 10 типа хора по света - тези, които разбират двоичната система, и тези, които не я разбират.\",\n      tip_commitment_yoda: \"Програмистът на прининципите верен трябва да е - и със ум сериозен. ~ Йода\",\n      tip_no_try: \"Прави. Или не прави. Недей опитва. - Йода\",\n      tip_patience: \"Търпение да имаш трябва, млади Падуане. - Йода\",\n      tip_documented_bug: \"Документирания бъг не е бъг - той е фичър.\",\n      tip_impossible: \"Винаги изглежда невъзможно - докато не се направи. - Нелсън Мандела\",\n      tip_talk_is_cheap: \"Приказките са вятър и мъгла. Покажи ми кода. - Линус Торвалдс\",\n      tip_first_language: \"Най-пагубното нещо, което можеш да научиш е първият ти език за програмиране. - Alan Kay\",\n      tip_hardware_problem: \"Въпр.: Колко програмиста са нужни, за да сменят електрическа крушка?  Отг.: Николко, това е хардуерен проблем.\",\n      tip_hofstadters_law: \"Закон на Хофщадтер: Всяка работа продължава повече от колкото се очаква, дори когато законът на Хофщадтер е взет в предвид.\",\n      tip_premature_optimization: \"Прибързаната оптимизиция е коренът на всяко зло. - Donald Knuth\",\n      tip_brute_force: \"Когато се съмняваш, използвай груба сила. - Ken Thompson\",\n      tip_extrapolation: \"Има само два типа хора: тези, които могат да екстраполират от непълни данни...\",\n      tip_superpower: \"Програмирането е най-голямото ни доближаване до суперсилата.\",\n      tip_control_destiny: \"При истинския отворен код всеки има правото да контролира собствената си съдба. - Линус Торвалдс\",\n      tip_no_code: \"Няма по-бърз код от отсъстващия.\",\n      tip_code_never_lies: \"Кодът никога не лъже, коментарите - понякога. — Ron Jeffries\",\n      tip_reusable_software: \"Преди кодът да стане преизползваем, той трябва да е използваем.\",\n      tip_optimization_operator: \"Всеки език има оптимизационен оператор. В повечето езици операторът е ‘//’\",\n      tip_lines_of_code: \"Да мериш работата на програмиста по брой редове е все едно да мериш построяването на самолет по теглото му. — Бил Гейтс\",\n      tip_source_code: \"Искам да променя света, но едва ли ще ми дадат сорсовете.\",\n      tip_javascript_java: \"Java е за JavaScript това, което са компютрите за компотите. - Chris Heilmann (перифразирано)\",\n      tip_move_forward: \"Каквото и да правиш, продължавай напред. - Мартин Лутър Кинг Мл.\",\n      tip_google: \"Имаш проблем, който не можеш да решиш? Гугълни го!\",\n      tip_adding_evil: \"Добавяме щипка зло.\",\n      tip_hate_computers: \"Какво да ви кажа за хората, които си мислят, че мразят компютрите. Всъщност те мразят скапаните програмисти. - Лари Нивън\",\n      tip_open_source_contribute: \"И Вие можете да помогнете за подобряването на CodeCombat!\",\n      tip_recurse: \"Итерациите са човещина, рекурсиите са божествени. - L. Peter Deutsch\",\n      tip_free_your_mind: \"Трябва да им позволиш да си отидат Нео. Страхът, съмнението и липсата на вяра. Освободи съзнанието си. - Морфеус\",\n      tip_strong_opponents: \"Дори най-силният противник си има слабости. Винаги. - Itachi Uchiha\",\n      tip_paper_and_pen: \"Преди да почнеш с програмирането, винаги започни с планиране на хартия.\"\n    },\n    game_menu: {\n      inventory_tab: \"Инвентар\",\n      save_load_tab: \"Запиши/Зареди\",\n      options_tab: \"Настройки\",\n      guide_tab: \"Упътване\",\n      guide_video_tutorial: \"Видео Упътване\",\n      guide_tips: \"Съвети\",\n      multiplayer_tab: \"Мултиплейър\",\n      auth_tab: \"Записване\",\n      inventory_caption: \"Екипирай героя си\",\n      choose_hero_caption: \"Избери герой, език\",\n      options_caption: \"Промени настройките\",\n      guide_caption: \"Документи и съвети\",\n      multiplayer_caption: \"Играй с приятели!\",\n      auth_caption: \"Запиши напредъка си.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Виж решенията на лидерите\",\n      scores: \"Точки\",\n      top_players: \"ТОП играчи според\",\n      day: \"Днес\",\n      week: \"Тази седмица\",\n      all: \"От самото начало\",\n      time: \"Време\",\n      damage_taken: \"Поети щети\",\n      damage_dealt: \"Нанесени щети\",\n      difficulty: \"Трудност\",\n      gold_collected: \"Събрано Злато\"\n    },\n    inventory: {\n      equipped_item: \"Избрано\",\n      required_purchase_title: \"Задължително\",\n      available_item: \"Достъпно\",\n      restricted_title: \"Недостъпно\",\n      should_equip: \"(двоен клик за обличане)\",\n      equipped: \"(облечено)\",\n      locked: \"(заключено)\",\n      restricted: \"(забранено за това ниво)\",\n      equip: \"Облечи\",\n      unequip: \"Съблечи\"\n    },\n    buy_gems: {\n      few_gems: \"Няколко скъпоценни камъни\",\n      pile_gems: \"Купчина скъпоценни камъни\",\n      chest_gems: \"Сандък със скъпоценни камъни\",\n      purchasing: \"Купуване...\",\n      declined: \"Картата ви беше отказана.\",\n      retrying: \"Грешка в сървъра, пробвам отново.\",\n      prompt_title: \"Недостатъчно скъпоценни камъни\",\n      prompt_body: \"Искате ли още?\",\n      prompt_button: \"Влез в Магазина\",\n      recovered: \"Предишните покупки на скъпоценни камъни са възстановени. Моля опреснете страницата.\",\n      price: \"x{{gems}} / месец\"\n    },\n    subscribe: {\n      comparison_blurb: \"Изостри уменията си в CodeCombat с абонамент!\",\n      must_be_logged: \"Първо трябва да сте влезли. Моля, създайте си акаунт или влезте от менюто отгоре.\",\n      subscribe_title: \"Абонирай се\",\n      unsubscribe: \"Прекрати абонамента\",\n      confirm_unsubscribe: \"Подтвърди прекратяване на абонамента\",\n      never_mind: \"Няма значение, аз все още те обичам!\",\n      thank_you_months_prefix: \"Благодарим за помоща ви през последните\",\n      thank_you_months_suffix: \"месеци.\",\n      thank_you: \"Благодарим ви че подкрепихте CodeCombat.\",\n      sorry_to_see_you_go: \"Съжалиаваме че ни напускате! Моля да ни предложите какво бихме могли да подобрим.\",\n      unsubscribe_feedback_placeholder: \"O, къде сбъркахме?\",\n      stripe_description: \"Месечен Абонамент\",\n      subscription_required_to_play: \"Необходим ви е абонамент за да играете това ниво.\",\n      unlock_help_videos: \"Абонирайте се за да отключите всичките видео уроци.\",\n      personal_sub: \"Персонален абонамент\",\n      loading_info: \"Зареждане на информацията за абонамента...\",\n      managed_by: \"Управлявана от\",\n      will_be_cancelled: \"Ще бъде отменена\",\n      currently_free: \"В момента имате безплатен абонамент\",\n      currently_free_until: \"В момента имате абонамент до\",\n      was_free_until: \"Имали сте безплатен абонамент до\",\n      managed_subs: \"Управлявани Абонаменти\",\n      subscribing: \"Абониране...\",\n      current_recipients: \"Текущи получатели\",\n      unsubscribing: \"Прекратяване на абонамента...\",\n      subscribe_prepaid: \"Кликнете 'Абонамент', за да използвате предплатен код\",\n      using_prepaid: \"Използване на предплатен код за месечен абонамент\"\n    },\n    choose_hero: {\n      choose_hero: \"Избери си герой\",\n      programming_language: \"Език за програмиране\",\n      programming_language_description: \"Кой език за програмиране би искал да използваш?\",\n      \"default\": \"По подразбиране\",\n      experimental: \"Експериментално\",\n      python_blurb: \"Прост,но мощен, идеален за начинаещи и експерти.\",\n      javascript_blurb: \"Езикът на Мрежата. (Не е същия като Java.)\",\n      coffeescript_blurb: \"По-добър синтаксис от JavaScript.\",\n      lua_blurb: \"Скриптен език за игри.\",\n      status: \"Статус\",\n      weapons: \"Оръжия\",\n      weapons_warrior: \"Мечове - Къс Обсег, Без Магия\",\n      weapons_ranger: \"Арбалети, Пистолети - Далечен Обсег, Без магия\",\n      weapons_wizard: \"Жезли, Принадлежности - Далечен Обсег, Магия\",\n      attack: \"Щета\",\n      health: \"Здраве\",\n      speed: \"Скорост\",\n      regeneration: \"Възстановяване\",\n      range: \"Обсег\",\n      blocks: \"Защита\",\n      backstab: \"Удар в гърба\",\n      skills: \"Умения\",\n      attack_1: \"Количество\",\n      attack_2: \"на изброените\",\n      attack_3: \"щети от оръжия.\",\n      health_1: \"Печалби\",\n      health_2: \"от изброените\",\n      health_3: \"защитни брони.\",\n      speed_1: \"Движения\",\n      speed_2: \"в метри за секунда\",\n      available_for_purchase: \"На разположение за закупуване\",\n      level_to_unlock: \"Ниво на отключване:\",\n      restricted_to_certain_heroes: \"Само определени герои могат да играят това ниво.\"\n    },\n    skill_docs: {\n      writable: \"заменяем\",\n      read_only: \"незаменяем\",\n      action: \"Действие\",\n      spell: \"Магия\",\n      action_name: \"име\",\n      action_cooldown: \"Отнема\",\n      action_specific_cooldown: \"Изчакване\",\n      action_damage: \"Удар\",\n      action_range: \"Обхват\",\n      action_radius: \"Радиус\",\n      action_duration: \"Времетраене\",\n      example: \"Пример\",\n      ex: \"пр.\",\n      current_value: \"Текуща стойност\",\n      default_value: \"Стойност по подразбиране\",\n      parameters: \"Параметри\",\n      returns: \"Връща\"\n    },\n    save_load: {\n      granularity_saved_games: \"Записани\",\n      granularity_change_history: \"История\"\n    },\n    options: {\n      general_options: \"Общи настройки\",\n      volume_label: \"Звук\",\n      music_label: \"Музика\",\n      music_description: \"Включи/изключи фоновата музика\",\n      editor_config_title: \"Конфигурация на редактора\"\n    },\n    about: {\n      nick_title: \"Съосновател\",\n      matt_title: \"Съосновател\",\n      cat_title: \"Главен Артист\",\n      scott_title: \"Съосновател\",\n      titles_csm: \"Мениджър за успех на клиентите\",\n      retrostyle_title: \"Илюстрация\",\n      retrostyle_blurb: \"Игра Ретро Стил\"\n    },\n    article: {\n      edit_btn_preview: \"Преглед\",\n      edit_article_title: \"Промени статията\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1035\n");

/***/ })

});