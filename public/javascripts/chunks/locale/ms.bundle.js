/*! hash:345dfe6c0e434e9c7378, chunkhash:6ef0f75684d0c148c721, name:locale/ms, filebase:ms.bundle.js, query:, file:javascripts/chunks/locale/ms.bundle.js */
webpackJsonp([41],{

/***/ 1067:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Bahasa Melayu\",\n  englishDescription: \"Bahasa Malaysia\",\n  translation: {\n    nav: {\n      play: \"Mula\",\n      home: \"Halaman\",\n      contribute: \"Sumbangan\",\n      legal: \"Undang-undang\",\n      about: \"Tentang\",\n      contact: \"Hubungi\",\n      twitter_follow: \"Ikuti\"\n    },\n    modal: {\n      close: \"Tutup\",\n      okay: \"Ok\"\n    },\n    not_found: {\n      page_not_found: \"Halaman tidak ditemui\"\n    },\n    diplomat_suggestion: {\n      title: \"Kami perlu menterjemahkan CodeCombat!\",\n      sub_heading: \"Kami memerlukan kemahiran bahasa anda.\",\n      pitch_body: \"Kami membina CodeCombat dalam Bahasa Inggeris, tetapi kami sudah ada pemain dari seluruh dunia. Kebanyakan mereka mahu bermain dalam Bahasa Melayu dan tidak memahami Bahasa Inggeris, jikalau anda boleh tertutur dalam kedua-dua bahasa, harap anda boleh daftar untuk menjadi Diplomat dan menolong menterjemahkan laman CodeCombat dan kesemua level kepada Bahasa Melayu.\",\n      missing_translations: \"Sehingga kami dapat menterjemahkan kesemua kepada Bahasa Melayu, anda akan melihat Bahasa Inggeris apabila Bahasa Melayu tiada dalam penterjemahan.\",\n      learn_more: \"Ketahui lebih lanjut untuk menjadi ahli Diplomat\"\n    },\n    login: {\n      sign_up: \"Buat Akaun\",\n      log_in: \"Log Masuk\",\n      log_out: \"Log Keluar\"\n    },\n    signup: {\n      email_announcements: \"Terima pengesahan melalui Emel\",\n      creating: \"Sedang membuat Akaun...\",\n      sign_up: \"Daftar\",\n      log_in: \"Log Masuk\"\n    },\n    recover: {\n      recover_account_title: \"Dapatkan Kembali Akaun\",\n      send_password: \"Hantar kembali kata-laluan\"\n    },\n    common: {\n      loading: \"Pemuatan...\",\n      saving: \"Menyimpan data...\",\n      sending: \"Menghantar maklumat..\",\n      cancel: \"Batal\",\n      save: \"Simpan data\",\n      play: \"Mula\"\n    },\n    general: {\n      and: \"dan\",\n      name: \"Nama\",\n      version: \"Versi\",\n      commit_msg: \"Mesej Commit\",\n      version_history_for: \"Versi History untuk: \",\n      result: \"Keputusan\",\n      results: \"Keputusan-keputusan\",\n      description: \"Deskripsi\",\n      or: \"atau\",\n      email: \"Emel\",\n      password: \"Kata Laluan\",\n      message: \"Mesej\",\n      code: \"Kod\",\n      ladder: \"Tangga\",\n      when: \"Bila\",\n      opponent: \"Penentang\",\n      score: \"Mata\",\n      win: \"Menang\",\n      loss: \"Kalah\",\n      tie: \"Seri\"\n    },\n    versions: {\n      save_version_title: \"Simpan versi baru\",\n      new_major_version: \"Versi utama yang baru\",\n      cla_prefix: \"Untuk menyimpan pengubahsuaian, anda perlu setuju dengan\",\n      cla_agree: \"SAYA SETUJU\"\n    },\n    contact: {\n      contact_us: \"Hubungi CodeCombat\",\n      welcome: \"Kami gemar mendengar dari anda! Gunakan borang ini dan hantar emel kepada kami. \",\n      forum_prefix: \"Untuk perkara lain, sila cuba \",\n      forum_page: \"forum kami\",\n      send: \"Hantar Maklumbalas\"\n    },\n    account_settings: {\n      not_logged_in: \"Daftar masuk atau buat account untuk menukar \\\"setting\\\" anda.\",\n      me_tab: \"Saya\",\n      picture_tab: \"Gambar\",\n      emails_tab: \"Kesemua E-mel\",\n      new_password: \"Kata-laluan baru\",\n      new_password_verify: \"Verifikasi\",\n      email_announcements: \"Pengumuman\",\n      email_notifications: \"Notifikasi\",\n      contribute_prefix: \"Kami sedang mencari orang untuk masuk 'parti' kami! Sila semak kepada \",\n      contribute_page: \"Laman untuk sumbangan\",\n      contribute_suffix: \" untuk mengetahui lebih lanjut.\",\n      error_saving: \"Masalah menyimpan\",\n      saved: \"Pengubahsuian disimpan\",\n      password_mismatch: \"Kata-laluan tidak sama.\"\n    },\n    legal: {\n      page_title: \"Undang-Undang\",\n      opensource_description_prefix: \"Sila lihat \",\n      github_url: \"GitHub kami\",\n      opensource_description_center: \"dan sumbang seberapa mampu! CodeCombat dibina atas beberapa projek open source, dan kami menyukainya. Sila lihat \",\n      opensource_description_suffix: \"senarai sofwe yang membolehkan permainan ini berfungsi.\",\n      copyrights_title: \"Hakcipta dan Pemelesenan\",\n      contributor_title: \"Persetujuan Lesen Penyumbang\",\n      contributor_description_prefix: \"Kesemua sumbangan, termasuk di dalam laman dan di dalam repositiri GitHub, tertakluk kepada\",\n      contributor_description_suffix: \"di mana harus dipersetujui sebelum menyumbang.\",\n      code_description_suffix: \"Ini termasuk kesemua kod Sistem dan Komponen yang sudah sedia ada untuk CodeCombat untuk membina level.\",\n      art_description_prefix: \"Kesemua muatan umum boleh didapat di bawah\"\n    },\n    calendar: {\n      year: \"Tahun\",\n      day: \"Hari\",\n      month: \"Bulan\",\n      january: \"Januari\",\n      february: \"Februari\",\n      march: \"Marc\",\n      april: \"April\",\n      may: \"Mei\",\n      june: \"June\",\n      july: \"Julai\",\n      august: \"Ogos\",\n      september: \"September\",\n      october: \"Oktober\",\n      november: \"November\",\n      december: \"Disember\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1067\n");

/***/ })

});