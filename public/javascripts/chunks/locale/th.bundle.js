/*! hash:345dfe6c0e434e9c7378, chunkhash:2f3cd813a9200fd3cd65, name:locale/th, filebase:th.bundle.js, query:, file:javascripts/chunks/locale/th.bundle.js */
webpackJsonp([24],{

/***/ 1083:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"ไทย\",\n  englishDescription: \"Thai\",\n  translation: {\n    new_home: {\n      slogan: \"วิธีที่ดึงดูดใจที่สุดในการเรียนเขียนโปรแกรม\",\n      classroom_edition: \"แบบห้องเรียน:\",\n      learn_to_code: \"เรียนเขียนโค้ด:\",\n      play_now: \"เล่นเดี๋ยวนี้\",\n      im_a_teacher: \"ฉันเป็นครูผู้สอน\",\n      im_a_student: \"ฉันเป็นนักเรียน\",\n      learn_more: \"เรียนรู้เพิ่มเติม\",\n      classroom_in_a_box: \"ห้องเรียนสำเร็จรูปสำหรับสอนวิทยาการคอมพิวเตอร์\",\n      codecombat_is: \"CodeCombat คือแพลทฟอร์ม <strong>สำหรับนักเรียน</strong> ใช้เรียนวิทยาการคอมพิวเตอร์ไปพร้อมๆกับการเล่นเกม\",\n      our_courses: \"หลักสูตรของเราได้ผ่านการทดสอบการเล่นมาเป็นพิเศษ <strong>เพื่อให้เหมาะกับการใช้ในห้องเรียน</strong> หรือแม้กระทั่งสำหรับครูผู้สอนที่มีประสบการณ์การเขียนโปรแกรมน้อยหรือไม่เคยเขียนมาก่อน\",\n      watch_how: \"ดูว่า CodeCombat กำลังเปลี่ยนวิธีที่ผู้คนเรียนวิทยาการคอมพิวเตอร์อย่างไร\",\n      top_screenshots_hint: \"นักเรียนเขียนโค้ดคำสั่งและดูการเปลี่ยนแปลงผลลัพธ์แบบทันทีทันใด\",\n      designed_with: \"ออกแบบมาด้วยจิตวิญญาณของครูผู้สอน\",\n      real_code: \"พิมพ์โค้ดคำสั่งจริงๆ\",\n      from_the_first_level: \"ตั้งแต่ระดับเริ่มต้น\",\n      getting_students: \"ให้นักเรียนได้พิมพ์โค้ดคำสั่งอย่างรวดเร็ว ให้มากที่สุดเท่าที่จะเป็นไปได้ เพื่อเรียนรู้ไวยากรณ์และโครงสร้างที่เหมาะสม\",\n      educator_resources: \"แหล่งข้อมูลสำหรับนักเรียน\",\n      course_guides: \"และคู่มือหลักสูตร\",\n      teaching_computer_science: \"การสอนวิทยาการคอมพิวเตอร์ไม่ต้องใช้ค่าใช้จ่ายจำนวนมาก เพราะเราเตรียมเครื่องมือเพื่อสนับสนุนนักเรียนที่มีทักษะพื้นฐานต่างกันทุกคน\",\n      accessible_to: \"สามารถเข้าถึงได้\",\n      everyone: \"ทุกคน\",\n      democratizing: \"ความเป็นประชาธิปไตยในการเรียนเขียนโค้ดเป็นปรัชญาหลักของเรา ทุกคนควรจะได้เรียนเขียนโค้ด\",\n      forgot_learning: \"ผมคิดว่าพวกเขาลืมไปจริงๆว่าพวกเขาเรียนอะไรบางอย่าง\",\n      wanted_to_do: \" การเขียนโค้ดเป็นสิ่งที่ฉันอยากจะทำเสมอและฉันไม่เคยคิดว่าฉันจะสามารถเรียนรู้ได้ในโรงเรียน\",\n      builds_concepts_up: \"ฉันชอบที่ CodeCombat สร้างแนวคิดขึ้น มันเป็นเรื่องง่ายที่จะเข้าใจและสนุกกับการคิดออก\",\n      why_games: \"ทำไมการเรียนผ่านเกมถึงได้สำคัญ?\",\n      games_reward: \"เกมให้รางวัลกับการต่อสู้ฝ่าฟัน\",\n      encourage: \"การเล่นเกมคือวิธีกระตุ้นปฏิสัมพันธ์ การค้นหา การทดลองและการล้มเหลว เกมที่ดีท้าทายผู้เล่นให้พัฒนาทักษะตลอดเวลา ซึ่งเป็นกระบวนการที่สำคัญที่นักเรียนต้องผ่านไปให้ได้เมื่อพวกเขาเรียน\",\n      excel: \"เกมถนัดในเรื่องการให้รางวัล\",\n      struggle: \"การต่อสู้ที่มีประโยชน์\",\n      kind_of_struggle: \"ซึ่งเป็นการต่อสู้ที่ได้ผลในการเรียนรู้ที่สนุกและ\",\n      motivating: \"ให้กำลังใจ\",\n      not_tedious: \"ไม่น่าเบื่อ\",\n      gaming_is_good: \"ผลวิจัยแนะนำว่าการเล่นเกมเป็นผลดีกับสมองของเด็ก (มันเป็นความจริง!)\",\n      game_based: \"เมื่อการเรียนรู้ที่เป็นแนวเกมได้\",\n      compared: \"ถูกเปรียบเทียบ\",\n      conventional: \"กับวิธีการประเมินผลแบบเดิมๆ ความแตกต่างนั้นเห็นได้ชัด: เกมนั้นดีกว่าในการช่วยให้นักเรียนรักษาความรู้ มีสมาธิ และ\",\n      perform_at_higher_level: \"ดำเนินการในระดับที่สูงขึ้น\",\n      feedback: \"เกมยังให้ผลตอบรับแบบทันทีทันใดที่ช่วยให้นักเรียนปรับเปลี่ยนวิธีการและเข้าใจหลักการแบบเป็นองค์รวมมากขึ้น แทนที่จะจำกัดแค่คำตอบแบบ “ถูก” หรือ “ผิด”\",\n      real_game: \"เกมจริง เล่นด้วยการเขียนโค้ดจริง\",\n      great_game: \"เกมที่ดีจริงนั้นเป็นมากกว่าเหรียญตราหรือประกาศความสำเร็จ - มันเกี่ยวกับการเดินทางของผู้เล่น ปริศนาที่ออกแบบมาอย่างดี และความสามารถในการเข้าชนปัญหาด้วยอย่างทรงพลังและมั่นใจ\",\n      agency: \"CodeCombat คือเกมที่ให้ผู้เล่นมีพลังและความมั่นใจ ด้วยระบบการเขียนโค้ดที่ทรงพลังซึ่งจะช่วยให้นักเรียนเริ่มต้นและขั้นสูงสามารถเขียนโค้ดที่ถูกต้องได้\",\n      request_demo_title: \"ให้นักเรียนของคุณเริ่มวันนี้!\",\n      request_demo_subtitle: \"ทำการขอตัวอย่างและให้นักเรียนของคุณเริ่มได้ในเวลาไม่ถึงชั่วโมง\",\n      get_started_title: \"สร้างห้องเรียนของคุณวันนี้\",\n      get_started_subtitle: \"สร้างห้องเรียน, เพิ่มนักเรียนของคุณ, และติดตามความก้าวหน้าของพวกเขาขณะที่พวกเขาเรียนวิทยาการคอมพิวเตอร์\",\n      request_demo: \"ขอตัวอย่าง\",\n      setup_a_class: \"สร้างห้องเรียน\",\n      have_an_account: \"มีบัญชีผู้ใช้หรือไม่?\",\n      logged_in_as: \"คุณกำลังล็อกอินเป็น\",\n      computer_science: \"หลักสูตรการเรียนรู้ด้วยตนเองของเราครอบคลุมไวยากรณ์พื้นฐานเพื่อแนวคิดขั้นสูง\",\n      ffa: \"ฟรีสำหรับนักเรียนทุกคน\",\n      coming_soon: \"อีกมากมายในเร็วๆนี้!\",\n      courses_available_in: \"มีหลักสูตรสำหรับ JavaScrit และ Python หลักสูตรการพัฒนาเว็บด้วย HTML, CSS, และ jQuery.\",\n      boast: \"มีปริศนาที่ซับซ้อนพอที่จะทำให้นักเล่นเกมและนักเขียนโค้ดทั้งหลายหลงใหล\",\n      winning: \"การรวมกันของการเล่นแบบสวมบทบาทและการบ้านวิชาเขียนโปรแกรมที่ทำให้การศึกษาเป็นเรื่องง่ายๆ\",\n      run_class: \"ทุกอย่างที่คุณจำเป็นต้องมีในชั้นเรียนวิทยาการคอมพิวเตอร์ในวันนี้ ไม่ต้องการพื้นฐานวิทยาการคอมพิวเตอร์ใดๆ\",\n      goto_classes: \"ไปที่ห้องเรียนของฉัน\",\n      view_profile: \"ดูโปรไฟล์ของฉัน\",\n      view_progress: \"ดูความก้าวหน้า\",\n      go_to_courses: \"ไปที่หลักสูตรของฉัน\",\n      want_coco: \"ต้องการ CodeCombat ที่โรงเรียนของคุณมั้ย?\"\n    },\n    nav: {\n      map: \"แผนที่\",\n      play: \"เล่น\",\n      community: \"ชุมชน\",\n      courses: \"หลักสูตร\",\n      blog: \"บล็อก\",\n      forum: \"กระดานสนทนา\",\n      account: \"บัญชี\",\n      my_account: \"บัญชีของฉัน\",\n      profile: \"โปรไฟล์\",\n      home: \"หน้าแรก\",\n      contribute: \"สนับสนุน\",\n      legal: \"กฎหมาย\",\n      privacy: \"การแจ้งความเป็นส่วนตัว\",\n      about: \"เกี่ยวกับเรา\",\n      contact: \"ติดต่อเรา\",\n      twitter_follow: \"ติดตามพวกเรา!\",\n      my_classrooms: \"ห้องเรียนของฉัน\",\n      my_courses: \"หลักสูตรของฉัน\",\n      careers: \"งาน\",\n      facebook: \"เฟสบุ๊ค\",\n      twitter: \"ทวิตเตอร์\",\n      create_a_class: \"สร้างห้องเรียน\",\n      other: \"อื่นๆ\",\n      learn_to_code: \"เรียนเขียนโค้ด!\",\n      schools: \"โรงเรียน\",\n      get_involved: \"ร่วมเกี่ยวข้อง\",\n      open_source: \"โอเพ่นซอร์ส (GitHub)\",\n      support: \"สนับสนุน\",\n      faqs: \"คำถามยอดนิยม\",\n      copyright_prefix: \"ลิขสิทธิ์\",\n      copyright_suffix: \"สงวนลิขสิทธิ์\",\n      help_pref: \"ต้องการความช่วยเหลือ? ส่งอีเมลถึง\",\n      help_suff: \"และเราจะติดต่อคุณกลับโดยเร็วที่สุด!\",\n      resource_hub: \"แหล่งข้อมูล\",\n      parent: \"พ่อแม่\"\n    },\n    modal: {\n      close: \"ปิด\",\n      okay: \"ตกลง\"\n    },\n    not_found: {\n      page_not_found: \"ขออภัย ไม่พบหน้าเว็บที่คุณต้องการ\"\n    },\n    diplomat_suggestion: {\n      title: \"ช่วยเหลือการแปล CodeCombat!\",\n      sub_heading: \"พวกเราต้องการทักษะภาษาของคุณ\",\n      pitch_body: \"เราพัฒนา CodeCombat เป็นภาษาอังกฤษ แต่เรามีผู้เล่นอยู่ทั่วโลกแล้ว หลายคนอยากเล่นภาษาไทย แต่ไม่พูดภาษาอังกฤษดังนั้นถ้าคุณสามารถพูดได้ทั้งสองอย่างโปรดพิจารณาลงทะเบียนเพื่อเป็น Diplomat และช่วยแปลเว็บไซต์ CodeCombat และทุกด่านเป็นภาษาไทย\",\n      missing_translations: \"จนกว่าเราจะสามารถแปลทุกสิ่งทุกอย่างเป็นภาษาไทยได้คุณจะเห็นภาษาอังกฤษเมื่อภาษาไทยไม่สามารถใช้ได้\",\n      learn_more: \"เรียนรู้เพิ่มเติมเกี่ยวกับการเป็น Diplomat\",\n      subscribe_as_diplomat: \"สมัครเป็น Diplomat\"\n    },\n    play: {\n      play_as: \"เล่นเป็น\",\n      players: \"ผู้เล่น\",\n      hours_played: \"จำนวนชั่วโมงที่เล่น\",\n      items: \"สิ่งของ\",\n      unlock: \"ปลดล็อค\",\n      confirm: \"ยืนยัน\",\n      owned: \"เป็นเจ้าของ\",\n      locked: \"ล็อค\",\n      available: \"ใช้งานได้\",\n      next: \"ต่อไป\",\n      buy_gems: \"ซื้อ Gems\"\n    },\n    code: {\n      \"if\": \"ถ้า\",\n      \"else\": \"ไม่อย่างนั้น\",\n      elif: \"ไม่อย่างนั้นถ้า\",\n      \"while\": \"เมื่อ\",\n      loop: \"วนรอบ\",\n      \"for\": \"เมื่อ\",\n      \"break\": \"หยุด\",\n      \"continue\": \"ทำต่อ\",\n      pass: \"ผ่าน\",\n      \"return\": \"คืนค่า\",\n      then: \"แล้ว\",\n      \"do\": \"ทำ\",\n      end: \"จบ\",\n      \"function\": \"ฟังก์ชั่น\",\n      def: \"กำหนด\",\n      \"var\": \"ตัวแปร\",\n      self: \"ตัวมันเอง\",\n      hero: \"ฮีโร่\",\n      \"this\": \"สิ่งนี้\",\n      or: \"หรือ\",\n      \"||\": \"หรือ\",\n      and: \"และ\",\n      \"&&\": \"และ\",\n      not: \"ไม่\",\n      \"!\": \"ไม่\",\n      \"=\": \"กำหนดค่า\",\n      \"==\": \"เท่ากับ\",\n      \"===\": \"เท่ากับแบบเคร่งครัด\",\n      \"!=\": \"ไม่เท่ากับ\",\n      \"!==\": \"ไม่เท่ากับแบบเคร่งครัด\",\n      \">\": \"มากกว่า\",\n      \">=\": \"มากกว่าหรือเท่ากับ\",\n      \"<\": \"น้อยกว่า\",\n      \"<=\": \"น้อยกว่าหรือเท่ากับ\",\n      \"*\": \"คูณโดย\",\n      \"/\": \"หารโดย\",\n      \"+\": \"บวก\",\n      \"-\": \"ลบ\",\n      \"+=\": \"บวกและกำหนดค่า\",\n      \"-=\": \"ลบและกำหนดค่า\",\n      True: \"จริง\",\n      \"true\": \"จริง\",\n      False: \"เท็จ\",\n      \"false\": \"เท็จ\",\n      undefined: \"ไม่ถูกกำหนดค่า\",\n      \"null\": \"ว่าง\",\n      nil: \"ศูนย์\",\n      None: \"ไม่มี\"\n    },\n    share_progress_modal: {\n      blurb: \"คุณกำลังก้าวหน้าอย่างใหญ่หลวง! บอกพ่อแม่ของคุณว่าคุณได้เรียนรู้เยอะขนาดไหนด้วย CodeCombat.\",\n      email_invalid: \"ที่อยู่อีเมลไม่ถูกต้อง\",\n      form_blurb: \"กรอกที่อีเมลของพ่อแม่ของคุณและแสดงให้ท่านเห็น!\",\n      form_label: \"ที่อยู่อีเมล\",\n      placeholder: \"ที่อยู่อีเมล\",\n      title: \"เยี่ยมมาก ผู้ฝึกหัด\"\n    },\n    login: {\n      sign_up: \"ลงทะเบียนใหม่\",\n      email_or_username: \"อีเมลหรือชื่อผู้ใช้\",\n      log_in: \"ลงชื่อเข้าใช้\",\n      logging_in: \"กำลังเข้าสู่ระบบ\",\n      log_out: \"ลงชื่อออก\",\n      forgot_password: \"ลืมรหัสผ่าน\",\n      finishing: \"เสร็จสิ้น\",\n      sign_in_with_facebook: \"ลงชื่อเข้าใช้ด้วย Facebook\",\n      sign_in_with_gplus: \"ลงชื่อเข้าใช้ด้วย G+\",\n      signup_switch: \"ต้องการสร้างบัญชีผู้ใช้?\"\n    },\n    signup: {\n      email_announcements: \"รับข่าวสารผ่านทางอีเมลล์\",\n      creating: \"กำลังสร้างบัญชีใหม่...\",\n      sign_up: \"สมัคร\",\n      log_in: \"เข้าสู่ระบบด้วยรหัสผ่าน\"\n    },\n    items: {\n      primary: \"ไอเทมหลัก\",\n      secondary: \"ไอเทมรอง\",\n      armor: \"ชุดเกราะ\",\n      accessories: \"เครื่องประดับ\",\n      misc: \"อื่นๆ\",\n      books: \"หนังสือ\"\n    },\n    common: {\n      loading: \"รอสักครู่...\",\n      saving: \"กำลังบันทึก...\",\n      cancel: \"ยกเลิก\",\n      save: \"บันทึก\",\n      play: \"เล่น\"\n    },\n    general: {\n      and: \"และ\",\n      name: \"ชื่อ\",\n      date: \"วันที่\",\n      version: \"เวอร์ชั่น\",\n      undo_prefix: \"Undo\",\n      redo_prefix: \"Redo\",\n      or: \"หรือ\",\n      email: \"อีเมล\",\n      password: \"รหัสผ่าน\",\n      message: \"ข้อความ\",\n      score: \"คะแนน\",\n      win: \"ชนะ\",\n      loss: \"แพ้\",\n      tie: \"เสมอ\",\n      easy: \"ง่าย\",\n      medium: \"ปานกลาง\",\n      hard: \"ยาก\",\n      player_level: \"เลเวล\",\n      warrior: \"นักรบ\",\n      wizard: \"พ่อมด\",\n      first_name: \"ชื่อ\",\n      last_name: \"นามสกุล\",\n      more: \"อื่นๆ\"\n    },\n    units: {\n      second: \"วินาที\",\n      seconds: \"วินาที\",\n      minute: \"นาที\",\n      minutes: \"นาที\",\n      hour: \"ชั่วโมง\",\n      hours: \"ชั่วโมง\",\n      day: \"วัน\",\n      days: \"วัน\",\n      week: \"สัปดาห์\",\n      weeks: \"สัปดาห์\",\n      month: \"เดือน\",\n      months: \"เดือน\",\n      year: \"ปี\",\n      years: \"ปี\"\n    },\n    play_level: {\n      done: \"เสร็จสิ้น\",\n      next_game: \"เกมส์ต่อไป\",\n      languages: \"ภาษา\",\n      show_menu: \"แสดงเมนูเกมส์\",\n      home: \"หน้าแรก\",\n      skip: \"ข้าม\",\n      game_menu: \"เมนูเกม\",\n      restart: \"เริ่มเล่นใหม่\",\n      goals: \"เป้าหมาย\",\n      success: \"สำเร็จ!\",\n      incomplete: \"ไม่สมบูรณ์\",\n      timed_out: \"หมดเวลา\",\n      victory: \"ชนะ\",\n      victory_title_suffix: \"เสร็จสิ้น\",\n      victory_sign_up: \"สมัครสมาชิกเพื่ออัพเดท\",\n      victory_saving_progress: \"บันทึก\",\n      victory_go_home: \"ไปหน้าแรก\",\n      victory_hour_of_code_done: \"เสร็จหรือยัง?\",\n      victory_new_item: \"ไอเทมใหม่\",\n      tome_submit_button: \"ส่ง\",\n      time_current: \"เวลาตอนนี้:\",\n      infinite_loop_try_again: \"ลองใหม่\",\n      infinite_loop_comment_out: \"เปลี่ยนโค้ดทั้งหมดเป็นคอมเม้นท์\",\n      tip_talk_is_cheap: \"อย่าเสียเวลาพูดเลย ให้ผมดูโค้ดของคุณดีกว่า - Linus Torvalds\",\n      tip_extrapolation: \"ในโลกนี้มีคนอยู่สองประเภท คือคนที่เดาจากข้อมูลที่ไม่ครบถ้วนได้....\",\n      tip_source_code: \"เราอยากจะเปลี่ยนโลกนี้ แต่เขาไม่ให้ Source Code ผม\",\n      tip_google: \"เมื่อคุณมีปัญหาแล้วแก้ไขไม่ได้ เข้า Google สิ!!!\",\n      tip_strong_opponents: \"ศัตรูที่แข็งแกร่งที่สุด ก็ยังมีจุดอ่อน - อุจิวะ อิทาจิ\",\n      tip_solve_then_write: \"อย่างแรก ต้องแก้ไขปัญหาก่อน จากนั้นก็เขียนโค๊ด. - John Johnson\"\n    },\n    apis: {\n      methods: \"วิธีการ\",\n      \"function\": \"ฟังก์ชั่น\"\n    },\n    game_menu: {\n      inventory_tab: \"คลัง\",\n      save_load_tab: \"เซฟ/โหลด\",\n      options_tab: \"ตัวเลือก\",\n      guide_video_tutorial: \"วีดีโอสอน\",\n      multiplayer_tab: \"ผู้เล่นหลายคน\",\n      auth_tab: \"สมัครสมาชิก\",\n      inventory_caption: \"เลือกฮีโร่ของคุณ!!\",\n      multiplayer_caption: \"เล่นกับเพื่อนๆ!!!\",\n      auth_caption: \"บันทึกความก้าวหน้าของคุณ\"\n    },\n    leaderboard: {\n      view_other_solutions: \"ดู Leaderboards\",\n      scores: \"สกอร์\",\n      top_players: \"Top Players คือ\",\n      day: \"วันนี้\",\n      week: \"สัปดาห์นี้\",\n      all: \"ตลอดกาล\",\n      difficulty: \"ระดับความยาก\",\n      gold_collected: \"Gold ที่เก็บได้\"\n    },\n    inventory: {\n      equipped_item: \"ใช้งานแล้ว\",\n      should_equip: \"(ดับเบิลคลิ๊ก..เพื่อใช้งาน)\",\n      equip: \"ใช้งาน\",\n      unequip: \"ถอดออก\"\n    },\n    buy_gems: {\n      retrying: \"เซิร์ฟเวอร์ไม่ตอบสนอง กำลังลองอีกครั้ง\",\n      prompt_title: \"Gems ไม่พอ\"\n    },\n    choose_hero: {\n      programming_language: \"ภาษาโปรแกรม\",\n      lua_blurb: \"ภาษาเขียนเกม\",\n      weapons: \"อาวุธ\",\n      weapons_warrior: \"ดาบ - ระยะใกล้, ไม่ใช้เวทย์\",\n      weapons_ranger: \"หน้าไม้, ปืน - ระยะไกล, ไม่ใช้เวทย์\",\n      range: \"ระยะ\"\n    },\n    options: {\n      music_label: \"ดนตรี\"\n    },\n    about: {\n      nick_title: \"ผู้ร่วมก่อตั้ง\",\n      matt_title: \"ผู้ร่วมก่อตั้งผู้ร่วมก่อตั้ง\",\n      scott_title: \"ผู้ร่วมก่อตั้ง\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    account_settings: {\n      picture_tab: \"รูปภาพ\",\n      delete_account_tab: \"ลบบัญชีผู้ใช้\",\n      wrong_password: \"รหัสผ่านผิด\",\n      new_password: \"รหัสผ่านใหม่\",\n      email_announcements: \"ประกาศ\",\n      error_saving: \"บันทึกผิดพลาด\",\n      saved: \"เปลี่ยนรหัสผ่าน\",\n      password_mismatch: \"รหัสผ่านไม่ถูกต้อง\",\n      password_repeat: \"จงใส่รหัสผ่านอีกครั้ง\"\n    },\n    keyboard_shortcuts: {\n      space: \"Space\",\n      enter: \"Enter\",\n      press_enter: \"กด enter\",\n      escape: \"Esc\"\n    },\n    clans: {\n      clan: \"แคลน\",\n      clans: \"แคลน\"\n    },\n    contribute: {\n      alert_account_message_intro: \"หวัดดี!\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1083\n");

/***/ })

});