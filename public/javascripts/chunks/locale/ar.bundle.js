/*! hash:345dfe6c0e434e9c7378, chunkhash:b9bb3f10c7976ce5022b, name:locale/ar, filebase:ar.bundle.js, query:, file:javascripts/chunks/locale/ar.bundle.js */
webpackJsonp([75],{

/***/ 1033:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"العربية\",\n  englishDescription: \"Arabic\",\n  translation: {\n    nav: {\n      play: \"إلعب\",\n      community: \"مجتمع\",\n      blog: \"مدوّنة\",\n      forum: \"منتدى\",\n      account: \"حساب\",\n      profile: \"ملف شخصي\",\n      home: \"رئيسيّة\",\n      contribute: \"مساهة\",\n      legal: \"قانون\",\n      about: \"حول\",\n      contact: \"اتّصال\",\n      twitter_follow: \"متابعة\"\n    },\n    modal: {\n      close: \"إغلاق\",\n      okay: \"حسنا\"\n    },\n    not_found: {\n      page_not_found: \"الصفحة غير موجودة\"\n    },\n    diplomat_suggestion: {\n      title: \"مساعدة في ترجمة CodeCombat!\",\n      sub_heading: \"نحتاج مهاراتك اللّغويّة.\",\n      pitch_body: \"نحن نطوّر CodeCombat باللّغة الإنجليزيّة، ولكن لدينا بالفعل لاعبين في جميع أنحاء العالم. كثير منهم يريدون اللّعب باللّغة العربيّة ولكن لا يتحدثون الإنجليزيّة، حتى إذا كنت أستطيع أن أتكلّم على حد سواء، يرجى النّظر في التوقيع على أن يكون دبلوماسيّا والمساعدة في ترجمة كل من موقع CodeCombat وجميع المستويات إلى العربيّة.\",\n      missing_translations: \"حتى يمكننا ترجمة كلّ شيء إلى اللّغة العربيّة، سترى الإنجليزيّة عندما تكون العربيّة غير متوفر.\",\n      learn_more: \"معرفة المزيد عن كونك دبلوماسي\",\n      subscribe_as_diplomat: \"الاشتراك كدبلوماسي\"\n    },\n    play: {\n      play_as: \"إلعب كـ\",\n      spectate: \"مشاهد\",\n      players: \"لاعبين\",\n      hours_played: \"ساعات اللّعب\",\n      items: \"العناصر\",\n      unlock: \"فتح\",\n      confirm: \"تأكيد\",\n      owned: \"ممتَلَك\",\n      locked: \"مقفل\",\n      available: \"متوفر\",\n      skills_granted: \"مهارات الممنوحة\",\n      heroes: \"الأبطال\",\n      achievements: \"الإنجازات\",\n      settings: \"الإعدادات\",\n      next: \"التالي\",\n      change_hero: \"تغيير البطل\",\n      buy_gems: \"شراء الأحجار الكريمة\",\n      anonymous: \"لاعب مجهول\",\n      level_difficulty: \"الصعوبة:\",\n      awaiting_levels_adventurer_prefix: \"نحن الافراج عن مستويات جديدة كل أسبوع.\",\n      awaiting_levels_adventurer: \"التوقيع على النحو المغامر\",\n      awaiting_levels_adventurer_suffix: \"أن تكون أول للعب مستويات جديدة.\",\n      adjust_volume: \"تعديل الصوت\",\n      campaign_multiplayer: \"ساحات متعددة اللاّعبين\",\n      campaign_multiplayer_description: \"... فيها تبرمج وجه لوجه ضد لاعبين آخرين.\"\n    },\n    share_progress_modal: {\n      blurb: \"كنت تقدما كبيرا! أخبر والديك وكم كنت قد تعلمت مع CodeCombat.\",\n      email_invalid: \"البريد الاكتروني غير صالح.\",\n      form_blurb: \"ادخل بريد اولياء امرك الالكتروني لكي نريهم!\",\n      form_label: \"عنوان البريد الالكتروني\",\n      placeholder: \"عنوان البريد الالكتروني\",\n      title: \"عمل ممتاز, Apprentice\"\n    },\n    login: {\n      sign_up: \"إنشاء حساب\",\n      log_in: \"تسجيل الدخول\",\n      logging_in: \"جاري تسجيل الدخول\",\n      log_out: \"تسجيل الخروج\",\n      forgot_password: \"نسيت رمز الدخول?\",\n      finishing: \"الانتهاء\",\n      sign_in_with_facebook: \"سجل الدخول بواسطة فيسبوك\",\n      sign_in_with_gplus: \"سجل الدخول بواسطة غوغل بلس\",\n      signup_switch: \"تريد انشاء حساب?\"\n    },\n    signup: {\n      email_announcements: \"تلقي الإعلانات عن طريق البريد الإلكتروني\",\n      creating: \"جاري إنساء الحساب...\",\n      sign_up: \"التسجيل\",\n      log_in: \"تسجيل الدّخول بكلمة السرّ\",\n      required: \"تحتاج إلى تسجيل الدخول قبل أن تتمكن من السير في هذا الطريق.\",\n      login_switch: \"لديك حساب بالفعل?\"\n    },\n    recover: {\n      recover_account_title: \"إستعادة حساب\",\n      send_password: \"إرسال كلمة سرّ الإستعادة\",\n      recovery_sent: \"استرداد البريد الالكتروني المرسل.\"\n    },\n    items: {\n      primary: \"الأولي\",\n      secondary: \"ثانوي\",\n      armor: \"درع\",\n      accessories: \"إكسسوارات\",\n      misc: \"متفرقات\",\n      books: \"كتب\"\n    },\n    common: {\n      back: \"الرجوع\",\n      \"continue\": \"امض قدما\",\n      loading: \"تحميل\",\n      saving: \"جاري الحفض\",\n      sending: \"جاري الإرسال\",\n      send: \"أرسل\",\n      cancel: \"ألغي\",\n      save: \"إحفض\",\n      publish: \"أنشر\",\n      create: \"إنشاء\",\n      fork: \"إنسخ\",\n      play: \"إلعب\",\n      retry: \"إعادة\",\n      actions: \"Actions\",\n      info: \"معلومات\",\n      help: \"مساعدة\",\n      watch: \"مشاهدة\",\n      unwatch: \"إنهاء المشاهدة\",\n      submit_patch: \"تقديم التصحيح\",\n      submit_changes: \"تقديم التغييرات\",\n      save_changes: \"حفظ التغيرات\"\n    },\n    general: {\n      and: \"و\",\n      name: \"اسم\",\n      date: \"تأريخ\",\n      body: \"جسد\",\n      version: \"نسخة\",\n      pending: \"ارسال\",\n      accepted: \"مقبول\",\n      rejected: \"مرفوض\",\n      withdrawn: \"متعادل\",\n      submitter: \"المقدم\",\n      submitted: \"تم التقديم\",\n      commit_msg: \"حول رسالة\",\n      version_history: \"تاريخ النسخة\",\n      version_history_for: \"تاريخ النسخة لل: \",\n      select_changes: \"اختر تغيريين.\",\n      undo_prefix: \"فك\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Redo\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"شاهد مقطع فيديو عن المستوى الحالي\",\n      result: \"نتيجة\",\n      results: \"نتائج\",\n      description: \"وصف\",\n      or: \"او\",\n      subject: \"موضوع\",\n      email: \"البريد الالكتروني\",\n      password: \"الرمز السري\",\n      message: \"رسالة\",\n      code: \"رمز\",\n      ladder: \"سلم\",\n      when: \"متى\",\n      opponent: \"المقابل\",\n      rank: \"مرتبة\",\n      score: \"نقاط\",\n      win: \"فوز\",\n      loss: \"خسارة\",\n      tie: \"ربطة عنق\",\n      easy: \"سهل\",\n      medium: \"متوسط\",\n      hard: \"صعب\",\n      player: \"لاعب\",\n      player_level: \"مستوى\",\n      warrior: \"محارب\",\n      ranger: \"مقاتل\",\n      wizard: \"ساحر\"\n    },\n    units: {\n      second: \"ثانيّة\",\n      seconds: \"ثواني\",\n      minute: \"دقيقة\",\n      minutes: \"دقائق\",\n      hour: \"ساعة\",\n      hours: \"ساعات\",\n      day: \"يوم\",\n      days: \"أيّام\",\n      week: \"أسبوع\",\n      weeks: \"أسابيع\",\n      month: \"شهر\",\n      months: \"أشهر\",\n      year: \"سنة\",\n      years: \"سنوات\"\n    },\n    play_level: {\n      done: \"انتهاء\",\n      home: \"Home\",\n      level: \"مستوى\",\n      skip: \"الغاء\",\n      game_menu: \"قائمة اللعبة\",\n      restart: \"اعادة التشغيل\",\n      goals: \"الاهداف\",\n      goal: \"هدف\",\n      running: \"جاري التشغيل...\",\n      success: \"نجاح!\",\n      incomplete: \"غير مكتمل\",\n      timed_out: \"تم انتهاء الوقت\",\n      failing: \"فشل\",\n      reload: \"تحديث\",\n      reload_title: \"تحديث الصفحة كل رمز؟\",\n      reload_really: \"هل أنت متأكد أنك تريد تحميل هذا المستوى مرة أخرى إلى البداية؟\",\n      reload_confirm: \"تحديث جميع\",\n      victory: \"فوز\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" كامل\",\n      victory_sign_up: \"اشترك لإنقاذ التقدم\",\n      victory_sign_up_poke: \"تريد حفظ التعليمات البرمجية الخاصة بك؟ إنشاء حساب مجاني!\",\n      victory_rate_the_level: \"معدل المستوى: \",\n      victory_return_to_ladder: \"العودة إلى سلم\",\n      victory_saving_progress: \"توفير التقدم\",\n      victory_go_home: \"اذهب للمنزل\",\n      victory_review: \"إخبرنا المزيد!\",\n      victory_hour_of_code_done_yes: \"نعم، أنا مع الانتهاء من ساعتي من قانون ™!\",\n      victory_gems_gained: \"الأحجار الكريمة المكتسبة\",\n      victory_new_item: \"عنصر جديد\",\n      victory_viking_code_school: \"يدخن المقدسة، وكان ذلك على مستوى الثابت الذي فاز فقط! إذا لم تكن بالفعل مطور برامج، يجب أن تكون. كنت فقط حصلت على المسار السريع لقبوله مع مدرسة فايكنغ المدونة، حيث يمكنك أن تأخذ المهارات الخاصة بك إلى المستوى التالي وتصبح مطور ويب محترف في 14 أسبوعا.\",\n      victory_become_a_viking: \"تصبح فايكنغ\",\n      tome_cast_button_run: \"Run\",\n      tome_cast_button_running: \"تشغيل\",\n      tome_cast_button_ran: \"ران\"\n    },\n    buy_gems: {\n      few_gems: \" عدد قليل من الأحجار الكريمة\",\n      pile_gems: \"كومة من الأحجار الكريمة\",\n      chest_gems: \"الصدر من الأحجار الكريمة\",\n      purchasing: \"شراء ...\",\n      prompt_button: \"أدخل متجر\",\n      recovered: \"الأحجار الكريمة السابقة أون استردادها. يرجى تحديث الصفحة.\"\n    },\n    choose_hero: {\n      choose_hero: \"اختر بطلك\",\n      programming_language: \"لغة البرمجة\",\n      experimental: \"تجريبي\",\n      python_blurb: \"بسيطة لكنها قوية، بيثون هي لغة برمجة عظيمة للأغراض العامة.\",\n      javascript_blurb: \"لغة الويب. عظيم للكتابة المواقع، تطبيقات الويب، ألعاب HTML5، والخوادم.\",\n      coffeescript_blurb: \"Nicer JavaScript syntax.\",\n      lua_blurb: \"لعبة لغة البرمجة.\",\n      weapons: \"اسلحة\",\n      health: \"الصحة\",\n      speed: \"سرعة\",\n      regeneration: \"تجديد\",\n      skills: \"المهارات\"\n    },\n    versions: {\n      save_version_title: \"إحفض نسخة جديدة\",\n      new_major_version: \"نسخة مهمّة جديدة\",\n      cla_prefix: \"لحفظ التغييرات، أولا يجب أن توافق على \",\n      cla_url: \"اتفاقيّة ترخيص المساهم\",\n      cla_suffix: \".\",\n      cla_agree: \"أوافق\"\n    },\n    contact: {\n      contact_us: \"الاتّصال بـ CodeCombat\",\n      welcome: \"جيد أن نسمع منك! استخدام هذا النموذج لترسل لنا البريد الإلكتروني.\",\n      forum_prefix: \"لأي شيء عام، يرجى المحاولة\",\n      forum_page: \"منتدانا\",\n      forum_suffix: \"بدلا من ذلك.\",\n      faq: \"FAQ\",\n      send: \"إرسال تعليقات\"\n    },\n    account_settings: {\n      title: \"إعدادات الحساب\",\n      not_logged_in: \"تسجيل الدخول أو إنشاء حساب لتغيير الإعدادات الخاصة بك.\",\n      me_tab: \"أنا\",\n      picture_tab: \"صورة\",\n      delete_account_tab: \"حذف حسابك الخاص\",\n      wrong_email: \"Email خاطئ\",\n      wrong_password: \"كلمة مرور خاطئة\",\n      delete_this_account: \"حذف هذا الحساب بشكل دائم\",\n      new_password: \"كلمة سر جديدة\",\n      new_password_verify: \"تحقق من\",\n      type_in_email: \"اكتب في البريد الإلكتروني الخاص بك لتأكيد الحساب الحذف.\",\n      type_in_password: \"أيضا، اكتب كلمة المرور الخاصة بك.\",\n      email_subscriptions: \"الاشتراكات البريد الإلكتروني\"\n    },\n    user: {\n      stats: \"احصائيّات\",\n      singleplayer_title: \"مستويات اللاّعب الواحد\",\n      multiplayer_title: \"مستويات  متعدّدة اللاّعبين\",\n      achievements_title: \"الإنجازات\",\n      last_played: \"آخر ما لعب\",\n      status: \"الحالة\",\n      status_completed: \"تمّت\",\n      status_unfinished: \"غير منتهية\",\n      no_singleplayer: \"لا يوجد مباريات اللاّعب الواحد لعبت حتّى الآن.\",\n      no_multiplayer: \"لا يوجد مباريات متعدّدة اللاّعبين لعبت حتّى الآن\",\n      no_achievements: \"لا توجد انجازات مكتسبة حتّى الآن.\",\n      favorite_prefix: \"لغتك المفضّلة هي \",\n      favorite_postfix: \".\"\n    },\n    achievements: {\n      last_earned: \"المكتسبات الأخيرة\",\n      amount_achieved: \"مبلغ\",\n      achievement: \"الإنجاز\",\n      current_xp_prefix: \"\",\n      current_xp_postfix: \"في المجموع\",\n      new_xp_prefix: \"\",\n      new_xp_postfix: \"اكتسبت\",\n      left_xp_prefix: \"\",\n      left_xp_infix: \"حتّى مستوى \",\n      left_xp_postfix: \"\"\n    },\n    loading_error: {\n      could_not_load: \"خطأ في تحميل من الخادم\",\n      connection_failure: \"فشل الاتصال.\",\n      unauthorized: \"تحتاج إلى أن تكون مسجّل الدخول  هل لديك الكوكيز معطّلة؟\",\n      forbidden: \"ليس لديك الأذونات.\",\n      not_found: \"لم يتم العثور.\",\n      not_allowed: \"طريقة غير مسموح بها.\",\n      timeout: \"انتهت مهلة استجابة الخادم .\",\n      conflict: \"الصراع على الموارد.\",\n      bad_input: \"إدخال سيئ.\",\n      server_error: \"خطأ في الخادم.\",\n      unknown: \"خطأ غير معروف.\"\n    },\n    delta: {\n      added: \"أضيفت\",\n      modified: \"معدّلة\",\n      deleted: \"حذفت\",\n      moved_index: \"فهرس انتقل\",\n      text_diff: \"Text Diff\",\n      merge_conflict_with: \"تدمج الصدام مع\",\n      no_changes: \"No Changes\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1033\n");

/***/ })

});