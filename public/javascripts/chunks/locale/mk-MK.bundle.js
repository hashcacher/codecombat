/*! hash:345dfe6c0e434e9c7378, chunkhash:e9042de7a0b30c00308e, name:locale/mk-MK, filebase:mk-MK.bundle.js, query:, file:javascripts/chunks/locale/mk-MK.bundle.js */
webpackJsonp([43],{

/***/ 1065:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Македонски\",\n  englishDescription: \"Macedonian\",\n  translation: {\n    nav: {\n      play: \"Нивоа\",\n      community: \"Заедница\",\n      blog: \"Блог\",\n      forum: \"Форум\",\n      account: \"Сметка\",\n      profile: \"Профил\",\n      home: \"Дома\",\n      contribute: \"Допринеси\",\n      legal: \"Законски\",\n      about: \"За CodeCombat\",\n      contact: \"Контакт\",\n      twitter_follow: \"Следи\"\n    },\n    modal: {\n      close: \"Затвори\",\n      okay: \"Во ред\"\n    },\n    not_found: {\n      page_not_found: \"Страницата не е најдена\"\n    },\n    diplomat_suggestion: {\n      title: \"Помогни да се преведе CodeCombat!\",\n      sub_heading: \"Ни требаат твоите јазични вештини.\",\n      pitch_body: \"Ние ја развиваме CodeCombat на англиски, но веќе имаме играчи низ целиот свет. Многу од нив сакаат да играат на македонски, а не разбираат англиски, па ако ги зборуваш и двата јазика, размисли дали би сакал/а да се зачлениш како Дипломат и да помогнеш да се преведат на македонски CodeCombat веб сајтот и сите нивоа од играта.\",\n      missing_translations: \"Додека не преведеме сè на македонски, содржината ќе биде на англиски каде што македонскиот не е достапен.\",\n      learn_more: \"Научи повеќе за тоа како е да се биде Дипломат\",\n      subscribe_as_diplomat: \"Зачлени се како Дипломат\"\n    },\n    play: {\n      play_as: \"Играј како\",\n      spectate: \"Набљудувај\",\n      players: \"играчи\",\n      hours_played: \"изиграни часови\",\n      items: \"Опрема\",\n      unlock: \"Отклучи\",\n      confirm: \"Потврди\",\n      owned: \"Имаш\",\n      locked: \"Заклучено\",\n      available: \"Достапно\",\n      skills_granted: \"Доделени вештини\",\n      heroes: \"Херои\",\n      achievements: \"Постигнувања\",\n      settings: \"Подесувања\",\n      next: \"Следно\",\n      change_hero: \"Смени херој\",\n      buy_gems: \"Купи скапоцени камења\",\n      anonymous: \"Анонимен играч\",\n      level_difficulty: \"Тешкотија: \",\n      awaiting_levels_adventurer_prefix: \"Пуштаме пет нивоа неделно.\",\n      awaiting_levels_adventurer: \"Зачлени се како Авантурист\",\n      awaiting_levels_adventurer_suffix: \"за да бидеш првиот кој ќе ги игра новите нивоа.\",\n      campaign_multiplayer: \"Арени за повеќе играчи\",\n      campaign_multiplayer_description: \"... во кои кодираш лице-во-лице против други играчи.\"\n    },\n    share_progress_modal: {\n      blurb: \"Одлично напредуваш! Кажи му на родителот колку имаш научено со CodeCombat.\",\n      email_invalid: \"E-mail адресата е невалидна.\",\n      form_blurb: \"Внеси ја e-mail адресата на твојот родител подолу и ние ќе му покажеме!\",\n      form_label: \"E-mail адреса\",\n      placeholder: \"e-mail адреса\",\n      title: \"Одлична работа, чираку\"\n    },\n    login: {\n      sign_up: \"Направи сметка\",\n      email_or_username: \"E-mail или корисничко име\",\n      log_in: \"Најави се\",\n      logging_in: \"Најавувањето е во тек\",\n      log_out: \"Одјави се\",\n      forgot_password: \"Ја заборави твојата лозинка?\",\n      finishing: \"Завршување\",\n      sign_in_with_facebook: \"Најави се со Facebook\",\n      sign_in_with_gplus: \"Најави се со G+\",\n      signup_switch: \"Сакаш да направиш сметка?\"\n    },\n    signup: {\n      create_student_header: \"Направи ученичка сметка\",\n      create_teacher_header: \"Направи учителска сметка\",\n      create_individual_header: \"Направи индивидуална сметка\",\n      email_announcements: \"Примај соопштенија преку e-mail\",\n      sign_in_to_continue: \"Најави се или направи сметка за да продолжиш\",\n      creating: \"Сметката се прави...\",\n      sign_up: \"Направи сметка\",\n      log_in: \"најави се со лозинка\",\n      required: \"Мораш да се најавиш за да имаш пристап таму.\",\n      login_switch: \"Веќе имаш сметка?\",\n      optional: \"не е задолжително\",\n      connected_gplus_header: \"Успешно се поврза со Google+!\",\n      connected_gplus_p: \"Заврши со правењето сметка за да можеш да се најавиш со твојата Google+ сметка.\",\n      connected_facebook_header: \"Успешно се поврза со Facebook!\",\n      connected_facebook_p: \"Заврши со правењето сметка за да можеш да се најавиш со твојата Facebook сметка.\",\n      birthday: \"Роденден\",\n      account_exists: \"Веќе постои сметка за овој e-mail:\",\n      sign_in: \"Најави се\",\n      email_good: \"E-mail адресата изгледа добро!\",\n      name_taken: \"Корисничкото име е веќе земано! Можеш да се обидеш со {{suggestedName}}?\",\n      name_available: \"Корсничкото име е достапно!\",\n      name_is_email: \"Корисничкото име не може да биде e-mail\"\n    },\n    recover: {\n      recover_account_title: \"Врати сметка\",\n      send_password: \"Испрати лозинка за враќање\",\n      recovery_sent: \"E-mail-от за враќање на лозинката е испратен.\"\n    },\n    items: {\n      primary: \"Главно\",\n      secondary: \"Споредно\",\n      armor: \"Оклоп\",\n      accessories: \"Додатоци\",\n      misc: \"Разно\",\n      books: \"Книги\"\n    },\n    common: {\n      back: \"Врати се\",\n      \"continue\": \"Продолжи\",\n      loading: \"Вчитување...\",\n      saving: \"Зачувување...\",\n      sending: \"Испраќање...\",\n      send: \"Испрати\",\n      cancel: \"Откажи\",\n      save: \"Зачувај\",\n      publish: \"Објави\",\n      create: \"Направи\",\n      play: \"Играј\",\n      retry: \"Обиди се повторно\",\n      actions: \"Дејствија\",\n      info: \"Инфо\",\n      help: \"Помош\",\n      submit_patch: \"Поднеси закрпа\",\n      submit_changes: \"Поднеси промени\",\n      save_changes: \"Зачувај промени\"\n    },\n    general: {\n      and: \"и\",\n      name: \"Име\",\n      date: \"Датум\",\n      body: \"Тело\",\n      version: \"Верзија\",\n      accepted: \"Прифатено\",\n      rejected: \"Одбиено\",\n      withdrawn: \"Повлечено\",\n      submitter: \"Подносител\",\n      submitted: \"Поднесено\",\n      commit_msg: \"Порака за поднесокот\",\n      version_history: \"Историја на верзии\",\n      version_history_for: \"Историја на верзии за: \",\n      select_changes: \"Одбери две промени подолу за да ја видиш разликата.\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Пушти преглед на моменталното ниво\",\n      result: \"Резултат\",\n      results: \"Резултати\",\n      description: \"Опис\",\n      or: \"или\",\n      subject: \"Предмет на пораката\",\n      email: \"E-mail\",\n      password: \"Лозинка\",\n      message: \"Порака\",\n      ladder: \"Ранг листа\",\n      when: \"Кога\",\n      opponent: \"Противник\",\n      rank: \"Ранг\",\n      win: \"Победа\",\n      loss: \"Изгубено\",\n      tie: \"Нерешено\",\n      easy: \"Лесно\",\n      medium: \"Средно\",\n      hard: \"Тешко\",\n      player: \"Играч\",\n      player_level: \"Ниво\",\n      warrior: \"Воин\",\n      ranger: \"Ренџер\",\n      wizard: \"Волшебник\"\n    },\n    units: {\n      second: \"секунда\",\n      seconds: \"секунди\",\n      minute: \"минута\",\n      minutes: \"минути\",\n      hour: \"час\",\n      hours: \"часови\",\n      day: \"ден\",\n      days: \"денови\",\n      week: \"недела\",\n      weeks: \"недели\",\n      month: \"месец\",\n      months: \"месеци\",\n      year: \"година\",\n      years: \"години\"\n    },\n    play_level: {\n      done: \"Готово\",\n      home: \"Дома\",\n      level: \"Ниво\",\n      skip: \"Прескокни\",\n      game_menu: \"Мени\",\n      restart: \"Почни одново\",\n      goals: \"Цели\",\n      goal: \"Цел\",\n      running: \"Се извршува...\",\n      success: \"Успешно!\",\n      incomplete: \"Незавршено\",\n      timed_out: \"Истече времето\",\n      victory: \"Победа\",\n      victory_sign_up: \"Направи сметка за да го зачуваш напредокот\",\n      victory_sign_up_poke: \"Сакаш да го зачуваш твојот код? Направи бесплатна сметка!\",\n      victory_rate_the_level: \"Оцени го нивото: \",\n      victory_return_to_ladder: \"Врати се кај ранг листата\",\n      victory_saving_progress: \"Напредокот се зачувува\",\n      victory_go_home: \"Оди дома\",\n      victory_review: \"Кажи ни повеќе!\",\n      victory_hour_of_code_done: \"Дали си готов?\",\n      victory_experience_gained: \"Добиено искуство\",\n      victory_gems_gained: \"Добиени скапоцени камења\",\n      tome_your_skills: \"Твои вештини\",\n      code_saved: \"Кодот е зачуван\",\n      skip_tutorial: \"Прескокни (esc)\",\n      keyboard_shortcuts: \"Кратенки на тастатурата\",\n      loading_start: \"Почни ниво\",\n      problem_alert_title: \"Поправи си го кодот\",\n      time_current: \"Сега:\",\n      time_total: \"Максимум:\",\n      time_goto: \"Оди до:\",\n      non_user_code_problem_title: \"Не можам да го вчитам нивото\",\n      infinite_loop_title: \"Забележана е бесконечна јамка\",\n      infinite_loop_description: \"Првичниот код за изградба на светот никогаш не завршил со своето извршување. Веројатно е, или премногу спор, или соджи бесконечна јамка. Или можеби има грешка. Можеш да се обидеш да го извршиш овој код повторно или да го ресетираш кодот во првичната состојба. Ако тоа не го поправи проблемот, те молиме да не известиш.\",\n      infinite_loop_try_again: \"Обиди се повторно\",\n      infinite_loop_reset_level: \"Ресетирај ниво\",\n      infinite_loop_comment_out: \"Искоментирај го мојот код\",\n      tip_toggle_play: \"Пушти/Паузирај со Ctrl+P.\",\n      tip_scrub_shortcut: \"Ctrl+[ и Ctrl+] премотуваат назад и напред.\",\n      tip_guide_exists: \"Кликни на водичот, во менито (на врвот на страната), за корисни информации.\",\n      tip_open_source: \"CodeCombat е 100% open source!\",\n      tip_tell_friends: \"Уживаш во CodeCombat? Кажи им на пријателите за нас!\",\n      tip_beta_launch: \"CodeCombat ја пушти својата бета верзија во октомври, 2013.\",\n      tip_think_solution: \"Мисли на решението, не на проблемот.\",\n      tip_theory_practice: \"Теоретски, не постои разлика помеѓу теорија и пракса. Но, во пракса, постои. - Yogi Berra\",\n      tip_error_free: \"Постојат два начина за пишување програми без грешки; само третиот работи. - Alan Perlis\",\n      tip_debugging_program: \"Ако дебагирање е процесот на отстранување грешки, тогаш програмирање мора да е процесот при кој тие настануваат. - Edsger W. Dijkstra\",\n      tip_forums: \"Упати се кон форумите и кажи ни што мислиш!\",\n      tip_baby_coders: \"Во иднината, дури и бебињата ќе бидат Веле-Волшебници.\",\n      tip_morale_improves: \"Вчитувањето ќе продолжи се додека моралот не се подобри.\",\n      tip_all_species: \"Веруваме во еднакви можности за изучување на програмирањето за сите видови.\",\n      tip_harry: \"Ти си волшебник, \",\n      tip_great_responsibility: \"Со големи програмерски вештини доаѓа и голема одговорност за дебагирање.\",\n      tip_binary: \"Има само 10 вида на луѓе во светот: оние кои што разбираат бинарно, и оние кои не разбираат.\",\n      tip_commitment_yoda: \"Програмер мора да ја има најдлабоката обврзаност, најсериозниот ум. ~ Yoda\",\n      tip_no_try: \"Направи. Или не прави. Нема обидување. - Yoda\",\n      tip_patience: \"Трпение мора да имаш, млад Padawan. - Yoda\",\n      tip_documented_bug: \"Документирана грешка не е грешка; тоа е едноставно нешто што програмот го прави.\",\n      tip_impossible: \"Секогаш изледа невозможно, се додека некој не го направи. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Зборувањето е евтино. Покажи ми го кодот. - Linus Torvalds\",\n      tip_first_language: \"Нај катастрофалната работа што можеш да ја научиш е твојот прв програмски јазик. - Alan Kay\",\n      tip_hardware_problem: \"Прашање: Колку програмери се потребни за да се смени сијалица?  Одговор: Ниту еден, тоа е хардверски проблем.\",\n      tip_hofstadters_law: \"Законот на Hofstadter: Секогаш треба повеќе време отколку што очекуваш, дури и кога ќе го земеш во предвид законот на Hofstadter.\",\n      tip_premature_optimization: \"Предвремената оптимизација е коренот на сето зло. - Donald Knuth\",\n      tip_brute_force: \"Кога не си сигурен, користи 'brute force'. - Ken Thompson\",\n      tip_extrapolation: \"Има само два вида на луѓе: оние кои можат да екстраполираат од некомплетни податоци...\",\n      tip_superpower: \"Програмирањето е способност, најблиска до супермоќ, која ја имаме.\",\n      tip_control_destiny: \"Во вистински open source, ти имаш право да ја контролираш сопствената судбина. - Linus Torvalds\",\n      tip_no_code: \"Ниеден код не е побрз од никаков код.\",\n      tip_code_never_lies: \"Кодот никогаш не лаже, за разлика од коментарите. — Ron Jeffries\",\n      tip_reusable_software: \"За еден софтвер да биде употреблив на повеќе места прво треба да биде употреблив.\",\n      tip_optimization_operator: \"Секој програмски јазик има оператор за оптимизација. Во повеќето јазици тој оператор е ‘//’\",\n      tip_lines_of_code: \"Да се мери напредок во програмирање со број на напишани линии код е исто као да се мери напредок при изградба на авион по неговата тежина. — Bill Gates\",\n      tip_source_code: \"Сакам да го сменам светот ама не ми го даваат кодот.\",\n      tip_javascript_java: \"Java е поврзана со JavaScript колку што и тапа е поврзана со тапанар. - Chris Heilmann\",\n      tip_move_forward: \"Што и да правиш, продолжи да одиш напред. - Martin Luther King Jr.\",\n      tip_google: \"Имаш проблем што не можеш да го решиш? Побарај на Google!\",\n      tip_adding_evil: \"Додавам трошка зло.\",\n      tip_hate_computers: \"Тоа е работата со луѓето кои мислат дека мразат компјутери. Тоа што тие навистина го мразат се лоши програмери. - Larry Niven\",\n      tip_open_source_contribute: \"Можеш да помогнеш да се подобри CodeCombat!\",\n      tip_recurse: \"Да работиш итеративно е човечки, а да работич рекурзивно е божествено. - L. Peter Deutsch\",\n      tip_free_your_mind: \"Мораш да го оставиш сето тоа, Нео. Стравот, сомнежот, и невербата. Ослободи го твојот ум. - Morpheus\",\n      tip_strong_opponents: \"Дури и најсилниот противник има некоја слаба точка. - Itachi Uchiha\",\n      tip_solve_then_write: \"Прво, реши го проблемот. Потоа, напиши го кодот. - John Johnson\",\n      tip_compiler_ignores_comments: \"Понекогаш мислам дека компајлерот ги игнорира моите коментари.\",\n      tip_understand_recursion: \"Единствениот начин да разбереш рекурзија е да разбереш рекурзија.\",\n      tip_mistakes_proof_of_trying: \"Грешките во твојот код се само доказ дека се обидуваш.\",\n      tip_programming_not_about_computers: \"Компјутерската Наука е исто толку за компјутери колку што астрономијата е за телескопи. - Edsger Dijkstra\",\n      ready_to_share: \"Подготвен/а за објавување на проектот?\"\n    },\n    game_menu: {\n      save_load_tab: \"Зачувај/Вчитај\",\n      guide_tab: \"Водич\",\n      guide_video_tutorial: \"Видео водич\",\n      guide_tips: \"Совети\",\n      multiplayer_tab: \"Повеќе играчи\",\n      auth_tab: \"Направи сметка\",\n      inventory_caption: \"Опреми го твојот херој\",\n      choose_hero_caption: \"Избери херој, јазик\",\n      options_caption: \"Промени подесувања\",\n      guide_caption: \"Документи и совети\",\n      multiplayer_caption: \"Играј со пријатели!\",\n      auth_caption: \"Зачувај го твојот напредок.\"\n    },\n    inventory: {\n      required_purchase_title: \"Задолжително\",\n      available_item: \"Достапно\",\n      restricted_title: \"Забрането\",\n      locked: \"(заклучено)\",\n      restricted: \"(забрането во ова ниво)\"\n    },\n    buy_gems: {\n      few_gems: \"Неколку скапоцени камења\",\n      pile_gems: \"Купче скапоцени камења\",\n      chest_gems: \"Сандак скапоцени камења\",\n      purchasing: \"Купувам...\",\n      declined: \"Твојата картичка беше одбиена\",\n      retrying: \"Серверска грешка, се обидувам повторно.\",\n      prompt_title: \"Немаш доволно скапоцени камења\",\n      prompt_body: \"Дали сакаш да земеш повеќе?\",\n      prompt_button: \"Влези во продавницата\",\n      recovered: \"Претходното купување на скапоцени камења е вратено од загуба. Те молам 'освежи' ја страната.\"\n    },\n    subscribe: {\n      subscribe_title: \"Зачлени се\",\n      unsubscribe: \"Откажи членство\",\n      confirm_unsubscribe: \"Потврди откажување на членство\",\n      never_mind: \"Не е битно, сеуште те сакам\",\n      thank_you_months_prefix: \"Фала што нѐ поддржуваше овие последни\",\n      thank_you_months_suffix: \"месеци.\",\n      thank_you: \"Фала што ја поддржуваш CodeCombat.\",\n      sorry_to_see_you_go: \"Жал ни е што си одиш! Те молиме кажи ни што можевме да направиме подобро.\",\n      unsubscribe_feedback_placeholder: \"Што направивме?\",\n      stripe_description: \"Месечна членарина\",\n      subscription_required_to_play: \"Треба да бидеш зачленет за да го играш ова ниво.\"\n    },\n    choose_hero: {\n      choose_hero: \"Избери го твојот херој\",\n      programming_language: \"Програмски јазик\",\n      programming_language_description: \"Кој програмски јазик сакаш да го користиш?\",\n      experimental: \"Експериментално\",\n      python_blurb: \"Едноставен, но моќен, одличен за почетници и експерти.\",\n      javascript_blurb: \"Јазикот на веб-от. (Не е исто што и Java.)\",\n      coffeescript_blurb: \"Поубава JavaScript синтакса.\",\n      lua_blurb: \"Јазик за скриптирање на игри.\",\n      status: \"Статус\",\n      weapons: \"Оружја\",\n      weapons_warrior: \"Мечеви - Краток досег, нема магија\",\n      weapons_ranger: \"Самострели, Пушки - Долг досег, нема магија\",\n      weapons_wizard: \"Волшебни стапчиња, стапови - долг досег, има магија\",\n      attack: \"Напад\",\n      health: \"Здравје\",\n      speed: \"Брзина\",\n      regeneration: \"Заздравување\",\n      range: \"Досег\",\n      blocks: \"Блокира\",\n      backstab: \"Од зад грб\",\n      skills: \"Вештини\",\n      available_for_purchase: \"Достапно за купување\",\n      level_to_unlock: \"Ниво за да се отклучи:\",\n      restricted_to_certain_heroes: \"Само одредени херои можат да го играат ова ниво.\"\n    },\n    skill_docs: {\n      action_name: \"име\",\n      action_range: \"Досег\",\n      action_radius: \"Радиус\",\n      action_duration: \"Времетраење\",\n      example: \"Пример\",\n      ex: \"пр\",\n      current_value: \"Моментална вредност\",\n      default_value: \"Стандардна вредност\",\n      parameters: \"Параметри\",\n      returns: \"Враќа\",\n      granted_by: \"Овозможено од\"\n    },\n    save_load: {\n      granularity_saved_games: \"Зачувани\",\n      granularity_change_history: \"Историја\"\n    },\n    options: {\n      general_options: \"Општи подесувања\",\n      volume_label: \"Јачина на звук\",\n      music_label: \"Музика\",\n      music_description: \"Вклучи/Исклучи позадинска музика.\",\n      editor_config_title: \"Подесувања на едитор\",\n      editor_config_livecompletion_label: \"Автоматско дополнување 'во живо'\",\n      editor_config_livecompletion_description: \"Прикажува предлози за автоматско дополнување/довршување на командите додека куцаш.\",\n      editor_config_invisibles_label: \"Прикажи невидливи знаци\",\n      editor_config_invisibles_description: \"Ги прикажува невидливите знаци, како на пример знакот за празно место.\",\n      editor_config_indentguides_label: \"Прикажи водичи за 'вдлабнување'\",\n      editor_config_indentguides_description: \"Прикажува вертикални линии за подобар преглед на 'вдлабнувањaтa' на текстот.\",\n      editor_config_behaviors_label: \"Паметно однесување\",\n      editor_config_behaviors_description: \"Автоматски ги затвара отворените загради и наводници.\"\n    },\n    about: {\n      nick_title: \"Програмер\",\n      matt_title: \"Програмер\",\n      scott_title: \"Програмер\",\n      titles_csm: \"Менаџер за успех на купувачи\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    versions: {\n      save_version_title: \"Зачувај нова верзија\",\n      new_major_version: \"Нова поголема(major) верзија\",\n      submitting_patch: \"Испраќам закрпа...\",\n      cla_prefix: \"За да ги зачуваш промените, мораш да го прифатиш нашиот\",\n      cla_url: \"CLA\",\n      cla_suffix: \"(договор за тие што допринесуваат).\",\n      cla_agree: \"ПРИФАЌАМ\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1065\n");

/***/ })

});