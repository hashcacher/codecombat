/*! hash:345dfe6c0e434e9c7378, chunkhash:dd9187475614211a51b6, name:locale/it, filebase:it.bundle.js, query:, file:javascripts/chunks/locale/it.bundle.js */
webpackJsonp([49],{

/***/ 1059:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Italiano\",\n  englishDescription: \"Italian\",\n  translation: {\n    new_home: {\n      slogan: \"Il più avvincente gioco per imparare a programmare.\",\n      classroom_edition: \"Edizione Scuola:\",\n      learn_to_code: \"Impara a programmare:\",\n      play_now: \"Gioca Ora\",\n      im_a_teacher: \"Sono un Insegnante\",\n      im_a_student: \"Sono uno Studente\",\n      learn_more: \"Per saperne di più\",\n      classroom_in_a_box: \"Una classe in-scatola per l'insegnamento alla programmazione.\",\n      codecombat_is: \"CodeCombat è una piattaforma <strong>per studenti</strong> dove si impara l'informatica giocando ad un vero gioco.\",\n      our_courses: \"I nostri corsi sono stati specificatamente testati <strong>per eccellere nell'insegnamento</strong>, anche per gli insegnanti con poca o nessuna esperienza di programmazione.\",\n      top_screenshots_hint: \"Gli studenti scrivono il codice e osservano le loro modifiche in real-time\",\n      designed_with: \"Sviluppato con gli insegnanti in mente\",\n      real_code: \"Vero, codice scritto\",\n      from_the_first_level: \"dal primo livello\",\n      getting_students: \"Portare gli studenti a programmare il più velocemente possibile è critico per imparare la sintassi e le strutture adatte.\",\n      educator_resources: \"Risorse Educatore\",\n      course_guides: \"e guide ai corsi\",\n      teaching_computer_science: \"Insegnare l'informatica non richiede aver conseguito una laurea costosa, perchè diamo gli strumenti di supporto agli insegnanti che hanno avuto ogni tipo di formazione.\",\n      accessible_to: \"Accessibile a\",\n      everyone: \"tutti\",\n      democratizing: \"Democratizzare il processo di apprendimento della programmazione è il cuore della nostra filosofia. Tutti dovrebbero essere capaci di imparare a scrivere codice.\",\n      forgot_learning: \"Penso che abbiano dimenticato che stiano imparando qualcosa.\",\n      wanted_to_do: \" Programmare è qualcosa che ho sempre voluto fare, e non pensavo fosse possibile per me insegnarlo a scuola.\",\n      why_games: \"Perchè imparare attraverso il gioco è importante?\",\n      motivating: \"motivante\",\n      real_game: \"Un vero videogioco, da affrontare attraverso la programmazione.\",\n      request_demo: \"Richiedi una Demo\",\n      have_an_account: \"Hai un account?\",\n      logged_in_as: \"Sei connesso come\",\n      computer_science: \"Corsi di informatica per tutte le età\",\n      ffa: \"Gratis per tutti gli studenti\",\n      coming_soon: \"Di più in arrivo!\",\n      view_profile: \"Mostra il Mio Profilo\",\n      view_progress: \"Mostra Progressi\",\n      go_to_courses: \"Vai ai Miei Corsi\",\n      want_coco: \"Vuoi usare CodeCombat nella tua scuola?\"\n    },\n    nav: {\n      play: \"Livelli\",\n      community: \"Comunità\",\n      courses: \"Corsi\",\n      blog: \"Blog\",\n      forum: \"Forum\",\n      account: \"Account\",\n      my_account: \"Il mio Account\",\n      profile: \"Profilo\",\n      home: \"Pagina iniziale\",\n      contribute: \"Contribuisci\",\n      legal: \"Legale\",\n      privacy: \"Privacy\",\n      about: \"Informazioni\",\n      contact: \"Contatti\",\n      twitter_follow: \"Segui\",\n      my_classrooms: \"Le mie Classi\",\n      my_courses: \"I miei Corsi\",\n      careers: \"Lavora con noi\",\n      facebook: \"Facebook\",\n      twitter: \"Twitter\",\n      create_a_class: \"Crea una Classe\",\n      other: \"Altro\",\n      learn_to_code: \"Impara a Programmare!\",\n      toggle_nav: \"Cambia navigazione\",\n      schools: \"Scuole\",\n      get_involved: \"Partecipa\",\n      open_source: \"Open source (GitHub)\",\n      support: \"Supporto\",\n      faqs: \"FAQs\",\n      help_pref: \"Hai bisogno di aiuto? Scrivici\",\n      help_suff: \"e ci terremo in contatto!\",\n      resource_hub: \"Risorse\"\n    },\n    modal: {\n      close: \"Chiudi\",\n      okay: \"Ok\"\n    },\n    not_found: {\n      page_not_found: \"Pagina non trovata\"\n    },\n    diplomat_suggestion: {\n      title: \"Aiutaci a tradurre CodeCombat!\",\n      sub_heading: \"Abbiamo bisogno delle tue competenze linguistiche.\",\n      pitch_body: \"Noi sviluppiamo CodeCombat in inglese, ma abbiamo già giocatori in tutto il mondo. Molti di loro vorrebbero giocare in {Italiano}, ma non parlano inglese, quindi se tu li conosci entrambi sarebbe fantastico se decidessi di diventare un Diplomatico ed aiutassi a tradurre sia il sito di CodeCombat che tutti i livelli in {Italiano}.\",\n      missing_translations: \"Finché non riusciamo a tradurre tutto in {Italiano} vedrai alcune parti in inglese, dove l'{Italiano} non è disponibile.\",\n      learn_more: \"Maggiori dettagli su come diventare un Diplomatico\",\n      subscribe_as_diplomat: \"Diventa un Diplomatico\"\n    },\n    play: {\n      play_as: \"Gioca come \",\n      compete: \"Competi!\",\n      spectate: \"Spettatore\",\n      players: \"giocatori\",\n      hours_played: \"ore di gioco\",\n      items: \"Oggetti\",\n      unlock: \"Sblocca\",\n      confirm: \"Conferma\",\n      owned: \"In tuo possesso\",\n      locked: \"Bloccato\",\n      available: \"Disponibile\",\n      skills_granted: \"Competenze fornite\",\n      heroes: \"Eroi\",\n      achievements: \"Imprese\",\n      settings: \"Impostazioni\",\n      poll: \"Sondaggio\",\n      next: \"Procedi\",\n      change_hero: \"Cambia eroe\",\n      buy_gems: \"Compra gemme\",\n      anonymous: \"Giocatore anonimo\",\n      level_difficulty: \"Difficoltà: \",\n      awaiting_levels_adventurer_prefix: \"Pubblichiamo 5 livelli alla settimana.\",\n      awaiting_levels_adventurer: \"Iscriviti come Avventuriero\",\n      awaiting_levels_adventurer_suffix: \"per essere tra i primi a provare i nuovi livelli.\",\n      adjust_volume: \"Regola il volume\",\n      campaign_multiplayer: \"Arene multigiocatore\",\n      campaign_multiplayer_description: \"... nelle quali programmi faccia a faccia contro altri giocatori.\"\n    },\n    code: {\n      \"if\": \"se\",\n      \"else\": \"altrimenti\",\n      elif: \"altrimenti se\",\n      \"while\": \"mentre\",\n      loop: \"ciclo\",\n      \"for\": \"per\",\n      \"break\": \"interrompi\",\n      \"continue\": \"continua\",\n      pass: \"passa\",\n      \"return\": \"ritorna\",\n      then: \"allora\",\n      \"do\": \"fai\",\n      end: \"fine\",\n      \"function\": \"funzione\",\n      def: \"definisci\",\n      \"var\": \"variabile\",\n      self: \"self\",\n      hero: \"eroe\",\n      \"this\": \"this\",\n      or: \"oppure\",\n      \"||\": \"oppure\",\n      and: \"e\",\n      \"&&\": \"e\",\n      not: \"non\",\n      \"!\": \"non\",\n      \"=\": \"assegna\",\n      \"==\": \"uguale\",\n      \"===\": \"strettamente uguale\",\n      \"!=\": \"diverso\",\n      \"!==\": \"strettamente diverso\",\n      \">\": \"maggiore di\",\n      \">=\": \"maggiore o uguale\",\n      \"<\": \"minore di\",\n      \"<=\": \"minore o uguale\",\n      \"*\": \"moltiplicato per\",\n      \"/\": \"diviso per\",\n      \"+\": \"più\",\n      \"-\": \"meno\",\n      \"+=\": \"aggiungi e assegna\",\n      \"-=\": \"sottrai e assegna\",\n      True: \"Vero\",\n      \"true\": \"vero\",\n      False: \"Falso\",\n      \"false\": \"falso\",\n      undefined: \"non definito\",\n      \"null\": \"nullo\",\n      nil: \"nil\",\n      None: \"None\"\n    },\n    share_progress_modal: {\n      blurb: \"Stai facendo grandi progressi! Dì ai tuoi genitori quanto hai imparato con CodeCombat.\",\n      email_invalid: \"Indirizzo email non valido.\",\n      form_blurb: \"Inserisci l'indirizzo email di un genitore qui sotto e glielo mostreremo!\",\n      form_label: \"Indirizzo email\",\n      placeholder: \"indirizzo email\",\n      title: \"Ottimo lavoro, apprendista\"\n    },\n    login: {\n      sign_up: \"Crea account\",\n      email_or_username: \"Email o nome utente\",\n      log_in: \"Accedi\",\n      logging_in: \"Accesso in corso\",\n      log_out: \"Disconnetti\",\n      forgot_password: \"Password dimenticata?\",\n      finishing: \"Completato\",\n      sign_in_with_facebook: \"Entra con Facebook\",\n      sign_in_with_gplus: \"Entra con G+\",\n      signup_switch: \"Vuoi creare un account?\"\n    },\n    signup: {\n      create_student_header: \"Crea un Account Studente\",\n      create_teacher_header: \"Crea un Account Insegnante\",\n      create_individual_header: \"Crea un Account Individuale\",\n      email_announcements: \"Ricevi comunicazioni per email\",\n      creating: \"Creazione account...\",\n      sign_up: \"Registrati\",\n      log_in: \"Accedi con la password\",\n      required: \"Effettua l'accesso per proseguire.\",\n      login_switch: \"Hai già un account?\",\n      optional: \"opzionale\",\n      connected_gplus_header: \"Ti sei connesso correttamente con Google+!\",\n      birthday: \"Compleanno\",\n      checking: \"Controllando...\",\n      account_exists: \"Questo indirizzo email è già in uso:\",\n      email_good: \"L'indirizzo email sembra giusto!\",\n      name_taken: \"Nome utente già utilizzato! Prova {{suggestedName}}?\",\n      name_available: \"Nome utente disponibile!\",\n      name_is_email: \"Il nome utente non dovrebbe essere una email\",\n      choose_type: \"Scegli il tuo tipo di account:\",\n      teacher_type_1: \"Insegna la programmazione usando CodeCombat!\",\n      teacher_type_2: \"Prepara la tua classe\",\n      teacher_type_3: \"Accedi alle Guide ai Corsi\",\n      teacher_type_4: \"Mostra i progressi dello studente\",\n      signup_as_teacher: \"Iscriviti come Insegnante\",\n      student_type_1: \"Impara a programmare attraverso un videogioco avvincente!\",\n      student_type_2: \"Gioca con la tua classe\",\n      student_type_3: \"Combatti nelle arene\",\n      student_type_4: \"Scegli il tup eroe!\",\n      signup_as_student: \"Iscriviti come Studente\",\n      individuals_or_parents: \"Individui e Genitori\",\n      enter_birthdate: \"Inserisci la data di nascita:\",\n      parent_use_birthdate: \"Genitori, usate la vostra data di nascita.\",\n      ask_teacher_3: \"Account Individuale\",\n      ask_teacher_4: \" invece.\",\n      enter_parent_email: \"Inserisci l'indirizzo email di un genitore:\",\n      account_created: \"Account Creato!\",\n      write_this_down: \"Prendi nota di questo:\",\n      start_playing: \"Comincia a Giocare!\",\n      sso_connected: \"Connesso correttamente con:\",\n      select_your_starting_hero: \"Seleziona il tuo Eroe per cominciare:\",\n      you_can_always_change_your_hero_later: \"Puoi sempre cambiare il tuo eroe successivamente.\"\n    },\n    recover: {\n      recover_account_title: \"Recupera account\",\n      send_password: \"Invia password di recupero\",\n      recovery_sent: \"Password di recupero inviata.\"\n    },\n    items: {\n      primary: \"Primario\",\n      secondary: \"Secondario\",\n      armor: \"Armatura\",\n      accessories: \"Accessori\",\n      misc: \"Varie\",\n      books: \"Libri\"\n    },\n    common: {\n      back: \"Indietro\",\n      coming_soon: \"Prossimanente!\",\n      \"continue\": \"Continua\",\n      default_code: \"Codice di Default\",\n      loading: \"Caricamento in corso...\",\n      overview: \"Panoramica\",\n      solution: \"Soluzione\",\n      intro: \"Introduzione\",\n      saving: \"Salvataggio in corso...\",\n      sending: \"Invio in corso...\",\n      send: \"Invia\",\n      sent: \"Inviato\",\n      cancel: \"Annulla\",\n      save: \"Salva\",\n      publish: \"Pubblica\",\n      create: \"Crea\",\n      fork: \"Fork\",\n      play: \"Gioca\",\n      retry: \"Riprova\",\n      actions: \"Azioni\",\n      info: \"Info\",\n      help: \"Aiuto\",\n      watch: \"Segui\",\n      unwatch: \"Non seguire\",\n      submit_patch: \"Invia patch\",\n      submit_changes: \"Invia modifiche\",\n      save_changes: \"Salva modifiche\",\n      required_field: \"richiesto\"\n    },\n    general: {\n      and: \"e\",\n      name: \"Nome\",\n      date: \"Data\",\n      body: \"Testo\",\n      version: \"Versione\",\n      pending: \"In attesa\",\n      accepted: \"Accettate\",\n      rejected: \"Rifiutate\",\n      withdrawn: \"Ritirate\",\n      accept: \"Accetta\",\n      reject: \"Rifiuta\",\n      withdraw: \"Ritirati\",\n      submitter: \"Autore\",\n      submitted: \"Data creazione\",\n      commit_msg: \"Messaggio di commit\",\n      version_history: \"Cronologia versioni\",\n      version_history_for: \"Cronologia versioni per: \",\n      select_changes: \"Scegli due versioni per vedere la differenza.\",\n      undo_prefix: \"Annulla\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Ripristina\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Vedi anteprima del livello attuale\",\n      result: \"Risultato\",\n      results: \"Risultati\",\n      description: \"Descrizione\",\n      or: \"o\",\n      subject: \"Oggetto\",\n      email: \"Email\",\n      password: \"Password\",\n      confirm_password: \"Conferma Password\",\n      message: \"Messaggio\",\n      code: \"Codice\",\n      ladder: \"Scala\",\n      when: \"Quando\",\n      opponent: \"Avversario\",\n      rank: \"Classifica\",\n      score: \"Punteggio\",\n      win: \"Vittoria\",\n      loss: \"Sconfitta\",\n      tie: \"Pareggio\",\n      easy: \"Facile\",\n      medium: \"Medio\",\n      hard: \"Difficile\",\n      player: \"Giocatore\",\n      player_level: \"Livello\",\n      warrior: \"Guerriero\",\n      ranger: \"Ranger\",\n      wizard: \"Mago\",\n      first_name: \"Nome\",\n      last_name: \"Cognome\",\n      username: \"Nome utente\",\n      contact_us: \"Contattaci\",\n      close_window: \"Chiudi Finestra\"\n    },\n    units: {\n      second: \"secondo\",\n      seconds: \"secondi\",\n      minute: \"minuto\",\n      minutes: \"minuti\",\n      hour: \"ora\",\n      hours: \"ore\",\n      day: \"giorno\",\n      days: \"giorni\",\n      week: \"settimana\",\n      weeks: \"settimane\",\n      month: \"mese\",\n      months: \"mesi\",\n      year: \"anno\",\n      years: \"anni\"\n    },\n    play_level: {\n      directions: \"Istruzioni\",\n      edit_level: \"Modifica Livello\",\n      explore_codecombat: \"Esplora CodeCombat\",\n      finished_hoc: \"Ho finito la mia Hour of Code\",\n      get_certificate: \"Ottieni il tuo certificato!\",\n      level_complete: \"Livello Completato\",\n      completed_level: \"Livello completato:\",\n      course: \"Corso:\",\n      done: \"Fatto\",\n      next_level: \"Prossimo livello\",\n      next_game: \"Prossimo gioco\",\n      languages: \"Lingue\",\n      programming_language: \"Linguaggio di Programmazione\",\n      show_menu: \"Visualizza menu gioco\",\n      home: \"Pagina iniziale\",\n      level: \"Livello\",\n      skip: \"Salta\",\n      game_menu: \"Menu\",\n      restart: \"Ricomincia\",\n      goals: \"Obiettivi\",\n      goal: \"Obiettivo\",\n      running: \"Eseguo...\",\n      success: \"Successo!\",\n      incomplete: \"Incompleto\",\n      timed_out: \"Tempo scaduto\",\n      failing: \"Fallito\",\n      reload: \"Ricarica\",\n      reload_title: \"Ricaricare tutto il codice?\",\n      reload_really: \"Sei sicuro di voler ricominciare il livello?\",\n      reload_confirm: \"Ricarica tutto\",\n      test_level: \"Livello Test\",\n      victory: \"Vittoria\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Completato\",\n      victory_sign_up: \"Registrati per gli aggiornamenti\",\n      victory_sign_up_poke: \"Vuoi ricevere le ultime novità per email? Crea un account gratuito e ti terremo aggiornato!\",\n      victory_rate_the_level: \"Vota il livello: \",\n      victory_return_to_ladder: \"Ritorna alla classifica\",\n      victory_saving_progress: \"Salvataggio progressi\",\n      victory_go_home: \"Torna alla pagina iniziale\",\n      victory_review: \"Dicci di più!\",\n      victory_review_placeholder: \"Come è stato il livello?\",\n      victory_hour_of_code_done: \"Finito?\",\n      victory_hour_of_code_done_yes: \"Si, ho finito la mia ora di programmazione!\",\n      victory_experience_gained: \"Punti XP guadagnati\",\n      victory_gems_gained: \"Gemme guadagnate\",\n      victory_new_item: \"Nuovo oggetto\",\n      victory_new_hero: \"Nuovo Eroe\",\n      victory_viking_code_school: \"Fumi sacri, era un livello duro quello che hai passato! Se non sei già uno sviluppatore, dovresti esserlo. Sei appena stato raccomandato per entrare nella Viking Code School, dove potrai raggiungere il prossimo livello di conoscenza e diventare uno sviluppatore web professionale in 14 settimane.\",\n      victory_become_a_viking: \"Diventa un Vichingo\",\n      victory_no_progress_for_teachers: \"I progressi non vengono salvati per gli insegnanti. Ma, puoi aggiungere un account studente alla tua classe in autonomia.\",\n      tome_cast_button_run: \"Vai\",\n      tome_cast_button_running: \"In esecuzione\",\n      tome_cast_button_ran: \"Esegui\",\n      tome_submit_button: \"Invia codice\",\n      tome_reload_method: \"Ricarica codice originale per questo metodo\",\n      tome_available_spells: \"Incantesimi disponibili\",\n      tome_your_skills: \"Le tue competenze\",\n      hints: \"Suggerimenti\",\n      hints_title: \"Suggerimento {{number}}\",\n      code_saved: \"Codice salvato\",\n      skip_tutorial: \"Salta (esc)\",\n      keyboard_shortcuts: \"Scorciatoie da tastiera\",\n      loading_start: \"Inizia livello\",\n      problem_alert_title: \"Sistema il codice\",\n      time_current: \"Tempo:\",\n      time_total: \"Max:\",\n      time_goto: \"Vai a:\",\n      non_user_code_problem_title: \"Impossibile caricare livello\",\n      infinite_loop_title: \"Ciclo infinito rilevato\",\n      infinite_loop_description: \"Il programma iniziale per costruire il mondo non ha mai finito di girare. O è molto lento o è in un ciclo infinito. O ci potrebbe essere un bug. Puoi provare a lasciarlo girare o farlo ripartire. Se non funziona, per favore avvertici.\",\n      check_dev_console: \"Puoi anche aprire la console sviluppatore per vedere cosa potrebbe non funzionare.\",\n      check_dev_console_link: \"(istruzioni)\",\n      infinite_loop_try_again: \"Riprova\",\n      infinite_loop_reset_level: \"Riavvia livello\",\n      infinite_loop_comment_out: \"Commenta il codice\",\n      tip_toggle_play: \"Scambia play/pausa con Ctrl+P.\",\n      tip_scrub_shortcut: \"Usa Ctrl+[ e Ctrl+] per tornare indietro o avanzare rapidamente.\",\n      tip_guide_exists: \"Clicca sulla Guida, nel menù di gioco (in alto nella pagina), per informazioni utili.\",\n      tip_open_source: \"CodeCombat è 100% open source!\",\n      tip_tell_friends: \"Ti piace CodeCombat? Parla di noi ai tuoi amici!\",\n      tip_beta_launch: \"CodeCombat è stato lanciato in beta nell'ottobre 2013.\",\n      tip_think_solution: \"Pensa alla soluzione, non al problema.\",\n      tip_theory_practice: \"In teoria, non c'è alcuna differenza tra teoria e pratica. Ma in pratica, c'è. - Yogi Berra\",\n      tip_error_free: \"Ci sono due modi di scrivere programmi senza errori; solo il terzo funziona. - Alan Perlis\",\n      tip_debugging_program: \"Se il debug è il processo di rimuovere i bug, allora programmare deve essere il processo di crearli. - Edsger W. Dijkstra\",\n      tip_forums: \"Visita i nostri forum e facci sapere cosa pensi!\",\n      tip_baby_coders: \"Nel futuro, persino i neonati saranno Arcimaghi.\",\n      tip_morale_improves: \"Il caricamento continuerà fino a che il morale migliora.\",\n      tip_all_species: \"Crediamo che chiunque debba avere le stesse opportunità di imparare a programmare.\",\n      tip_reticulating: \"Reticolazione spine\",\n      tip_harry: \"Yer il mago, \",\n      tip_great_responsibility: \"Da grandi abilità di programmazione derivano grandi responsabilità.\",\n      tip_munchkin: \"Se non mangi la tua verdura, un munchkin verrà a cercarti mentre dormi.\",\n      tip_binary: \"Ci sono solo 10 tipi di persone al mondo: quelli che capiscono il binario, e quelli che non lo capiscono.\",\n      tip_commitment_yoda: \"Un programmatore il più profondo impegno, la mente più seria deve avere. ~ Yoda\",\n      tip_no_try: \"Fare o non fare. Questo non è provare. - Yoda\",\n      tip_patience: \"Pazienza devi avere, giovane Padawan. - Yoda\",\n      tip_documented_bug: \"Un bug documentato non è bug; è una feature.\",\n      tip_impossible: \"Sembra sempre impossibile fino a quando non ci si riesce. - Nelson Mandela\",\n      tip_talk_is_cheap: \"A parlare sono bravi tutti. Mostrami il codice. - Linus Torvalds\",\n      tip_first_language: \"La cosa più disastrosa che potrai mai imparare è il tuo primo linguaggio di programmazione. - Alan Kay\",\n      tip_hardware_problem: \"Quanti programmatori servono per cambiare una lampadina?  Nessuno, è un problema di hardware.\",\n      tip_hofstadters_law: \"Legge di Hofstadter: Ci vuole sempre più del previsto, anche quando tieni conto della legge di Hofstadter.\",\n      tip_premature_optimization: \"L'ottimizzazione prematura è l'origine di tutti i mali. - Donald Knuth\",\n      tip_brute_force: \"Quando sei in dubbio, usa la forza bruta. - Ken Thompson\",\n      tip_extrapolation: \"Ci sono soltanto due tipi di persone: quelli che possono estrapolare da dati incompleti...\",\n      tip_superpower: \"La programmazione è la cosa che più si avvicina a un superpotere.\",\n      tip_control_destiny: \"Nel vero open source, hai il diritto di controllare il propio destino. - Linus Torvalds\",\n      tip_no_code: \"Nessun codice è più veloce di nessun codice.\",\n      tip_code_never_lies: \"Il codice non mente mai, ma i commenti a volte lo fanno. — Ron Jeffries\",\n      tip_reusable_software: \"Prima che un software sia riusabile deve intanto essere usabile.\",\n      tip_optimization_operator: \"Ogni linguaggio ha un operatore di ottimizzazione. Nella maggior parte dei casi questo operatore è ‘//’\",\n      tip_lines_of_code: \"Misurare l'avanzamento di un programma dalle righe di codice è come misurare l'avanzamento nella costruzione di un aereo dal peso. - Bill Gates\",\n      tip_source_code: \"Vorrei cambiare il mondo, ma non mi danno il codice sorgente.\",\n      tip_javascript_java: \"Java sta a JavaScript come Cane sta a Canestro. - Chris Heilmann\",\n      tip_move_forward: \"Qualsiasi cosa tu faccia, vai sempre avanti. - Martin Luther King Jr.\",\n      tip_google: \"Hai un problema che non riesci a risolvere? Cerca su Google!\",\n      tip_adding_evil: \"Aggiungendo un pizzico di malvagità.\",\n      tip_hate_computers: \"A proposito delle persone che pensano di odiare i computer. Cio' che odiano realmente sono i programmatori scarsi - Larry Niven\",\n      tip_open_source_contribute: \"Puoi aiutare CodeCombat a migliorare!\",\n      tip_recurse: \"Iterare e umano, usare la ricorsione è divino. - L. Peter Deutsch\",\n      tip_free_your_mind: \"Devi liberarti di tutto questo, Neo. Paura, dubbio, sfiducia. Libera la tua mente. - Morpheus\",\n      tip_strong_opponents: \"Anche il più tenace degli avversari ha sempre una debolezza. - Itachi Uchiha\",\n      tip_paper_and_pen: \"Prima di iniziare a programmare, puoi sempre progettare con un foglio di carta e una penna.\",\n      tip_solve_then_write: \"Prima, risolvi il problema. Poi, scrivi il codice. - John Johnson\",\n      tip_compiler_ignores_comments: \"A volte penso che il compilatore ignori i miei commenti\",\n      tip_understand_recursion: \"Il solo modo per capire la ricorsione è capire la ricorsione.\",\n      tip_life_and_polymorphism: \"L'Open Source è come una struttura eterogenea totalmente polimorfica: Gente di ogni tipo è benvenuta.\",\n      tip_mistakes_proof_of_trying: \"Gli errori nel tuo codice solo la prova che ti stai dando da fare.\",\n      tip_sharpening_swords: \"Affilando le spade.\",\n      tip_luna_lovegood: \"Non preoccuparti, sei sano di mente quanto me. - Luna Lovegood\",\n      tip_good_idea: \"Il modo migliore per avere una buona idea è avere tante, tante idee. - Linus Pauling\",\n      tip_programming_not_about_computers: \"La Scienza dei Computer non riguarda i computer più di quanto l'astronomia riguardi i telescopi.. - Edsger Dijkstra\",\n      tip_mulan: \"Se ci credi, raggiungerai i tuoi obbiettivi. - Mulan\"\n    },\n    play_game_dev_level: {\n      created_by: \"Creato da {{name}}\",\n      restart: \"Riavvia Livello\",\n      play: \"Avvia Livello\",\n      play_more_codecombat: \"Gioca più CodeCombat\",\n      default_student_instructions: \"Clicca per controllare il tuo eroe e vincere il gioco!\"\n    },\n    game_menu: {\n      inventory_tab: \"Inventario\",\n      save_load_tab: \"Salva/Carica\",\n      options_tab: \"Opzioni\",\n      guide_tab: \"Guida\",\n      guide_video_tutorial: \"Tutorial video\",\n      guide_tips: \"Suggerimenti\",\n      multiplayer_tab: \"Multigiocatore\",\n      auth_tab: \"Registrati\",\n      inventory_caption: \"Equipaggia l'eroe\",\n      choose_hero_caption: \"Scegli eroe, lingua\",\n      options_caption: \"Configura\",\n      guide_caption: \"Documenti e suggerimenti\",\n      multiplayer_caption: \"Gioca con i tuoi amici!\",\n      auth_caption: \"Salva i tuoi progressi.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Vedi altre soluzioni\",\n      scores: \"Punteggi\",\n      top_players: \"Migliori giocatori per\",\n      day: \"Oggi\",\n      week: \"Questa settimana\",\n      all: \"Sempre\",\n      time: \"Tempo\",\n      damage_taken: \"Danni subiti\",\n      damage_dealt: \"Danni inflitti\",\n      difficulty: \"Difficoltà\",\n      gold_collected: \"Oro collezionato\"\n    },\n    inventory: {\n      equipped_item: \"In dotazione\",\n      required_purchase_title: \"Necessario\",\n      available_item: \"Disponibile\",\n      restricted_title: \"Vietato\",\n      should_equip: \"(doppio clic per prendere)\",\n      equipped: \"(preso)\",\n      locked: \"(bloccato)\",\n      restricted: \"(vietato in questo livello)\",\n      equip: \"Prendi\",\n      unequip: \"Posa\"\n    },\n    buy_gems: {\n      few_gems: \"Qualche gemma\",\n      pile_gems: \"Mucchio di gemme\",\n      chest_gems: \"Baule di gemme\",\n      purchasing: \"Acquisto...\",\n      declined: \"La carta è stata rifiutata\",\n      retrying: \"Errore del server, riprovo.\",\n      prompt_title: \"Non hai abbastanza gemme\",\n      prompt_body: \"Ne vuoi comprare altre?\",\n      prompt_button: \"Entra nel negozio\",\n      recovered: \"Acquisto precedente recuperato. Ricaricare la pagina.\",\n      price: \"x{{gems}} / mese\"\n    },\n    subscribe: {\n      subscribe_modal_title: \"CodeCombat Premium\",\n      comparison_blurb: \"Aumenta le tue competenze con un abbonamento a CodeCombat!\",\n      must_be_logged: \"Devi aver prima effettuato il login. Crea un account o effettua il login dal menu superiore.\",\n      subscribe_title: \"Abbonati\",\n      unsubscribe: \"Disabbonati\",\n      confirm_unsubscribe: \"Conferma disabbonamento\",\n      never_mind: \"Non importa, noi ancora ti amiamo\",\n      thank_you_months_prefix: \"Grazie per averci sostenuto in quest'ultimi\",\n      thank_you_months_suffix: \"mesi.\",\n      thank_you: \"Grazie per il tuo supporto a  CodeCombat.\",\n      sorry_to_see_you_go: \"Ci dispiace vederti andare via! Dicci che cosa avremmo potuto fare .\",\n      unsubscribe_feedback_placeholder: \"O, cosa abbiamo fatto?\",\n      stripe_description: \"Sottoscrizione mensile\",\n      subscription_required_to_play: \"Devi essere abbonato per giocare su questo livello.\",\n      unlock_help_videos: \"Abbonati per accedere a tutti i tutorial video.\",\n      personal_sub: \"Sottoscrizione Personale\",\n      loading_info: \"Caricamento informazioni abbonamento...\",\n      managed_by: \"Gestito da\",\n      will_be_cancelled: \"Sara' rimosso il\",\n      currently_free: \"Al momento hai un abbonamento gratuito\",\n      currently_free_until: \"Hai un abbonamento valido fino al\",\n      was_free_until: \"Hai avuto un abbonamento gratuito fino al \",\n      managed_subs: \"Gestione Abbonamenti\",\n      subscribing: \"Abbonamento...\",\n      current_recipients: \"Destinatari attuali\",\n      unsubscribing: \"Deregistrazione\",\n      subscribe_prepaid: \"Clicca su Registrazione per usare un codice pre pagato\",\n      using_prepaid: \"Usa un codice pre pagato per un abbonamento mensile\"\n    },\n    choose_hero: {\n      choose_hero: \"Scegli il tuo eroe\",\n      programming_language: \"Linguaggio di programmazione\",\n      programming_language_description: \"Che linguaggio vuoi usare?\",\n      \"default\": \"Predefinito\",\n      experimental: \"Sperimentale\",\n      python_blurb: \"Semplice e potente, adatto per principianti ed esperti.\",\n      javascript_blurb: \"Il linguaggio della rete. (Non è Java.)\",\n      coffeescript_blurb: \"Una sintassi JavaScript più elaborata.\",\n      lua_blurb: \"Linguaggio per la programmazione di giochi.\",\n      status: \"Stato\",\n      weapons: \"Armi\",\n      weapons_warrior: \"Spade - Ravvicinato, nessuna magia\",\n      weapons_ranger: \"Archi, fucili - A distanza, nessuna magia\",\n      weapons_wizard: \"Bacchette, bastoni - A distanza, con magie\",\n      attack: \"Danni\",\n      health: \"Salute\",\n      speed: \"Velocità\",\n      regeneration: \"Rigenerazione\",\n      range: \"campo\",\n      blocks: \"protegge\",\n      backstab: \"Coltellata\",\n      skills: \"Abilità\",\n      speed_1: \"Si muove a\",\n      speed_2: \"metri al secondo.\",\n      available_for_purchase: \"In vendita\",\n      level_to_unlock: \"Livello da sbloccare:\",\n      restricted_to_certain_heroes: \"Solo alcuni eroi possono giocare questo livello.\"\n    },\n    skill_docs: {\n      \"function\": \"funzione\",\n      method: \"metodo\",\n      number: \"numero\",\n      array: \"array\",\n      object: \"oggetto\",\n      string: \"stringa\",\n      writable: \"scrivibile\",\n      read_only: \"sola lettura\",\n      action: \"Azione\",\n      spell: \"Incantesimo\",\n      action_name: \"nome\",\n      action_cooldown: \"Richiede\",\n      action_specific_cooldown: \"Riposo\",\n      action_damage: \"Danni\",\n      action_range: \"Estensione\",\n      action_radius: \"Raggio\",\n      action_duration: \"Durata\",\n      example: \"Esempio\",\n      ex: \"es.\",\n      current_value: \"Valore attuale\",\n      default_value: \"Valore predefinito\",\n      parameters: \"Parametri\",\n      required_parameters: \"Parametri Richiesti\",\n      optional_parameters: \"Parametri Opzionali\",\n      returns: \"Restituisce\",\n      granted_by: \"Concesso da\"\n    },\n    save_load: {\n      granularity_saved_games: \"Salvato\",\n      granularity_change_history: \"Storico\"\n    },\n    options: {\n      general_options: \"Opzioni generali\",\n      volume_label: \"Volume\",\n      music_label: \"Musica\",\n      music_description: \"Attiva/disattiva musica di sottofondo.\",\n      editor_config_title: \"Editor di configurazione\",\n      editor_config_livecompletion_label: \"Auto-completamento immediato\",\n      editor_config_livecompletion_description: \"Mostra suggerimenti mentre si scrive.\",\n      editor_config_invisibles_label: \"Mostra invisibili\",\n      editor_config_invisibles_description: \"Mostra caratteri invisibili come spazi e tab.\",\n      editor_config_indentguides_label: \"Mostra guide di indentazione\",\n      editor_config_indentguides_description: \"Mostra righe verticali per incolonnare meglio.\",\n      editor_config_behaviors_label: \"Comportamento intelligente\",\n      editor_config_behaviors_description: \"Auto-completa parentesi e virgolette.\"\n    },\n    about: {\n      main_title: \"Se vuoi imparare a programmare, devi scrivere (un sacco) di codice\",\n      main_description: \"In CodeCombat, il nostro lavoro è essere sicuri che tu stia facendo le cose con il sorriso sulle labbra.\",\n      mission_link: \"Missione\",\n      team_link: \"Team\",\n      story_link: \"Storia\",\n      press_link: \"Stampa\",\n      mission_title: \"La nostra missione: rendere la programmazione accessibile ad ogni studente sulla Terra.\",\n      mission_description_1: \"<strong>La programmazione è magia!</strong>. E' l'abilità di creare cose a partire dalla pura immaginazione. Abbiamo creato CodeCombat per dare agli studenti la sensazione di avere dei poteri magici  <strong>scrivendo codice</strong>.\",\n      team_title: \"Incontra il Team di CodeCombat\",\n      nick_title: \"Programmatore\",\n      matt_title: \"Programmatore\",\n      cat_title: \"Mastro artigiano\",\n      scott_title: \"Programmatore\",\n      titles_csm: \"Manager di successo del cliente\",\n      retrostyle_title: \"Illustratore\",\n      retrostyle_blurb: \"Giochi retrò\",\n      community_title: \"...e la nostra comunità open-source\",\n      community_description_3: \"CodeCombat è un\",\n      community_description_link_2: \"progetto open\",\n      community_description_2: \"per più informazioni.\",\n      story_statistic_1a: \"5,000,000+\",\n      story_statistic_1b: \"giocatori totali\",\n      story_statistic_2b: \"più di 200 paesi\",\n      story_statistic_3a: \"Insieme, hanno scritto\",\n      story_statistic_3b: \"1 miliardo e oltre di linee di codice\",\n      logo: \"Logo\"\n    },\n    teachers: {\n      licenses_needed: \"Licenze necessarie\"\n    },\n    versions: {\n      save_version_title: \"Salva nuova versione\",\n      new_major_version: \"Nuova versione\",\n      submitting_patch: \"Invio modifiche in corso...\",\n      cla_prefix: \"Per salvare le modifiche, prima devi accettare la nostra \",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"ACCETTO\",\n      owner_approve: \"Un proprietario dovrà dare il consenso prima che le tue modifiche siano visibili.\"\n    },\n    contact: {\n      contact_us: \"Contatta CodeCombat\",\n      welcome: \"È bello sentirti! Usa questo modulo per mandarci un'email.\",\n      forum_prefix: \"Per discussioni pubbliche, puoi provare \",\n      forum_page: \"il nostro forum\",\n      forum_suffix: \" invece.\",\n      faq_prefix: \"C'è anche una\",\n      faq: \"FAQ\",\n      subscribe_prefix: \"Se hai bisogno di aiuto nel completare un livello, per favore\",\n      subscribe: \"acquista un abbonamento a CodeCombat\",\n      subscribe_suffix: \"e saremo felici di aiutarti con il tuo codice.\",\n      subscriber_support: \"Dato che hai un abbonamento a CodeCombat, la tua email avrà supporto prioritario.\",\n      screenshot_included: \"Screenshot incluso.\",\n      where_reply: \"Dove dovremmo risponderti?\",\n      send: \"Invia feedback\"\n    },\n    account_settings: {\n      title: \"Impostazioni account\",\n      not_logged_in: \"Accedi o crea un account per cambiare le tue impostazioni.\",\n      me_tab: \"Io\",\n      picture_tab: \"Immagine\",\n      delete_account_tab: \"Cancella il tuo account\",\n      wrong_email: \"Indirizzo email sbagliato\",\n      wrong_password: \"Password Sbagliata\",\n      delete_this_account: \"Cancella questo account per sempre\",\n      reset_progress_tab: \"Cancella tutti i progressi\",\n      reset_your_progress: \"Cancella tutti i tuoi progressi e inizia da capo\",\n      god_mode: \"God Mode\",\n      emails_tab: \"Email\",\n      admin: \"Amministratore\",\n      manage_subscription: \"Clicca qui per gestire il tuo abbonamento.\",\n      new_password: \"Nuova password\",\n      new_password_verify: \"Verifica\",\n      type_in_email: \"Scrivi il tuo indirizzo email per confermare la cancellazione\",\n      type_in_email_progress: \"Inserisci la tua email per confermare la cancellazione dei tuoi progressi.\",\n      type_in_password: \"Inoltre, inserisci la tua password.\",\n      email_subscriptions: \"Iscrizioni alle email\",\n      email_subscriptions_none: \"Nessuna iscrizione.\",\n      email_announcements: \"Annunci email\",\n      email_announcements_description: \"Ricevi email con le ultime novità e sviluppi di CodeCombat.\",\n      email_notifications: \"Notifiche email\",\n      email_notifications_summary: \"Controllo per le notifiche automatiche personalizzate sulla tua attività in CodeCombat.\",\n      email_any_notes: \"Nessuna notifica\",\n      email_any_notes_description: \"Blocca tutte le email di notifica.\",\n      email_news: \"Novità\",\n      email_recruit_notes: \"Lavora con noi\",\n      email_recruit_notes_description: \"Se sai giocare molto bene potremmo contattarti per offrirti un lavoro (migliore).\",\n      contributor_emails: \"Email dei collaboratori\",\n      contribute_prefix: \"Stiamo cercando persone che si uniscano al nostro gruppo! Dai un'occhiata alla \",\n      contribute_page: \"pagina dei collaboratori\",\n      contribute_suffix: \" per saperne di più.\",\n      email_toggle: \"Attiva tutti\",\n      error_saving: \"Errore durante il salvataggio\",\n      saved: \"Modifiche salvate\",\n      password_mismatch: \"La password non corrisponde.\",\n      password_repeat: \"Ripeti la tua password.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Scorciatoie da tastiera\",\n      space: \"Spazio\",\n      enter: \"Invio\",\n      press_enter: \"premi invio\",\n      escape: \"Esc\",\n      shift: \"Maiusc\",\n      run_code: \"Esegui codice attuale.\",\n      run_real_time: \"Esegui in tempo reale.\",\n      continue_script: \"Continua dopo lo script attuale.\",\n      skip_scripts: \"Salta tutti gli script saltabili.\",\n      toggle_playback: \"Gioca/Pausa.\",\n      scrub_playback: \"Scorri avanti/indietro nel tempo.\",\n      single_scrub_playback: \"Scorri avanti/indietro di un singolo passo.\",\n      toggle_debug: \"Attiva/disattiva schermo debug.\",\n      toggle_grid: \"Attiva/disattiva griglia.\",\n      toggle_pathfinding: \"Attiva/disattiva sovrimpressione percorso.\",\n      beautify: \"Rendi ordinato il codice sistemando la formattazione.\",\n      maximize_editor: \"Ingrandisci/rimpicciolisci l'editor di programmazione.\"\n    },\n    community: {\n      main_title: \"Comunità CodeCombat\",\n      introduction: \"Guarda qui sotto in quali modi puoi essere parte del progetto e decidi cosa suona più divertente. Non vediamo l'ora di lavorare con te!\",\n      level_editor_prefix: \"Usa il\",\n      level_editor_suffix: \"di CodeCombat per creare e modificare livelli. Gli utenti hanno creato livelli per le proprie classi, amici, hackathon, studenti e famiglie. Se credi che creare un livello sia troppo impegnativo puoi cominciare modificando uno dei nostri!\",\n      thang_editor_prefix: \"Chiamiamo le unità di gioco 'thang'. Usa il\",\n      thang_editor_suffix: \"per modificare le risorse di CodeCombat. Permetti alle unità di lanciare oggetti, altera la direzione di un'animazione, modifica i punti danno di un'unità, oppure carica i tuoi sprite vettoriali.\",\n      article_editor_prefix: \"Hai trovato un errore in uno dei nostri documenti? Vuoi creare delle istruzioni per una delle tue creazioni? Vai a\",\n      article_editor_suffix: \"e aiuta i giocatori di CodeCombat ad ottenere il massimo mentre giocano a programmare.\",\n      find_us: \"Dove trovarci\",\n      social_github: \"Esplora tutto il nostro codice su GitHub\",\n      social_blog: \"Leggi il blog di CodeCombat su Sett\",\n      social_discource: \"Partecipa alle discussioni nel nostro forum Discourse\",\n      social_facebook: \"Metti 'mi piace' a CodeCombat su Facebook\",\n      social_twitter: \"Segui CodeCombat su Twitter\",\n      social_gplus: \"Unisciti a CodeCombat su Google+\",\n      contribute_to_the_project: \"Contribuisci al progetto\"\n    },\n    clans: {\n      clan: \"Clan\",\n      clans: \"Clan\",\n      new_name: \"Nome nuovo clan\",\n      new_description: \"Descrizione nuovo clan\",\n      make_private: \"Rendi clan privato\",\n      subs_only: \"solo per abbonati\",\n      create_clan: \"Crea nuovo clan\",\n      private_preview: \"Anteprima\",\n      private_clans: \"Clan privati\",\n      public_clans: \"Clan pubblici\",\n      my_clans: \"I miei clan\",\n      clan_name: \"Nome clan\",\n      name: \"Nome\",\n      chieftain: \"Capoclan\",\n      edit_clan_name: \"Modifica nome clan\",\n      edit_clan_description: \"Modifica descrizione clan\",\n      edit_name: \"modifica nome\",\n      edit_description: \"modifica descrizione\",\n      \"private\": \"(privato)\",\n      summary: \"Riassunto\",\n      average_level: \"Livello medio\",\n      average_achievements: \"Numero medio di Imprese\",\n      delete_clan: \"Elimina clan\",\n      leave_clan: \"Lascia clan\",\n      join_clan: \"Unisciti al clan\",\n      invite_1: \"Invita:\",\n      invite_2: \"*Invita dei giocatori ad unirsi a questo clan mandandogli questo link.\",\n      members: \"Membri\",\n      progress: \"Progressi\",\n      not_started_1: \"non avviato\",\n      started_1: \"avviato\",\n      complete_1: \"finito\",\n      exp_levels: \"Espandi livelli\",\n      rem_hero: \"Rimuovi eroe\",\n      status: \"Stato\",\n      complete_2: \"Completo\",\n      started_2: \"Cominciato\",\n      not_started_2: \"Non cominciato\",\n      view_solution: \"Clicca per vedere la soluzione.\",\n      view_attempt: \"Clicca per vedere il tentativo.\",\n      latest_achievement: \"Ultima impresa\",\n      playtime: \"Tempo di gioco\",\n      last_played: \"Ultima partita\",\n      leagues_explanation: \"Gioca in una squadra contro altri membri del clan in queste arene multiplayer.\",\n      track_concepts2a: \"appreso da ogni studente\",\n      track_concepts2b: \"appreso da ogni membro\",\n      track_concepts3a: \"Traccia livelli completati da ogni studente\",\n      track_concepts3b: \"Traccia livelli completati da ogni membro\",\n      track_concepts4a: \"Visualizza i tuoi studenti'\",\n      track_concepts4b: \"Visualizza i tuoi membri'\",\n      track_concepts5: \"soluzioni\",\n      track_concepts6a: \"Ordina studenti per nome o progresso\",\n      track_concepts6b: \"Ordina membri per nome o progresso\",\n      track_concepts7: \"Richiede un invito\",\n      track_concepts8: \"per entrare\",\n      private_require_sub: \"I Clan Privati richiedono un abbonamento per esser creati o per entrare.\"\n    },\n    courses: {\n      create_new_class: \"Crea una nuova classe\",\n      unnamed_class: \"Classe Senza Nome\",\n      edit_settings1: \"Modifica Impostazioni Classe\",\n      add_students: \"Aggiungi Studenti\",\n      stats: \"Statistiche\",\n      total_students: \"Studenti totali:\",\n      average_time: \"Tempo medio di gioco livello:\",\n      total_time: \"Tempo di gioco totale:\",\n      average_levels: \"Media livelli completati:\",\n      total_levels: \"Totale livelli completati:\",\n      students: \"Studenti\",\n      concepts: \"Concetti\",\n      play_time: \"Tempo di gioco:\",\n      completed: \"Completato:\",\n      enter_emails: \"Immetti le email degli sdutendi da invitare, una per linea\",\n      send_invites: \"Invia Inviti\",\n      number_programming_students: \"Numero di Studenti che programmano\",\n      number_total_students: \"Totale degli studenti nella Scuola/Sede\",\n      enroll: \"Iscrivi\",\n      enroll_paid: \"Studenti iscritti nei Corsi a pagamento\",\n      get_enrollments: \"Ottieni più licenze\",\n      change_language: \"Cambia la Lingua del Corso\",\n      switch_to: \"Passa A\",\n      back_classrooms: \"Ritorna alle mie classi\",\n      back_courses: \"Ritorna ai miei corsi\",\n      remove_student: \"rimuovi studente\",\n      student: \"Studente\",\n      teacher: \"Maestro\",\n      arena: \"Arena\",\n      available_levels: \"Livelli disponibili\",\n      ready_to_play: \"Pronto a giocare?\",\n      start_new_game: \"Avvia un nuovo gioco\",\n      play_now_learn_header: \"Gioca ora per imparare\",\n      my_classes: \"Le mie Classi\",\n      course_complete: \"Corso completato\",\n      start: \"Avvia\",\n      last_level: \"Ultimo Livello\",\n      not_you: \"Non sei tu?\",\n      continue_playing: \"Continua a giocare\",\n      option1_header: \"Invita gli studenti via Email\",\n      remove_student1: \"Rimuovi Studente\",\n      are_you_sure: \"Sei sicuro di volere rimuovere questo studente da questa classe?\",\n      select_level: \"Seleziona livello\",\n      play_level: \"Gioca Livello\",\n      concepts_covered: \"Concetti Approfonditi\",\n      language_select: \"Seleziona una lingua\",\n      language_cannot_change: \"La lingua non può essere cambiata una volta che uno studente entra in una classe.\",\n      avg_student_exp_select: \"Seleziona la migliore opzione\",\n      student_age_range_label: \"Intervallo Età Studente\",\n      student_age_range_younger: \"Meno di 6 anni\",\n      student_age_range_older: \"Più di 18 anni\",\n      student_age_range_to: \"a\",\n      create_class: \"Crea Classe\",\n      class_name: \"Nome Classe\"\n    },\n    classes: {\n      archmage_title: \"Arcimago\",\n      archmage_title_description: \"(Programmazione)\",\n      archmage_summary: \"Se sei uno sviluppatore interessato a programmare videogiochi educativi, diventa un Arcimago per aiutarci a costruire CodeCombat!\",\n      artisan_title: \"Artigiano\",\n      artisan_title_description: \"(Costruzione livelli)\",\n      artisan_summary: \"Crea e condividi livelli con cui far giocare i tuoi amici. Diventa un Artigiano per apprendere l'arte di insegnare agli altri a programmare!\",\n      adventurer_title: \"Avventuriero\",\n      adventurer_title_description: \"(Prova di gioco dei livelli)\",\n      adventurer_summary: \"Ottieni i nuovi livelli (anche quelli per abbonati) gratuitamente una settimana prima e aiutaci a scovare e sistemare i bug prima della pubblicazione!\",\n      scribe_title: \"Scriba\",\n      scribe_title_description: \"(Scrittura articoli)\",\n      scribe_summary: \"Del buon codice necessita di buona documentazione. Scrivi, modifica e migliora i documenti letti da milioni di giocatori in tutto il mondo.\",\n      diplomat_title: \"Diplomatico\",\n      diplomat_title_description: \"(Traduzione)\",\n      diplomat_summary: \"CodeCombat è localizzato in più di 45 lingue dai nostri Diplomatici. Aiutaci contribuendo con le tue traduzioni.\",\n      ambassador_title: \"Ambasciatore\",\n      ambassador_title_description: \"(Supporto)\",\n      ambassador_summary: \"Guida gli utenti del forum e dai consigli a coloro che hanno delle domande. I nostri Ambasciatori rappresentano CodeCombat nel mondo.\",\n      teacher_title: \"Insegnante\"\n    },\n    editor: {\n      main_title: \"Editor di CodeCombat\",\n      article_title: \"Modifica articolo\",\n      thang_title: \"Modifica Thang\",\n      level_title: \"Modifica Livello\",\n      course_title: \"Modifica Corso\",\n      achievement_title: \"Editor imprese\",\n      poll_title: \"Editor di sondaggi\",\n      back: \"Indietro\",\n      revert: \"Ripristina\",\n      revert_models: \"Ripristina Modelli\",\n      pick_a_terrain: \"Scegli un terreno\",\n      dungeon: \"Dungeon\",\n      indoor: \"Interno\",\n      desert: \"Deserto\",\n      grassy: \"Erboso\",\n      mountain: \"Montagna\",\n      glacier: \"Ghiacciaio\",\n      small: \"Piccolo\",\n      large: \"Grande\",\n      fork_title: \"Fai un fork di una nuova versione\",\n      fork_creating: \"Creo il Fork...\",\n      generate_terrain: \"Genera terreno\",\n      more: \"Altro\",\n      wiki: \"Wiki\",\n      live_chat: \"Chat Live\",\n      thang_main: \"Principale\",\n      thang_spritesheets: \"Spritesheets\",\n      thang_colors: \"Colori\",\n      level_some_options: \"Alcune opzioni?\",\n      level_tab_thangs: \"Thangs\",\n      level_tab_scripts: \"Script\",\n      level_tab_components: \"Componenti\",\n      level_tab_systems: \"Sistemi\",\n      level_tab_docs: \"Documentazione\",\n      level_tab_thangs_title: \"Thangs esistenti\",\n      level_tab_thangs_all: \"Tutti\",\n      level_tab_thangs_conditions: \"Condizioni iniziali\",\n      level_tab_thangs_add: \"Aggiungi thang\",\n      level_tab_thangs_search: \"Cerca thangs\",\n      add_components: \"Aggiungi Componenti\",\n      component_configs: \"Configurazioni componenti\",\n      config_thang: \"Doppio click per configurare un thang\",\n      \"delete\": \"Cancella\",\n      duplicate: \"Duplica\",\n      stop_duplicate: \"Ferma Duplicazione\",\n      rotate: \"Ruota\",\n      level_component_tab_title: \"Componenti esistenti\",\n      level_component_btn_new: \"Crea nuovo componente\",\n      level_systems_tab_title: \"Sistemi esistenti\",\n      level_systems_btn_new: \"Crea nuovo sistema\",\n      level_systems_btn_add: \"Aggiungi sistema\",\n      level_components_title: \"Torna all'elenco thangs\",\n      level_components_type: \"Tipo\",\n      level_component_edit_title: \"Modifica componente\",\n      level_component_config_schema: \"Schema di configurazione\",\n      level_system_edit_title: \"Modifica sistema\",\n      create_system_title: \"Crea nuovo sistema\",\n      new_component_title: \"Crea nuovo componente\",\n      new_component_field_system: \"Sistema\",\n      new_article_title: \"Crea un nuovo articolo\",\n      new_thang_title: \"Crea un nuovo tipo di Thang\",\n      new_level_title: \"Crea un nuovo livello\",\n      new_article_title_login: \"Accedi per creare un nuovo articolo\",\n      new_thang_title_login: \"Accedi per creare un nuovo tipo di Thang\",\n      new_level_title_login: \"Accedi per creare un nuovo livello\",\n      new_achievement_title: \"Crea una nuova Impresa\",\n      new_achievement_title_login: \"Accedi per creare una nuova Impresa\",\n      new_poll_title: \"Crea un nuovo sondaggio\",\n      new_poll_title_login: \"Accedi per creare un nuovo sondaggio\",\n      article_search_title: \"Cerca articoli qui\",\n      thang_search_title: \"Cerca tipi di Thang qui\",\n      level_search_title: \"Cerca livelli qui\",\n      achievement_search_title: \"Cerca Imprese\",\n      poll_search_title: \"Cerca sondaggi\",\n      read_only_warning2: \"Nota: non puoi salvare nessuna modifica qui, perchè non hai effettuato l'accesso al sito.\",\n      no_achievements: \"Nessuna impresa è stata aggiunta a questo livello finora.\",\n      level_completion: \"Completamento livello\",\n      pop_i18n: \"Popola I18N\",\n      tasks: \"Lavori\",\n      clear_storage: \"Cancella le i tuoi cambiamenti locali\",\n      add_system_title: \"Aggiungi Sistemi al Livello\",\n      done_adding: \"Aggiunta completata\"\n    },\n    article: {\n      edit_btn_preview: \"Anteprima\",\n      edit_article_title: \"Modifica articolo\"\n    },\n    polls: {\n      priority: \"Priorità\"\n    },\n    contribute: {\n      page_title: \"Contribuire\",\n      intro_blurb: \"CodeCombat è al 100% open source! Centinaia di giocatori appassionati ci hanno aiutati a rendere il gioco quello che è oggi. Unisciti a noi e scrivi il prossimo capitolo nella missione di CodeCombat per insegnare al mondo a programmare!\",\n      alert_account_message_intro: \"Ehilà!\",\n      alert_account_message: \"Per iscriverti alle email dei corsi, ti serve aver fatto il login!\",\n      archmage_introduction: \"Una delle parti più divertenti della creazione di giochiè che sono in grado di unire tante cose insieme. Grafica, suono, connessioni in real time, social networks, ed ovviamente molti degli aspetti della programmazione, dall'amministazione di basso livello a quella dei server, passando per il design lato utente e lo sviluppo di interfacce. C'è un sacco da fare e, se sei un programmatore esperto con la voglia di immergerti nei meandri di CodeCombat, questo corso potrebbe essere per te. Ci piacerebbe poter avere il tuo aiuto per costruire il miglior gioco di programmazione mai realizzato finora.\",\n      class_attributes: \"Attributi di classe\",\n      archmage_attribute_1_pref: \"Conoscenza di \",\n      archmage_attribute_1_suf: \", o voglia di imparare. Gran parte del nostro codice è in questo linguaggio. Se sei un fan di Ruby o Python, ti sentirai a casa. E' come il Javascript, ma con una sintassi più carina.\",\n      archmage_attribute_2: \"Dell'esperienza nella programmazione ed un po' di iniziativa personale. Ti aiuteremo ad orientarti, ma non possiamo spender troppo tempo nella tua formazine.\",\n      how_to_join: \"Come unirsi\",\n      join_desc_1: \"Tutti possono aiutare! Puoi dare un occhio al nostro \",\n      join_desc_2: \"per iniziare, e controllare la tabella sottostante per segnarti come coraggioso Arcimago ed ottenere le news più recenti per email. Vuoi fare quattro chiacchiere su cosa fare o vuoi essere coinvolto maggiormente? \",\n      join_desc_3: \", o vieni a trovarci nel nostro \",\n      join_desc_4: \"e cominceremo da lì a collaborare!\",\n      join_url_email: \"Scrivici\",\n      join_url_slack: \"canale Slack pubblico\",\n      archmage_subscribe_desc: \"Ricevi le email sulle nuove opportunità di sviluppo e sugli ultimi aggiornamenti.\",\n      artisan_introduction_pref: \"Dobbiamo costruire nuovi livelli! La gente chide sempre nuovi contenuti, e non possiamo costruirne così tanti e così tanto velocemente da soli. Per ora la tua workstation è al livello uno; il nostro editor di livelli è a malapena usabile persino dai suoi creatori, quindi fai attenzione. Se hai idee per campanie che richiedano cicli for per\",\n      artisan_introduction_suf: \", allora beh, questo corso potrebbe fare per te.\",\n      artisan_attribute_1: \"Qualunque esperienza nella costruzione di contenuti come questo andrebbero bene, così come l'uso dell'editor di livelli della Blizzard. Ehi, non è strettamente necessario però!\",\n      artisan_attribute_2: \"Una voglia matta di fare un sacco di testing e ripetere. Per fare dei buoni livelli, devi mostrarli ad altri e guardarli giocare, ed esser preparato a trovare un sacco di cose da correggere.\",\n      artisan_attribute_3: \"Per la maggior parte del tempo, collaborerai con un Avventuriero. Il nostro Editor di Livelli è ad uno stadio super preliminare ed è frustrante da usare. Sei stato avvertito!\",\n      artisan_join_desc: \"Usa l'Editor di Livelli più o meno seguendo questi passi:\",\n      artisan_join_step1: \"Leggi la documentazione.\",\n      artisan_join_step2: \"Crea un nuovo livello ed esplora quelli già esistenti.\",\n      artisan_join_step3: \"Vienici a trovare nel nostro canale pubblico su Slack per aiuto.\",\n      artisan_join_step4: \"Pubblica il tuo livello sul forum per sapere cosa ne pensano altre persone.\",\n      artisan_subscribe_desc: \"Ricevi email sugli aggiornamenti dell'Editor di Livelli e le ultime news.\",\n      adventurer_introduction: \"Cerchiamo di esser chiari sul tuo ruolo: sei la carne da macello. Finirai per ricevere grossi attacchi. Ci occcorrono persone per provare i nostri livelli nuovi di zecca ed aiutarci ad identificare come possiamo migliorare le cose. Il dolore sarà immenso; fare buoni giochi è un processo molto lungo e nessuno ci riesce al primo colpo. Se puoi resistere ed hai un buon punteggio costituzione, allora questo corso potrebbe fare per te.\",\n      adventurer_attribute_1: \"Una sete di conoscenza. Vuoi imparare come programmare e noi vogliamo insegnarti esattamente questo. Probabilmente, tuttavia, sarai tu ad insegnare perlopiù.\",\n      adventurer_attribute_2: \"Carismatico. Sii gentile ma preciso in quel che occorre migliorare, e cerca di offrire dei suggerimenti su come migliorare.\",\n      adventurer_join_pref: \"Puoi sia giocare che reclutare un Artigiano e lavorare con loro, o spuntare il box qui sotto per ricevere email quando ci saranno nuovi livelli da testare. Invieremo anche nuovi sondaggi per controllare le nostre reti o i nostri siti come\",\n      adventurer_forum_url: \"il nostro forum\",\n      adventurer_join_suf: \"quindi, se preferisci essere informato di queste cose, iscriviti qui!\",\n      adventurer_subscribe_desc: \"Ricevi email quando ci sono nuovi livelli da testare.\",\n      scribe_introduction_pref: \"CodeCombat non sarà solo un accrocco di livelli. Includerà anche risorse per imparare, un wiki di concetti di programmazione su cui i livelli potranno appoggiarsi. In questo modo, piuttosto che lasciare ad un Artigiano il compito di spiegare cos'è una comparazione, si potrà semplicemente fare un link all'Articolo che descrive quel che è già stato scritto per la crescita del giocatore. Qualcosa tra le righe di quel che la \",\n      scribe_introduction_url_mozilla: \"Rete di sviluppo di Mozilla\",\n      scribe_introduction_suf: \" ha costruito. Se la tua idea di divertimento è descrivere i concetti della programmazione usando Markdown, allora questo corso fa per te.\",\n      scribe_attribute_1: \"Capacità di spiegare a parole è più o meno tutto quello che ti serve. Non solo grammatica e scrittura, ma anche la capacità di insegnare con parole semplici idee e concetti complessi agli studenti.\",\n      contact_us_url: \"Contattaci\",\n      scribe_join_description: \"dicci qualcosa di te stesso, la tua esperienza con la programmazione, e che di che tipo di cose ti piacerebbe scrivere. Cominciamo da qui!\",\n      scribe_subscribe_desc: \"Ricevi email sugli allunci di scrittura di articoli.\",\n      diplomat_introduction_pref: \"Se c'è una cosa che abbiamo imparato dal \",\n      diplomat_launch_url: \"lancio di ottobre\",\n      diplomat_introduction_suf: \"è che c'è un notevole interesse per CodeCombat negli altri paesi, in particolare in Brasile! Stiamo costruendo un corpo di traduttori per trasformare liste di parole in altre parole, per rendere CodeCombat accessibile il più possibile in tutto il mondo. Se ti piace l'idea di sbirciare nei contenuti futuri e di portare questi livelli ai tuoi connazionali il più presto possibile, questa categoria potrebbe essere la tua.\",\n      diplomat_attribute_1: \"Competenza in inglese e nella lingua in cui vorresti tradurre. Per trasferire idee complesse è importante avere una solida capacità in entrambe!\",\n      diplomat_i18n_page_prefix: \"Puoi iniziare a tradurre i livelli andando alla nostra\",\n      diplomat_i18n_page: \"pagina traduzioni\",\n      diplomat_i18n_page_suffix: \", o sulla nostra interfaccia e sito su GitHub.\",\n      diplomat_join_pref_github: \"Trova il file della tua lingua \",\n      diplomat_github_url: \"su GitHub\",\n      diplomat_join_suf_github: \", modificalo online e invia una richiesta di pull. Ricordati di spuntare la casella qui sotto per essere aggiornato sugli sviluppi delle traduzioni!\",\n      diplomat_subscribe_desc: \"Ricevi messaggi email sullo sviluppo i18n e i livelli da tradurre.\",\n      ambassador_introduction: \"Stiamo costruendo questa comunità, e voi siete i collegamenti. Abbiamo chat Olark, email e reti sociali con tanta gente con cui parlare ed aiutare a familiarizzare con il gioco, e da cui imparare. Se vuoi aiutare le persone a farsi coinvolgere e a divertirsi; se sei entrato nello spirito di CodeCombat e di dove stiamo andando, questa categoria può essere per te.\",\n      ambassador_attribute_1: \"Capacità di comunucazione. Esser capace di identificare i problemi che stanno avendo i giocatori e risolverli. Ed anche, tra l'altro, mantenere noi altri aggiornati su quel che i giocatori stanno dicendo, quel che gli piace, e quel che più vorrebbero!\",\n      ambassador_join_desc: \"dicci un po' di te stesso, cos'hai fatto, e cosa ti piacerebbe fare. Cominciamo da qui!\",\n      ambassador_join_note_strong: \"Nota\",\n      ambassador_join_note_desc: \"Una delle nostre prirità maggiori è costruire la parte multiplayer in cui i giocatori che stanno avendo difficoltà a completare un livello possano chiedere aiuto ad altri maghi del software. Questo sarebbe un buon modo per un ambasciatore per fare il proprio lavoro. Ti faremo sapere!\",\n      ambassador_subscribe_desc: \"Ricevere email di aggiornamento sul supporto e sullo sviluppo del multiplayer.\",\n      teacher_subscribe_desc: \"Ricevere email su aggiornamenti e annunci per insegnanti.\",\n      changes_auto_save: \"Le modifiche vengono salvate automaticamente quando si segnano le caselle.\",\n      diligent_scribes: \"I nostri diligenti scribi:\",\n      powerful_archmages: \"I nostri potenti arcimaghi:\",\n      creative_artisans: \"I nostri creativi artigiani:\",\n      brave_adventurers: \"I nostri coraggiosi avventurieri:\",\n      translating_diplomats: \"I nostri poliglotti diplomatici:\",\n      helpful_ambassadors: \"I nostri servizievoli ambasciatori:\"\n    },\n    ladder: {\n      my_matches: \"Le mie partite\",\n      simulate: \"Simula\",\n      simulation_explanation: \"Simulando le partite, la tua partita potrà essere classificata più velocemente!\",\n      simulation_explanation_leagues: \"Principalmente, aiuterai a simulare giochi per gli alleati nei tuoi clan e nei tuoi corsi.\",\n      simulate_games: \"Simula partite!\",\n      games_simulated_by: \"Partite simulate da te:\",\n      games_simulated_for: \"Partite simulate per te:\",\n      games_in_queue: \"Giochi correntemente in coda:\",\n      games_simulated: \"Partite simulate\",\n      games_played: \"Partite giocate\",\n      ratio: \"Rapporto\",\n      leaderboard: \"Classifica\",\n      battle_as: \"Combatti con \",\n      summary_your: \"Le tue \",\n      summary_matches: \"Partite - \",\n      summary_wins: \" vittorie, \",\n      summary_losses: \" sconfitte\",\n      rank_no_code: \"Nessun nuovo codice da valutare\",\n      rank_my_game: \"Valuta la mia partita!\",\n      rank_submitting: \"Inviando...\",\n      rank_submitted: \"Inviato per essere valutato\",\n      rank_failed: \"Impossibile valutare\",\n      rank_being_ranked: \"La partita è in valutazione.\",\n      rank_last_submitted: \"inviata \",\n      help_simulate: \"Aiutare a simulare partite?\",\n      code_being_simulated: \"Il tuo nuovo codice sarà simulato da altri giocatori per essere valutato. Sarà aggiornato ad ogni nuova partita.\",\n      no_ranked_matches_pre: \"Nessuna partita valutata per \",\n      no_ranked_matches_post: \" squadra! Gioca contro altri avversari e poi torna qui affinchè la tua partita venga valutata.\",\n      choose_opponent: \"Scegli un avversario\",\n      select_your_language: \"Scegli il linguaggio!\",\n      tutorial_play: \"Gioca il Tutorial\",\n      tutorial_recommended: \"Consigliato se questa è la tua primissima partita\",\n      tutorial_skip: \"Salta il Tutorial\",\n      tutorial_not_sure: \"Non sei sicuro di quello che sta accadendo?\",\n      tutorial_play_first: \"Prima di tutto gioca al Tutorial.\",\n      simple_ai: \"IA semplice\",\n      warmup: \"Allenamento\",\n      friends_playing: \"Amici Giocando\",\n      log_in_for_friends: \"Accedi per giocare con i tuoi amici!\",\n      social_connect_blurb: \"Connettiti e gioca contro i tuoi amici!\",\n      invite_friends_to_battle: \"Invita i tuoi amici a unirsi a te nella battaglia!\",\n      fight: \"Combatti!\",\n      watch_victory: \"Guarda la tua vittoria\",\n      defeat_the: \"Sconfiggi il\",\n      watch_battle: \"Guarda la battaglia\",\n      tournament_started: \", ha cominciato\",\n      tournament_ends: \"Torneo conclude\",\n      tournament_ended: \"Torneo concluso\",\n      tournament_rules: \"Regole torneo\",\n      tournament_blurb: \"Scrivi codice, ricevi oro, costruisci armate, schiaccia i nemici, vinci premi, ed aggiona la tua carriera nel nostro torneo da $40,000 dollari! Leggi i dettagli\",\n      tournament_blurb_criss_cross: \"Vinci aste, costruisci percorsi, vinci con astuzia gli avversari, afferra gemme, ed aggiorna la tua carriera nel nostro  torneo di Criss-Cross! Leggi i dettagli\",\n      tournament_blurb_zero_sum: \"Scatena la tua creatività di programmazione sia nella raccolta di oro che nelle tattiche da battaglia in questo incontro alpino tra stregone rosso e stregone blu. Il torneo inizia venerdì 27 Marzo e continua fino a lunedì 6 Aprile, alle 17 PDT. Partecipa per divertimento e per la gloria. Leggi i dettagli\",\n      tournament_blurb_ace_of_coders: \"Combatti nel glaciaio ghiacciato in questa sfida di dominazione! Il torneo inizia mercoledì 16 Settembre e continua fino a mercoledì 14 Ottobre, alle 17 PDT. Leggi i dettagli\",\n      tournament_blurb_blog: \"nel nostro blog\",\n      rules: \"Regole\",\n      winners: \"Vincitori\",\n      league: \"Serie\",\n      red_ai: \"IA Rossa\",\n      blue_ai: \"IA Blu\",\n      wins: \"Vince\",\n      humans: \"Rosso\",\n      ogres: \"Blu\"\n    },\n    user: {\n      stats: \"Statistiche\",\n      singleplayer_title: \"Livelli singoli\",\n      multiplayer_title: \"Livelli multigiocatore\",\n      achievements_title: \"Imprese\",\n      last_played: \"Ultimo giocato\",\n      status: \"Stato\",\n      status_completed: \"Completati\",\n      status_unfinished: \"Incompleti\",\n      no_singleplayer: \"Nessun livello singolo giocato finora.\",\n      no_multiplayer: \"Nessun livello multigiocatore giocato finora.\",\n      no_achievements: \"Nessuna impresa finora.\",\n      favorite_prefix: \"Linguaggio preferito: \",\n      favorite_postfix: \".\",\n      not_member_of_clans: \"Non è ancora membro di un clan.\"\n    },\n    achievements: {\n      last_earned: \"Ultima compiuta\",\n      amount_achieved: \"Quantità\",\n      achievement: \"Impresa\",\n      current_xp_prefix: \"\",\n      current_xp_postfix: \" in totale\",\n      new_xp_prefix: \"\",\n      new_xp_postfix: \" guadagnati\",\n      left_xp_prefix: \"\",\n      left_xp_infix: \" fino al livello \",\n      left_xp_postfix: \"\"\n    },\n    account: {\n      payments: \"Pagamenti\",\n      prepaid_codes: \"Codici prepagati\",\n      purchased: \"Acquistato\",\n      subscription: \"Abbonamento\",\n      invoices: \"Fatture\",\n      service_apple: \"Apple\",\n      service_web: \"Web\",\n      paid_on: \"Pagato il\",\n      service: \"Servizio\",\n      price: \"Prezzo\",\n      gems: \"Gemme\",\n      active: \"Attivo\",\n      subscribed: \"Abbonato\",\n      unsubscribed: \"Non abbonato\",\n      active_until: \"Attivo fino al\",\n      cost: \"Costo\",\n      next_payment: \"Prossimo pagamento\",\n      card: \"Carta\",\n      status_unsubscribed_active: \"Non sei abbonato e non dovrai pagare, ma per ora il tuo account è attivo.\",\n      status_unsubscribed: \"Accedi a nuovi livelli, eroi, oggetti e gemme con un abbonamento a CodeCombat!\",\n      not_yet_verified: \"Non ancora verificato.\",\n      resend_email: \"Rimanda email\",\n      email_sent: \"Email spedita! Controlla la tua casella di posta.\",\n      verifying_email: \"Verificando il tuo indirizzo email...\",\n      successfully_verified: \"Hai verificato correttamente il tuo indirizzo email!\",\n      verify_error: \"Qualcosa è andato storto durante la verifica del tuo indirizzo email :(\"\n    },\n    account_invoices: {\n      amount: \"Valore in dollari statunitensi\",\n      declined: \"La tua carta è stata rifiutata.\",\n      invalid_amount: \"Per favore inserisci un valore in dollari statunitensi.\",\n      not_logged_in: \"Effettua il login o crea un account per accedere alle fatture.\",\n      pay: \"Paga fattura\",\n      purchasing: \"Sto acquistando...\",\n      retrying: \"Errore server, riprovo.\",\n      success: \"Pagato con successo. Grazie!\"\n    },\n    account_prepaid: {\n      purchase_code: \"Compra un codice abbonamento\",\n      purchase_code1: \"I codici abbonamento possono essere riscossi per aggiungere del tempo da un account CodeCombat con abbonamento premium.\",\n      purchase_code2: \"Ogni account CodeCombat può risquotere solo un codice abbonamento.\",\n      purchase_code3: \"I mesi dati dai codici abbonamento saranno aggiunti alla fine dell'abbonamento esistente su questo account.\",\n      users: \"Utenti\",\n      months: \"Mesi\",\n      purchase_total: \"Totale\",\n      purchase_button: \"Procedi al pagamento\",\n      your_codes: \"I tuoi codici\",\n      redeem_codes: \"Risquoti un codice abbonamento\",\n      prepaid_code: \"Codice Prepgato\",\n      lookup_code: \"Cerca un Codice Prepagato\",\n      apply_account: \"Aggiungi al tuo account\",\n      copy_link: \"Puoi copiare il link del codice ed inviarlo ad un tuo amico.\",\n      quantity: \"Quantità\",\n      redeemed: \"Riscosso\",\n      no_codes: \"Ancora nessun codice!\",\n      you_can1: \"Puoi\",\n      you_can2: \"acquistare un codice prepagato\",\n      you_can3: \"che può essere applciato al tuo account o dato ad un tuo amico.\"\n    },\n    loading_error: {\n      could_not_load: \"Errore nel caricamento dal server\",\n      connection_failure: \"Connessione fallita.\",\n      connection_failure_desc: \"Sembra che tu non sia connesso ad Internet! Controlla la connessione e poi ricarica questa pagina.\",\n      login_required: \"Accesso Richiesto\",\n      login_required_desc: \"Devi essere loggato per avere accesso a questa pagina.\",\n      unauthorized: \"Devi avere eseguito l'accesso. Hai i cookie disabilitati?\",\n      forbidden: \"Non hai i permessi necessari.\",\n      forbidden_desc: \"Oh no, non c'è nulla da mostrare qui! Assicurati di essere loggato con l'account corretto, o visita uno dei link sotto per tornare a programmare!\",\n      not_found: \"Non trovato.\",\n      not_found_desc: \"Hm, qui non c'è nulla. Visita uno dei seguenti links per tornare a programmare!\",\n      not_allowed: \"Metodo non permesso.\",\n      timeout: \"Server timeout.\",\n      conflict: \"Conflitto di risorse.\",\n      bad_input: \"Errore input.\",\n      server_error: \"Errore server.\",\n      unknown: \"Errore sconosciuto.\",\n      error: \"ERRORE\",\n      general_desc: \"Qualcosa è andato storto, e probabilmente è colpa nostra. Prova ad aspettare un attimo e ricarica la pagina, altrimenti visita uno dei seguenti links per tornare a programmare!\"\n    },\n    resources: {\n      level: \"Livello\",\n      patch: \"Patch\",\n      patches: \"Patches\",\n      system: \"Sistema\",\n      systems: \"Sistemi\",\n      component: \"Componente\",\n      components: \"Componenti\",\n      hero: \"Eroe\",\n      campaigns: \"Campagne\"\n    },\n    concepts: {\n      \"arguments\": \"Argomenti\",\n      arithmetic: \"Aritmetica\",\n      array_2d: \"Array Bidimensionali\",\n      array_index: \"Indirizzamento di Array\",\n      array_searching: \"Ricerca in Array\",\n      array_sorting: \"Ordinamento di Array\",\n      arrays: \"Array\",\n      basic_css_rules: \"Regole CSS di base\",\n      basic_html_attributes: \"Attributi HTML di base\",\n      basic_html_tags: \"Tags HTML di base\",\n      basic_syntax: \"Sintassi di base\",\n      binary: \"Binario\",\n      boolean_and: \"Operatore Boolean And\",\n      boolean_not: \"Operatore Boolean Not\",\n      boolean_or: \"Operatore Booleano Or\",\n      bootstrap: \"Bootstrap\",\n      break_statements: \"Istruzioni di Break\",\n      classes: \"Classi\",\n      continue_statements: \"Istruzioni di Continue\",\n      for_loops: \"Cicli For\",\n      functions: \"Funzioni\",\n      graphics: \"Grafici\",\n      if_else_statements: \"Istruzioni If/Else\",\n      if_statements: \"Istruzioni If\",\n      jquery: \"jQuery\",\n      jquery_animations: \"Animazioni jQuery\",\n      length: \"Lunghezza Array\",\n      math_geometry: \"Geometria\",\n      math_operations: \"Operazioni Matematiche\",\n      math_trigonometry: \"Trigonometria\",\n      object_literals: \"Valori Letterali\",\n      parameters: \"Parametri\",\n      property_access: \"Accesso alle Proprietà\",\n      property_assignment: \"Assegnamento Proprietà\",\n      queues: \"Strutture Dati - Code\",\n      reading_docs: \"Leggendo la Documentazione\",\n      recursion: \"Ricorsione\",\n      return_statements: \"Istruzioni di ritorno\",\n      stacks: \"Strutture Dati - Stacks\",\n      strings: \"Stringhe\",\n      strings_concatenation: \"Concatenazione di Stringhe\",\n      strings_substrings: \"Sottostringhe\",\n      trees: \"Strutture Dati - Alberi\",\n      variables: \"Variabili\",\n      vectors: \"Vettori\",\n      while_condition_loops: \"Cicli While Condizionali\",\n      while_loops_simple: \"Cicli While\",\n      while_loops_nested: \"Cicli While Annidati\",\n      xy_coordinates: \"Coordinate Cartesiane\",\n      advanced_strings: \"Stringhe Avanzate\",\n      algorithms: \"Algoritmi\",\n      boolean_logic: \"Logica Booleana\",\n      basic_html: \"HTML di base\",\n      basic_css: \"Basic CSS di base\",\n      basic_web_scripting: \"Web Scripting di base\",\n      intermediate_html: \"HTML Intermedio\",\n      intermediate_css: \"CSS Intermedio\",\n      intermediate_web_scripting: \"Web Scripting Intermedio\",\n      advanced_html: \"HTML Avanzato\",\n      advanced_css: \"CSS Avanzato\",\n      advanced_web_scripting: \"Web Scripting Avanzato\",\n      input_handling: \"Gestione dell'Input\",\n      while_loops: \"Cicli\"\n    },\n    delta: {\n      added: \"Aggiunto\",\n      modified: \"Modificato\",\n      not_modified: \"Non Modificato\",\n      deleted: \"Cancellato\",\n      moved_index: \"Indice Spostato\",\n      text_diff: \"Differenza Testo\",\n      merge_conflict_with: \"FONDI CONFLITTO CON\",\n      no_changes: \"Nessun Cambiamento\"\n    },\n    legal: {\n      page_title: \"Questioni legali\",\n      opensource_description_prefix: \"Visita il \",\n      github_url: \"nostro GitHub\",\n      opensource_description_center: \"e aiutaci se vuoi! CodeCombat fa uso di molti progetti open-source, e a noi piacciono tutti. Vedi \",\n      archmage_wiki_url: \"la nostra wiki degli Arcimaghi\",\n      opensource_description_suffix: \"per trovare un elenco dei software che rendono possibile questo gioco.\",\n      practices_title: \"Linee guida per il rispetto\",\n      practices_description: \"Queste sono le promesse che facciamo a te, il giocatore, in linguaggio un po' meno formale.\",\n      privacy_title: \"Privacy\",\n      privacy_description: \"Non venderemo nessuna delle tue informazioni personali.\",\n      security_title: \"Sicurezza\",\n      security_description: \"Facciamo tutto il possibile per tenere sicure le tue informazioni. Essendo un progetto open source, il nostro sito permette liberamente a chiunque di controllare e migliorare i nostri sistemi di sicurezza.\",\n      email_title: \"Email\",\n      email_description_prefix: \"Non ti inonderemo di spam. Con le \",\n      email_settings_url: \"tue impostazioni email\",\n      email_description_suffix: \"o con i link contenuti nei messaggi puoi cambiare le tue preferenze o smettere di riceverli facilmente in qualsiasi momento.\",\n      cost_title: \"Costi\",\n      cost_description: \"Puoi giocare gratuitamente a tutti i livelli principali di CodeCombat, con un abbonamento di {{price}}$/mese per accedere a set di livelli extra e ottenere {{gems}} gemme al mese. Puoi annullare l'abbonamento con un click, e offriamo una garanzia di rimborso completo.\",\n      copyrights_title: \"Diritti e licenze\",\n      contributor_title: \"Accordo di licenza per i contributi (CLA)\",\n      contributor_description_prefix: \"Tutti i contributi, qui sul sito e sulla repository GitHub, sono soggetti al nostro\",\n      cla_url: \"CLA\",\n      contributor_description_suffix: \"al quale devi dare consenso prima di iniziare a collaborare.\",\n      code_title: \"Codice - MIT\",\n      mit_license_url: \"licenza MIT\",\n      code_description_suffix: \"Ciò comprende tutto il codice in Sistemi e Componenti che è reso disponibile da CodeCombat allo scopo di creare nuovi livelli.\",\n      art_title: \"Grafica/musica - Creative Commons\",\n      art_description_prefix: \"Tutti i contenuti comuni sono resi disponibili con la\",\n      cc_license_url: \"Creative Commons Attribution 4.0 International License\",\n      art_description_suffix: \"I contenuti comuni sono quelli resi disponibili da CodeCombat allo scopo di creare livelli. Ciò include:\",\n      art_music: \"Musica\",\n      art_sound: \"Suoni\",\n      art_artwork: \"Grafica\",\n      art_sprites: \"Sprite\",\n      art_other: \"Tutti gli altri lavori creativi di qualsiasi tipo - ma non codice - resi disponibili durante la creazione dei livelli.\",\n      art_access: \"Attualmente non c'è un modo semplice e unico di trovare queste risorse. In generale, li puoi trovare usando gli URL come fa il nostro sito. Oppure contattaci per assistenza, oppure aiutaci ad ampliare il sito per rendere le risorse più facilmente accessibili.\",\n      art_paragraph_1: \"Per l'attribuzione dei diritti, cita codecombat.com e metti un link nelle vicinanze della risorsa usata o dove è appropriato per il medium in questione.\",\n      use_list_1: \"Se usato in un video o in un altro gioco, inserire codecombat.com nei crediti.\",\n      use_list_2: \"Se usato in un sito, inserire un link vicino alla risorsa; ad esempio sotto un'immagine, oppure in una apposita pagina di crediti dove potresti anche menzionare altri lavori Creative Commons e programmi open source usati nel sito. Se qualcosa fa già chiaro riferimento a CodeCombat, ad esempio un testo di blog che cita CodeCombat, non è necessario attribuire i crediti separatamente.\",\n      art_paragraph_2: \"Se il contenuto utilizzato non è stato creato da CodeCombat ma da un utente di codecombat.com, attribuiscilo a lui e segui le indicazioni dei crediti contenute nella descrizione di quella risorsa (se ci sono).\",\n      rights_title: \"Diritti riservati\",\n      rights_desc: \"Per i livelli stessi, tutti i diritti sono riservati. Ciò comprende\",\n      rights_scripts: \"Script\",\n      rights_unit: \"Configurazione di unità di gioco\",\n      rights_writings: \"Testi\",\n      rights_media: \"Media (suoni, musica) ed altri contenuti creativi prodotti appositamente per quel livello e non messi a disposizione generale per la creazione dei livelli.\",\n      rights_clarification: \"Per chiarire, qualsiasi cosa sia messa a disposizione nell'Editor livelli allo scopo di creare livelli è in licenza CC, mentre i contenuti creati nell'Editor livelli o inviati nel corso della creazione non lo sono.\",\n      nutshell_title: \"In poche parole\",\n      nutshell_description: \"Qualsiasi risorsa che inseriamo nell'Editor livelli è di libero uso per la creazione dei livelli. Ci riserviamo però il diritto di limitare la distribuzione dei livelli stessi (creati su codecombat.com) che quindi potranno essere a pagamento in futuro, se questo è ciò che finirà per succedere.\",\n      canonical: \"La versione inglese di questo documento è quella definitiva a cui fare fede. Se ci sono discrepanze tra le traduzioni, la versione inglese ha la precedenza.\",\n      third_party_title: \"Servizi di Terze Parti\",\n      third_party_description: \"CodeCombat usa i seguenti servizi di terze parti (tra cui):\"\n    },\n    ladder_prizes: {\n      title: \"Premi torneo\",\n      blurb_1: \"Questi premi verranno consegnati in accordo con\",\n      blurb_2: \"le regole del torneo\",\n      blurb_3: \"ai migliori giocatori 'human' e 'ogre'.\",\n      blurb_4: \"Due team significa il doppio dei premi!\",\n      blurb_5: \"(Ci saranno due vincitori al primo posto, due vincitori al secondo posto ecc.)\",\n      rank: \"Classifica\",\n      prizes: \"Premi\",\n      total_value: \"Valore totale\",\n      in_cash: \"in denaro\",\n      custom_wizard: \"Stregone CodeCombat personalizzato\",\n      custom_avatar: \"Avatar CodeCombat personalizzato\",\n      heap: \"per sei mesi di accesso \\\"Startup\\\"\",\n      credits: \"crediti\",\n      one_month_coupon: \"coupon: scegli Rails o HTML\",\n      one_month_discount: \"sconto 30%: scegli Rails o HTML\",\n      license: \"licenza\",\n      oreilly: \"ebook a tua scelta\"\n    },\n    calendar: {\n      year: \"Anno\",\n      day: \"Giorno\",\n      month: \"Mese\",\n      january: \"Gennaio\",\n      february: \"Febbraio\",\n      march: \"Marzo\",\n      april: \"Aprile\",\n      may: \"Maggio\",\n      june: \"Giugno\",\n      july: \"Luglio\",\n      august: \"Agosto\",\n      september: \"Settembre\",\n      october: \"Ottobre\",\n      november: \"Novembre\",\n      december: \"Dicembre\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1059\n");

/***/ })

});