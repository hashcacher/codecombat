/*! hash:345dfe6c0e434e9c7378, chunkhash:016a9335f57f07ea55f5, name:locale/tr, filebase:tr.bundle.js, query:, file:javascripts/chunks/locale/tr.bundle.js */
webpackJsonp([23],{

/***/ 1084:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Türkçe\",\n  englishDescription: \"Turkish\",\n  translation: {\n    new_home: {\n      slogan: \"Programlama öğrenmek için en çekici oyun.\",\n      classroom_edition: \"Sınıf Sürümü:\",\n      learn_to_code: \"Kodlama öğren:\",\n      play_now: \"Şimdi Oyna\",\n      im_a_teacher: \"Ben bir öğretmenim\",\n      im_a_student: \"Ben bir öğrenciyim\",\n      learn_more: \"Daha fazla öğren\",\n      classroom_in_a_box: \"Bilgisayar bilimleri öğrenmek için kutuda bir sınıf.\",\n      codecombat_is: \"CodeCombat <strong>öğrenciler için</strong> hazırlanmış, gerçek bir oyun oynarken bilgisayar bilimleri öğrenmeyi sağlayan bir platformdur.\",\n      our_courses: \"Kurslarımız özellikle, önceden hiç programlama tecrübesi olmayan öğretmenler tarafından bile, oynanarak test edilmiştir.\",\n      top_screenshots_hint: \"Öğrenciler kodlar ve gelişimlerini gerçek zamanlı olarak güncellenerek görürler\",\n      designed_with: \"Öğretmenler düşünülerek tasarlanmıştır\",\n      real_code: \"Gerçek, yazılmış kod\",\n      from_the_first_level: \"ilk levelden itibaren\",\n      getting_students: \"Öğrencileri olabildiğince hızlı bir şekilde kodlamaya başlatmak, programlama sözdizimi ve uygun yapıları öğrenmesi için kritiktir.\",\n      educator_resources: \"Eğitim kaynakları\",\n      course_guides: \"ve kurs kılavuzları\",\n      teaching_computer_science: \"Bilgisayar bilimleri öğretmek pahalı bir diploma gerektirmez, çünkü her farklı geçmiş deneyimden öğretmeni desteklemek için araçlar sunuyoruz.\",\n      accessible_to: \"Erişilebilir\",\n      everyone: \"herkes\",\n      democratizing: \"Kodlamayı öğrenme işlemini demokratikleştirmek felsefemizin temelidir. Herkes kodlama öğrenebilmeli.\",\n      forgot_learning: \"Aslında birşeyler öğrenmeye çalıştıklarını unuttuklarını düşünüyorum.\",\n      wanted_to_do: \" Kodlama her zaman yapmak istediğim birşeydi ve hiçbir zaman bunu okulda öğrenebileceğimi düşünmemiştim.\",\n      why_games: \"Neden oyun ile öğrenmek önemlidir?\",\n      games_reward: \"Oyun üretken mücadeleyi ödüllendirir.\",\n      encourage: \"Oyun etkileşimi, keşfetmeyi ve deneme yanılmayı teşvik eden bir ortamdır. İyi bir oyun oyuncuya, zamanla yeteneklerinde ustalaşması için meydan okur, bu da öğrencinin öğrenirken geçirdiği kritik süreçler ile aynıdır.\",\n      excel: \"Oyunlar ödüllendirme için mükemmeldir\",\n      struggle: \"üretken mücadele\",\n      kind_of_struggle: \" öğrenmeye şunları katan bir mücadele: etkileşim ve\",\n      motivating: \"motive edici\",\n      not_tedious: \"sıkıcı değil.\",\n      gaming_is_good: \"Araştırmalar oyun oynamanın çocuğum beyin gelişimi için iyi olduğunu söyler. (Bu doğru!)\"\n    },\n    nav: {\n      play: \"Oyna\",\n      community: \"Topluluk\",\n      courses: \"Kurslar\",\n      blog: \"Blog\",\n      forum: \"Forum\",\n      account: \"Hesap\",\n      my_account: \"Hesabım\",\n      profile: \"Profil\",\n      home: \"Anasayfa\",\n      contribute: \"Katkıda bulun\",\n      legal: \"Yasal\",\n      privacy: \"Gizlilik\",\n      about: \"Hakkında\",\n      contact: \"İletişim\",\n      twitter_follow: \"Takip et\",\n      my_classrooms: \"Sınıflarım\",\n      my_courses: \"Kurslarım\",\n      careers: \"Kariyer\",\n      facebook: \"Facebook\",\n      twitter: \"Twitter\",\n      create_a_class: \"Bir sınıf oluştur\",\n      other: \"Diğer\",\n      learn_to_code: \"Kodlama öğren!\",\n      toggle_nav: \"Menü aç kapa\",\n      schools: \"Schools\",\n      get_involved: \"Katıl\",\n      open_source: \"Açık Kaynak (GitHub)\",\n      support: \"Destek\",\n      faqs: \"SSS\",\n      help_pref: \"Yardım mı lazım? Emaille\",\n      help_suff: \"ve bizimle irtibat kur!\"\n    },\n    modal: {\n      close: \"Kapat\",\n      okay: \"Tamam\"\n    },\n    not_found: {\n      page_not_found: \"Sayfa bulunamadı\"\n    },\n    diplomat_suggestion: {\n      title: \"CodeCombat'in tercüme edilmesine yardımcı olabilirsiniz!\",\n      sub_heading: \"Dil yeteneklerinize ihtiyacımız var.\",\n      pitch_body: \"Biz her ne kadar CodeCombat'i İngilizce olarak geliştirsek de, dünyanın her yerinden oyunculara sahibiz. Oyuncuların bir kısmı oyunu Türkçe oynamak istiyor ve İngilizce bilmiyor. Bu yüzden, eğer her iki dili de biliyorsanız, lütfen kaydolup bir Diplomat olmayı ve CodeCombat ile tüm seviyeleri Türkçe diline çevirmeyi göz önünde bulundurun.\",\n      missing_translations: \"Biz her şeyi Türkçe diline tercüme edene kadar, Türkçe diline tercüme edilemeyen her şey İngilizce olarak gözükecek.\",\n      learn_more: \"Diplomat olmakla ilgili dahası için...\",\n      subscribe_as_diplomat: \"Diplomat olarak katkıda bulun\"\n    },\n    play: {\n      play_as: \"Olarak Oyna\",\n      compete: \"Tamamla!\",\n      spectate: \"İzleyici olarak katıl\",\n      players: \"oyuncu\",\n      hours_played: \"saat oynandı\",\n      items: \"Ögeler\",\n      unlock: \"Kilidi aç\",\n      confirm: \"Devam et\",\n      owned: \"Sahipsin\",\n      locked: \"Kilitli\",\n      available: \"Açık\",\n      skills_granted: \"Edinilen Yetenekler\",\n      heroes: \"Kahramanlar\",\n      achievements: \"Başarımlar\",\n      settings: \"Ayarlar\",\n      poll: \"Anket\",\n      next: \"İleri\",\n      change_hero: \"Kahramanı Değiştir\",\n      buy_gems: \"Değerli Taş Satın Al\",\n      subscribers_only: \"Sadece Aboneler!\",\n      subscribe_unlock: \"Kilidini açmak için Abone ol!\",\n      anonymous: \"Anonim Oyuncu\",\n      level_difficulty: \"Zorluk: \",\n      awaiting_levels_adventurer_prefix: \"Haftada beş bölüm yayınlıyoruz.\",\n      awaiting_levels_adventurer: \"Yeni oyunları ilk oynayan olmak için\",\n      awaiting_levels_adventurer_suffix: \"Maceracı olarak kayıt ol.\",\n      adjust_volume: \"Sesi ayarla\",\n      campaign_multiplayer: \"Çok Oyunculu Meydanlar\",\n      campaign_multiplayer_description: \"Diğer oyuncularla kafa kafaya verip kodlamak için...\"\n    },\n    share_progress_modal: {\n      blurb: \"Harika iş çıkarıyorsun! Birine CodeCombat ile ne kadar öğrendiğinden bahset.\",\n      email_invalid: \"E-posta adresi geçersiz.\",\n      form_blurb: \"E-posta adreslerini aşağıya gir ve onlara göstereceğiz!\",\n      form_label: \"E-posta Adresi\",\n      placeholder: \"e-posta adresi\",\n      title: \"Harika İş, Çaylak\"\n    },\n    login: {\n      sign_up: \"Hesap Oluştur\",\n      email_or_username: \"E-posta veya kullanıcı adı\",\n      log_in: \"Giriş Yap\",\n      logging_in: \"Giriş Yapılıyor\",\n      log_out: \"Çıkış Yap\",\n      forgot_password: \"Parolanı mı unuttun?\",\n      finishing: \"Tamamlanıyor\",\n      sign_in_with_facebook: \"Facebook ile Oturum Aç\",\n      sign_in_with_gplus: \"G+ ile Oturum Aç\",\n      signup_switch: \"Hesap oluşturmak istiyor musun?\"\n    },\n    signup: {\n      create_student_header: \"Öğrenci Hesabı Oluştur\",\n      create_teacher_header: \"Öğretmen Hesabı Oluştur\",\n      create_individual_header: \"Bireysel Hesap Oluştur\",\n      email_announcements: \"E-posta duyurularını almak istiyorum\",\n      creating: \"Hesap oluşturuluyor...\",\n      sign_up: \"Kaydol\",\n      log_in: \"buradan giriş yapabilirsiniz.\",\n      required: \"Buraya gidebilmeniz için oturum açmanız gerekli.\",\n      login_switch: \"Zaten bir hesabın var mı?\",\n      optional: \"isteğe bağlı\",\n      connected_gplus_header: \"Google+ ile başarıyla bağlandın!\",\n      connected_gplus_p: \"Kayıt işlemini bitir, artık Google+ hesabınla giriş yapabilirsin.\",\n      connected_facebook_header: \"Facebook ile başarı ile bağlandın!\",\n      connected_facebook_p: \"Kayıt işlemini bitir, artık Facebook hesabınla giriş yapabilirsin.\",\n      hey_students: \"Öğrenciler, öğretmeninizin verdiği sınıf kodunu girin.\",\n      birthday: \"Doğum günü\",\n      checking: \"Kontrol ediliyor...\",\n      sign_in: \"Oturum aç\",\n      email_good: \"E-posta iyi görünüyor!\",\n      name_available: \"Kullanıcı adı müsait!\",\n      choose_type: \"Hesabınızın türünü seçin:\",\n      signup_as_teacher: \"Öğretmen olarak Kaydol\",\n      student_type_1: \"İlgi çekici bir oyun oynarken program öğren!\",\n      student_type_2: \"Sınıfınla oyna\",\n      student_type_3: \"Arenalarda rekabet et\",\n      student_type_4: \"Kahramanını seç!\",\n      signup_as_student: \"Öğrenci olarak Kaydol\",\n      signup_as_individual: \"Bireysel olarak Kaydol\",\n      enter_class_code: \"Sınıf Kodunu Gir\",\n      enter_birthdate: \"Doğum tarihini gir:\",\n      ask_teacher_1: \"Sınıf kodun için öğretmenine sor.\",\n      ask_teacher_3: \"Bireysel Hesap\",\n      account_created: \"Hesap Oluşturuldu!\",\n      start_playing: \"Oynamaya Başla!\"\n    },\n    recover: {\n      recover_account_title: \"Hesabı Kurtar\",\n      send_password: \"Kurtarma Parolası Gönder\",\n      recovery_sent: \"Kurtarma e-postası gönderildi.\"\n    },\n    items: {\n      primary: \"Birincil\",\n      secondary: \"İkincil\",\n      armor: \"Zırh\",\n      accessories: \"Aksesuarlar\",\n      misc: \"Çeşitli\",\n      books: \"Kitaplar\"\n    },\n    common: {\n      back: \"Geri\",\n      coming_soon: \"Çok yakında!\",\n      \"continue\": \"Devam et\",\n      default_code: \"Varsayılan Kod\",\n      loading: \"Yükleniyor...\",\n      overview: \"Genel bakış\",\n      solution: \"Çözüm\",\n      intro: \"Giriş\",\n      saving: \"Kaydediliyor...\",\n      sending: \"Gönderiliyor...\",\n      send: \"Gönder\",\n      sent: \"Gönderildi\",\n      cancel: \"İptal\",\n      save: \"Kaydet\",\n      publish: \"Yayınla\",\n      create: \"Oluştur\",\n      fork: \"Çatalla\",\n      play: \"Oyna\",\n      retry: \"Yeniden Dene\",\n      actions: \"Eylemler\",\n      info: \"Bilgi\",\n      help: \"Yardım\",\n      watch: \"İzle\",\n      unwatch: \"İzlemeyi Bırak\",\n      submit_patch: \"Yama Gönder\",\n      submit_changes: \"Değişiklikleri Gönder\",\n      save_changes: \"Değişiklikleri Kaydet\",\n      required_field: \"gerekli\"\n    },\n    general: {\n      and: \"ve\",\n      name: \"İsim\",\n      date: \"Tarih\",\n      body: \"Gövde\",\n      version: \"Sürüm\",\n      pending: \"Bekliyor\",\n      accepted: \"Kabul Edildi\",\n      rejected: \"Reddedildi\",\n      withdrawn: \"İptal Edildi\",\n      accept: \"Kabul Et\",\n      reject: \"Reddet\",\n      withdraw: \"Ayrıl\",\n      submitter: \"Gönderen\",\n      submitted: \"Gönderilme\",\n      commit_msg: \"Gönderme İletisi\",\n      version_history: \"Geçmiş\",\n      version_history_for: \"Sürüm Geçmişi: \",\n      select_changes: \"Farkı görmek için aşağıdan iki fark seçin.\",\n      undo_prefix: \"Geri Al\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Yenile\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Geçerli bölümün önizlemesini oyna\",\n      result: \"Sonuç\",\n      results: \"Sonuçlar\",\n      description: \"Açıklama\",\n      or: \"veya\",\n      subject: \"Konu\",\n      email: \"E-posta\",\n      password: \"Şifre\",\n      confirm_password: \"Şifreyi Onayla\",\n      message: \"İleti\",\n      code: \"Kod\",\n      ladder: \"Merdiven\",\n      when: \"iken\",\n      opponent: \"Rakip\",\n      rank: \"Sıra\",\n      score: \"Skor\",\n      win: \"Zafer\",\n      loss: \"Yenilgi\",\n      tie: \"Berabere\",\n      easy: \"Kolay\",\n      medium: \"Normal\",\n      hard: \"Zor\",\n      player: \"Oyuncu\",\n      player_level: \"Seviye\",\n      warrior: \"Savaşçı\",\n      ranger: \"Korucu\",\n      wizard: \"Sihirbaz\",\n      username: \"Kullanıcı adı\",\n      contact_us: \"Bizimle iletişime geç\",\n      close_window: \"Pencereyi Kapat\",\n      learn_more: \"Daha fazla bilgi edin\"\n    },\n    units: {\n      second: \"saniye\",\n      seconds: \"saniye\",\n      minute: \"dakika\",\n      minutes: \"dakika\",\n      hour: \"saat\",\n      hours: \"saat\",\n      day: \"gün\",\n      days: \"gün\",\n      week: \"hafta\",\n      weeks: \"hafta\",\n      month: \"ay\",\n      months: \"ay\",\n      year: \"yıl\",\n      years: \"yıl\"\n    },\n    play_level: {\n      completed_level: \"Seviyeyi Tamamladın:\",\n      course: \"Kurs:\",\n      done: \"Bitti\",\n      next_level: \"Sonraki Seviye:\",\n      next_game: \"Sonraki Oyun\",\n      show_menu: \"Oyun Menüsünü Göster\",\n      home: \"Anasayfa\",\n      level: \"Bölüm\",\n      skip: \"Atla\",\n      game_menu: \"Oyun Menüsü\",\n      restart: \"Yeniden başlat\",\n      goals: \"Hedefler\",\n      goal: \"Amaç\",\n      running: \"Çalıştırılıyor...\",\n      success: \"Başarılı!\",\n      incomplete: \"Tamamlanmamış\",\n      timed_out: \"Süre bitti\",\n      failing: \"Başarısız\",\n      reload: \"Yeniden Yükle\",\n      reload_title: \"Tüm kod yeniden yüklensin mi?\",\n      reload_really: \"Bu seviyeyi en baştan yüklemek istediğinizden emin misiniz?\",\n      reload_confirm: \"Tümünü Yeniden Yükle\",\n      victory: \"Zafer\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \"Tamamlandı \",\n      victory_sign_up: \"İlerlemeyi Kaydetmek için Kaydolun\",\n      victory_sign_up_poke: \"Kodu kaydetmek ister misiniz? Ücretsiz bir hesap oluşturun!\",\n      victory_rate_the_level: \"Seviyeyi oyla:\",\n      victory_return_to_ladder: \"Merdivene Dön\",\n      victory_saving_progress: \"İlerleme Kaydediliyor\",\n      victory_go_home: \"Anasayfaya Git\",\n      victory_review: \"Daha fazla söyleyin!\",\n      victory_review_placeholder: \"Seviye nasıldı?\",\n      victory_hour_of_code_done: \"Bitirdiniz mi?\",\n      victory_hour_of_code_done_yes: \"Evet, Kod Saatimi (Hour of Code) bitirdim!\",\n      victory_experience_gained: \"Kazanılan XP\",\n      victory_gems_gained: \"Kazanılan Taş\",\n      victory_new_item: \"Yeni Öğe\",\n      victory_become_a_viking: \"Viking Ol\",\n      tome_cast_button_run: \"Çalıştır\",\n      tome_cast_button_running: \"Çalıştırılıyor\",\n      tome_cast_button_ran: \"Çalıştırıldı\",\n      tome_submit_button: \"Gönder\",\n      tome_reload_method: \"Bu yöntem için özgün kodu yeniden yükle\",\n      tome_available_spells: \"Kullanılabilir Büyüler\",\n      tome_your_skills: \"Yetenekleriniz\",\n      code_saved: \"Kod Kaydedildi\",\n      skip_tutorial: \"Atla (ESC)\",\n      keyboard_shortcuts: \"Klavye Kısayolları\",\n      loading_start: \"Seviyeyi Başlat\",\n      problem_alert_title: \"Kodunu Düzelt\",\n      time_current: \"Şimdi:\",\n      time_total: \"Azami:\",\n      time_goto: \"Git:\",\n      non_user_code_problem_title: \"Seviye yüklenemiyor\",\n      infinite_loop_title: \"Sonsuz döngü tespit edildi\",\n      infinite_loop_description: \"Dünyayı oluştururken girilen kodun çalışması durmadı. Muhtemelen ya çok yavaştı ya da sonsuz döngü vardı. Veya belki de bir hata vardır. Kodu tekrar çalıştırmayı deneyebilirsin ya da kodu ilk haline resetleyebilirsin. Bu da işe yaramazsa lütfen bizi bilgilendir.\",\n      check_dev_console: \"Neyin hatali olduğunu görmek icin geliştirici konsolunu da açabilirsin.\",\n      check_dev_console_link: \"(yönergeler)\",\n      infinite_loop_try_again: \"Yeniden Dene\",\n      infinite_loop_reset_level: \"Bölümü Sıfırla\",\n      infinite_loop_comment_out: \"Kodumu Yorum Yap\",\n      tip_toggle_play: \"Ctrl+P ile oynat/beklet.\",\n      tip_scrub_shortcut: \"Ctrl+[ and Ctrl+] kullanarak geriye veya ileriye sar.\",\n      tip_guide_exists: \"Gerekli bilgiler için oyun menüsünün içindeki (sayfanın başında) rehbere tıkla.\",\n      tip_open_source: \"CodeCombat %100 açık kaynaktır!\",\n      tip_tell_friends: \"CodeCombat'ı sevdin mi? Arkadaşlarına bizden bahset!\",\n      tip_beta_launch: \"CodeCombat ilk beta sürümünü Ekim 2013'te başlattı.\",\n      tip_think_solution: \"Sorunu değil, çözümü düşün.\",\n      tip_theory_practice: \"Teoride, teori ve pratik arasında fark yoktur. Ama pratikte vardır. - Yogi Berra\",\n      tip_error_free: \"Hatasız program yazmanın 2 yolu vardır; sadece üçüncüsü işe yarar. - Alan Perlis\",\n      tip_debugging_program: \"Eğer hataları ayıklamak programı düzeltmekse, o zaman programlama da hataları bir araya getirmektir. - Edsger W. Dijkstra\",\n      tip_forums: \"Forumları dolaş ve bize ne düşündüğünü söyle!\",\n      tip_baby_coders: \"Gelecekte bebekler bile Archmage olacak.\",\n      tip_morale_improves: \"Moral artana kadar yükleme devam edecek.\",\n      tip_all_species: \"Programlama öğrenme fırsatlarının her tür için eşit fırsatlarda olması gerektiğine inanıyoruz.\",\n      tip_harry: \"Sen Bir Büyücüsün, \",\n      tip_great_responsibility: \"Güçlü kodlama yeteneği, güçlü hata ayıklama sorumluluğu ile birlikte gelir.\",\n      tip_binary: \"Dünyada sadece 10 çeşit insan vardır: Ikilileri anlayabilenler ve anlayamayanlar.\",\n      tip_no_try: \"Yap ya da yapma. Denemek diye bir şey yok. - Yoda\",\n      tip_patience: \"Sabırlı olmalısın genç Padawan. - Yoda\",\n      tip_documented_bug: \"Dökümante edilmiş bir hata, hata değildir; olsa olsa yeni bir özelliktir.\",\n      tip_impossible: \"Her şey tamamlanana kadar imkansız görünür. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Konuşmak kolaydır. Kodunu göster. - Linus Torvalds\",\n      tip_first_language: \"Hayatta öğrenebilecegin en feci şey ilk programlama dilindir. - Alan Kay\",\n      tip_hardware_problem: \"S: Bir lambayı değiştirmek için kaç programcı gereklidir?  C: Hiç, bu bir donanım sorunudur.\",\n      tip_hofstadters_law: \"Hofstadter Yasası: Her zaman tahmin ettiğinden daha uzun sürer, Hofstadter yasasını hesaba kattığında bile.\",\n      tip_brute_force: \"Süpheye düstüğünde kaba kuvveti kullan. - Ken Thompson\",\n      tip_superpower: \"Kodlama, süper güç sahibi olmaya en çok benzeyen şeydir.\",\n      tip_control_destiny: \"Gerçekten açık kaynaklı olan bir kodda, kendi kaderinizi kontrol edebilirsiniz. - Linus Torvalds\",\n      tip_code_never_lies: \"Kod yalan söylemez, yorumlar bazen söyler. — Ron Jeffries\",\n      tip_reusable_software: \"Yazılımın tekrar kullanılabilir olması için öncelikle kullanılabilir olması gerekmektedir.\",\n      tip_optimization_operator: \"Her dilin optimizasyon operatörü vardır. Çogu dilde bu operator ‘//’ şeklindedir\",\n      tip_source_code: \"Dünyayı değiştirmek istiyorum ancak kaynak kodunu vermiyorlar.\",\n      tip_javascript_java: \"Java ile JavaScript arasındaki ilişki, kafes ile kavanoz arasındaki kadardır. - Chris Heilmann\",\n      tip_move_forward: \"Ne yaparsan yap, ilerlemeye devam et. - Martin Luther King Jr.\",\n      tip_google: \"Çözemediğin bir problemin mi var? Google'a sor!\",\n      tip_adding_evil: \"Bir tutam kötülük ekle.\",\n      tip_open_source_contribute: \"CodeCombat'ı geliştirmeye yardım edebilirsin!\",\n      tip_free_your_mind: \"Her şeyi bırakmalısın, Neo. Korku, şüphe, ve güvensizlik. Zihnini özgürleştir. - Morpheus\",\n      tip_strong_opponents: \"En güçlü rakiplerin bile zayıf noktası vardır. - Itachi Uchiha\",\n      tip_paper_and_pen: \"Kodlamaya başlamadan önce çalışmaya her zaman kağıt ve kalemle başlamalısın.\"\n    },\n    game_menu: {\n      inventory_tab: \"Envanter\",\n      save_load_tab: \"Kaydet/Yükle\",\n      options_tab: \"Seçenekler\",\n      guide_tab: \"Rehber\",\n      guide_video_tutorial: \"Video Öğreticisi\",\n      guide_tips: \"İpuçları\",\n      multiplayer_tab: \"Çoklu-oyuncu\",\n      auth_tab: \"Kaydol\",\n      inventory_caption: \"Kahramanınızı donatın\",\n      choose_hero_caption: \"Kahraman, dil seçin\",\n      options_caption: \"Ayarları yapılandır\",\n      guide_caption: \"Belgeler ve ipuçları\",\n      multiplayer_caption: \"Arkadaşlarla oyna!\",\n      auth_caption: \"İlerlemenizi kaydedin.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Skor tahtasını gör\",\n      scores: \"Skorlar\",\n      top_players: \"En İyi Oyuncular\",\n      day: \"Bugün\",\n      week: \"Bu Hafta\",\n      all: \"Tüm Zamanlar\",\n      time: \"Zaman\",\n      damage_taken: \"Alınan Hasar\",\n      damage_dealt: \"Verilen Hasar\",\n      difficulty: \"Zorluk\",\n      gold_collected: \"Toplanan Altın\"\n    },\n    inventory: {\n      equipped_item: \"Giyilmiş\",\n      required_purchase_title: \"Gerekli\",\n      available_item: \"Açık\",\n      restricted_title: \"Kısıtlı\",\n      should_equip: \"(iki kere tıklayarak giy)\",\n      equipped: \"(giyildi)\",\n      locked: \"(kitli)\",\n      restricted: \"(bu bölümde kısıtlı)\",\n      equip: \"Giy\",\n      unequip: \"Çıkar\"\n    },\n    buy_gems: {\n      few_gems: \"Bir avuç taş\",\n      pile_gems: \"Bir Torba\",\n      chest_gems: \"Sandık dolusu taş\",\n      purchasing: \"Ödeniyor...\",\n      declined: \"Kartınız reddedildi\",\n      retrying: \"Sunucu hatası, tekrar deneniyor.\",\n      prompt_title: \"Yetersiz Taş\",\n      prompt_body: \"Daha fazla almak ister misin?\",\n      prompt_button: \"Dükkana Gir\",\n      recovered: \"Önceki taşlar satın alındı. Lütfen sayfayı yenileyin\",\n      price: \"x{{gems}} / ay\",\n      buy_premium: \"Premiumluk Satın Almak\",\n      purchase: \"Satın Alma\",\n      purchased: \"Satın Alındı\"\n    },\n    choose_hero: {\n      choose_hero: \"Kahramanınızı Seçin\",\n      programming_language: \"Programlama Dili\",\n      programming_language_description: \"Hangi programlama dilini kullanmak istiyorsunuz?\",\n      \"default\": \"Öntanımlı\",\n      experimental: \"Deneysel\",\n      python_blurb: \"Basit ancak güçlü. Python mükemmel bir genel amaçlı dildir.\",\n      javascript_blurb: \"Web'in dili.\",\n      coffeescript_blurb: \"Daha iyi JavaScript sözdizimi.\",\n      lua_blurb: \"Oyun betik dili.\",\n      status: \"Durum\",\n      weapons: \"Silahlar\",\n      attack: \"Saldırı\",\n      health: \"Sağlık\",\n      speed: \"Hız\",\n      range: \"Menzil\",\n      blocks: \"Blok\",\n      skills: \"Yetenekler\"\n    },\n    save_load: {\n      granularity_saved_games: \"Kaydedildi\",\n      granularity_change_history: \"Geçmiş\"\n    },\n    options: {\n      general_options: \"Genel Seçenekler\",\n      volume_label: \"Ses\",\n      music_label: \"Müzik\",\n      music_description: \"Arkaplan müziğini aç/kapat.\",\n      editor_config_title: \"Düzenleyici Yapılandırması\"\n    },\n    about: {\n      mission_link: \"Görev\",\n      team_link: \"Takım\",\n      story_link: \"Hikaye\",\n      team_title: \"CodeCombat ekibi ile tanış\",\n      nick_title: \"Programcı\",\n      matt_title: \"Programcı\",\n      cat_title: \"Oyun Tasarımcısı\",\n      scott_title: \"Programcı\",\n      robin_title: \"Ürün Yöneticisi\",\n      about_codecombat: \"CodeCombat Hakkında\",\n      screenshots: \"Ekran görüntüleri\",\n      download_all: \"Hepsini İndir\",\n      previous: \"Önceki\"\n    },\n    versions: {\n      save_version_title: \"Yeni Sürümü Kaydet\",\n      new_major_version: \"Yeni Önemli Sürüm\",\n      submitting_patch: \"Yama Gönderiliyor...\",\n      cla_prefix: \"Değişiklikleri kaydetmek için ilk olarak\",\n      cla_url: \"KLA'mızı\",\n      cla_suffix: \"kabul etmelisiniz.\",\n      cla_agree: \"KABUL EDİYORUM\"\n    },\n    contact: {\n      contact_us: \"CodeCombat ile İletişim\",\n      welcome: \"Sizi dinlemek ne hoş! Bu form ile bize e-posta gönderebilirsiniz.\",\n      forum_prefix: \"Daha kamuya açık soru ve görüşleriniz için \",\n      forum_page: \"forumumuzu\",\n      forum_suffix: \" kullanabilirsiniz.\",\n      faq_prefix: \"Ayrıca bir\",\n      faq: \"SSS'de mevcut.\",\n      send: \"Gönder\"\n    },\n    account_settings: {\n      title: \"Hesap Ayarları\",\n      not_logged_in: \"Ayarlarınızı değiştirmek için giriş yapın veya bir hesap oluşturun\",\n      me_tab: \"Ben\",\n      picture_tab: \"Resim\",\n      god_mode: \"Tanrı Kipi\",\n      emails_tab: \"E-postalar\",\n      admin: \"Yönetici\",\n      new_password: \"Yeni Şifre\",\n      new_password_verify: \"Teyit Et\",\n      email_subscriptions: \"E-posta Abonelikleri\",\n      email_subscriptions_none: \"E-posta aboneliği yok.\",\n      email_announcements: \"Duyurular\",\n      email_announcements_description: \"CodeCombat ile ilgili son haberlere ve gelişmelere ulaşın.\",\n      email_notifications: \"Bilgilendirme\",\n      email_any_notes: \"Tüm Bildirimler\",\n      email_recruit_notes: \"İş Fırsatları\",\n      contributor_emails: \"İştirakçi Sınıfı E-postaları\",\n      contribute_prefix: \"Partimize katılmak üzere sizleri bekliyoruz ! Detaylı bilgi için \",\n      contribute_page: \"katkı sayfasını\",\n      contribute_suffix: \" ziyaret edebilirsiniz.\",\n      email_toggle: \"Tümünü Değiştir\",\n      error_saving: \"Kayıt Esnasında Hata\",\n      saved: \"Değişiklikler Kaydedildi\",\n      password_mismatch: \"Şifreler Uyuşmuyor\",\n      password_repeat: \"Lütfen şifrenizi yenileyin.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Klavye Kısayolları\",\n      space: \"Boşluk\",\n      enter: \"Enter\",\n      escape: \"Escape\",\n      shift: \"ÜstKarakter\",\n      run_code: \"Geçerli kodu çalıştır.\",\n      run_real_time: \"Eşzamanlı çalış.\"\n    },\n    community: {\n      main_title: \"CodeCombat Topluluğu\"\n    },\n    classes: {\n      archmage_title: \"Büyük Büyücü\",\n      archmage_title_description: \"(Kod Yazarı)\",\n      artisan_title: \"Zanaatkar\",\n      artisan_title_description: \"(Bölüm Yapıcı)\",\n      adventurer_title: \"Maceracı\",\n      adventurer_title_description: \"(Bölüm Oynanabilirlik Testçisi)\",\n      scribe_title: \"Katip\",\n      scribe_title_description: \"(Makale Editörü)\",\n      diplomat_title: \"Diplomat\",\n      diplomat_title_description: \"(Çevirmen)\",\n      ambassador_title: \"Büyükelçi\",\n      ambassador_title_description: \"(Support)\"\n    },\n    editor: {\n      main_title: \"CodeCombat Düzenleyici\",\n      article_title: \"Makale Düzenleyici\",\n      thang_title: \"Nesne Düzenleyici\",\n      level_title: \"Bölüm Düzenleyici\",\n      achievement_title: \"Başarı Düzenleyici\",\n      back: \"Geri\",\n      revert: \"Geri al\",\n      revert_models: \"Önceki Modeller\",\n      pick_a_terrain: \"Bir Arazi Seçin\",\n      dungeon: \"Zindan\",\n      indoor: \"İç\",\n      desert: \"Çöl\",\n      grassy: \"Çimli\",\n      small: \"Küçük\",\n      large: \"Büyük\",\n      fork_title: \"Yeni Sürüm Çatalla\",\n      fork_creating: \"Çatal Oluşturuluyor...\",\n      generate_terrain: \"Arazi Oluştur\",\n      more: \"Daha Fazla\",\n      wiki: \"Viki\",\n      live_chat: \"Canlı Sohbet\",\n      level_some_options: \"Bazı Seçenekler?\",\n      level_tab_thangs: \"Nesneler\",\n      level_tab_scripts: \"Betikler\",\n      level_tab_components: \"Bileşenler\",\n      level_tab_systems: \"Sistemler\",\n      level_tab_docs: \"Belgelendirme\",\n      level_tab_thangs_title: \"Geçerli Şartlar\",\n      level_tab_thangs_all: \"Tüm\",\n      level_tab_thangs_conditions: \"Başlama Şartları\",\n      level_tab_thangs_add: \"Nesne Ekle\",\n      \"delete\": \"Sil\",\n      duplicate: \"Kopyala\",\n      rotate: \"Döndür\",\n      level_component_tab_title: \"Geçerli Bileşenler\",\n      level_component_btn_new: \"Yeni Bileşen Oluştur\",\n      level_systems_tab_title: \"Geçerli Sistemler\",\n      level_systems_btn_new: \"Yeni Sistem Oluştur\",\n      level_systems_btn_add: \"Sistem Ekle\",\n      level_components_title: \"Tüm Nesneleri Geri Dön\",\n      level_components_type: \"Tür\",\n      level_component_edit_title: \"Bileşen Düzenle\",\n      level_component_config_schema: \"Yapılandırma Şeması\",\n      level_system_edit_title: \"Sistem Düzenle\",\n      create_system_title: \"Yeni Sistem Oluştur\",\n      new_component_title: \"Yeni Bileşen Oluştur\",\n      new_component_field_system: \"Sistem\",\n      new_article_title: \"Yeni Bir Makale Oluştur\",\n      new_level_title: \"Yeni Bir Seviye Oluştur\",\n      new_achievement_title: \"Yeni Bir Başarı Oluştur\",\n      level_search_title: \"Seviye ara\",\n      achievement_search_title: \"Başarı Ara\"\n    },\n    article: {\n      edit_btn_preview: \"Önizleme\",\n      edit_article_title: \"Makaleyi Düzenle\"\n    },\n    contribute: {\n      page_title: \"Katkıda Bulunma\",\n      alert_account_message_intro: \"Merhaba!\",\n      how_to_join: \"Nasıl Üye olunur?\",\n      join_desc_1: \"Herkes katkıda bulunabilir! Şimdi göz atın \",\n      join_url_email: \"E-Posta ile Bize ulaşın\"\n    },\n    ladder: {\n      my_matches: \"Karşılaşmalarım\",\n      simulate: \"Simüle Et\",\n      simulation_explanation: \"Oyunları simüle ederek oyun sıralamanızı daha hızlı edinebilirsiniz!\",\n      simulate_games: \"Oyunları Simüle Et!\",\n      games_simulated: \"Simüle edilen oyunlar\",\n      games_played: \"Oynanan oyunlar\",\n      ratio: \"Oran\",\n      leaderboard: \"Sıralama\",\n      summary_your: \"Sizin \",\n      summary_matches: \"Maçlarınız - \",\n      summary_wins: \" Galibiyet, \",\n      summary_losses: \" Mağlubiyet\",\n      rank_no_code: \"Sıralamak Üzere Yeni Kod Yok\",\n      rank_my_game: \"Oyunumu Derecelendir!\",\n      rank_submitting: \"Kayıt Ediliyor...\",\n      choose_opponent: \"Bir Rakip Seçin\",\n      select_your_language: \"Dilinizi seçin!\",\n      tutorial_play: \"Öğreticiyi Oyna\",\n      tutorial_recommended: \"Hiç oynamadıysanız önerilir\",\n      tutorial_skip: \"Öğreticiyi Atla\",\n      tutorial_not_sure: \"Ne olduğundan emin değil misiniz?\",\n      tutorial_play_first: \"İlk olarak Öğreticiyi oynayın.\",\n      simple_ai: \"Basit YZ\",\n      warmup: \"Isınma\"\n    },\n    user: {\n      singleplayer_title: \"Tek Oyuncu Seviyesi\",\n      multiplayer_title: \"Çok Oyunculu Seviyesi\"\n    },\n    account: {\n      payments: \"Ödemeler\",\n      purchased: \"Ödendi\",\n      subscription: \"Üyelik\",\n      invoices: \"Faturalar\",\n      service_apple: \"Apple\",\n      service_web: \"Web\",\n      paid_on: \"Ücretli\",\n      service: \"Servis\",\n      price: \"Fiyat\",\n      gems: \"Değerli Taş\",\n      active: \"Aktif\",\n      subscribed: \"Üye olundu\",\n      unsubscribed: \"Üyelikten ayrılındı\",\n      cost: \"Tutar\",\n      next_payment: \"Bir sonraki ödeme\",\n      card: \"Kart\"\n    },\n    account_invoices: {\n      amount: \"US doları cinsinden tutarı\",\n      declined: \"Kartınız reddedildi\",\n      invalid_amount: \"Lütfen US doları cinsinden tutar giriniz.\",\n      not_logged_in: \"Faturalara erisim için lütfen giriş yapınız ya da hesap açınız\",\n      pay: \"Fatura Ödeme\",\n      purchasing: \"Ödeniyor...\",\n      retrying: \"Sunucu hatası, tekrar deneniyor.\",\n      success: \"Başarıyla ödendi. Tesekkürler!\"\n    },\n    loading_error: {\n      could_not_load: \"Yüklenemiyor\",\n      connection_failure: \"Bağlantı hatası.\",\n      unauthorized: \"Giriş yapmalısınız. Çerezlere izin verdiniz mi?\",\n      forbidden: \"Yetkiniz yok.\",\n      not_found: \"Bulunamadı.\",\n      not_allowed: \"Yönteme izin verilmiyor.\",\n      timeout: \"Sunucu zamanaşımı.\",\n      conflict: \"Kaynak çakışması.\",\n      bad_input: \"Hatalı girdi.\",\n      server_error: \"Sunucu hatası.\",\n      unknown: \"Bilinmeyen hata.\"\n    },\n    resources: {\n      level: \"Seviye\",\n      patch: \"Yama\",\n      patches: \"Yamalar\",\n      system: \"Sistem\",\n      systems: \"Sistemler\",\n      component: \"Bileşen\",\n      components: \"Bileşenler\",\n      hero: \"Kahraman\",\n      campaigns: \"Kampanyalar\"\n    },\n    concepts: {\n      advanced_css_rules: \"Gelişmiş CSS Kuralları\",\n      advanced_css_selectors: \"Gelişmiş CSS Seçicileri\",\n      advanced_html_attributes: \"Gelişmiş HTML Öznitelikleri\",\n      advanced_html_tags: \"Gelişmiş HTML Etiketleri\",\n      \"arguments\": \"Argümanlar\",\n      arithmetic: \"Aritmetik\",\n      arrays: \"Diziler\",\n      basic_css_rules: \"Temel CSS kuralları\",\n      basic_css_selectors: \"Temel CSS seçicileri\",\n      basic_html_attributes: \"Temel HTML Öznitelikleri\",\n      basic_html_tags: \"Temel HTML Etiketleri\",\n      basic_syntax: \"Temel Söz Dizimi (Syntax)\",\n      algorithms: \"Algoritmalar\",\n      basic_html: \"Temel HTML\",\n      basic_css: \"Temel CSS\",\n      intermediate_html: \"Orta düzey HTML\",\n      intermediate_css: \"Orta düzey CSS\",\n      advanced_html: \"Gelişmiş HTML\",\n      advanced_css: \"Gelişmiş CSS\"\n    },\n    legal: {\n      page_title: \"Hukuki\",\n      opensource_description_prefix: \"İster \",\n      github_url: \"GitHub'ımıza\",\n      opensource_description_center: \"bakıver ve hoşuna giderse yardım edebilirsin! CodeCombat bir sürü açık kaynaklı projeden yararlanılarak inşa edilmiştir, hepsini seviyoruz. Bu projeleri görmek istersen \",\n      archmage_wiki_url: \"Başbüyücü wikisi\",\n      opensource_description_suffix: \"sayfamızı ziyaret edip ayrıntılı bilgi edinebilirsin.\",\n      practices_title: \"Saygı Çerçevesinde En İyi Uygulamalar\",\n      practices_description: \"Saygıdeğer oyuncu, bunlar size verdiğimiz sözlerimizdir. Daha kolay anlaşılması açısından özet haline indirgenmiştir.\",\n      privacy_title: \"Mahremiyet\",\n      security_title: \"Güvenlik\",\n      security_description: \"Kişisel bilgilerinizi güvende tutmak için mücadele ediyoruz. Açık kaynaklı bir proje olarak, sitemiz herkesin görüşüne açıktır ve güvenlik sistemimizin geliştirilmesine yardımcı olabilirsiniz.\",\n      email_title: \"Eposta\",\n      email_description_prefix: \"Sizi gereksiz epostaya boğmayacağız. İster\",\n      email_settings_url: \"eposta ayarları sayfasından,\",\n      email_description_suffix: \"ister size gönderdiğimiz epostadaki linklerden, tercihlerinizi değiştirebilir ve aboneliğinizi anında iptal edebilirsiniz.\",\n      cost_title: \"Ücret\",\n      copyrights_title: \"Telif Hakları ve Lisanslar\",\n      contributor_title: \"Katılımcı Lisans Sözleşmesi\",\n      contributor_description_prefix: \"GitHub ve siteye yapılan tüm katılımlar, devam etmeden önce kabul etmeniz gereken\",\n      cla_url: \"KLS'ye\",\n      contributor_description_suffix: \"tabidir.\",\n      code_title: \"Kod - MIT\",\n      mit_license_url: \"MIT lisansı\",\n      code_description_suffix: \"Bu, CodeCombat tarafından oyun seviyelerini hayata geçirmek için kullanılan tüm sistem ve içeriği de kapsar.\",\n      art_title: \"Sanat/Müzik - Creative Commons \",\n      art_description_prefix: \"Tüm müşterek içerik\",\n      cc_license_url: \"Creative Commons Alıntı 4.0 Uluslararası Lisansı altındadır.\",\n      art_description_suffix: \"Müşterek içerik CodeCombat tarafından oyun seviyelerini hayata geçirmek için kullanılan tüm sistem ve içeriktir. Bunlar sırasıyla:\",\n      art_music: \"Müzik\",\n      art_sound: \"Ses\",\n      art_artwork: \"Sanat eseri\",\n      art_sprites: \"Spritelar\",\n      art_other: \"Ve kod dışındaki, seviyelerde kullanılan tüm öğelerdir.\",\n      art_access: \"Şu anda bu öğelerin tamamını kolayca getirecek uluslarası bir sistem bulunmamakta. Genel olarak, URL'den getirip, bizimle iletişime geçip, bu öğelerin daha kolay erişilebilir olması amacı için bize yardımcı olabilirsiniz.\",\n      art_paragraph_1: \"Alıntı için, alıntının kullanıldığı yerde lütfen codecombat.com sitesini zikredip kaynak linki belirtin. Örneğin:\",\n      use_list_1: \"Bir filmde veya bir oyunda kullandıysanız, jeneriğe codecombat.com adresini ekleyin.\",\n      use_list_2: \"Bir web sitesinde kullandıysanız, kullanımın yanına linki koyun. Örneğin, bir imajın altına, veya alıntıların tamamını belirttiğiniz Creative Commons bildirimi ile beraber yazabilirsiniz. CodeCombat'e bariz bir biçimde atıfta bulunan içeriğe, ilave olarak alıntı olduğunun belirtilmesine gerek yoktur.\",\n      art_paragraph_2: \"Eğer kullanılan içerik CodeCombat tarafından değil de herhangi bir codecombat.com kullanıcısı tarafından oluşturulmuş ise, alıntıda kullanıcıya atıfta bulunun ve eğer kullanıcı alıntılamaya dair özel olarak bir talimat belirtmişse gerekli eylemleri uygulayın.\",\n      rights_title: \"Saklı Olan Haklar\",\n      rights_desc: \"Seviyelerde kullanılan içeriğin her hakkı saklıdır. Bunlar sırasıyla:\",\n      rights_scripts: \"Betikler\",\n      rights_unit: \"Birim yapılandırmaları\",\n      rights_writings: \"Yazılar\",\n      rights_media: \"Ortam (sesler, müzik) ve ilgili seviye için özel olarak tasarlanmış ve herkese açık hale getirilmemiş içeriğin tamamıdır.\",\n      rights_clarification: \"Aydınlatmak gerekirse, seviye editöründe kullanıma açık içerik Creative Commons lisansı altındadır fakat düzenleme sırasında oluşturulan ve ders sırasında yüklenen içerik bu lisansa tabi değildir.\",\n      nutshell_title: \"Özetle\",\n      nutshell_description: \"Seviye editöründe sağladığımız tüm içerik, seviye düzenleme sırasında kullanmanız için uygundur. Fakat ileride bu öğelerin kullanımını kısıtlama hakkını saklı tutmaktayız.\",\n      canonical: \"Belirleyici, hukuki nitelikte olan, bu dökümanın İngilizce sürümüdür. Çeviriler arasında tutarsızlık olması halinde İngilizce dökümanda yer alan hüküm dikkate alınacaktır.\"\n    },\n    calendar: {\n      year: \"Yıl\",\n      day: \"Gün\",\n      month: \"Ay\",\n      january: \"Ocak\",\n      february: \"Şubat\",\n      march: \"Mart\",\n      april: \"Nisan\",\n      may: \"Mayıs\",\n      june: \"Haziran\",\n      july: \"Temmuz\",\n      august: \"Ağustos\",\n      september: \"Eylül\",\n      october: \"Ekim\",\n      november: \"Kasım\",\n      december: \"Aralık\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1084\n");

/***/ })

});