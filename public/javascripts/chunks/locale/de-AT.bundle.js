/*! hash:345dfe6c0e434e9c7378, chunkhash:3eb3a0b5307f39603ee8, name:locale/de-AT, filebase:de-AT.bundle.js, query:, file:javascripts/chunks/locale/de-AT.bundle.js */
webpackJsonp([69],{

/***/ 1039:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"Deutsch (Österreich)\",\n  englishDescription: \"German (Austria)\",\n  translation: {\n    nav: {\n      play: \"Spielen\",\n      community: \"Community\",\n      courses: \"Kurse\",\n      blog: \"Blog\",\n      forum: \"Forum\",\n      account: \"Account\",\n      my_account: \"Mein Account\",\n      profile: \"Profil\",\n      home: \"Home\",\n      contribute: \"Helfen\",\n      legal: \"Rechtliches\",\n      about: \"Über\",\n      contact: \"Kontakt\",\n      twitter_follow: \"Twitter\",\n      careers: \"Berufe\",\n      facebook: \"Facebook\",\n      twitter: \"Twitter\",\n      create_a_class: \"Erstelle eine Klasse\",\n      other: \"Andere\",\n      learn_to_code: \"Lerne zu programmieren!\",\n      toggle_nav: \"Navigation umschalten\",\n      schools: \"Schule\",\n      get_involved: \"Werde eingebunden\",\n      open_source: \"Open source (GitHub)\",\n      support: \"Support\",\n      faqs: \"FAQs\",\n      help_pref: \"Brauchst du Hilfe? Email\",\n      help_suff: \"und wir treten in Kontakt!\"\n    },\n    modal: {\n      close: \"Schließen\",\n      okay: \"Okay\"\n    },\n    not_found: {\n      page_not_found: \"Seite nicht gefunden\"\n    },\n    diplomat_suggestion: {\n      title: \"Hilf CodeCombat zu übersetzen!\",\n      sub_heading: \"Wir brauchen Deine Sprachfähigkeiten.\",\n      pitch_body: \"Wir entwickeln CodeCombat in Englisch, aber wir haben Spieler in der ganzen Welt. Viele von ihnen wollen in Deutsch (Österreich) spielen, sprechen aber kein Englisch. Wenn Du also beide Sprachen beherrscht, melde Dich an um ein Diplomat zu werden und hilf die Website und die Levels zu Deutsch (Österreich) zu übersetzen.\",\n      missing_translations: \"Solange wir nicht alles ins Deutsche (Österreich) übesetzt haben, siehst Du die englische Übersetzung, wo Deutsch (Österreich) leider noch nicht zur Verfügung steht.\",\n      learn_more: \"Finde heraus, wie Du ein Diplomat werden kannst\",\n      subscribe_as_diplomat: \"Schreibe dich als Diplomat ein\"\n    },\n    play: {\n      play_as: \"Spiele als \",\n      compete: \"Abgeschlossen!\",\n      spectate: \"Zuschauen\",\n      players: \"Spieler\",\n      hours_played: \"Stunden gespielt\",\n      items: \"Gegenstände\",\n      unlock: \"Kaufen\",\n      confirm: \"Bestätigen\",\n      owned: \"bereits im Besitz\",\n      locked: \"Gesperrt\",\n      available: \"Verfügbar\",\n      skills_granted: \"Freischaltbare Fähigkeiten\",\n      heroes: \"Helden\",\n      achievements: \"Erfolge\",\n      settings: \"Einstellungen\",\n      next: \"Weiter\",\n      change_hero: \"Held wechseln\",\n      buy_gems: \"Juwelen kaufen\",\n      anonymous: \"Anonymer Spieler\",\n      level_difficulty: \"Schwierigkeit: \",\n      awaiting_levels_adventurer_prefix: \"Wir veröffentlichen wöchentlichen neu Levels.\",\n      awaiting_levels_adventurer: \"Melde dich als Abenteuerer an\",\n      awaiting_levels_adventurer_suffix: \"um der erste zu sein der neue Levels spielt.\",\n      adjust_volume: \"Lautstärke anpassen\",\n      campaign_multiplayer: \"Multiplayerarena\",\n      campaign_multiplayer_description: \"... in der Du Kopf-an-Kopf gegen andere Spieler programmierst.\"\n    },\n    code: {\n      \"if\": \"wenn\",\n      \"else\": \"sonst\",\n      elif: \"sonst wenn\",\n      \"while\": \"so lange\",\n      loop: \"schleife\",\n      \"for\": \"für\",\n      \"break\": \"pause\",\n      \"continue\": \"fortsetzen\",\n      pass: \"bestehen\",\n      \"return\": \"zurückgeben\",\n      then: \"dann\",\n      \"do\": \"mache\",\n      end: \"ende\",\n      \"function\": \"funktion\",\n      def: \"definiere\",\n      \"var\": \"variable\",\n      self: \"selbst\",\n      hero: \"held\",\n      \"this\": \"dies\",\n      or: \"oder\",\n      \"||\": \"oder\",\n      and: \"und\",\n      \"&&\": \"und\",\n      not: \"nicht\",\n      \"!\": \"nicht\",\n      \"=\": \"zuweisen\",\n      \"==\": \"entspricht\",\n      \"===\": \"entspricht strikt\",\n      \"!=\": \"entspricht nicht\",\n      \"!==\": \"entspricht strikt nicht\",\n      \">\": \"ist größer als\",\n      \">=\": \"ist größer als oder gleich\",\n      \"<\": \"ist kleiner als\",\n      \"<=\": \"ist kleiner als oder gleich\",\n      \"*\": \"multipliziert um\",\n      \"/\": \"dividiert durch\",\n      \"+\": \"plus\",\n      \"-\": \"minus\",\n      \"+=\": \"addieren und zuweisen\",\n      \"-=\": \"subtrahieren und zuweisen\",\n      True: \"Wahr\",\n      \"true\": \"wahr\",\n      False: \"Falsch\",\n      \"false\": \"falsch\",\n      undefined: \"undefiniert\",\n      \"null\": \"nichts\",\n      nil: \"nichts\",\n      None: \"Kein\"\n    },\n    login: {\n      sign_up: \"Registrieren\",\n      log_in: \"Einloggen\",\n      logging_in: \"Logge ein\",\n      log_out: \"Ausloggen\",\n      forgot_password: \"Passwort vergessen?\",\n      finishing: \"Fertig stellen\",\n      sign_in_with_facebook: \"Mit Facebook anmelden\",\n      sign_in_with_gplus: \"Mit G+ anmelden\",\n      signup_switch: \"Möchtest du einen Account erstellen?\"\n    },\n    signup: {\n      email_announcements: \"Erhalte Benachrichtigungen per Email\",\n      creating: \"Erzeuge Account...\",\n      sign_up: \"Neuen Account anlegen\",\n      log_in: \"mit Passwort einloggen\",\n      required: \"Du musst dich vorher einloggen um dort hin zu gehen.\",\n      login_switch: \"Du hast bereits einen Account?\",\n      optional: \"Optional\",\n      connected_gplus_header: \"Du hast dich erfolgreich über Google+ verbunden!\",\n      connected_gplus_p: \"Vervollständige die Anmeldung um dich mit deinem Google+ Account anzumelden.\",\n      connected_facebook_header: \"Du hast dich erfolgreich über Facebook verbunden!\",\n      connected_facebook_p: \"Vervollständige die Anmeldung um dich mit deinem Facebook Account anzumelden.\",\n      hey_students: \"Schüler, gebt den Klassencode eures Lehrers ein.\",\n      birthday: \"Geburstag\"\n    },\n    recover: {\n      recover_account_title: \"Account Wiederherstellung\",\n      send_password: \"Wiederherstellungskennwort senden\",\n      recovery_sent: \"Wiederherstellungs-Email versandt.\"\n    },\n    items: {\n      primary: \"Primär\",\n      secondary: \"Sekundär\",\n      armor: \"Rüstung\",\n      accessories: \"Zubehör\",\n      misc: \"Sonstiges\",\n      books: \"Bücher\"\n    },\n    common: {\n      loading: \"Lade...\",\n      saving: \"Speichere...\",\n      sending: \"Übertrage...\",\n      send: \"Senden\",\n      cancel: \"Abbrechen\",\n      save: \"Speichern\",\n      publish: \"Publiziere\",\n      create: \"Erstelle\",\n      fork: \"Fork\",\n      play: \"Abspielen\",\n      retry: \"Erneut versuchen\",\n      submit_patch: \"Patch einreichen\"\n    },\n    general: {\n      and: \"und\",\n      name: \"Name\",\n      date: \"Datum\",\n      body: \"Inhalt\",\n      version: \"Version\",\n      pending: \"Ausstehend\",\n      accepted: \"Akzeptiert\",\n      rejected: \"Abgelehnt\",\n      withdrawn: \"Zurückgezogen\",\n      accept: \"Akzeptieren\",\n      reject: \"Abgelehnen\",\n      withdraw: \"Zurückziehen\",\n      submitter: \"Veröffentlicher\",\n      submitted: \"Veröffentlicht\",\n      commit_msg: \"Nachricht absenden\",\n      version_history: \"Versionshistorie\",\n      version_history_for: \"Versionsgeschichte für: \",\n      select_changes: \"Wählen zwei Änderungen unterhalb um den Unterschied zu sehen.\",\n      undo_prefix: \"Rückgängig\",\n      undo_shortcut: \"(Strg+Z)\",\n      redo_prefix: \"Wiederherstellen\",\n      redo_shortcut: \"(Strg+Umschalt+Z)\",\n      play_preview: \"Vorschau vom aktuellen Level spielen\",\n      result: \"Ergebnis\",\n      results: \"Ergebnisse\",\n      description: \"Beschreibung\",\n      or: \"oder\",\n      subject: \"Betreff\",\n      email: \"Email\",\n      password: \"Passwort\",\n      confirm_password: \"Passwort bestätigen\",\n      message: \"Nachricht\",\n      code: \"Code\",\n      ladder: \"Rangliste\",\n      when: \"Wann\",\n      opponent: \"Gegner\",\n      rank: \"Rang\",\n      score: \"Punktzahl\",\n      win: \"Sieg\",\n      loss: \"Niederlage\",\n      tie: \"Unentschieden\",\n      easy: \"Einfach\",\n      medium: \"Mittel\",\n      hard: \"Schwer\",\n      player: \"Spieler\",\n      player_level: \"Spielerlevel\",\n      warrior: \"Krieger\",\n      ranger: \"Jäger\",\n      wizard: \"Hexer\",\n      first_name: \"Vorname\",\n      last_name: \"Nachname\",\n      username: \"Benutzername\"\n    },\n    units: {\n      second: \"Sekunde\",\n      seconds: \"Sekunden\",\n      minute: \"Minute\",\n      minutes: \"Minuten\",\n      hour: \"Stunde\",\n      hours: \"Stunden\",\n      day: \"Tag\",\n      days: \"Tage\",\n      week: \"Woche\",\n      weeks: \"Wochen\",\n      month: \"Monat\",\n      months: \"Monate\",\n      year: \"Jahr\",\n      years: \"Jahre\"\n    },\n    play_level: {\n      done: \"Fertig\",\n      home: \"Startseite\",\n      level: \"Mission\",\n      skip: \"Überspringen\",\n      game_menu: \"Spielmenü\",\n      restart: \"Neustart\",\n      goals: \"Ziele\",\n      goal: \"Ziel\",\n      success: \"Erfolgreich!\",\n      incomplete: \"Unvollständig\",\n      timed_out: \"Zeit abgelaufen\",\n      reload: \"Neu laden\",\n      reload_title: \"Gesamten Code neu laden?\",\n      reload_really: \"Bist Du sicher, dass Du das Level neu beginnen willst?\",\n      reload_confirm: \"Alles neu laden\",\n      victory: \"Sieg\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Abgeschlossen\",\n      victory_sign_up: \"Melde Dich an, um Fortschritte zu speichern\",\n      victory_sign_up_poke: \"Möchtest Du Neuigkeiten per Mail erhalten? Erstelle einen kostenlosen Account und wir halten Dich auf dem Laufenden.\",\n      victory_rate_the_level: \"Bewerte das Level: \",\n      victory_return_to_ladder: \"Zurück zur Rangliste\",\n      victory_saving_progress: \"Speichere Fortschritt\",\n      victory_go_home: \"Geh auf die Startseite\",\n      victory_review: \"Erzähl uns davon!\",\n      victory_hour_of_code_done: \"Bist Du fertig?\",\n      victory_hour_of_code_done_yes: \"Ja, ich bin mit meiner Code-Stunde fertig!\",\n      victory_experience_gained: \"EP erhalten\",\n      victory_gems_gained: \"Juwelen erhalten\",\n      tome_submit_button: \"Absenden\",\n      tome_reload_method: \"Lade den ursprünglichen Code dieser Methode\",\n      tome_available_spells: \"Verfügbare Zauber\",\n      tome_your_skills: \"Deine Fähigkeiten\",\n      code_saved: \"Code gespeichert\",\n      skip_tutorial: \"Überspringen (Esc)\",\n      keyboard_shortcuts: \"Tastenkürzel\",\n      loading_start: \"Starte Level\",\n      problem_alert_title: \"Korrigiere deinen Code\",\n      time_current: \"Aktuell\",\n      time_total: \"Total\",\n      time_goto: \"Gehe zu\",\n      infinite_loop_try_again: \"Erneut versuchen\",\n      infinite_loop_reset_level: \"Level zurücksetzen\",\n      infinite_loop_comment_out: \"Meinen Code auskommentieren\",\n      tip_toggle_play: \"Wechsel zwischen Play und Pause mit Strg+P.\",\n      tip_scrub_shortcut: \"Spule vor und zurück mit Strg+[ und Strg+]\",\n      tip_guide_exists: \"Klicke auf die Anleitung am oberen Ende der Seite für nützliche Informationen\",\n      tip_open_source: \"CodeCombat ist 100% quelloffen!\",\n      tip_beta_launch: \"CodeCombat startete seine Beta im Oktober 2013.\",\n      tip_think_solution: \"Denke über die Lösung nach, nicht über das Problem.\",\n      tip_theory_practice: \"In der Theorie gibt es keinen Unterschied zwischen Theorie und Praxis. In der Praxis schon. - Yogi Berra\",\n      tip_error_free: \"Es gibt zwei Wege fehlerfreie Programme zu schreiben; nur der Dritte funktioniert. - Alan Perlis\",\n      tip_debugging_program: \"Wenn Debugging der Prozess zum Fehler entfernen ist, dann muss Programmieren der Prozess sein Fehler zu machen. - Edsger W. Dijkstra\",\n      tip_forums: \"Gehe zum Forum und sage uns was du denkst!\",\n      tip_baby_coders: \"In der Zukunft werden sogar Babies Erzmagier sein.\",\n      tip_morale_improves: \"Das Laden wird weiter gehen bis die Stimmung sich verbessert.\",\n      tip_all_species: \"Wir glauben an gleiche Chancen für alle Arten Programmieren zu lernen.\",\n      tip_harry: \"Du bist ein Zauberer, \",\n      tip_great_responsibility: \"Mit großen Programmierfähigkeiten kommt große Verantwortung.\",\n      tip_munchkin: \"Wenn du dein Gemüse nicht isst, besucht dich ein Zwerg während du schläfst.\",\n      tip_binary: \"Es gibt auf der Welt nur 10 Arten von Menschen: die, welche Binär verstehen und die, welche nicht.\",\n      tip_commitment_yoda: \"Ein Programmier muss die größte Hingabe haben, den ernstesten Verstand. ~ Yoda\",\n      tip_no_try: \"Tu. Oder tu nicht. Es gibt kein Versuchen. - Yoda\",\n      tip_patience: \"Geduld du musst haben, junger Padawan. - Yoda\",\n      tip_documented_bug: \"Ein dokumentierter Fehler ist kein Fehler; er ist ein Merkmal.\",\n      tip_impossible: \"Es wirkt immer unmöglich bis es vollbracht ist. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Reden ist billig. Zeig mir den Code. - Linus Torvalds\",\n      tip_first_language: \"Das schwierigste, das du jemals lernen wirst, ist die erste Programmiersprache. - Alan Kay\",\n      tip_hardware_problem: \"Q: Wie viele Programmierer braucht man um eine Glühbirne auszuwechseln? A: Keine, es ist ein Hardware-Problem.\",\n      tip_brute_force: \"Im Zweifelsfall, verwende rohe Gewalt. - Ken Thompson\"\n    },\n    game_menu: {\n      inventory_tab: \"Inventar\",\n      save_load_tab: \"Speichere/Lade\",\n      options_tab: \"Einstellungen\",\n      guide_tab: \"Guide\",\n      guide_video_tutorial: \"Video Tutorial\",\n      guide_tips: \"Tipps\",\n      multiplayer_tab: \"Mehrspieler\",\n      auth_tab: \"Anmelden\",\n      inventory_caption: \"Rüste deinen Helden aus\",\n      choose_hero_caption: \"Wähle Helden, Sprache\",\n      options_caption: \"konfiguriere Einstellungen\",\n      guide_caption: \"Doku und Tipps\",\n      multiplayer_caption: \"Spiele mit Freunden!\",\n      auth_caption: \"Fortschritt speichern.\"\n    },\n    inventory: {\n      equipped_item: \"Ausgerüstet\",\n      available_item: \"Verfügbar\",\n      restricted_title: \"Eingeschränkt\",\n      should_equip: \"(Doppelklick um auszurüsten)\",\n      equipped: \"(Ausgerüstet)\",\n      locked: \"(Gesperrt)\",\n      restricted: \"(Eingeschränkt in diesem Level)\",\n      equip: \"Ausrüsten\",\n      unequip: \"Ablegen\"\n    },\n    buy_gems: {\n      few_gems: \"Ein paar Juwelen\",\n      pile_gems: \"Ein Haufen Juwelen\",\n      chest_gems: \"Truhe voll Juwelen\",\n      purchasing: \"Kaufe...\",\n      declined: \"Deine Karte wurde abgelehnt\",\n      retrying: \"Serverfehler, erneuter Versuch.\",\n      prompt_title: \"Nicht genug Juwelen\",\n      prompt_body: \"Möchtest du mehr?\",\n      prompt_button: \"Shop betreten\",\n      recovered: \"Voriger Juwelenkauf wiederhergestellt. Bitte die Seite neu laden.\"\n    },\n    choose_hero: {\n      choose_hero: \"Wähle deinen Helden\",\n      programming_language: \"Programmiersprache\",\n      programming_language_description: \"Welche Programmiersprache möchtest du verwenden?\",\n      \"default\": \"Standard\",\n      experimental: \"Experimentiell\",\n      python_blurb: \"Einfach jedoch leistungsfähig, Python ist eine gute Allzweck-Programmiersprache.\",\n      javascript_blurb: \"Die Sprache des Web.\",\n      coffeescript_blurb: \"Schönere JavaScript Syntax.\",\n      lua_blurb: \"Skriptsprache für Spiele (KI).\",\n      status: \"Status\",\n      weapons: \"Waffen\",\n      weapons_warrior: \"Schwerter - Kurze Reichweite, keine Magie\",\n      weapons_ranger: \"Armbrüste, Pistolen - Hohe Reichweite, keine Magie\",\n      weapons_wizard: \"Stöcke, Stäbe - Hohe Reichweite, Magie\",\n      attack: \"Angriffsschaden\",\n      health: \"Gesundheit\",\n      speed: \"Geschwindigkeit\",\n      regeneration: \"Regeneration\",\n      range: \"Reichweite\",\n      blocks: \"Haltbarkeit\",\n      backstab: \"Hinterhaltsschaden\",\n      skills: \"Fähigkeiten\",\n      available_for_purchase: \"Zum Kauf verfügbar\",\n      level_to_unlock: \"Level zum Freischalten:\",\n      restricted_to_certain_heroes: \"Nur bestimmte Helden können dieses Level spielen.\"\n    },\n    save_load: {\n      granularity_saved_games: \"Gespeichert\",\n      granularity_change_history: \"Historie\"\n    },\n    options: {\n      general_options: \"Allgemeine Einstellungen\",\n      volume_label: \"Lautstärke\",\n      music_label: \"Musik\",\n      music_description: \"Schalte Hintergrundmusik an/aus.\",\n      editor_config_title: \"Editor Einstellungen\",\n      editor_config_livecompletion_label: \"Live Auto-Vervollständigung\",\n      editor_config_livecompletion_description: \"Zeigt Vorschläge der Auto-Vervollständigung an während du tippst.\",\n      editor_config_invisibles_label: \"Zeige unsichtbare Zeichen\",\n      editor_config_invisibles_description: \"Zeigt unsichtbare Zeichen wie Leertasten an.\",\n      editor_config_indentguides_label: \"Zeige Einrückungshilfe\",\n      editor_config_indentguides_description: \"Zeigt vertikale Linien an um Einrückungen besser zu sehen.\",\n      editor_config_behaviors_label: \"Intelligentes Verhalten\",\n      editor_config_behaviors_description: \"Vervollständigt automatisch Klammern und Anführungszeichen.\"\n    },\n    about: {\n      nick_title: \"Programmierer\",\n      matt_title: \"Programmierer\",\n      scott_title: \"Programmierer\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    versions: {\n      save_version_title: \"Neue Version speichern\",\n      new_major_version: \"Neue Hauptversion\",\n      cla_prefix: \"Damit Änderungen gespeichert werden können, musst du unsere Lizenzbedingungen (\",\n      cla_url: \"CLA\",\n      cla_suffix: \") akzeptieren.\",\n      cla_agree: \"Ich stimme zu\"\n    },\n    contact: {\n      contact_us: \"Kontaktiere CodeCombat\",\n      welcome: \"Schön von Dir zu hören! Benutze dieses Formular um uns eine Email zu schicken.\",\n      forum_prefix: \"Für alle öffentlichen Themen, benutze stattdessen \",\n      forum_page: \"unser Forum\",\n      forum_suffix: \".\",\n      send: \"Sende Feedback\"\n    },\n    account_settings: {\n      title: \"Accounteinstellungen\",\n      not_logged_in: \"Logge Dich ein oder lege einen Account an, um deine Einstellungen ändern zu können.\",\n      me_tab: \"Ich\",\n      picture_tab: \"Bild\",\n      emails_tab: \"Emails\",\n      admin: \"Admin\",\n      new_password: \"Neues Passwort\",\n      new_password_verify: \"Passwort verifizieren\",\n      email_subscriptions: \"Email Abonnements\",\n      email_subscriptions_none: \"Keine Email Abonnements.\",\n      email_announcements: \"Ankündigungen\",\n      email_announcements_description: \"Erhalte regelmäßig Ankündigungen zu deinem Account.\",\n      email_notifications: \"Benachrichtigungen\",\n      email_notifications_summary: \"Steuerung für personalisierte, automatische Emailbenachrichtigungen im Zusammenhang mit deiner CodeCombat Aktivität.\",\n      email_any_notes: \"Jegliche Benachrichtungen\",\n      email_any_notes_description: \"Deaktivieren um alle aktiven Benachrichtigungen zu stoppen.\",\n      email_news: \"News\",\n      email_recruit_notes: \"Job-Angebote\",\n      email_recruit_notes_description: \"Wenn du besonders gut spielst, werden wir dich evtl. kontaktieren um dir einen (besseren) Job zu suchen.\",\n      contributor_emails: \"Unterstützer Email\",\n      contribute_prefix: \"Wir suchen nach Leuten, die mitmachen! Schau dir die\",\n      contribute_page: \"Unterstützer Seite\",\n      contribute_suffix: \" an um mehr zu erfahren.\",\n      email_toggle: \"Alles wählen\",\n      error_saving: \"Fehler beim Speichern\",\n      saved: \"Änderungen gespeichert\",\n      password_mismatch: \"Passwörter stimmen nicht überein.\",\n      password_repeat: \"Bitte wiederhole dein Passwort.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Tastaturkürzel\",\n      space: \"Leertaste\",\n      enter: \"Eingabetaste\",\n      escape: \"Escape\",\n      shift: \"Umschalttaste\",\n      run_real_time: \"Führe in Echtzeit aus.\",\n      continue_script: \"Setze nach aktuellenm Skript fort.\",\n      skip_scripts: \"Überspringe alle überspringbaren Skripte.\",\n      toggle_playback: \"Umschalten Play/Pause.\",\n      scrub_playback: \"Scrubbe vor und zurück durch die Zeit.\",\n      single_scrub_playback: \"Scrubbe ein Frame vor und zurück durch die Zeit.\",\n      scrub_execution: \"Scrubbe durch die aktuelle Zauberspruch-Ausführung.\",\n      toggle_debug: \"Debug-Anzeige an/aus.\",\n      toggle_grid: \"Grid-Overlay an/aus.\",\n      toggle_pathfinding: \"Wegfindungs-Overlay an/aus.\",\n      beautify: \"Verschönere deinen Code durch die Standardisierung der Formatierung.\",\n      maximize_editor: \"Maximiere/Minimiere Code Editor.\"\n    },\n    community: {\n      main_title: \"CodeCombat Community\",\n      introduction: \"Schaue dir unten die Möglichkeiten wie du mitwirken kannst und entscheide was dir am meisten Spass macht. Wir freuen uns auf die Zusammenarbeit mit dir!\",\n      level_editor_prefix: \"Benutze den CodeCombat\",\n      level_editor_suffix: \"um Level zu erstellen oder zu bearbeiten. Benutzer haben bereits Level für ihre Klassen, Freunde, Hackathons, Schüler und Geschwister erstellt. Wenn das Neuerstellen eines Levels abschreckend wirkt, dann kannst du erstmal ein bestehendes kopieren!\",\n      thang_editor_prefix: \"Wir nennen Einheiten innerhalb des Spiels 'Thangs'. Benutze den\",\n      article_editor_prefix: \"Hast du einen Fehler in unseren Dokus gefunden? Willst du Anleitungen für deine Kreationen erstellen? Schau dir den\",\n      article_editor_suffix: \"und hilf CodeCombat Spielern das meiste aus ihrer Spielzeit heraus zu bekommen.\",\n      find_us: \"Finde uns auf diesen Seiten\",\n      social_blog: \"Lese den CodeCombat Blog auf Sett\",\n      social_discource: \"Schließe dich den Diskussionen in unserem Discourse Forum an\",\n      social_facebook: \"Like CodeCombat auf Facebook\",\n      social_twitter: \"Folge CodeCombat auf Twitter\",\n      social_gplus: \"Schließe dich CodeCombat bei Google+ an\",\n      contribute_to_the_project: \"Trage zu diesem Projekt bei\"\n    },\n    classes: {\n      archmage_title: \"Erzmagier\",\n      archmage_title_description: \"(Programmierer)\",\n      artisan_title: \"Handwerker\",\n      artisan_title_description: \"(Level Entwickler)\",\n      adventurer_title: \"Abenteurer\",\n      adventurer_title_description: \"(Level Spieltester)\",\n      scribe_title: \"Schreiber\",\n      scribe_title_description: \"(Artikel Editor)\",\n      diplomat_title: \"Diplomat\",\n      diplomat_title_description: \"(Übersetzer)\",\n      ambassador_title: \"Botschafter\",\n      ambassador_title_description: \"(Support)\"\n    },\n    editor: {\n      main_title: \"CodeCombat Editoren\",\n      article_title: \"Artikel Editor\",\n      thang_title: \"Thang Editor\",\n      level_title: \"Level Editor\",\n      achievement_title: \"Achievement Editor\",\n      back: \"Zurück\",\n      revert: \"Zurücksetzen\",\n      revert_models: \"Models zurücksetzen.\",\n      pick_a_terrain: \"Wähle ein Terrain\",\n      grassy: \"Grasig\",\n      small: \"Klein\",\n      fork_title: \"Forke neue Version\",\n      fork_creating: \"Erzeuge Fork...\",\n      generate_terrain: \"Generiere Terrain\",\n      more: \"Mehr\",\n      wiki: \"Wiki\",\n      live_chat: \"Live Chat\",\n      level_some_options: \"Einige Einstellungsmöglichkeiten?\",\n      level_tab_thangs: \"Thangs\",\n      level_tab_scripts: \"Skripte\",\n      level_tab_components: \"Komponenten\",\n      level_tab_systems: \"Systeme\",\n      level_tab_docs: \"Dokumentation\",\n      level_tab_thangs_title: \"Aktuelle Thangs\",\n      level_tab_thangs_all: \"Alle\",\n      level_tab_thangs_conditions: \"Startbedingungen\",\n      level_tab_thangs_add: \"Thangs hinzufügen\",\n      \"delete\": \"Löschen\",\n      duplicate: \"Duplizieren\",\n      level_component_tab_title: \"Aktuelle Komponenten\",\n      level_component_btn_new: \"neue Komponente erstellen\",\n      level_systems_tab_title: \"Aktuelle Systeme\",\n      level_systems_btn_new: \"neues System erstellen\",\n      level_systems_btn_add: \"System hinzufügen\",\n      level_components_title: \"Zurück zu allen Thangs\",\n      level_components_type: \"Typ\",\n      level_component_edit_title: \"Komponente bearbeiten\",\n      level_component_config_schema: \"Konfigurationsschema\",\n      level_system_edit_title: \"System bearbeiten\",\n      create_system_title: \"neues System erstellen\",\n      new_component_title: \"Neue Komponente erstellen\",\n      new_component_field_system: \"System\",\n      new_article_title: \"Erstelle einen neuen Artikel\",\n      new_thang_title: \"Erstelle einen neuen Thang-Typen\",\n      new_level_title: \"Erstelle ein neues Level\",\n      new_article_title_login: \"Melde dich an um einen neuen Artikel zu erstellen\",\n      new_thang_title_login: \"Melde dich an um einen neuen Thang-Typen zu erstellen\",\n      new_level_title_login: \"Melde dich an um ein neues Level zu erstellen\",\n      new_achievement_title: \"Erstelle ein neues Achievement\",\n      new_achievement_title_login: \"Melde dich an um ein neues Achievement zu erstellen\",\n      article_search_title: \"Durchsuche Artikel hier\",\n      thang_search_title: \"Durchsuche Thang-Typen hier\",\n      level_search_title: \"Durchsuche Levels hier\",\n      achievement_search_title: \"Durchsuche Achievements\",\n      read_only_warning2: \"Warnung: Du kannst hier keine Änderungen speichern, weil du nicht angemeldet bist.\",\n      no_achievements: \"Es wurden noch keine Achievements zu diesem Level hinzugefügt.\"\n    },\n    article: {\n      edit_btn_preview: \"Vorschau\",\n      edit_article_title: \"Artikel bearbeiten\"\n    },\n    contribute: {\n      alert_account_message_intro: \"Hey du!\",\n      alert_account_message: \"Um Klassen-Emails abonnieren zu können, musst du dich zuerst anmelden.\",\n      class_attributes: \"Klassenattribute\",\n      join_desc_1: \"Jeder kann mithelfen! Schau dir unseren \",\n      join_desc_2: \"um anzufangen, und hake die Checkbox unten an um dich als mutiger Erzmagier einzutragen und über die neuesten Nachrichten per Email zu erhalten. Möchtest du dich darüber unterhalten was zu tun ist oder wie du dich besser beteiligen kannst? \",\n      join_desc_3: \", oder finde uns in unserem \",\n      join_desc_4: \"und wir schauen von dort mal!\",\n      join_url_email: \"Emaile uns\",\n      archmage_subscribe_desc: \"Erhalte Emails über neue Programmier-Möglichkeiten und Ankündigungen.\",\n      artisan_join_desc: \"Verwende den Level-Editor mit diesen Schritten, mehr oder weniger:\",\n      artisan_join_step1: \"Lese die Dokumentation.\",\n      artisan_join_step2: \"Erstelle ein neues Level und erkunde existierende Level.\",\n      artisan_join_step3: \"Finde uns im öffentlichen Slack Raum, falls du Hilfe brauchst.\",\n      artisan_join_step4: \"Poste deine Level im Forum um Feedback zu erhalten.\",\n      artisan_subscribe_desc: \"Erhalte Emails über Level-Editor Updates und Ankündigungen.\",\n      adventurer_subscribe_desc: \"Erhalte Emails wenn es neue Levels zum Testen gibt.\",\n      scribe_introduction_url_mozilla: \"Mozilla Developer Network\",\n      contact_us_url: \"Kontaktiere uns\",\n      scribe_join_description: \"erzähle uns ein bißchen über dich, deine Erfahrung mit der Programmierung und über welche Themen du schreiben möchtest. Wir werden von dort aus gehen!\",\n      scribe_subscribe_desc: \"Erhalte Emails über Ankündigungen zu schreibenden Artikeln.\",\n      diplomat_introduction_pref: \"Also wenn es eines gibt was wir gelernt haben vom \",\n      diplomat_launch_url: \"Launch im Oktober\",\n      diplomat_introduction_suf: \"ist das es ein großes Interesse an CodeCombat in anderen Ländern gibt! Wir stellen eine Truppe von Übersetzern zusammen, die gewillt sind einen Satz Wörten in einen anderen Satz Wörter umzuwandeln um CodeCombat der Welt so zugänglich wie möglich zu machen. Wenn du es magst eine Vorschau von zukünftigem Content zu erhalten und diese Level so schnell wie möglich deinen Landsleuten zur Verfügung zu stellen, dann ist diese Klasse vielleicht für dich.\",\n      diplomat_join_pref_github: \"Finde deine Sprachdatei \",\n      diplomat_github_url: \"bei GitHub\",\n      diplomat_join_suf_github: \", editiere sie online und reiche einen Pull Request ein. Außerdem, hake die Checkbox unten an um über neue Entwicklungen bei der Internationalisierung auf dem laufenden zu bleiben!\",\n      diplomat_subscribe_desc: \"Erhalte Emails über i18n Entwicklungen und Level die übersetzt werden müssen.\",\n      ambassador_introduction: \"Wir bauen einen Community und du bist die Verbindung dazu. Wir haben Olark Chats, Email und soziale Netzwerke mit vielen Menschen mit denen man sprechen, dabei helfen mit dem Spiel vertraut zu werden und von lernen kann. Wenn du helfen möchtest Leute zu involvieren, Spass zu haben und ein gutes Gefühl für den Puls von CodeCombat und wo wir hn wollen, dann könnte diese Klasse für dich sein.\",\n      ambassador_join_note_strong: \"Anmerkung\",\n      ambassador_subscribe_desc: \"Erhalte Emails über Support-Updates and Mehrspieler-Entwicklungen.\",\n      changes_auto_save: \"Änderungen an Checkboxen werden automatisch gespeichert.\",\n      diligent_scribes: \"Unsere fleißgen Schreiber:\",\n      powerful_archmages: \"Unsere mächtigen Erzmagier:\",\n      creative_artisans: \"Unsere kreativen Handwerker:\",\n      brave_adventurers: \"Unsere mutigen Abenteurer:\",\n      translating_diplomats: \"Unsere übersetzenden Diplomaten:\",\n      helpful_ambassadors: \"Unsere hilfreichen Botschafter:\"\n    },\n    ladder: {\n      my_matches: \"Meine Matches\",\n      simulate: \"Simuliere\",\n      simulation_explanation: \"Durch das Simulieren von Spielen kannst du deine Spiele schneller rangiert bekommen!\",\n      simulate_games: \"Simuliere Spiele!\",\n      games_simulated_by: \"Spiele die durch dich simuliert worden:\",\n      games_simulated_for: \"Spiele die für dich simuliert worden:\",\n      games_simulated: \"simulierte Spiele\",\n      games_played: \"gespielte Spiele\",\n      ratio: \"Ratio\",\n      leaderboard: \"Rangliste\",\n      battle_as: \"Kämpfe als \",\n      summary_your: \"Deine \",\n      summary_matches: \"Matches - \",\n      summary_wins: \" Siege, \",\n      help_simulate: \"Hilf Spiele zu simulieren?\",\n      choose_opponent: \"Wähle einen Gegner\",\n      select_your_language: \"Wähle deine Sprache!\",\n      tutorial_play: \"Spiele Tutorial\",\n      tutorial_recommended: \"Empfohlen, wenn du noch nie zuvor gespielt hast.\",\n      tutorial_skip: \"Überspringe Tutorial\",\n      tutorial_not_sure: \"Nicht sicher was hier ab geht?\",\n      tutorial_play_first: \"Spiele zuerst das Tutorial.\",\n      simple_ai: \"Einfache KI\",\n      warmup: \"Aufwärmen\",\n      friends_playing: \"spielende Freunde\",\n      log_in_for_friends: \"Melde dich an um mit deinen Freunden zu spielen!\",\n      social_connect_blurb: \"Verbinde und spiele gegen deine Freunde!\",\n      invite_friends_to_battle: \"Lade deine Freunde zum Kampf ein!\",\n      fight: \"Kämpft!\",\n      watch_victory: \"Schau dir deinen Sieg an\",\n      defeat_the: \"Besiege den\",\n      tournament_ends: \"Turnier endet\",\n      tournament_ended: \"Turnier beendet\",\n      tournament_rules: \"Turnier-Regeln\",\n      tournament_blurb: \"Schreibe Code, sammle Gold, erstelle Armeen, zerquetsche Feinde, gewinne Preis und verbessere deine Karriere in unserem 40.000 $ Greed-Turnier! Schau dir die Details\",\n      tournament_blurb_criss_cross: \"Gewinne Gebote, konstruiere Pfade, trickse Feinde aus, greife Edelsteine ab und verbessere deine Karriere in unserem Criss-Cross-Turnier! Schau dir die Details\",\n      tournament_blurb_blog: \"auf unserem Blog an\",\n      rules: \"Regeln\",\n      winners: \"Gewinner\"\n    },\n    user: {\n      stats: \"Statistiken\",\n      singleplayer_title: \"Einzelspieler Level\",\n      multiplayer_title: \"Mehrspieler Level\",\n      achievements_title: \"Achievements\",\n      last_played: \"Zuletzt gespielt\",\n      status: \"Status\",\n      status_completed: \"Vollendet\",\n      status_unfinished: \"Unvollendet\",\n      no_singleplayer: \"Noch keine Einzelspieler-Spiele gespielt.\",\n      no_multiplayer: \"Noch keine Mehrspieler-Spiele gespielt.\",\n      no_achievements: \"Noch keine Achievements verdient.\",\n      favorite_prefix: \"Lieblingssprache ist \",\n      favorite_postfix: \".\"\n    },\n    achievements: {\n      amount_achieved: \"Anzahl\",\n      achievement: \"Achievement\"\n    },\n    loading_error: {\n      could_not_load: \"Fehler beim Laden vom Server\",\n      connection_failure: \"Verbindung fehlgeschlagen.\",\n      unauthorized: \"Du musst angemeldet sein. Hast du Cookies ausgeschaltet?\",\n      forbidden: \"Sie haben nicht die nötigen Berechtigungen.\",\n      not_found: \"Nicht gefunden.\",\n      not_allowed: \"Methode nicht erlaubt.\",\n      timeout: \"Server timeout.\",\n      conflict: \"Ressourcen Konflikt.\",\n      bad_input: \"Falsche Eingabe.\",\n      server_error: \"Server Fehler.\",\n      unknown: \"Unbekannter Fehler.\"\n    },\n    resources: {\n      level: \"Level\",\n      patches: \"Patche\",\n      system: \"System\",\n      systems: \"Systeme\",\n      component: \"Komponente\",\n      components: \"Komponenten\"\n    },\n    delta: {\n      added: \"hinzugefügt\",\n      modified: \"modifiziert\",\n      deleted: \"gelöscht\",\n      text_diff: \"Text Diff\",\n      merge_conflict_with: \"MERGE KONFLIKT MIT\",\n      no_changes: \"Keine Änderungen\"\n    },\n    legal: {\n      page_title: \"Rechtliches\",\n      opensource_description_prefix: \"Schau dir \",\n      github_url: \"unsere GitHub-Seite\",\n      opensource_description_center: \" an und mach mit wenn Du möchtest! CodeCombat baut auf duzenden Open Source Projekten auf, und wir lieben sie. Schau dir die Liste in \",\n      archmage_wiki_url: \"unserem Erzmagier-Wiki\",\n      opensource_description_suffix: \" an, welche Software dieses Spiel möglich macht.\",\n      practices_title: \"Best Practices\",\n      practices_description: \"Dies sind unsere Versprechen an dich, den Spieler, in weniger Fachchinesisch.\",\n      privacy_title: \"Datenschutz\",\n      security_title: \"Datensicherheit\",\n      security_description: \"Wir streben an, deine persönlichen Daten sicher zu verwahren. Als Open Source Projekt ist unsere Site frei zugänglich für jedermann, auch um unsere Sicherheitsmaßnahmen in Augenschein zu nehmen und zu verbessern.\",\n      email_title: \"Email\",\n      email_description_prefix: \"Wir werden dich nicht mit Spam überschwemmen. Mittels\",\n      email_settings_url: \"deiner Emaileinstellungen\",\n      email_description_suffix: \"oder durch von uns gesendete Links kannst du jederzeit deine Einstellungen ändern und Abonnements kündigen.\",\n      cost_title: \"Kosten\",\n      copyrights_title: \"Copyrights und Lizenzen\",\n      contributor_title: \"Contributor License Agreement\",\n      contributor_description_prefix: \"Alle Beiträge, sowohl auf unserer Webseite als auch in unserem GitHub Repository, unterliegen unserer\",\n      cla_url: \"CLA\",\n      contributor_description_suffix: \"zu welcher du dich einverstanden erklären musst bevor du beitragen kannst.\",\n      code_title: \"Code - MIT\",\n      mit_license_url: \"MIT Lizenz\",\n      code_description_suffix: \"Dies beihnhaltet all den Code in Systemen und Komponenten der für die Erstellung von Levels durch CodeCombat zu Verfügung gestellt wird.\",\n      art_title: \"Grafiken/Musik - Creative Commons \",\n      cc_license_url: \"Creative Commons Attribution 4.0 International License\",\n      art_music: \"Musik\",\n      art_sound: \"Sound\",\n      art_artwork: \"Grafiken\",\n      art_sprites: \"Sprites\",\n      use_list_1: \"Wenn in einem Film verwendet, nenne codecombat.com in den Credits/Abspann\",\n      rights_title: \"Rechte vorbehalten\",\n      rights_desc: \"Alle Rechte vorbehalten für die Level selbst. Dies beinhaltet\",\n      rights_scripts: \"Skripte\",\n      rights_unit: \"Einheitenkonfiguration\",\n      rights_writings: \"Schriftliches\",\n      rights_media: \"Medien (Sounds, Musik) und jede andere Form von kreativem Inhalt der spezifisch für das Level ist nicht generell für die Levelerstellung bereitgestellt wird.\",\n      nutshell_title: \"Zusammenfassung\",\n      canonical: \"Die englische Version dieses Dokuments ist die definitive, kanonische Version. Sollte es Unterschiede zwischen den Übersetzungen geben, dann hat das englische Dokument Vorrang.\"\n    },\n    ladder_prizes: {\n      title: \"Turnierpreise\",\n      blurb_1: \"Die Preise werden verliehen nach\",\n      blurb_2: \"den Turnierregeln\",\n      blurb_3: \"and den Top Mensch und Oger-Spieler.\",\n      blurb_4: \"Zwei Teams heißt die doppelte Anzahl zu gewinnender Preise!\",\n      blurb_5: \"(Es wird zwei Erstplazierte, zwei Zeitplatzierte, usw. geben)\",\n      rank: \"Rang\",\n      prizes: \"Gewinne\",\n      total_value: \"Gesamtwert\",\n      in_cash: \"in Bar\",\n      custom_wizard: \"Benutzerdefinierter CodeCombat Zauberer\",\n      custom_avatar: \"Benutzerdefinierter CodeCombat Avatar\",\n      one_month_coupon: \"Gutschein: Wähle entweder Rails oder HTML\",\n      one_month_discount: \"30% Rabatt: Wähle entweder Rails oder HTML\",\n      license: \"Lizenz\",\n      oreilly: \"Ebook deiner Wahl\"\n    },\n    calendar: {\n      year: \"Jahr\",\n      day: \"Tag\",\n      month: \"Monat\",\n      january: \"Januar\",\n      february: \"Februar\",\n      march: \"März\",\n      april: \"April\",\n      may: \"Mai\",\n      june: \"Juni\",\n      july: \"Juli\",\n      august: \"August\",\n      september: \"September\",\n      october: \"Oktober\",\n      november: \"November\",\n      december: \"Dezember\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1039\n");

/***/ })

});