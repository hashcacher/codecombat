/*! hash:345dfe6c0e434e9c7378, chunkhash:23b08e5da0621ba5220f, name:locale/fi, filebase:fi.bundle.js, query:, file:javascripts/chunks/locale/fi.bundle.js */
webpackJsonp([59],{

/***/ 1049:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"suomi\",\n  englishDescription: \"Finnish\",\n  translation: {\n    new_home: {\n      built_for_teachers_title: \"Ohjelmointipeli, joka on rakennettu opettajat mielessä pitäen\",\n      built_for_teachers_blurb: \"Ohjelmoinnin opettaminen lapsille voi usein tuntua ylivoimaiselta. CodeCombat auttaa kaikkia opettajia opettamaan oppilaitaan, miten ohjelmoida joko Javascriptilla tai Pythonilla, kahdella maailman suosituimmista ohjelmointikielistä. Kattava opetussuunnitelma sisältää kuusi tietotekniikan osa-aluetta ja vahvistaa oppimista projektipohjaisten peli- ja web-kehitysosioiden avulla, joten lapset etenevät matkalla perussyntaksista rekursioon saakka!\",\n      built_for_teachers_subtitle1: \"Tietotekniikka\",\n      built_for_teachers_subtitle2: \"Pelinkehitys\",\n      built_for_teachers_subtitle3: \"Web-kehitys\",\n      century_skills_title: \"2000-luvun taitoja\",\n      century_skills_blurb1: \"Oppilaat eivät kehitä vain sankareitaan, he kehittävät itseään\",\n      global_subtitle2: \"Riviä koodia\",\n      slogan: \"Lumoavin peli ohjelmoinnin oppimiseen.\",\n      classroom_edition: \"Kouluversio:\",\n      learn_to_code: \"Opi koodaamaan:\",\n      play_now: \"Pelaa Nyt\",\n      im_a_teacher: \"Olen Opettaja\",\n      im_a_student: \"Olen Oppilas\",\n      learn_more: \"Lue lisää\",\n      classroom_in_a_box: \"Luokkahuone taskussa tietojenkäsittelyn opetukseen.\",\n      codecombat_is: \"CodeCombat on alusta <strong>oppilaille</strong> oppia ohjelmointia pelaamisen kautta.\",\n      our_courses: \"Kurssimme on suunniteltu juuri <strong>luokkahuone käyttöön</strong>, jopa opettajille joilla on vain vähän ohjelmoinnin osaamista.\",\n      watch_how: \"Katso kuinka CodeCombat muuttaa miten tietojenkäsittelyä voi oppia.\",\n      top_screenshots_hint: \"Oppilaat kirjoittavat koodia ja näkevät muutokset reaaliajassa\",\n      designed_with: \"Suunniteltu opettajat mielessä\",\n      forgot_learning: \"Luulenpa, että he oikeastaan unohtivat, että olivat oppimassa jotain.\",\n      wanted_to_do: \"´Koodaus on sitä mitä olen aina halunnut tehdä, enkä uskonut että voisin oppia sitä koulussa.\",\n      request_demo_title: \"Aloita oppilaitesi kanssa tänään!\",\n      request_demo: \"Pyydä demo\",\n      have_an_account: \"Onko sinulla jo käyttäjätunnus?\",\n      logged_in_as: \"Olet kirjautunut sisään käyttäjänä\",\n      ffa: \"Ilmainen kaikille oppilaille\",\n      coming_soon: \"Lisää tulossa pian!\",\n      courses_available_in: \"Kurssimme on saatavilla JavaScript ja Python ohjelmointikielillä. Nettikehitys kurssit käyttävät HTML, CSS, ja jQuery kieliä.\",\n      run_class: \"Kaikki mitä tarvitset tietotekniikan opetukseen koulussasi, eikä tietoteknistä taustaa edes vaadita.\",\n      view_profile: \"Tarkastele profiiliani\",\n      view_progress: \"Tarkastele edistymistäni\",\n      go_to_courses: \"Siirry omiin kursseihin\",\n      want_coco: \"Haluatko CodeCombat:in kouluusi?\"\n    },\n    nav: {\n      map: \"Kartta\",\n      play: \"Tasot\",\n      community: \"Yhteisö\",\n      courses: \"Kurssit\",\n      blog: \"Blogi\",\n      forum: \"Foorumi\",\n      account: \"Tili\",\n      my_account: \"Oma Tili\",\n      profile: \"Profiili\",\n      home: \"Koti\",\n      contribute: \"Avusta\",\n      legal: \"Laillisuus\",\n      privacy: \"Yksityisyys\",\n      about: \"Tietoja\",\n      contact: \"Ota yhteyttä\",\n      twitter_follow: \"Seuraa\",\n      my_classrooms: \"Minun luokkani\",\n      my_courses: \"Minun kurssini\",\n      careers: \"Ura\",\n      facebook: \"Facebook\",\n      twitter: \"Twitter\",\n      create_a_class: \"Luo luokka\",\n      other: \"Muu\",\n      learn_to_code: \"Opi koodaamaan!\",\n      schools: \"Koulut\",\n      get_involved: \"Osallistu\",\n      open_source: \"Avoin lähdekoodi (GitHub)\",\n      support: \"Tuki\",\n      faqs: \"UKK\",\n      copyright_prefix: \"Tekijänoikeus\",\n      copyright_suffix: \"Kaikki oikeudet pidätetään.\",\n      help_pref: \"Tarviksetko apua? lähetä viesti\",\n      help_suff: \"ja me autamme!\",\n      resource_hub: \"Resurssit\",\n      parent: \"Vanhemmat\"\n    },\n    modal: {\n      close: \"Sulje\",\n      okay: \"Ok\"\n    },\n    not_found: {\n      page_not_found: \"Sivua ei löydy\"\n    },\n    diplomat_suggestion: {\n      title: \"Auta CodeCombatin kääntämisessä!\",\n      sub_heading: \"Tarvitsemme apuasi käännöksessä.\",\n      pitch_body: \"CodeCombat:ia kehitetään englanniksi mutta pelaajia on jo ympäri maailmaa. Monet haluavat pelata peliä omalla kielellään, joten jos haluat osallistua kääntämiseen, ilmoittaudu Diplomaatiksi ja anna panoksesi.\",\n      missing_translations: \"Siihen asti kunnes koko peli on käännetty suomeksi näet joitain tekstejä edelleen englanniksi.\",\n      learn_more: \"Ota selvää mitä tarkoitta olla Diplomaatti\",\n      subscribe_as_diplomat: \"Tilaa Diplomaatin uutiskirje\"\n    },\n    play: {\n      play_as: \"Pelaa\",\n      compete: \"Kilpaile!\",\n      spectate: \"Tarkkaile\",\n      players: \"pelaajat\",\n      hours_played: \"pelatut tunnit\",\n      items: \"Esineet\",\n      unlock: \"Avaa\",\n      confirm: \"Varmista\",\n      owned: \"Omistettu\",\n      locked: \"Lukittu\",\n      available: \"Saatavilla\",\n      skills_granted: \"Taidot\",\n      heroes: \"Sankarit\",\n      achievements: \"Saavutukset\",\n      settings: \"Asetukset\",\n      poll: \"Kysely\",\n      next: \"Seuraava\",\n      change_hero: \"Vaihda sankaria\",\n      change_hero_or_language: \"Vaihda sankaria tai kieltä\",\n      buy_gems: \"Osta jalokiviä\",\n      subscribers_only: \"Vain tilaajille!\",\n      subscribe_unlock: \"Tilaa avataksesi!\",\n      subscriber_heroes: \"Tilaa tänään saadaksesi heti käyttöösi Amaran, Hushbaumin ja Hattorin!\",\n      subscriber_gems: \"Tilaa tänään voidaksesi ostaa tämän sankarin jalokivillä!\",\n      anonymous: \"Nimetön Pelaaja\",\n      level_difficulty: \"Vaikeustaso: \",\n      awaiting_levels_adventurer_prefix: \"Avaamme uusia tasoja viikoittain.\",\n      awaiting_levels_adventurer: \"Kirjaudu seikkailijaksi\",\n      awaiting_levels_adventurer_suffix: \"ja ole ensimmäisten joukossa pelaamassa uusia tasoja.\",\n      adjust_volume: \"Aänenvoimakkuus\",\n      campaign_multiplayer: \"Moninpeli Areenat\",\n      campaign_multiplayer_description: \"... joissa mittaat ohjelmointitaitosi toisia pelaajia vastaan.\",\n      brain_pop_done: \"Pieksit örkit koodilla! Voitto!\",\n      brain_pop_challenge: \"Haasta itsesi ja pelaa uudelleen eri ohjelmointikielellä!\",\n      replay: \"Uudelleentoisto\",\n      back_to_classroom: \"Takaisin luokkahuoneeseen\",\n      teacher_button: \"Opettajille\",\n      get_more_codecombat: \"Hanki Jatkoa CodeCombat:lle\"\n    },\n    code: {\n      \"if\": \"jos\",\n      \"else\": \"muussa tapauksessa\",\n      elif: \"else if - muussa tapauksessa, jos\",\n      \"while\": \"niin kauan kuin\",\n      loop: \"silmukka\",\n      \"for\": \"näille\",\n      \"break\": \"keskeytä silmukka\",\n      \"continue\": \"ohita ja jatka silmukkaa\",\n      pass: \"pass\",\n      \"return\": \"palauta\",\n      then: \"sitten\",\n      \"do\": \"tee näin\",\n      end: \"loppu\",\n      \"function\": \"funktio\",\n      def: \"määrittele\",\n      \"var\": \"muuttuja\",\n      self: \"itse\",\n      hero: \"sankari\",\n      \"this\": \"tämä\",\n      or: \"tai (jompi kumpi)\",\n      \"||\": \"tai (jompi kumpi)\",\n      and: \"ja (sekä että)\",\n      \"&&\": \"ja (sekä että)\",\n      not: \"ei\",\n      \"!\": \"ei\",\n      \"=\": \"aseta\",\n      \"==\": \"ovat samat (yhtäsuuret)\",\n      \"===\": \"täysin yhtäsuuri\",\n      \"!=\": \"ovat eri (erisuuruuset)\",\n      \"!==\": \"ei täysin yhtäsuuri\",\n      \">\": \"suurempi kuin\",\n      \">=\": \"suurempi tai yhtäsuuri kuin\",\n      \"<\": \"pienempi kuin\",\n      \"<=\": \"pienempi tai yhtäsuuri kuin\",\n      \"*\": \"kertomerkki\",\n      \"/\": \"jakoviiva\",\n      \"+\": \"plus\",\n      \"-\": \"miinus\",\n      \"+=\": \"summaa ja aseta muuttujalle uusi arvo\",\n      \"-=\": \"vähennä ja aseta muuttujalle uusi arvo\",\n      True: \"Totta\",\n      \"true\": \"totta\",\n      False: \"Epätotta\",\n      \"false\": \"epätotta\",\n      undefined: \"määrittelemätön\",\n      \"null\": \"tyhjä\",\n      nil: \"nolla\",\n      None: \"Olematon\"\n    },\n    share_progress_modal: {\n      blurb: \"Edistyt loistavasti! Kerro ystävillesi mitä olet oppinut CodeCombat:n avulla.\",\n      email_invalid: \"Virheellinen sähköpostiosoite.\",\n      form_blurb: \"Syötä heidän sähköpostiosoitteet ja me kerromme heille!\",\n      form_label: \"Sähköpostiosoite\",\n      placeholder: \"osoite\",\n      title: \"Erinomaista työtä, Oppipoika\"\n    },\n    login: {\n      sign_up: \"Luo Tili\",\n      email_or_username: \"Käyttäjätunnus tai sähköposti\",\n      log_in: \"Kirjaudu\",\n      logging_in: \"Kirjaudutaan\",\n      log_out: \"Kirjaudu Ulos\",\n      forgot_password: \"Unohditko salasanasi?\",\n      finishing: \"Viimeistellään\",\n      sign_in_with_facebook: \"Kirjaudu Facebook tunnuksilla\",\n      sign_in_with_gplus: \"Kirjaudu G+ tunnuksilla\",\n      signup_switch: \"Haluatko luoda tilin?\"\n    },\n    signup: {\n      create_student_header: \"Luo Oppilaan Tili\",\n      create_teacher_header: \"Luo Opettajan Tili\",\n      create_individual_header: \"Luo Yksittäinen Tili\",\n      email_announcements: \"Haluatko ilmoituksia sähköpostiisi\",\n      sign_in_to_continue: \"Kirjaudu sisään tai luo tunnus jatkaaksesi\",\n      creating: \"Luodaan tili...\",\n      sign_up: \"Luo tili\",\n      log_in: \"kirjaudu sisään salasanalla\",\n      login: \"Kirjaudu sisään\",\n      required: \"Kirjaudu ensin jotta pääset jatkamaan.\",\n      login_switch: \"Onko sinulla jo tili?\",\n      optional: \"vapaaehtoinen\",\n      connected_gplus_header: \"Google+ on yhdistetty onnistuneesti!\",\n      connected_gplus_p: \"Luo tili loppuun kirjautaksesi sisään Google+ käyttäjälläsi.\",\n      connected_facebook_header: \"Facebook on yhdistetty onnistuneesti!\",\n      connected_facebook_p: \"Luo tili loppuun kirjautuaksesi Facebook käyttäjälläsi.\",\n      hey_students: \"Oppilaat, syöttäkää luokkakoodinne jonka saatte opettajalta.\",\n      birthday: \"Syntymäpäivä\",\n      parent_email_blurb: \"Tiedämme että haluat heti opppia ohjelmoimaan &mdash; me olemme innoissame myös! Vanhempasi saavat ohjeet tilin luomiseen sähköpostiinsa. Lähetä viesti osoitteeseen {{email_link}} jos sinulla on jotain kysyttävää.\",\n      classroom_not_found: \"Luokkia ei löytynyt tuolla koodilla. Tarkista oikeinkirjoitus tai kysy apua opettajaltasi.\",\n      checking: \"Tarikistetaan...\",\n      account_exists: \"Sähköposti on jo käytössä:\",\n      sign_in: \"Kirjaudu sisään\",\n      email_good: \"Sähköposti toimii!\",\n      name_taken: \"Nimi on jo käytössä! Miten olisi {{suggestedName}}?\",\n      name_available: \"Käyttäjänimi saatavilla!\",\n      name_is_email: \"Käyttäjätunnus ei voi olla sähköpostiosoite\",\n      choose_type: \"Valitse tilin tyyppi:\",\n      teacher_type_1: \"Opeta ohjelmoimista CodeCombat:in avulla!\",\n      teacher_type_2: \"Aseta luokkasi valmiiksi\",\n      teacher_type_3: \"Pääsy kurssiohjeisiin\",\n      teacher_type_4: \"Näe oppilaan edistyminen\",\n      signup_as_teacher: \"Luo Opettajan Tili\",\n      student_type_1: \"Opi ohjelmoimaan pelatessasi lumoavaa peliä!\",\n      student_type_2: \"Pelaa luokkasi kanssa\",\n      student_type_3: \"Taistele areenoilla\",\n      student_type_4: \"Valitse sankarisi!\",\n      student_type_5: \"Ota Luokkakoodi valmiiksi!\",\n      signup_as_student: \"Luo Oppilaan Tili\",\n      individuals_or_parents: \"Muut\",\n      individual_type: \"Pelaajille jotka eivät ole luokasssa oppimassa koodaamaan. Vanhempien tulisi luoda tili täällä.\",\n      signup_as_individual: \"Luo Yksittäinen Tili\",\n      enter_class_code: \"Syötä Luokkakoodisi\",\n      enter_birthdate: \"Syötä syntymäaikasi:\",\n      parent_use_birthdate: \"Vanhemmat, käyttäkää omaa syntymäaikaanne.\",\n      ask_teacher_1: \"Kysy opettajaltasi luokkakoodia.\",\n      ask_teacher_2: \"Etkö ole osa luokka? Luo \",\n      ask_teacher_3: \"Yksittäinen Tili\",\n      ask_teacher_4: \" sen sijaan.\",\n      about_to_join: \"Olet liitymässä:\",\n      enter_parent_email: \"Syötä vanhempasi sähköposti:\",\n      parent_email_error: \"Jotain meni pieleen sähköpostin lähetyksessä. Tarkista osoite ja koita uudestaan.\",\n      parent_email_sent: \"Lähetimme sähköpostin jossa on ohjeet tilin luomiseen. Pyydä vanhempaasi tarkistamaan sähköpostinsa.\",\n      account_created: \"Tili luotu!\",\n      confirm_student_blurb: \"Kirjoita ylös tietosi jotta et unohda niitä. Opettajasi voi nollata salasanasi jos unohdat sen.\",\n      confirm_individual_blurb: \"Kirjoita tietosi ylös saatat tarvita niitä myöhemmin. Vahvista sähköpostiosoiteesi, että voit käyttää sitä salasanasi nollaamiseen tarvittaessa!\",\n      write_this_down: \"Kirjoita tämä ylös:\",\n      start_playing: \"Aloita pelaaminen!\",\n      sso_connected: \"Onnistuneesti yhdistetty:\",\n      select_your_starting_hero: \"Valitse aloitussankarisi:\",\n      you_can_always_change_your_hero_later: \"Voit vaihtaa sankariasi myöhemmin.\",\n      teacher_ready_to_create_class: \"Olet valmis luomaan ensimmäisen oppituntisi!\",\n      dont_use_our_email_silly: \"Laita vanhempiesi sähköposti tähän. Ei omaasi.\",\n      eu_confirmation_place_of_processing: \"Lue lisää mahdollisista riskeistä\",\n      eu_confirmation_student: \"Jos et ole varma, kysy opettajaltasi.\"\n    },\n    recover: {\n      recover_account_title: \"Palauta tili\",\n      send_password: \"Lähetä palautusviesti\",\n      recovery_sent: \"Palautusviesti lähetetty.\"\n    },\n    items: {\n      primary: \"Aseet\",\n      secondary: \"Kilvet\",\n      armor: \"Suojat\",\n      accessories: \"Tarvikkeet\",\n      misc: \"Sekalaiset\",\n      books: \"Kirjat\"\n    },\n    common: {\n      back: \"Takaisin\",\n      coming_soon: \"Tulossa pian!\",\n      \"continue\": \"Jatka\",\n      next: \"Seuraava\",\n      default_code: \"Oletuskoodi\",\n      loading: \"Ladataan...\",\n      overview: \"Yleissilmäys\",\n      processing: \"Prosessoidaan...\",\n      solution: \"Ratkaisu\",\n      table_of_contents: \"Sisällysluettelo\",\n      intro: \"Johdanto\",\n      saving: \"Tallennetaan...\",\n      sending: \"Lähetetään...\",\n      send: \"Lähetä\",\n      sent: \"Lähetetty\",\n      cancel: \"Peruuta\",\n      save: \"Tallenna\",\n      publish: \"Julkaise\",\n      create: \"Luo\",\n      fork: \"Haarauta\",\n      play: \"Pelaa\",\n      retry: \"Kokeile uudestaan\",\n      actions: \"Toiminnot\",\n      info: \"Tietoa\",\n      help: \"Apua\",\n      watch: \"Seuraa\",\n      unwatch: \"Lopeta Seuraaminen\",\n      submit_patch: \"Lähetä paikkaus\",\n      submit_changes: \"Lähetä muutos\",\n      save_changes: \"Tallenna muutokset\",\n      required_field: \"Vaadittu kenttä\"\n    },\n    general: {\n      and: \"ja\",\n      name: \"Nimi\",\n      date: \"Päiväys\",\n      body: \"Vartalo\",\n      version: \"Versio\",\n      pending: \"Odotetaan\",\n      accepted: \"Hyväksytty\",\n      rejected: \"Hylätty\",\n      withdrawn: \"Vedetty pois\",\n      accept: \"Hyväksy\",\n      reject: \"Hylkää\",\n      withdraw: \"Peruuta\",\n      submitter: \"Lähettäjä\",\n      submitted: \"Lähetetty\",\n      commit_msg: \"Lähetä Viesti\",\n      version_history: \"Versiohistoria\",\n      version_history_for: \"Versiohistoria: \",\n      select_changes: \"Valitse kaksi versiota vertailuun.\",\n      undo_prefix: \"Peruuta\",\n      redo_prefix: \"Tee uudelleen\",\n      play_preview: \"Toista esikatselu tasosta\",\n      result: \"Tulos\",\n      results: \"Tulokset\",\n      description: \"Kuvaus\",\n      or: \"tai\",\n      subject: \"Aihe\",\n      email: \"Sähköposti\",\n      password: \"Salasana\",\n      confirm_password: \"Vahvista salasana\",\n      message: \"Viesti\",\n      code: \"Koodi\",\n      ladder: \"Liiga\",\n      when: \"Kun\",\n      opponent: \"Vastustaja\",\n      rank: \"Arvo\",\n      score: \"Pisteet\",\n      win: \"Voitto\",\n      loss: \"Tappio\",\n      tie: \"Tasapeli\",\n      easy: \"Helppo\",\n      medium: \"Haastava\",\n      hard: \"Vaikea\",\n      player: \"Pelaaja\",\n      player_level: \"Taso\",\n      warrior: \"Sotilas\",\n      ranger: \"Vartija\",\n      wizard: \"Velho\",\n      first_name: \"Etunimi\",\n      last_name: \"Sukunimi\",\n      last_initial: \"Nimikirjain\",\n      username: \"Käyttäjätunnus\",\n      contact_us: \"Ota yhteyttä\",\n      close_window: \"Sulje ikkuna\",\n      learn_more: \"Lue lisää\",\n      more: \"Lisää\",\n      fewer: \"Vähemmän\",\n      \"with\": \"lisäksi\"\n    },\n    units: {\n      second: \"sekunti\",\n      seconds: \"sekuntia\",\n      minute: \"minuutti\",\n      minutes: \"minuuttia\",\n      hour: \"tunti\",\n      hours: \"tuntia\",\n      day: \"päivä\",\n      days: \"päivää\",\n      week: \"viikko\",\n      weeks: \"viikkoa\",\n      month: \"kuukausi\",\n      months: \"kuukautta\",\n      year: \"vuosi\",\n      years: \"vuotta\"\n    },\n    play_level: {\n      back_to_map: \"Takaisin karttaan\",\n      directions: \"Suunnat\",\n      edit_level: \"Muokkaa tasoa\",\n      keep_learning: \"Jatka oppimista\",\n      explore_codecombat: \"Tutki CodeCombat:a\",\n      finished_hoc: \"Kooditunti on valmis\",\n      get_certificate: \"Hanki todistus!\",\n      level_complete: \"Taso suoritettu\",\n      completed_level: \"Suoritit tason:\",\n      course: \"Kurssi:\",\n      done: \"Valmis\",\n      next_level: \"Seuraava taso\",\n      combo_challenge: \"Kombohaaste\",\n      challenge_unlocked: \"Haaste avattu\",\n      start_challenge: \"Aloita haaste\",\n      next_game: \"Seuraava peli\",\n      languages: \"Kielet\",\n      programming_language: \"Ohjelmointikieli\",\n      show_menu: \"Näytä pelivalikko\",\n      level: \"Taso\",\n      skip: \"Ohita\",\n      game_menu: \"Pelivalikko\",\n      restart: \"Käynnistä uudelleen\",\n      goals: \"Tavoitteet\",\n      goal: \"Tavoite\",\n      running: \"Ajetaan...\",\n      success: \"Onnistui!\",\n      incomplete: \"Kesken\",\n      timed_out: \"Aika loppui\",\n      failing: \"Epäonnistui\",\n      reload: \"Lataa\",\n      reload_title: \"Ladataanko kaikki koodi uudestaan?\",\n      reload_really: \"Oletko varma että haluat ladata tämän tason uudestaan ja aloittaa alusta?\",\n      reload_confirm: \"Lataa Kaikki\",\n      test_level: \"Testaa taso\",\n      victory: \"Voitto\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Valmis\",\n      victory_sign_up: \"Luo tili\",\n      victory_sign_up_poke: \"Haluatko tallettaa koodisi? Luo ilmainen tili!\",\n      victory_rate_the_level: \"Kuinka hauska tämä taso oli?\",\n      victory_return_to_ladder: \"Palaa liigaan\",\n      victory_saving_progress: \"Tallennetaan edistymisesi\",\n      victory_go_home: \"Takaisin kotiin\",\n      victory_review: \"Kerro lisää!\",\n      victory_review_placeholder: \"Millainen kenttä oli?\",\n      victory_hour_of_code_done: \"Oletko Valmis?\",\n      victory_hour_of_code_done_yes: \"Kyllä, Koodituntini on vamis!\",\n      victory_experience_gained: \"Kokemusta\",\n      victory_gems_gained: \"Jalokiviä\",\n      victory_new_item: \"Uusi esine\",\n      victory_new_hero: \"Uusi sankari\",\n      victory_become_a_viking: \"Tule viikingiksi\",\n      tome_cast_button_run: \"Suorita\",\n      tome_cast_button_running: \"Suoritetaan\",\n      tome_cast_button_ran: \"Suoritettu\",\n      tome_submit_button: \"Lähetä\",\n      tome_reload_method: \"Lataa koodi uudelleen\",\n      tome_available_spells: \"Saatavissa olevat taiat\",\n      tome_your_skills: \"Taitosi\",\n      hints: \"Vihjeet\",\n      videos: \"Videoita\",\n      hints_title: \"Vihje {{number}}\",\n      code_saved: \"Koodi on tallennettu\",\n      skip_tutorial: \"Ohita (esc)\",\n      keyboard_shortcuts: \"Pikanäppäimet\",\n      loading_start: \"Aloita Taso\",\n      problem_alert_title: \"Korjaa koodisi\",\n      time_current: \"Nyt:\",\n      time_total: \"Enintään:\",\n      time_goto: \"Mene:\",\n      non_user_code_problem_title: \"Tason lataaminen epäonnistui\",\n      infinite_loop_title: \"Loputon luuppi havaittu\",\n      infinite_loop_description: \"Ohjelmakoodin suoritusta maailman luomiseksi ei saatu päätökseen. Se on todennäköisesti todella hidas tai loputtomassa luupissa. Tai siellä voi olla bugi. Voit joko ajaa koodin uudestaan, tai palauttaa sen alkuperäiseen tilaan. Jos se ei korjaa ongelmaa, kerro siitä meille.\",\n      check_dev_console: \"Voit myös avata kehittäjän konsolin ja katsoa mikä saattaisi olla vialla.\",\n      check_dev_console_link: \"(ohjeet)\",\n      infinite_loop_try_again: \"Yritä uudelleen\",\n      infinite_loop_reset_level: \"Aloita taso uudelleen\",\n      infinite_loop_comment_out: \"Kommentoi koodirivejä\",\n      tip_toggle_play: \"Valitse toista/pysäytä painamalla Ctrl+P.\",\n      tip_scrub_shortcut: \"Paina Ctrl+[ ja Ctrl+] kelataksesi eteen tai taakse.\",\n      tip_guide_exists: \"Katso vinkkejä pelissä, painamalla: Pelivalikko -> Opas.\",\n      tip_open_source: \"CodeCombat on 100% avointa lähdekoodia!\",\n      tip_tell_friends: \"Pidätkö CodeCombatista? Kerro meistä myös ystävillesi!\",\n      tip_beta_launch: \"CodeCombat avattiin betatestaukseen lokakuussa 2013.\",\n      tip_think_solution: \"Mieti ratkaisua, älä ongelmaa.\",\n      tip_theory_practice: \"Teoriassa teoria ja käytäntö ovat sama asia. Käytännössä näin ei ole. - Yogi Berra\",\n      tip_error_free: \"Virheettömiä ohjelmia voi kirjoittaa kahdella eri tavalla. Ikävä kyllä kolmas tapa on ainoa toimiva. - Alan Perlis\",\n      tip_debugging_program: \"Jos debuggaus tarkoittaa virheiden poistamista ohjelmasta, niin ohjelmoinnin on tarkoitettava niiden lisäämistä. - Edsger W. Dijkstra\",\n      tip_forums: \"Tulepa keskustelupalstalle kertomaan mielipiteesi!\",\n      tip_baby_coders: \"Tulevaisuudessa jopa vauvoista tulee Arkkimaageja.\",\n      tip_morale_improves: \"Lataus jatkuu kunnes moraalisi kohenee.\",\n      tip_all_species: \"Me uskomme tasa-arvoisiin mahdollisuuksiin koodauksen oppimisessa.\",\n      tip_google: \"Onko sinulla ongelma, jota et osaa ratkaista? Katso Googlesta!\",\n      tip_solve_then_write: \"Ratkaise ensin ongelma. Kirjoita sitten koodi. - John Johnson\",\n      tip_mistakes_proof_of_trying: \"Virheet koodissa ovat vain todiste siitä että yrität.\",\n      tip_sharpening_swords: \"Teroitetaan miekkoja.\",\n      project_complete: \"Projekti valmis!\",\n      share_this_project: \"Jaa tämä projekti ystävien tai perheen kanssa:\",\n      ready_to_share: \"Oletko valmis julkaisemaan projektisi?\",\n      click_publish: \"Klikkaa \\\"Publish\\\" jotta se ilmestyy luokan galleriaan, käy sitten katsomassa mitä luokkakaverisi ovat rakentaneet! Voit tulla takaisin ja jatkaa tätä projektia. Tulevat muutoksesi tallennetaan ja jaetaan automaattisesti luokkatoveriesi kanssa.\",\n      already_published_prefix: \"Muutoksesi ollaan tallennettu luokan galleriaan.\",\n      already_published_suffix: \"Jatka kokeilemista ja tee tästä projektista jopa vielä parempi tai käy katsomassa mitä luokkakaverisi ovat rakentaneet! Tulevat muutoksesi tallennetaan ja jaetaan automaattisesti luokkatoveriesi kanssa.\",\n      view_gallery: \"Katso galleriaa\",\n      project_published_noty: \"Tasosi on julkaistu!\",\n      keep_editing: \"Jatka muokkaamista\"\n    },\n    game_menu: {\n      inventory_tab: \"Luettelo\",\n      save_load_tab: \"Tallenna/Lataa\",\n      options_tab: \"Asetukset\",\n      guide_tab: \"Opas\",\n      guide_video_tutorial: \"Video-oppaat\",\n      guide_tips: \"Vinkkejä\",\n      multiplayer_tab: \"Moninpelaaja\",\n      auth_tab: \"Kirjaudu sisään\",\n      inventory_caption: \"Varusta sankari\",\n      choose_hero_caption: \"Valitse sankari ja kieli\",\n      options_caption: \"Muuta asetuksia\",\n      guide_caption: \"Ohjeita ja vinkkejä\",\n      multiplayer_caption: \"Pelaa ystävien kanssa!\",\n      auth_caption: \"Tallenna edistymisesi.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Katso Muita Ratkaisuja\",\n      scores: \"Pisteet\",\n      top_players: \"Parhaat pelaajat\",\n      day: \"Tänään\",\n      week: \"Tällä Viikolla\",\n      all: \"Koskaan\",\n      latest: \"Viimeisin\",\n      time: \"Aika\",\n      damage_taken: \"Vanhinkoa saatu\",\n      damage_dealt: \"Vahinkoa annettu\",\n      difficulty: \"Vaikeustaso\",\n      gold_collected: \"Kultaa kerätty\"\n    },\n    inventory: {\n      equipped_item: \"Käytössä\",\n      required_purchase_title: \"Vaadittu\",\n      available_item: \"Saatavilla\",\n      restricted_title: \"Rajoitettu\",\n      should_equip: \"(ota käyttöön tuplaklikkaamalla)\",\n      equipped: \"(käytössä)\",\n      locked: \"(lukittu)\",\n      restricted: \"(ei saatavilla tässä kentässä)\",\n      equip: \"Ota käyttöön\",\n      unequip: \"Ota pois käytöstä\"\n    },\n    buy_gems: {\n      few_gems: \"Muutama jalokivi\",\n      pile_gems: \"Kasa jalokiviä\",\n      chest_gems: \"Arkullinen jalokiviä\",\n      purchasing: \"Ostetaan...\",\n      declined: \"Korttiasi ei hyväksytty\",\n      retrying: \"Palvelinvirhe, yritetään uudelleen.\",\n      prompt_title: \"Ei riittävästi jalokiviä\",\n      prompt_body: \"Haluatko ostaa lisää?\",\n      prompt_button: \"Siirry kauppaan\",\n      recovered: \"Aiempi jalokiviostos palautettu. Ole hyvä ja päivitä sivu.\",\n      price: \"x{{gems}} / kk\",\n      buy_premium: \"Osta Premium\",\n      purchase: \"Osta\",\n      purchased: \"Ostettu\"\n    },\n    subscribe_for_gems: {\n      prompt_title: \"Ei riittävästi jalokiviä!\",\n      prompt_body: \"Tilaa Premium saadaksesi jalokiviä ja vielä enemmän tasoja!\"\n    },\n    earn_gems: {\n      prompt_title: \"Ei tarpeeksi jalokiviä\",\n      prompt_body: \"Jatka pelaamista ansaitaksesi lisää!\"\n    },\n    subscribe: {\n      comparison_blurb: \"Teroita kykyjäsi CodeCombat kuukausitilauksella!\",\n      must_be_logged: \"Kirjaudu ensin sisään. Ole hyvä, luo tunnus tai kirjaudu sisään yläpuolella olevasta valikosta.\",\n      subscribe_title: \"Tilaa\",\n      unsubscribe: \"Poista tilaus\",\n      confirm_unsubscribe: \"Varmista tilauksen poisto\",\n      never_mind: \"Ei se mitään, Me pidämme sinusta jokatapauksessa\",\n      thank_you_months_prefix: \"Kiitos, että olet tukenut meitä viimeiset\",\n      thank_you_months_suffix: \"kuukautta.\",\n      thank_you: \"CodeCombat kiittää tuestasi.\",\n      sorry_to_see_you_go: \"Harmi, että olet päättänyt lähteä! Kerrothan meille, mitä voimme tehdä paremmin.\",\n      unsubscribe_feedback_placeholder: \"Mitä olisimme voineet tehdä?\",\n      stripe_description: \"Kuukausittainen tilaus\",\n      buy_now: \"Osta nyt\",\n      subscription_required_to_play: \"Tarvitset CodeCombat kuukausitilauksen pellataksesi tätä tasoa.\",\n      unlock_help_videos: \"Hanki tilaus avataksesi kaikki video-oppaat.\",\n      personal_sub: \"Henkilökohtainen tilaus\",\n      loading_info: \"Ladataan tilauksen tietoja...\",\n      managed_by: \"Hallinnoija\",\n      will_be_cancelled: \"Peruutus astuu voimaan\",\n      currently_free: \"Sinulla on tällähetkellä ilmainen tilaus\",\n      currently_free_until: \"Tilauksesi on voimassa\",\n      free_subscription: \"Ilmainen tilaus\",\n      was_free_until: \"Ilmainen tilauksesi päättyi\",\n      managed_subs: \"Hallinnoidut tilaukset\",\n      subscribing: \"Tilausta käsitellään...\",\n      current_recipients: \"Tämänhetkiset vastaanottajat\",\n      unsubscribing: \"Tilaus päätetään...\",\n      subscribe_prepaid: \"Tilaa käyttämällä ennakkomaksettua koodinumeroa\",\n      using_prepaid: \"Käytetään ennakkomaksettu koodinumero kuukausitilaukseen\"\n    },\n    choose_hero: {\n      choose_hero: \"Valitse Sankarisi\",\n      programming_language: \"Ohjelmointikieli\",\n      programming_language_description: \"Mitä ohjelmointikieltä haluat käyttää?\",\n      \"default\": \"Oletus\",\n      experimental: \"Kehitteillä\",\n      python_blurb: \"Yksinkertainen mutta voimakas, loistava niin aloittelijoille kuin experteille.\",\n      javascript_blurb: \"Netin kieli. (Ei ole sama kuin Java.)\",\n      coffeescript_blurb: \"Kivempi JavaScript kirjoitusmuoto.\",\n      lua_blurb: \"Pelien skriptauskieli.\",\n      java_blurb: \"(Vain Tilaajille) Android ja enterprise.\",\n      status: \"Tila\",\n      weapons: \"Aseet\",\n      weapons_warrior: \"Miekat - Lyhyt kantama, Ei taikuutta\",\n      weapons_ranger: \"Jouset, tuliaseet - Pitkä kantama, Ei taikuutta\",\n      weapons_wizard: \"Sauvat - Pitkä kantama, Hallitsee taikuuden\",\n      attack: \"Hyökkays\",\n      health: \"Terveys\",\n      speed: \"Nopeus\",\n      regeneration: \"Palautumisnopeus\",\n      range: \"Etäisyys\",\n      blocks: \"Esto\",\n      backstab: \"Selkäänpuukotus\",\n      skills: \"Taidot\",\n      attack_1: \"Tekee\",\n      attack_2: \"vahinkoa\",\n      attack_3: \"käyttämän aseen vahingosta.\",\n      health_1: \"Antaa\",\n      health_2: \"terveyttä\",\n      health_3: \"käyttämien suojien terveydestä.\",\n      speed_1: \"Liikkuu\",\n      speed_2: \"metriä sekunnissa.\",\n      available_for_purchase: \"Hankittavissa\",\n      level_to_unlock: \"Taso, joka avaa:\",\n      restricted_to_certain_heroes: \"Voit pelata tason vain tietyillä sankareilla.\"\n    },\n    skill_docs: {\n      \"function\": \"funktio\",\n      method: \"metodi\",\n      snippet: \"pätkä\",\n      number: \"numero\",\n      array: \"taulukko\",\n      object: \"olio\",\n      string: \"merkkijono\",\n      writable: \"kirjoitettava\",\n      read_only: \"vain luettavaksi\",\n      action: \"Toiminto\",\n      spell: \"Taika\",\n      action_name: \"nimi\",\n      action_cooldown: \"Kesto\",\n      action_specific_cooldown: \"Latausaika\",\n      action_damage: \"Vahinko\",\n      action_range: \"Etäisyys\",\n      action_radius: \"Säde\",\n      action_duration: \"Kesto\",\n      example: \"Esimerkki\",\n      ex: \"esim.\",\n      current_value: \"Nykyinen Arvo\",\n      default_value: \"Oletusarvo\",\n      parameters: \"Parametrit\",\n      required_parameters: \"Vaaditut parametrit\",\n      optional_parameters: \"Vapaaehtoiset parametrit\",\n      returns: \"Palauttaa\",\n      granted_by: \"Mahdollistaa\"\n    },\n    save_load: {\n      granularity_saved_games: \"Tallennettu\",\n      granularity_change_history: \"Historia\"\n    },\n    options: {\n      general_options: \"Yleiset Asetukset\",\n      volume_label: \"Äänenvoimakkuus\",\n      music_label: \"Musiikki\",\n      music_description: \"Aseta taustamusiikki päälle/pois päältä.\",\n      editor_config_title: \"Editorin asetukset\",\n      editor_config_livecompletion_label: \"Automaattinen koodin täydennys\",\n      editor_config_livecompletion_description: \"Näyttää ehdotuksen koodin kirjoittamisen yhteydessä.\",\n      editor_config_invisibles_label: \"Näytä Näkymättömät Merkit\",\n      editor_config_invisibles_description: \"Näyttää myös näkymättömät merkit kuten välilyönnit ja sarkaimet.\",\n      editor_config_indentguides_label: \"Näytä Sisennysapu\",\n      editor_config_indentguides_description: \"Näyttää pystyviivan jokaisen sisennyksen kohdalla.\",\n      editor_config_behaviors_label: \"Älykäät Toiminnot\",\n      editor_config_behaviors_description: \"Täydentää automaattisesti sulut ja lainausmerkit.\"\n    },\n    versions: {\n      save_version_title: \"Tallenna Uusi Versio\",\n      new_major_version: \"Uusi Pääversio\",\n      submitting_patch: \"Lähetetään Patchi...\",\n      cla_prefix: \"Tallentaaksesi muutokset sinun pitää ensin hyväksyä\",\n      cla_url: \"käyttöehdot\",\n      cla_suffix: \".\",\n      cla_agree: \"HYVÄKSYN\",\n      owner_approve: \"Omistajan pitää ensin hyväksyä se ennen kuin muutokset tulevat voimaan.\"\n    },\n    contact: {\n      contact_us: \"Ota yhteyttä CodeCombat\",\n      welcome: \"Mukava kuulla teistä! Käytä tätä lomaketta lähettääksesi meille sähköpostia. \",\n      forum_prefix: \"Kaikissa yleisisä asioissa, kokeile ensin \",\n      forum_page: \"keskustelufoorumiamme\",\n      forum_suffix: \".\",\n      faq_prefix: \"Usein kysytyt kysymykset löydät\",\n      faq: \"Täältä\",\n      subscribe_prefix: \"Jos tarvitset apua kentän läpäisemisessä, ole hyvä ja hanki\",\n      subscribe: \"CodeCombat kuukausitilaus\",\n      subscribe_suffix: \"ja autamme mielellämme teitä ohjelmakoodinne kanssa.\",\n      subscriber_support: \"Kun olette CodeCombat kuukausitilaaja, sähköpostisi käsitellään etusijalla.\",\n      screenshot_included: \"Kuvankaappaus liitetty.\",\n      where_reply: \"Mihin haluatte vastauksen?\",\n      send: \"Lähetä\"\n    },\n    account_settings: {\n      title: \"Tiliasetukset\",\n      not_logged_in: \"Kirjaudu sisään tai luo tili jotta pelitilanne voidaan tallentaa.\",\n      me_tab: \"Minä\",\n      picture_tab: \"Kuva\",\n      delete_account_tab: \"Poista Tili\",\n      wrong_email: \"Virheellinen sähköposti\",\n      wrong_password: \"Virheellinen salasana\",\n      delete_this_account: \"Poista tili lopullisesti\",\n      reset_progress_tab: \"Resetoi edistymisesi\",\n      reset_your_progress: \"Tyhjennä edistymisesi ja aloita alusta\",\n      god_mode: \"Pääkäyttäjä tila\",\n      emails_tab: \"Sähköpostitiedotteet\",\n      admin: \"Ylläpitäjä\",\n      manage_subscription: \"Klikkaa tässä hallitaksesi tilaustasi.\",\n      new_password: \"Uusi Salasana\",\n      new_password_verify: \"Varmista\",\n      type_in_email: \"Anna sähköpostiosoitteesi vahvistaaksesi tilin poistamisen.\",\n      type_in_email_progress: \"Kirjoita sähköpostisi vahvistaaksesi edistymisen tyhjennyksen.\",\n      type_in_password: \"Kirjoita myös salasanasi.\",\n      email_subscriptions: \"Sähköpostitiedotteet\",\n      email_subscriptions_none: \"Ei sähköpostitiedotteita\",\n      email_announcements: \"Tiedotteet\",\n      email_announcements_description: \"Haluatko viimeisimmät uutiset ja tiedoteet uusista ominaisuuksista.\",\n      email_notifications: \"Ilmoitukset\",\n      email_notifications_summary: \"Valinnat automaattisia sähköposti-ilmoituksia varten toimistasi CodeCombat sivustolla.\",\n      email_any_notes: \"Kaikki Ilmoitukset\",\n      email_any_notes_description: \"Poista valinta jos et halua mitään ilmoituksia sähköpostiisi.\",\n      email_news: \"Uutiset\",\n      email_recruit_notes: \"Työmahdollisuudet\",\n      email_recruit_notes_description: \"Jos pelaat todella hyvin saatamme ottaa sinuun yhteyttä ja tarjota työmahdollisuuksia.\",\n      contributor_emails: \"Avustajakohtaiset Tiedotteet\",\n      contribute_prefix: \"Etsimme lisää tekijöitä! Katso lisää \",\n      contribute_page: \"Avusta\",\n      contribute_suffix: \" sivulta ja lue miten sinäkin pääset mukaan.\",\n      email_toggle: \"Valitse/Poista Kaikki\",\n      error_saving: \"Virhe tallennettaessa\",\n      saved: \"Muutokset tallennettu\",\n      password_mismatch: \"Salasanat eivät täsmää.\",\n      password_repeat: \"Kirjoita salasana uudestaan.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Pikanäppäimet\",\n      space: \"Välilyönti\",\n      enter: \"Enter\",\n      press_enter: \"paina Enter\",\n      escape: \"Esc\",\n      shift: \"Shift\",\n      run_code: \"Suorita koodi.\",\n      run_real_time: \"Suorita tosiajassa.\",\n      continue_script: \"Ohita nykyinen koodi.\",\n      skip_scripts: \"Ohita kaikki ohitettavat koodit.\",\n      toggle_playback: \"Toista/Pysäytä.\",\n      scrub_playback: \"Siirry eteen ja taakse ajassa.\",\n      single_scrub_playback: \"Siirry eteen ja taakse ajassa ruutu kerrallaan.\",\n      scrub_execution: \"Siirry nykyisen taian suorituskohtaan.\",\n      toggle_debug: \"Virheenetsintänäyttö.\",\n      toggle_grid: \"Taustaruudukko.\",\n      toggle_pathfinding: \"Reitinhakunäyttö.\",\n      beautify: \"Viimeistele ohjelmakoodisi, muotoilemalla se yhdenmukaisesti.\",\n      maximize_editor: \"Laajenna/pienennä koodieditori.\"\n    },\n    community: {\n      main_title: \"CodeCombat Yhteisö\",\n      introduction: \"Katso miten voit auttaa ja mieti mikä kuulostaa hauskimmalta. Kuulemme mielellään sinusta!\"\n    },\n    clans: {\n      clan: \"Klaani\",\n      clans: \"Klaanit\",\n      new_name: \"Klaanin nimi\",\n      new_description: \"Klaanin kuvaus\",\n      make_private: \"Yksityinen klaani\",\n      subs_only: \"Vain tilanneille\",\n      create_clan: \"Luo uusi klaani\",\n      private_preview: \"Esikatselu\",\n      private_clans: \"Yksityiset klaanit\",\n      public_clans: \"Julkiset klaanit\",\n      my_clans: \"Omat klaanit\",\n      clan_name: \"Klaanin nimi\",\n      name: \"Nimi\",\n      chieftain: \"Päällikkö\",\n      edit_clan_name: \"Muuta klaanin nimeä\",\n      edit_clan_description: \"Muuta klaanin kuvausta\",\n      edit_name: \"muuta nimi\",\n      edit_description: \"muuta kuvaus\",\n      \"private\": \"(yksityinen)\",\n      summary: \"Yhteenveto\",\n      average_level: \"Keskimääräinen taso\",\n      average_achievements: \"Saavutuksia keskimäärin\",\n      delete_clan: \"Poista klaani\",\n      leave_clan: \"Jätä klaani\",\n      join_clan: \"Liity klaaniin\",\n      invite_1: \"Kutsu:\",\n      invite_2: \"*Kutsu pelaajia klaaniin, lähettämällä heille tämä linkki.\",\n      members: \"Jäsenet\",\n      progress: \"Edistyminen\",\n      not_started_1: \"ei aloitettu\",\n      started_1: \"aloitettu\",\n      complete_1: \"valmis\",\n      exp_levels: \"Laajenna tasot\",\n      rem_hero: \"Poista sankari\",\n      status: \"Tilanne\",\n      complete_2: \"Valmis\",\n      started_2: \"Aloitettu\",\n      not_started_2: \"Ei aloitettu\",\n      view_solution: \"Paina katsoaksesi ratkaisut.\",\n      view_attempt: \"Paina katsoaksesi yrityksesi.\",\n      latest_achievement: \"Viimeisin saavutus\",\n      playtime: \"Peliaika\",\n      last_played: \"Viimeksi pelattu\",\n      leagues_explanation: \"Pelaa liigaa muita klaanin jäseniä vastaan näillä moninpelaaja-areenoilla.\"\n    },\n    courses: {\n      create_new_class: \"Luo uusi luokka\",\n      unnamed_class: \"Nimetön luokka\",\n      edit_settings1: \"Muokkkaa Luokan Asetuksia\",\n      add_students: \"Lisää Oppilaita\",\n      stats: \"Tilastot\",\n      total_students: \"Oppilaita yhteensä:\",\n      average_time: \"Keskimääräinen peliaika:\",\n      total_time: \"Peliaika Yhteensä:\",\n      total_levels: \"Tasoja suoritettu yhteensä:\",\n      students: \"Oppilaat\",\n      play_time: \"Peliaika:\",\n      completed: \"Suoritettu:\",\n      enter_emails: \"Kirjoita oppilaiden sähköpostit kutsuaksesi, yksi per rivi\",\n      send_invites: \"Lähetä kutsut\",\n      remove_student: \"poista oppilas\",\n      student: \"Oppilas\",\n      teacher: \"Opettaja\",\n      arena: \"Areena\",\n      available_levels: \"Saatavilla olevat tasot\",\n      started: \"aloitettu\",\n      complete: \"valmis\",\n      required: \"pakollinen\",\n      welcome_to_courses: \"Seikkailijat, tervetuloa kursseille!\",\n      ready_to_play: \"Valmiina pelaamaan?\",\n      start_new_game: \"Aloita uusi peli\",\n      welcome_to_page: \"Tervetuloa Kurssit sivulle!\",\n      my_classes: \"Minun luokkani\",\n      class_added: \"Luokka lisätty onnistuneesti!\",\n      join: \"Liity\",\n      joining: \"Liitytään luokkaan\",\n      course_complete: \"Kurssi Suoritettu\",\n      play_arena: \"Pelaa Areena\",\n      start: \"Aloita\",\n      last_level: \"Viimeinen pelattu taso\",\n      not_you: \"Joku muu?\",\n      continue_playing: \"Jatka Pelaamista\",\n      remove_student1: \"Poista oppilas\",\n      are_you_sure: \"Haluatko varmasti poistaa tämän oppilaan tästä luokasta?\",\n      keep_student: \"Pidä Oppilas\",\n      removing_user: \"Poistetaan käyttäjää\",\n      select_language: \"Valitse kieli\",\n      select_level: \"Valitse taso\",\n      play_level: \"Pelaa taso\",\n      language_select: \"Valitse kieli\",\n      avg_student_exp_label: \"Keskimääräinen oppilaiden ohjelmointikokemus\",\n      avg_student_exp_select: \"Valitse parhaiten kuvaava vaihtoehto\",\n      student_age_range_label: \"Oppilaiden ikähaarukka\",\n      student_age_range_younger: \"Nuorempi kuin 6\",\n      student_age_range_older: \"Vanhempi kuin 18\",\n      student_age_range_to: \"-\",\n      create_class: \"Luo Luokka\",\n      class_name: \"Luokan Nimi\",\n      teacher_account_restricted: \"Opettajan tililläsi ei voi käyttää oppilassisältöä.\",\n      account_restricted: \"Oppilaan tili tarvitaan tämän sivun käyttämiseen.\",\n      update_account_login_title: \"Kirjaudu sisään päivittääksesi Tilisi\",\n      update_account_title: \"Tilisi tarvitsee toimenpiteitä!\",\n      update_account_blurb: \"Ennen kun pääset käsiksi luokkiisi, valitse miten haluat käyttää tätä tiliä.\",\n      update_account_current_type: \"Nykyisen Tilin Tyyppi:\",\n      update_account_account_email: \"Tilin Sähköposti/Käyttäjänimi:\",\n      update_account_am_teacher: \"Olen Opettaja\",\n      update_account_teachers_can: \"Opettajan Tili Pystyy:\",\n      update_account_teachers_can1: \"Luoda/Hallita/lisätä luokkia\",\n      update_account_teachers_can2: \"Nimittää/ilmoittaa oppilaita kurseille\",\n      update_account_teachers_can3: \"Avaamaan kaikki kurssin tasot kokeiluun\",\n      update_account_teachers_can4: \"Käyttää uusia vain opettajille toimintoja kun julkaisemme ne\",\n      update_account_teachers_warning: \"Varoitus: Sinut poistetaan kaikista luokista johom olet liittynyt ja et voi pelata enää oppilaana.\",\n      update_account_remain_teacher: \"Pysy Opettajana\",\n      update_account_update_teacher: \"Päivitä Tili Opettajaksi\",\n      update_account_am_student: \"Olen Oppilas\",\n      update_account_students_can: \"Oppilaan Tili Pystyy:\",\n      update_account_students_can1: \"Liittyä luokkiin\",\n      update_account_students_can2: \"Pelata kursseja oppilaana ja tarkkailla omaa edistymistään\",\n      update_account_students_can3: \"Taistella luokkakavereita vastaan areenoilla\",\n      update_account_students_can4: \"Käyttää uusia vain oppilaille toimintoja kun julkaisemme ne\",\n      update_account_students_warning: \"Varoitus: Et voi hallita luokkia jotka olet luonut tai luoda uusia luokkia.\",\n      update_account_remain_student: \"Pysy Oppilaaana\",\n      update_account_update_student: \"Päivitä Tili Oppilaaksi\",\n      update_account_not_sure: \"Etkö ole varma minkä valitset? Lähetä sähköpostia\",\n      update_account_confirm_update_student: \"Oletko varma että haluat päivittää tilisi oppilaan tiliksi?\",\n      update_account_confirm_update_student2: \"Et voi hallita luokkia jotka olet luonut etkä voi luoda uusia luokkia. Kaikki luokkasi poistetaan CodeCombat:ista eikä niitä voi palauttaa.\",\n      instructor: \"Ohjaaja: \",\n      account_settings: \"Tilin asetukset\",\n      select_your_hero: \"Valitse sankarisi\",\n      select_your_hero_description: \"Voit vaihtaa sankariasi menemällä kurssit sivulle ja valitsemalla \\\"Valitse sankarisi\\\"\",\n      select_this_hero: \"Valitse tämä sankari\",\n      current_hero: \"Nykyinen sankari:\",\n      current_hero_female: \"Nykyinen sankari:\"\n    },\n    sharing: {\n      game: \"Peli\",\n      webpage: \"Nettisivu\",\n      share_game: \"Jaa tämä peli\",\n      share_web: \"Jaa tämä nettisivu\",\n      victory_share_prefix: \"Kutsu tällä linkillä ystäväsi ja perheesi\",\n      victory_share_game: \"pelaamaan sinun tasoasi\",\n      victory_share_web: \"katsomaan nettisivuasi\",\n      victory_share_suffix: \".\",\n      victory_course_share_prefix: \"Tämä linkki antaa ystäviesi ja perheesi\",\n      victory_course_share_game: \"pelata peliä,\",\n      victory_course_share_web: \"katsoa nettisivua,\",\n      victory_course_share_suffix: \"jonka sinä juuri loit.\",\n      copy_url: \"Kopio URL-osoite\",\n      share_with_teacher_email: \"Lähetä opettajallesi\"\n    },\n    game_dev: {\n      creator: \"Tekijä\"\n    },\n    web_dev: {\n      image_gallery_title: \"Kuvagalleria\",\n      select_an_image: \"Valitse kuva, jota haluat käyttää\",\n      scroll_down_for_more_images: \"(vieritä alaspäin nähdäksesi lisää kuvia)\",\n      copy_the_url: \"Kopioi URL-osoite alapuolelta\",\n      copy_the_url_description: \"Hyödyllinen jos haluat korvata olemassaolevan kuvan.\",\n      copy_the_img_tag: \"Kopioi <img> tagi\",\n      copy_the_img_tag_description: \"Hyödyllinen jos haluat lisätä uuden kuvan.\",\n      copy_url: \"Kopioi URL-osoite\",\n      copy_img: \"Kopioi <img>\",\n      how_to_copy_paste: \"Miten Kopioida/Liittää\",\n      copy: \"Kopioi\",\n      paste: \"Liitä\",\n      back_to_editing: \"Takaisin muokkaamaan\"\n    },\n    classes: {\n      archmage_title: \"Arkkimaagi\",\n      archmage_title_description: \"(Koodaaja)\",\n      artisan_title: \"Käsityöläinen\",\n      artisan_title_description: \"(Kenttäsuunnittelija)\",\n      adventurer_title: \"Seikkailija\",\n      adventurer_title_description: \"(Kenttätestaaja)\",\n      scribe_title: \"Kirjuri\",\n      scribe_title_description: \"(Toimittaja)\",\n      diplomat_title: \"Diplomaatti\",\n      diplomat_title_description: \"(Kääntäjä)\",\n      ambassador_title: \"Suurlähettiläs\",\n      ambassador_title_description: \"(Tuki)\"\n    },\n    article: {\n      edit_btn_preview: \"Esikatselu\",\n      edit_article_title: \"Muokkaa artikkelia\"\n    },\n    polls: {\n      priority: \"Prioriteetti\"\n    },\n    user: {\n      stats: \"Tilastot\",\n      singleplayer_title: \"Yksinpelitasot\",\n      multiplayer_title: \"Moninpelitasot\",\n      achievements_title: \"Saavutukset\",\n      last_played: \"Viimeisin peli\",\n      status: \"Tilanne\",\n      status_completed: \"Valmis\",\n      status_unfinished: \"Kesken\",\n      no_singleplayer: \"Ei yksinpelejä pelattuna.\",\n      no_multiplayer: \"Ei moninpelejä pelattuna.\",\n      no_achievements: \"Ei saavutuksia.\",\n      favorite_prefix: \"Suosikki ohjelmointikieleni on \",\n      favorite_postfix: \".\",\n      not_member_of_clans: \"Ei klaanien jäsenyyksiä.\"\n    },\n    achievements: {\n      last_earned: \"Viimeisin saavutus\",\n      amount_achieved: \"Yhteensä\",\n      achievement: \"Saavutus\",\n      current_xp_prefix: \"\",\n      current_xp_postfix: \" yhteensä\",\n      new_xp_prefix: \"\",\n      new_xp_postfix: \" ansaittu\",\n      left_xp_prefix: \"\",\n      left_xp_infix: \" jäljellä tasoon \",\n      left_xp_postfix: \"\"\n    },\n    account: {\n      payments: \"Ostot\",\n      prepaid_codes: \"Prepaid koodi\",\n      purchased: \"Ostettu\",\n      subscription: \"Kuukausitilaus\",\n      invoices: \"Laskut\",\n      service_apple: \"Apple\",\n      service_web: \"Netti\",\n      paid_on: \"Maksettu\",\n      service: \"Palvelu\",\n      price: \"Hinta\",\n      gems: \"Jalokivet\",\n      active: \"Voimassa\",\n      subscribed: \"Kirjautunut\",\n      unsubscribed: \"Ei kirjautunut\",\n      active_until: \"Voimassa asti\",\n      cost: \"Hinta\",\n      next_payment: \"Seuraava maksu\",\n      card: \"Kortti\",\n      status_unsubscribed_active: \"Tilauksesi ei ole aktiivinen ja sinua ei laskuteta, mutta etusi ovat vielä voimassa.\",\n      status_unsubscribed: \"Hanki käyttöösi uusia tasoja, sankareita, esineitä ja lisää jalokiviä CodeCombat kuukausitilauskella!\",\n      not_yet_verified: \"Ei vielä vahvistettu.\",\n      resend_email: \"Lähetä viesti uudelleen\",\n      email_sent: \"Viesti lähetetty! Tarkista sähköpostisi.\",\n      verifying_email: \"Vahvistetaan sähköpostiosoitettasi...\",\n      successfully_verified: \"Vahvistit sähköpostiosoitteesi onnistuneesti!\",\n      verify_error: \"Jotain meni pieleen sähköpostiasi vahvistettaessa. :(\"\n    },\n    account_invoices: {\n      amount: \"Hinta US dollareina\",\n      declined: \"Luottokorttisimaksu hylätty\",\n      invalid_amount: \"Ole hyvä ja syötä määrä US dollareina.\",\n      not_logged_in: \"Kirjaudu sisään tai luo tili katosaksi laskujanne.\",\n      pay: \"Suorita maksu\",\n      purchasing: \"Käsitellään...\",\n      retrying: \"Palvelinvirhe, yritetään uudelleen.\",\n      success: \"Maksu onnistui. Kiitos!\"\n    },\n    loading_error: {\n      could_not_load: \"Virhe ladattaessa tietoja palvelimelta\",\n      connection_failure: \"Yhteysvirhe.\",\n      connection_failure_desc: \"Näyttää siltä että et ole yhteydessä internettiin! Tarkista yhteytesi ja lataa sivu uudelleen.\",\n      login_required: \"Kirjautuminen vaaditaan\",\n      login_required_desc: \"Sinun täytyy olla kirjautunut sisään nähdäksesi tämän sivun\",\n      unauthorized: \"Teidän tulee olla kirjautuneena sisään. Ovatko evästeet sallittuna?\",\n      forbidden: \"Ei käyttöoikeuttta.\",\n      forbidden_desc: \"Voi voi, täällä ei ole mitään mitä voimme näyttää sinulle! Tarkista että olet kirjautunut oikealla käyttäjällä tai katso seuraavat linkit päästäksesi takaisin ohjelmoimaan!\",\n      not_found: \"Ei löydetty.\",\n      not_found_desc: \"Hmm, täällä ei ole mitään. Katso seuraavat linkit päästäksesi takaisin ohjelmoimaan!\",\n      not_allowed: \"Toiminto ei sallittu.\",\n      timeout: \"Toiminto aikakatkaistu.\",\n      conflict: \"Resurssiristiriita.\",\n      bad_input: \"Virheellinen syöte.\",\n      server_error: \"Palvelinvirhe.\",\n      unknown: \"Tuntematon virhe.\",\n      error: \"VIRHE\",\n      general_desc: \"Jotain meni pieleen ja se on luultavasti meidän syytämme. Odota hetki ja lataa sivu uudelleen tai katso seuraavat linkit päästäksesi takaisin ohjelmoimaan!\"\n    },\n    resources: {\n      level: \"Taso\",\n      patch: \"Muutostiedosto\",\n      patches: \"Muutostiedostot\",\n      system: \"Järjestelmä\",\n      systems: \"Järjestelmät\",\n      component: \"Komponentti\",\n      components: \"Komponentit\",\n      hero: \"Sankari\",\n      campaigns: \"Kampanjat\"\n    },\n    calendar: {\n      year: \"Vuosi\",\n      day: \"Päivä\",\n      month: \"Kuukausi\",\n      january: \"Tammikuu\",\n      february: \"Helmikuu\",\n      march: \"Maaliskuu\",\n      april: \"Huhtikuu\",\n      may: \"Toukokuu\",\n      june: \"Kesäkuu\",\n      july: \"Heinäkuu\",\n      august: \"Elokuu\",\n      september: \"Syyskuu\",\n      october: \"Lokakuu\",\n      november: \"Marraskuu\",\n      december: \"Joulukuu\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1049\n");

/***/ })

});