/*! hash:345dfe6c0e434e9c7378, chunkhash:f4b441761ea2695c2622, name:locale/uz, filebase:uz.bundle.js, query:, file:javascripts/chunks/locale/uz.bundle.js */
webpackJsonp([20],{

/***/ 1087:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"O'zbekcha\",\n  englishDescription: \"Uzbek\",\n  translation: {\n    diplomat_suggestion: {\n      pitch_body: \"We develop CodeCombat in English, but we already have players all over the world. Many of them want to play in Uzbek but don't speak English, so if you can speak both, please consider signing up to be a Diplomat and help translate both the CodeCombat website and all the levels into Uzbek.\",\n      missing_translations: \"Until we can translate everything into Uzbek, you'll see English when Uzbek isn't available.\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"sources":["webpack:///./app/locale/uz.coffee?dd40"],"names":[],"mappings":"AAAA,MAAM,CAAC,OAAP,GAAiB;EAAA,mBAAmB,WAAnB;EAAgC,oBAAoB,OAApD;EAA6D,aA4M5E;IAAA,qBAGE;MAAA,YAAY,mSAAZ;MACA,sBAAsB,8FADtB;KAHF;GA5Me","file":"1087.js","sourcesContent":["module.exports = nativeDescription: \"O'zbekcha\", englishDescription: \"Uzbek\", translation:\n\n#  new_home:\n#    title: \"CodeCombat - Coding games to learn Python and JavaScript\"\n#    meta_description: \"Learn typed code through a programming game. Learn Python, JavaScript, and HTML as you solve puzzles and learn to make your own coding games and websites.\"\n#    built_for_teachers_title: \"A Coding Game Built with Teachers in Mind\"\n#    built_for_teachers_blurb: \"Teaching kids to code can often feel overwhelming. CodeCombat helps all educators teach students how to code in either JavaScript or Python, two of the most popular programming languages. With a comprehensive curriculum that includes six computer science units and reinforces learning through project-based game development and web development units, kids will progress on a journey from basic syntax to recursion!\"\n#    built_for_teachers_subtitle1: \"Computer Science\"\n#    built_for_teachers_subblurb1: \"Starting with our free Introduction to Computer Science course, students master core coding concepts such as while/for loops, functions, and algorithms.\"\n#    built_for_teachers_subtitle2: \"Game Development\"\n#    built_for_teachers_subblurb2: \"Learners construct mazes and use basic input handling to code their own games that can be shared with friends and family.\"\n#    built_for_teachers_subtitle3: \"Web Development\"\n#    built_for_teachers_subblurb3: \"Using HTML, CSS, and jQuery, learners flex their creative muscles to program their own webpages with a custom URL to share with their classmates.\"\n#    century_skills_title: \"21st Century Skills\"\n#    century_skills_blurb1: \"Students Don't Just Level Up Their Hero, They Level Up Themselves\"\n#    century_skills_quote1: \"You mess up…so then you think about all of the possible ways to fix it, and then try again. I wouldn't be able to get here without trying hard.\"\n#    century_skills_subtitle1: \"Critical Thinking\"\n#    century_skills_subblurb1: \"With coding puzzles that are naturally scaffolded into increasingly challenging levels, CodeCombat's programming game ensures kids are always practicing critical thinking.\"\n#    century_skills_quote2: \"Everyone else was making mazes, so I thought, ‘capture the flag’ and that’s what I did.\"\n#    century_skills_subtitle2: \"Creativity\"\n#    century_skills_subblurb2: \"CodeCombat encourages students to showcase their creativity by building and sharing their own games and webpages.\"\n#    century_skills_quote3: \"If I got stuck on a level. I would work with people around me until we were all able to figure it out.\"\n#    century_skills_subtitle3: \"Collaboration\"\n#    century_skills_subblurb3: \"Throughout the game, there are opportunities for students to collaborate when they get stuck and to work together using our pair programming guide.\"\n#    century_skills_quote4: \"I’ve always had aspirations of designing video games and learning how to code ... this is giving me a great starting point.\"\n#    century_skills_subtitle4: \"Communication\"\n#    century_skills_subblurb4: \"Coding requires kids to practice new forms of communication, including communicating with the computer itself and conveying their ideas using the most efficient code.\"\n#    classroom_in_box_title: \"We Strive To:\"\n#    classroom_in_box_blurb1: \"Engage every student so that they believe coding is for them.\"\n#    classroom_in_box_blurb2: \"Empower any educator to feel confident when teaching coding.\"\n#    classroom_in_box_blurb3: \"Inspire all school leaders to create a world-class computer science program.\"\n#    creativity_rigor_title: \"Where Creativity Meets Rigor\"\n#    creativity_rigor_subtitle1: \"Make coding fun and teach real-world skills\"\n#    creativity_rigor_blurb1: \"Students type real Python and JavaScript while playing games that encourage trial-and-error, critical thinking, and creativity. Students then apply the coding skills they’ve learned by developing their own games and websites in project-based courses.\"\n#    creativity_rigor_subtitle2: \"Reach students at their level\"\n#    creativity_rigor_blurb2: \"Every CodeCombat level is scaffolded based on millions of data points and optimized to adapt to each learner. Practice levels and hints help students when they get stuck, and challenge levels assess students' learning throughout the game.\"\n#    creativity_rigor_subtitle3: \"Built for all teachers, regardless of experience\"\n#    creativity_rigor_blurb3: \"CodeCombat’s self-paced, standards-aligned curriculum makes teaching computer science possible for everyone. CodeCombat equips teachers with the training, instructional resources, and dedicated support to feel confident and successful in the classroom.\"\n#    featured_partners_title1: \"Featured In\"\n#    featured_partners_title2: \"Awards & Partners\"\n#    featured_partners_blurb1: \"CollegeBoard Endorsed Provider\"\n#    featured_partners_blurb2: \"Best Creativity Tool for Students\"\n#    featured_partners_blurb3: \"Top Pick for Learning\"\n#    featured_partners_blurb4: \"Code.org Official Partner\"\n#    featured_partners_blurb5: \"CSforAll Official Member\"\n#    featured_partners_blurb6: \"Hour of Code Activity Partner\"\n#    for_leaders_title: \"For School Leaders\"\n#    for_leaders_blurb: \"A Comprehensive, Standards-Aligned Computer Science Program\"\n#    for_leaders_subtitle1: \"Easy Implementation\"\n#    for_leaders_subblurb1: \"A web-based program that requires no IT support. Get started in under 5 minutes using Google or Clever Single Sign-On (SSO).\"\n#    for_leaders_subtitle2: \"Full Coding Curriculum\"\n#    for_leaders_subblurb2: \"A standards-aligned curriculum with instructional resources and professional development to enable any teacher to teach computer science.\"\n#    for_leaders_subtitle3: \"Flexible Use Cases\"\n#    for_leaders_subblurb3: \"Whether you want to build a Middle School coding elective, a CTE pathway, or an AP Computer Science Principles class, CodeCombat is tailored to suit your needs.\"\n#    for_leaders_subtitle4: \"Real-World Skills\"\n#    for_leaders_subblurb4: \"Students build grit and develop a growth mindset through coding challenges that prepare them for the 500K+ open computing jobs.\"\n#    for_teachers_title: \"For Teachers\"\n#    for_teachers_blurb: \"Tools to Unlock Student Potential\"\n#    for_teachers_subtitle1: \"Project-Based Learning\"\n#    for_teachers_subblurb1: \"Promote creativity, problem-solving, and confidence in project-based courses where students develop their own games and webpages.\"\n#    for_teachers_subtitle2: \"Teacher Dashboard\"\n#    for_teachers_subblurb2: \"View data on student progress, discover curriculum resources, and access real-time support to empower student learning.\"\n#    for_teachers_subtitle3: \"Built-in Assessments\"\n#    for_teachers_subblurb3: \"Personalize instruction and ensure students understand core concepts with formative and summative assessments.\"\n#    for_teachers_subtitle4: \"Automatic Differentiation\"\n#    for_teachers_subblurb4: \"Engage all learners in a diverse classroom with practice levels that adapt to each student's learning needs.\"\n#    game_based_blurb: \"CodeCombat is a game-based computer science program where students type real code and see their characters react in real time.\"\n#    get_started: \"Get started\"\n#    global_title: \"Join Our Global Community of Learners and Educators\"\n#    global_subtitle1: \"Learners\"\n#    global_subtitle2: \"Lines of Code\"\n#    global_subtitle3: \"Teachers\"\n#    global_subtitle4: \"Countries\"\n#    go_to_my_classes: \"Go to my classes\"\n#    go_to_my_courses: \"Go to my courses\"\n#    quotes_quote1: \"Name any program online, I’ve tried it. None of them match up to CodeCombat. Any teacher who wants their students to learn how to code... start here!\"\n#    quotes_quote2: \" I was surprised about how easy and intuitive CodeCombat makes learning computer science. The scores on the AP exam were much higher than I expected and I believe CodeCombat is the reason why this was the case.\"\n#    quotes_quote3: \"CodeCombat has been the most beneficial for teaching my students real-life coding capabilities. My husband is a software engineer and he has tested out all of my programs. He put this as his top choice.\"\n#    quotes_quote4: \"The feedback … has been so positive that we are structuring a computer science class around CodeCombat. The program really engages the students with a gaming style platform that is entertaining and instructional at the same time. Keep up the good work, CodeCombat!\"\n#    see_example: \"See example\"\n#    slogan: \"The most engaging way to learn computer science\"\n#    teach_cs1_free: \"Teach CS1 Free\"\n#    teachers_love_codecombat_title: \"Teachers Love CodeCombat\"\n#    teachers_love_codecombat_blurb1: \"Report that their students enjoy using CodeCombat to learn how to code\"\n#    teachers_love_codecombat_blurb2: \"Would recommend CodeCombat to other computer science teachers\"\n#    teachers_love_codecombat_blurb3: \"Say that CodeCombat helps them support students’ problem solving abilities\"\n#    teachers_love_codecombat_subblurb: \"In partnership with McREL International, a leader in research-based guidance and evaluations of educational technology.\"\n#    try_the_game: \"Try the game\"\n#    classroom_edition: \"Classroom Edition:\"\n#    learn_to_code: \"Learn to code:\"\n#    play_now: \"Play Now\"\n#    im_an_educator: \"I'm an Educator\"\n#    im_a_teacher: \"I'm a Teacher\"\n#    im_a_student: \"I'm a Student\"\n#    learn_more: \"Learn more\"\n#    classroom_in_a_box: \"A classroom in-a-box for teaching computer science.\"\n#    codecombat_is: \"CodeCombat is a platform <strong>for students</strong> to learn computer science while playing through a real game.\"\n#    our_courses: \"Our courses have been specifically playtested <strong>to excel in the classroom</strong>, even for teachers with little to no prior programming experience.\"\n#    watch_how: \"Watch how CodeCombat is transforming the way people learn computer science.\"\n#    top_screenshots_hint: \"Students write code and see their changes update in real-time\"\n#    designed_with: \"Designed with teachers in mind\"\n#    real_code: \"Real, typed code\"\n#    from_the_first_level: \"from the first level\"\n#    getting_students: \"Getting students to typed code as quickly as possible is critical to learning programming syntax and proper structure.\"\n#    educator_resources: \"Educator resources\"\n#    course_guides: \"and course guides\"\n#    teaching_computer_science: \"Teaching computer science does not require a costly degree, because we provide tools to support educators of all backgrounds.\"\n#    accessible_to: \"Accessible to\"\n#    everyone: \"everyone\"\n#    democratizing: \"Democratizing the process of learning coding is at the core of our philosophy. Everyone should be able to learn to code.\"\n#    forgot_learning: \"I think they actually forgot that they were learning something.\"\n#    wanted_to_do: \" Coding is something I've always wanted to do, and I never thought I would be able to learn it in school.\"\n#    builds_concepts_up: \"I like how CodeCombat builds the concepts up. It's really easy to understand and fun to figure it out.\"\n#    why_games: \"Why is learning through games important?\"\n#    games_reward: \"Games reward the productive struggle.\"\n#    encourage: \"Gaming is a medium that encourages interaction, discovery, and trial-and-error. A good game challenges the player to master skills over time, which is the same critical process students go through as they learn.\"\n#    excel: \"Games excel at rewarding\"\n#    struggle: \"productive struggle\"\n#    kind_of_struggle: \"the kind of struggle that results in learning that’s engaging and\"\n#    motivating: \"motivating\"\n#    not_tedious: \"not tedious.\"\n#    gaming_is_good: \"Studies suggest gaming is good for children’s brains. (it’s true!)\"\n#    game_based: \"When game-based learning systems are\"\n#    compared: \"compared\"\n#    conventional: \"against conventional assessment methods, the difference is clear: games are better at helping students retain knowledge, concentrate and\"\n#    perform_at_higher_level: \"perform at a higher level of achievement\"\n#    feedback: \"Games also provide real-time feedback that allows students to adjust their solution path and understand concepts more holistically, instead of being limited to just “correct” or “incorrect” answers.\"\n#    real_game: \"A real game, played with real coding.\"\n#    great_game: \"A great game is more than just badges and achievements - it’s about a player’s journey, well-designed puzzles, and the ability to tackle challenges with agency and confidence.\"\n#    agency: \"CodeCombat is a game that gives players that agency and confidence with our robust typed code engine, which helps beginner and advanced students alike write proper, valid code.\"\n#    request_demo_title: \"Get your students started today!\"\n#    request_demo_subtitle: \"Request a demo and get your students started in less than an hour.\"\n#    get_started_title: \"Set up your class today\"\n#    get_started_subtitle: \"Set up a class, add your students, and monitor their progress as they learn computer science.\"\n#    request_demo: \"Request a Demo\"\n#    request_quote: \"Request a Quote\"\n#    setup_a_class: \"Set Up a Class\"\n#    have_an_account: \"Have an account?\"\n#    logged_in_as: \"You are currently logged in as\"\n#    computer_science: \"Our self-paced courses cover basic syntax to advanced concepts\"\n#    ffa: \"Free for all students\"\n#    coming_soon: \"More coming soon!\"\n#    courses_available_in: \"Courses are available in JavaScript and Python. Web Development courses utilize HTML, CSS, and jQuery.\"\n#    boast: \"Boasts riddles that are complex enough to fascinate gamers and coders alike.\"\n#    winning: \"A winning combination of RPG gameplay and programming homework that pulls off making kid-friendly education legitimately enjoyable.\"\n#    run_class: \"Everything you need to run a computer science class in your school today, no CS background required.\"\n#    goto_classes: \"Go to My Classes\"\n#    view_profile: \"View My Profile\"\n#    view_progress: \"View Progress\"\n#    go_to_courses: \"Go to My Courses\"\n#    want_coco: \"Want CodeCombat at your school?\"\n#    educator: \"Educator\"\n#    student: \"Student\"\n\n#  nav:\n#    educators: \"Educators\"\n#    follow_us: \"Follow Us\"\n#    general: \"General\"\n#    map: \"Map\"\n#    play: \"Levels\" # The top nav bar entry where players choose which levels to play\n#    community: \"Community\"\n#    courses: \"Courses\"\n#    blog: \"Blog\"\n#    forum: \"Forum\"\n#    account: \"Account\"\n#    my_account: \"My Account\"\n#    profile: \"Profile\"\n#    home: \"Home\"\n#    contribute: \"Contribute\"\n#    legal: \"Legal\"\n#    privacy: \"Privacy Notice\"\n#    about: \"About\"\n#    contact: \"Contact\"\n#    twitter_follow: \"Follow\"\n#    my_classrooms: \"My Classes\"\n#    my_courses: \"My Courses\"\n#    my_teachers: \"My Teachers\"\n#    careers: \"Careers\"\n#    facebook: \"Facebook\"\n#    twitter: \"Twitter\"\n#    create_a_class: \"Create a Class\"\n#    other: \"Other\"\n#    learn_to_code: \"Learn to Code!\"\n#    toggle_nav: \"Toggle navigation\"\n#    schools: \"Schools\"\n#    get_involved: \"Get Involved\"\n#    open_source: \"Open source (GitHub)\"\n#    support: \"Support\"\n#    faqs: \"FAQs\"\n#    copyright_prefix: \"Copyright\"\n#    copyright_suffix: \"All Rights Reserved.\"\n#    help_pref: \"Need help? Email\"\n#    help_suff: \"and we'll get in touch!\"\n#    resource_hub: \"Resource Hub\"\n#    apcsp: \"AP CS Principles\"\n#    parent: \"Parents\"\n\n#  modal:\n#    close: \"Close\"\n#    okay: \"Okay\"\n\n#  not_found:\n#    page_not_found: \"Page not found\"\n\n  diplomat_suggestion:\n#    title: \"Help translate CodeCombat!\" # This shows up when a player switches to a non-English language using the language selector.\n#    sub_heading: \"We need your language skills.\"\n    pitch_body: \"We develop CodeCombat in English, but we already have players all over the world. Many of them want to play in Uzbek but don't speak English, so if you can speak both, please consider signing up to be a Diplomat and help translate both the CodeCombat website and all the levels into Uzbek.\"\n    missing_translations: \"Until we can translate everything into Uzbek, you'll see English when Uzbek isn't available.\"\n#    learn_more: \"Learn more about being a Diplomat\"\n#    subscribe_as_diplomat: \"Subscribe as a Diplomat\"\n\n#  play:\n#    title: \"Play CodeCombat Levels - Learn Python, JavaScript, and HTML\"\n#    meta_description: \"Learn programming with a coding game for beginners. Learn Python or JavaScript as you solve mazes, make your own games, and level up. Challenge your friends in multiplayer arena levels!\"\n#    level_title: \"__level__ - Learn to Code in Python, JavaScript, HTML\"\n#    video_title: \"__video__ | Video Level\"\n#    game_development_title: \"__level__ | Game Development\"\n#    web_development_title: \"__level__ | Web Development\"\n#    anon_signup_title_1: \"CodeCombat has a\"\n#    anon_signup_title_2: \"Classroom Version!\"\n#    anon_signup_enter_code: \"Enter Class Code:\"\n#    anon_signup_ask_teacher: \"Don't have one? Ask your teacher!\"\n#    anon_signup_create_class: \"Want to create a class?\"\n#    anon_signup_setup_class: \"Set up a class, add your students, and monitor progress!\"\n#    anon_signup_create_teacher: \"Create free teacher account\"\n#    play_as: \"Play As\" # Ladder page\n#    get_course_for_class: \"Assign Game Development and more to your classes!\"\n#    request_licenses: \"Contact our school specialists for details.\"\n#    compete: \"Compete!\" # Course details page\n#    spectate: \"Spectate\" # Ladder page\n#    players: \"players\" # Hover over a level on /play\n#    hours_played: \"hours played\" # Hover over a level on /play\n#    items: \"Items\" # Tooltip on item shop button from /play\n#    unlock: \"Unlock\" # For purchasing items and heroes\n#    confirm: \"Confirm\"\n#    owned: \"Owned\" # For items you own\n#    locked: \"Locked\"\n#    available: \"Available\"\n#    skills_granted: \"Skills Granted\" # Property documentation details\n#    heroes: \"Heroes\" # Tooltip on hero shop button from /play\n#    achievements: \"Achievements\" # Tooltip on achievement list button from /play\n#    settings: \"Settings\" # Tooltip on settings button from /play\n#    poll: \"Poll\" # Tooltip on poll button from /play\n#    next: \"Next\" # Go from choose hero to choose inventory before playing a level\n#    change_hero: \"Change Hero\" # Go back from choose inventory to choose hero\n#    change_hero_or_language: \"Change Hero or Language\"\n#    buy_gems: \"Buy Gems\"\n#    subscribers_only: \"Subscribers Only!\"\n#    subscribe_unlock: \"Subscribe to Unlock!\"\n#    subscriber_heroes: \"Subscribe today to immediately unlock Amara, Hushbaum, and Hattori!\"\n#    subscriber_gems: \"Subscribe today to purchase this hero with gems!\"\n#    anonymous: \"Anonymous Player\"\n#    level_difficulty: \"Difficulty: \"\n#    awaiting_levels_adventurer_prefix: \"We release new levels every week.\"\n#    awaiting_levels_adventurer: \"Sign up as an Adventurer\"\n#    awaiting_levels_adventurer_suffix: \"to be the first to play new levels.\"\n#    adjust_volume: \"Adjust volume\"\n#    campaign_multiplayer: \"Multiplayer Arenas\"\n#    campaign_multiplayer_description: \"... in which you code head-to-head against other players.\"\n#    brain_pop_done: \"You’ve defeated the Ogres with code! You win!\"\n#    brain_pop_challenge: \"Challenge yourself to play again using a different programming language!\"\n#    replay: \"Replay\"\n#    back_to_classroom: \"Back to Classroom\"\n#    teacher_button: \"For Teachers\"\n#    get_more_codecombat: \"Get More CodeCombat\"\n\n#  code:\n#    if: \"if\" # Keywords--these translations show up on hover, so please translate them all, even if it's kind of long. (In the code editor, they will still be in English.)\n#    else: \"else\"\n#    elif: \"else if\"\n#    while: \"while\"\n#    loop: \"loop\"\n#    for: \"for\"\n#    break: \"break\"\n#    continue: \"continue\"\n#    pass: \"pass\"\n#    return: \"return\"\n#    then: \"then\"\n#    do: \"do\"\n#    end: \"end\"\n#    function: \"function\"\n#    def: \"define\"\n#    var: \"variable\"\n#    self: \"self\"\n#    hero: \"hero\"\n#    this: \"this\"\n#    or: \"or\"\n#    \"||\": \"or\"\n#    and: \"and\"\n#    \"&&\": \"and\"\n#    not: \"not\"\n#    \"!\": \"not\"\n#    \"=\": \"assign\"\n#    \"==\": \"equals\"\n#    \"===\": \"strictly equals\"\n#    \"!=\": \"does not equal\"\n#    \"!==\": \"does not strictly equal\"\n#    \">\": \"is greater than\"\n#    \">=\": \"is greater than or equal\"\n#    \"<\": \"is less than\"\n#    \"<=\": \"is less than or equal\"\n#    \"*\": \"multiplied by\"\n#    \"/\": \"divided by\"\n#    \"+\": \"plus\"\n#    \"-\": \"minus\"\n#    \"+=\": \"add and assign\"\n#    \"-=\": \"subtract and assign\"\n#    True: \"True\"\n#    true: \"true\"\n#    False: \"False\"\n#    false: \"false\"\n#    undefined: \"undefined\"\n#    null: \"null\"\n#    nil: \"nil\"\n#    None: \"None\"\n\n#  share_progress_modal:\n#    blurb: \"You’re making great progress! Tell your parent how much you've learned with CodeCombat.\"\n#    email_invalid: \"Email address invalid.\"\n#    form_blurb: \"Enter your parent's email below and we’ll show them!\"\n#    form_label: \"Email Address\"\n#    placeholder: \"email address\"\n#    title: \"Excellent Work, Apprentice\"\n\n#  login:\n#    sign_up: \"Create Account\"\n#    email_or_username: \"Email or username\"\n#    log_in: \"Log In\"\n#    logging_in: \"Logging In\"\n#    log_out: \"Log Out\"\n#    forgot_password: \"Forgot your password?\"\n#    finishing: \"Finishing\"\n#    sign_in_with_facebook: \"Sign in with Facebook\"\n#    sign_in_with_gplus: \"Sign in with Google\"\n#    signup_switch: \"Want to create an account?\"\n\n#  signup:\n#    complete_subscription: \"Complete Subscription\"\n#    create_student_header: \"Create Student Account\"\n#    create_teacher_header: \"Create Teacher Account\"\n#    create_individual_header: \"Create Individual Account\"\n#    email_announcements: \"Receive announcements about new CodeCombat levels and features!\"\n#    sign_in_to_continue: \"Sign in or create an account to continue\"\n#    teacher_email_announcements: \"Keep me updated on new teacher resources, curriculum, and courses!\"\n#    creating: \"Creating Account...\"\n#    sign_up: \"Sign Up\"\n#    log_in: \"log in with password\"\n#    login: \"Login\"\n#    required: \"You need to log in before you can go that way.\"\n#    login_switch: \"Already have an account?\"\n#    optional: \"optional\"\n#    connected_gplus_header: \"You've successfully connected with Google+!\"\n#    connected_gplus_p: \"Finish signing up so you can log in with your Google+ account.\"\n#    connected_facebook_header: \"You've successfully connected with Facebook!\"\n#    connected_facebook_p: \"Finish signing up so you can log in with your Facebook account.\"\n#    hey_students: \"Students, enter the class code from your teacher.\"\n#    birthday: \"Birthday\"\n#    parent_email_blurb: \"We know you can't wait to learn programming &mdash; we're excited too! Your parents will receive an email with further instructions on how to create an account for you. Email {{email_link}} if you have any questions.\"\n#    classroom_not_found: \"No classes exist with this Class Code. Check your spelling or ask your teacher for help.\"\n#    checking: \"Checking...\"\n#    account_exists: \"This email is already in use:\"\n#    sign_in: \"Sign in\"\n#    email_good: \"Email looks good!\"\n#    name_taken: \"Username already taken! Try {{suggestedName}}?\"\n#    name_available: \"Username available!\"\n#    name_is_email: \"Username may not be an email\"\n#    choose_type: \"Choose your account type:\"\n#    teacher_type_1: \"Teach programming using CodeCombat!\"\n#    teacher_type_2: \"Set up your class\"\n#    teacher_type_3: \"Access Course Guides\"\n#    teacher_type_4: \"View student progress\"\n#    signup_as_teacher: \"Sign up as a Teacher\"\n#    student_type_1: \"Learn to program while playing an engaging game!\"\n#    student_type_2: \"Play with your class\"\n#    student_type_3: \"Compete in arenas\"\n#    student_type_4: \"Choose your hero!\"\n#    student_type_5: \"Have your Class Code ready!\"\n#    signup_as_student: \"Sign up as a Student\"\n#    individuals_or_parents: \"Individuals & Parents\"\n#    individual_type: \"For players learning to code outside of a class. Parents should sign up for an account here.\"\n#    signup_as_individual: \"Sign up as an Individual\"\n#    enter_class_code: \"Enter your Class Code\"\n#    enter_birthdate: \"Enter your birthdate:\"\n#    parent_use_birthdate: \"Parents, use your own birthdate.\"\n#    ask_teacher_1: \"Ask your teacher for your Class Code.\"\n#    ask_teacher_2: \"Not part of a class? Create an \"\n#    ask_teacher_3: \"Individual Account\"\n#    ask_teacher_4: \" instead.\"\n#    about_to_join: \"You're about to join:\"\n#    enter_parent_email: \"Enter your parent’s email address:\"\n#    parent_email_error: \"Something went wrong when trying to send the email. Check the email address and try again.\"\n#    parent_email_sent: \"We’ve sent an email with further instructions on how to create an account. Ask your parent to check their inbox.\"\n#    account_created: \"Account Created!\"\n#    confirm_student_blurb: \"Write down your information so that you don't forget it. Your teacher can also help you reset your password at any time.\"\n#    confirm_individual_blurb: \"Write down your login information in case you need it later. Verify your email so you can recover your account if you ever forget your password - check your inbox!\"\n#    write_this_down: \"Write this down:\"\n#    start_playing: \"Start Playing!\"\n#    sso_connected: \"Successfully connected with:\"\n#    select_your_starting_hero: \"Select Your Starting Hero:\"\n#    you_can_always_change_your_hero_later: \"You can always change your hero later.\"\n#    finish: \"Finish\"\n#    teacher_ready_to_create_class: \"You're ready to create your first class!\"\n#    teacher_students_can_start_now: \"Your students will be able to start playing the first course, Introduction to Computer Science, immediately.\"\n#    teacher_list_create_class: \"On the next screen you will be able to create a new class.\"\n#    teacher_list_add_students: \"Add students to the class by clicking the View Class link, then sending your students the Class Code or URL. You can also invite them via email if they have email addresses.\"\n#    teacher_list_resource_hub_1: \"Check out the\"\n#    teacher_list_resource_hub_2: \"Course Guides\"\n#    teacher_list_resource_hub_3: \"for solutions to every level, and the\"\n#    teacher_list_resource_hub_4: \"Resource Hub\"\n#    teacher_list_resource_hub_5: \"for curriculum guides, activities, and more!\"\n#    teacher_additional_questions: \"That’s it! If you need additional help or have questions, reach out to __supportEmail__.\"\n#    dont_use_our_email_silly: \"Don't put our email here! Put your parent's email.\"\n#    want_codecombat_in_school: \"Want to play CodeCombat all the time?\"\n#    eu_confirmation: \"I agree to allow CodeCombat to store my data on US servers.\"\n#    eu_confirmation_place_of_processing: \"Learn more about the possible risks\"\n#    eu_confirmation_student: \"If you are not sure, ask your teacher.\"\n#    eu_confirmation_individual: \"If you do not want us to store your data on US servers, you can always keep playing anonymously without saving your code.\"\n\n#  recover:\n#    recover_account_title: \"Recover Account\"\n#    send_password: \"Send Recovery Password\"\n#    recovery_sent: \"Recovery email sent.\"\n\n#  items:\n#    primary: \"Primary\"\n#    secondary: \"Secondary\"\n#    armor: \"Armor\"\n#    accessories: \"Accessories\"\n#    misc: \"Misc\"\n#    books: \"Books\"\n\n#  common:\n#    default_title: \"CodeCombat - Coding games to learn Python and JavaScript\"\n#    default_meta_description: \"Learn typed code through a programming game. Learn Python, JavaScript, and HTML as you solve puzzles and learn to make your own coding games and websites.\"\n#    back: \"Back\" # When used as an action verb, like \"Navigate backward\"\n#    coming_soon: \"Coming soon!\"\n#    continue: \"Continue\" # When used as an action verb, like \"Continue forward\"\n#    next: \"Next\"\n#    default_code: \"Default Code\"\n#    loading: \"Loading...\"\n#    overview: \"Overview\"\n#    processing: \"Processing...\"\n#    solution: \"Solution\"\n#    table_of_contents: \"Table of Contents\"\n#    intro: \"Intro\"\n#    saving: \"Saving...\"\n#    sending: \"Sending...\"\n#    send: \"Send\"\n#    sent: \"Sent\"\n#    cancel: \"Cancel\"\n#    save: \"Save\"\n#    publish: \"Publish\"\n#    create: \"Create\"\n#    fork: \"Fork\"\n#    play: \"Play\" # When used as an action verb, like \"Play next level\"\n#    retry: \"Retry\"\n#    actions: \"Actions\"\n#    info: \"Info\"\n#    help: \"Help\"\n#    watch: \"Watch\"\n#    unwatch: \"Unwatch\"\n#    submit_patch: \"Submit Patch\"\n#    submit_changes: \"Submit Changes\"\n#    save_changes: \"Save Changes\"\n#    required_field: \"required\"\n\n#  general:\n#    and: \"and\"\n#    name: \"Name\"\n#    date: \"Date\"\n#    body: \"Body\"\n#    version: \"Version\"\n#    pending: \"Pending\"\n#    accepted: \"Accepted\"\n#    rejected: \"Rejected\"\n#    withdrawn: \"Withdrawn\"\n#    accept: \"Accept\"\n#    accept_and_save: \"Accept&Save\"\n#    reject: \"Reject\"\n#    withdraw: \"Withdraw\"\n#    submitter: \"Submitter\"\n#    submitted: \"Submitted\"\n#    commit_msg: \"Commit Message\"\n#    version_history: \"Version History\"\n#    version_history_for: \"Version History for: \"\n#    select_changes: \"Select two changes below to see the difference.\"\n#    undo_prefix: \"Undo\"\n#    undo_shortcut: \"(Ctrl+Z)\"\n#    redo_prefix: \"Redo\"\n#    redo_shortcut: \"(Ctrl+Shift+Z)\"\n#    play_preview: \"Play preview of current level\"\n#    result: \"Result\"\n#    results: \"Results\"\n#    description: \"Description\"\n#    or: \"or\"\n#    subject: \"Subject\"\n#    email: \"Email\"\n#    password: \"Password\"\n#    confirm_password: \"Confirm Password\"\n#    message: \"Message\"\n#    code: \"Code\"\n#    ladder: \"Ladder\"\n#    when: \"When\"\n#    opponent: \"Opponent\"\n#    rank: \"Rank\"\n#    score: \"Score\"\n#    win: \"Win\"\n#    loss: \"Loss\"\n#    tie: \"Tie\"\n#    easy: \"Easy\"\n#    medium: \"Medium\"\n#    hard: \"Hard\"\n#    player: \"Player\"\n#    player_level: \"Level\" # Like player level 5, not like level: Dungeons of Kithgard\n#    warrior: \"Warrior\"\n#    ranger: \"Ranger\"\n#    wizard: \"Wizard\"\n#    first_name: \"First Name\"\n#    last_name: \"Last Name\"\n#    last_initial: \"Last Initial\"\n#    username: \"Username\"\n#    contact_us: \"Contact Us\"\n#    close_window: \"Close Window\"\n#    learn_more: \"Learn More\"\n#    more: \"More\"\n#    fewer: \"Fewer\"\n#    with: \"with\"\n\n#  units:\n#    second: \"second\"\n#    seconds: \"seconds\"\n#    sec: \"sec\"\n#    minute: \"minute\"\n#    minutes: \"minutes\"\n#    hour: \"hour\"\n#    hours: \"hours\"\n#    day: \"day\"\n#    days: \"days\"\n#    week: \"week\"\n#    weeks: \"weeks\"\n#    month: \"month\"\n#    months: \"months\"\n#    year: \"year\"\n#    years: \"years\"\n\n#  play_level:\n#    back_to_map: \"Back to Map\"\n#    directions: \"Directions\"\n#    edit_level: \"Edit Level\"\n#    keep_learning: \"Keep Learning\"\n#    explore_codecombat: \"Explore CodeCombat\"\n#    finished_hoc: \"I'm finished with my Hour of Code\"\n#    get_certificate: \"Get your certificate!\"\n#    level_complete: \"Level Complete\"\n#    completed_level: \"Completed Level:\"\n#    course: \"Course:\"\n#    done: \"Done\"\n#    next_level: \"Next Level\"\n#    combo_challenge: \"Combo Challenge\"\n#    concept_challenge: \"Concept Challenge\"\n#    challenge_unlocked: \"Challenge Unlocked\"\n#    combo_challenge_unlocked: \"Combo Challenge Unlocked\"\n#    concept_challenge_unlocked: \"Concept Challenge Unlocked\"\n#    concept_challenge_complete: \"Concept Challenge Complete!\"\n#    combo_challenge_complete: \"Combo Challenge Complete!\"\n#    combo_challenge_complete_body: \"Great job, it looks like you're well on your way to understanding __concept__!\"\n#    replay_level: \"Replay Level\"\n#    combo_concepts_used: \"__complete__/__total__ Concepts Used\"\n#    combo_all_concepts_used: \"You used all concepts possible to solve the challenge. Great job!\"\n#    combo_not_all_concepts_used: \"You used __complete__ out of the __total__ concepts possible to solve the challenge. Try to get all __total__ concepts next time!\"\n#    start_challenge: \"Start Challenge\"\n#    next_game: \"Next game\"\n#    languages: \"Languages\"\n#    programming_language: \"Programming language\"\n#    show_menu: \"Show game menu\"\n#    home: \"Home\" # Not used any more, will be removed soon.\n#    level: \"Level\" # Like \"Level: Dungeons of Kithgard\"\n#    skip: \"Skip\"\n#    game_menu: \"Game Menu\"\n#    restart: \"Restart\"\n#    goals: \"Goals\"\n#    goal: \"Goal\"\n#    challenge_level_goals: \"Challenge Level Goals\"\n#    challenge_level_goal: \"Challenge Level Goal\"\n#    concept_challenge_goals: \"Concept Challenge Goals\"\n#    combo_challenge_goals: \"Challenge Level Goals\"\n#    concept_challenge_goal: \"Concept Challenge Goal\"\n#    combo_challenge_goal: \"Challenge Level Goal\"\n#    running: \"Running...\"\n#    success: \"Success!\"\n#    incomplete: \"Incomplete\"\n#    timed_out: \"Ran out of time\"\n#    failing: \"Failing\"\n#    reload: \"Reload\"\n#    reload_title: \"Reload All Code?\"\n#    reload_really: \"Are you sure you want to reload this level back to the beginning?\"\n#    reload_confirm: \"Reload All\"\n#    test_level: \"Test Level\"\n#    victory: \"Victory\"\n#    victory_title_prefix: \"\"\n#    victory_title_suffix: \" Complete\"\n#    victory_sign_up: \"Sign Up to Save Progress\"\n#    victory_sign_up_poke: \"Want to save your code? Create a free account!\"\n#    victory_rate_the_level: \"How fun was this level?\"\n#    victory_return_to_ladder: \"Return to Ladder\"\n#    victory_saving_progress: \"Saving Progress\"\n#    victory_go_home: \"Go Home\"\n#    victory_review: \"Tell us more!\"\n#    victory_review_placeholder: \"How was the level?\"\n#    victory_hour_of_code_done: \"Are You Done?\"\n#    victory_hour_of_code_done_yes: \"Yes, I'm finished with my Hour of Code™!\"\n#    victory_experience_gained: \"XP Gained\"\n#    victory_gems_gained: \"Gems Gained\"\n#    victory_new_item: \"New Item\"\n#    victory_new_hero: \"New Hero\"\n#    victory_viking_code_school: \"Holy smokes, that was a hard level you just beat! If you aren't already a software developer, you should be. You just got fast-tracked for acceptance with Viking Code School, where you can take your skills to the next level and become a professional web developer in 14 weeks.\"\n#    victory_become_a_viking: \"Become a Viking\"\n#    victory_no_progress_for_teachers: \"Progress is not saved for teachers. But, you can add a student account to your classroom for yourself.\"\n#    tome_cast_button_run: \"Run\"\n#    tome_cast_button_running: \"Running\"\n#    tome_cast_button_ran: \"Ran\"\n#    tome_submit_button: \"Submit\"\n#    tome_reload_method: \"Reload original code to restart the level\"\n#    tome_available_spells: \"Available Spells\"\n#    tome_your_skills: \"Your Skills\"\n#    hints: \"Hints\"\n#    videos: \"Videos\"\n#    hints_title: \"Hint {{number}}\"\n#    code_saved: \"Code Saved\"\n#    skip_tutorial: \"Skip (esc)\"\n#    keyboard_shortcuts: \"Key Shortcuts\"\n#    loading_start: \"Start Level\"\n#    loading_start_combo: \"Start Combo Challenge\"\n#    loading_start_concept: \"Start Concept Challenge\"\n#    problem_alert_title: \"Fix Your Code\"\n#    time_current: \"Now:\"\n#    time_total: \"Max:\"\n#    time_goto: \"Go to:\"\n#    non_user_code_problem_title: \"Unable to Load Level\"\n#    infinite_loop_title: \"Infinite Loop Detected\"\n#    infinite_loop_description: \"The initial code to build the world never finished running. It's probably either really slow or has an infinite loop. Or there might be a bug. You can either try running this code again or reset the code to the default state. If that doesn't fix it, please let us know.\"\n#    check_dev_console: \"You can also open the developer console to see what might be going wrong.\"\n#    check_dev_console_link: \"(instructions)\"\n#    infinite_loop_try_again: \"Try Again\"\n#    infinite_loop_reset_level: \"Reset Level\"\n#    infinite_loop_comment_out: \"Comment Out My Code\"\n#    tip_toggle_play: \"Toggle play/paused with Ctrl+P.\"\n#    tip_scrub_shortcut: \"Use Ctrl+[ and Ctrl+] to rewind and fast-forward.\"\n#    tip_guide_exists: \"Click the guide, inside game menu (at the top of the page), for useful info.\"\n#    tip_open_source: \"CodeCombat is part of the open source community!\"\n#    tip_tell_friends: \"Enjoying CodeCombat? Tell your friends about us!\"\n#    tip_beta_launch: \"CodeCombat launched its beta in October, 2013.\"\n#    tip_think_solution: \"Think of the solution, not the problem.\"\n#    tip_theory_practice: \"In theory, there is no difference between theory and practice. But in practice, there is. - Yogi Berra\"\n#    tip_error_free: \"There are two ways to write error-free programs; only the third one works. - Alan Perlis\"\n#    tip_debugging_program: \"If debugging is the process of removing bugs, then programming must be the process of putting them in. - Edsger W. Dijkstra\"\n#    tip_forums: \"Head over to the forums and tell us what you think!\"\n#    tip_baby_coders: \"In the future, even babies will be Archmages.\"\n#    tip_morale_improves: \"Loading will continue until morale improves.\"\n#    tip_all_species: \"We believe in equal opportunities to learn programming for all species.\"\n#    tip_reticulating: \"Reticulating spines.\"\n#    tip_harry: \"Yer a Wizard, \"\n#    tip_great_responsibility: \"With great coding skill comes great debug responsibility.\"\n#    tip_munchkin: \"If you don't eat your vegetables, a munchkin will come after you while you're asleep.\"\n#    tip_binary: \"There are only 10 types of people in the world: those who understand binary, and those who don't.\"\n#    tip_commitment_yoda: \"A programmer must have the deepest commitment, the most serious mind. ~ Yoda\"\n#    tip_no_try: \"Do. Or do not. There is no try. - Yoda\"\n#    tip_patience: \"Patience you must have, young Padawan. - Yoda\"\n#    tip_documented_bug: \"A documented bug is not a bug; it is a feature.\"\n#    tip_impossible: \"It always seems impossible until it's done. - Nelson Mandela\"\n#    tip_talk_is_cheap: \"Talk is cheap. Show me the code. - Linus Torvalds\"\n#    tip_first_language: \"The most disastrous thing that you can ever learn is your first programming language. - Alan Kay\"\n#    tip_hardware_problem: \"Q: How many programmers does it take to change a light bulb?  A: None, it's a hardware problem.\"\n#    tip_hofstadters_law: \"Hofstadter's Law: It always takes longer than you expect, even when you take into account Hofstadter's Law.\"\n#    tip_premature_optimization: \"Premature optimization is the root of all evil. - Donald Knuth\"\n#    tip_brute_force: \"When in doubt, use brute force. - Ken Thompson\"\n#    tip_extrapolation: \"There are only two kinds of people: those that can extrapolate from incomplete data...\"\n#    tip_superpower: \"Coding is the closest thing we have to a superpower.\"\n#    tip_control_destiny: \"In real open source, you have the right to control your own destiny. - Linus Torvalds\"\n#    tip_no_code: \"No code is faster than no code.\"\n#    tip_code_never_lies: \"Code never lies, comments sometimes do. — Ron Jeffries\"\n#    tip_reusable_software: \"Before software can be reusable it first has to be usable.\"\n#    tip_optimization_operator: \"Every language has an optimization operator. In most languages that operator is ‘//’\"\n#    tip_lines_of_code: \"Measuring programming progress by lines of code is like measuring aircraft building progress by weight. — Bill Gates\"\n#    tip_source_code: \"I want to change the world but they would not give me the source code.\"\n#    tip_javascript_java: \"Java is to JavaScript what Car is to Carpet. - Chris Heilmann\"\n#    tip_move_forward: \"Whatever you do, keep moving forward. - Martin Luther King Jr.\"\n#    tip_google: \"Have a problem you can't solve? Google it!\"\n#    tip_adding_evil: \"Adding a pinch of evil.\"\n#    tip_hate_computers: \"That's the thing about people who think they hate computers. What they really hate is lousy programmers. - Larry Niven\"\n#    tip_open_source_contribute: \"You can help CodeCombat improve!\"\n#    tip_recurse: \"To iterate is human, to recurse divine. - L. Peter Deutsch\"\n#    tip_free_your_mind: \"You have to let it all go, Neo. Fear, doubt, and disbelief. Free your mind. - Morpheus\"\n#    tip_strong_opponents: \"Even the strongest of opponents always has a weakness. - Itachi Uchiha\"\n#    tip_paper_and_pen: \"Before you start coding, you can always plan with a sheet of paper and a pen.\"\n#    tip_solve_then_write: \"First, solve the problem. Then, write the code. - John Johnson\"\n#    tip_compiler_ignores_comments: \"Sometimes I think that the compiler ignores my comments.\"\n#    tip_understand_recursion: \"The only way to understand recursion is to understand recursion.\"\n#    tip_life_and_polymorphism: \"Open Source is like a totally polymorphic heterogeneous structure: All types are welcome.\"\n#    tip_mistakes_proof_of_trying: \"Mistakes in your code are just proof that you are trying.\"\n#    tip_adding_orgres: \"Rounding up ogres.\"\n#    tip_sharpening_swords: \"Sharpening the swords.\"\n#    tip_ratatouille: \"You must not let anyone define your limits because of where you come from. Your only limit is your soul. - Gusteau, Ratatouille\"\n#    tip_nemo: \"When life gets you down, want to know what you've gotta do? Just keep swimming, just keep swimming. - Dory, Finding Nemo\"\n#    tip_internet_weather: \"Just move to the internet, it's great here. We get to live inside where the weather is always awesome. - John Green\"\n#    tip_nerds: \"Nerds are allowed to love stuff, like jump-up-and-down-in-the-chair-can't-control-yourself love it. - John Green\"\n#    tip_self_taught: \"I taught myself 90% of what I've learned. And that's normal! - Hank Green\"\n#    tip_luna_lovegood: \"Don't worry, you're just as sane as I am. - Luna Lovegood\"\n#    tip_good_idea: \"The best way to have a good idea is to have a lot of ideas. - Linus Pauling\"\n#    tip_programming_not_about_computers: \"Computer Science is no more about computers than astronomy is about telescopes. - Edsger Dijkstra\"\n#    tip_mulan: \"Believe you can, then you will. - Mulan\"\n#    project_complete: \"Project Complete!\"\n#    share_this_project: \"Share this project with friends or family:\"\n#    ready_to_share: \"Ready to publish your project?\"\n#    click_publish: \"Click \\\"Publish\\\" to make it appear in the class gallery, then check out what your classmates built! You can come back and continue to work on this project. Any further changes will automatically be saved and shared with your classmates.\"\n#    already_published_prefix: \"Your changes have been published to the class gallery.\"\n#    already_published_suffix: \"Keep experimenting and making this project even better, or see what the rest of your class has built! Your changes will automatically be saved and shared with your classmates.\"\n#    view_gallery: \"View Gallery\"\n#    project_published_noty: \"Your level has been published!\"\n#    keep_editing: \"Keep Editing\"\n#    learn_new_concepts: \"Learn new concepts\"\n#    watch_a_video: \"Watch a video on __concept_name__\"\n#    concept_unlocked: \"Concept Unlocked\"\n#    use_at_least_one_concept: \"Use at least one concept: \"\n\n#  apis:\n#    methods: \"Methods\"\n#    events: \"Events\"\n#    handlers: \"Handlers\"\n#    properties: \"Properties\"\n#    snippets: \"Snippets\"\n#    spawnable: \"Spawnable\"\n#    html: \"HTML\"\n#    math: \"Math\"\n#    array: \"Array\"\n#    object: \"Object\"\n#    string: \"String\"\n#    function: \"Function\"\n#    vector: \"Vector\"\n#    date: \"Date\"\n#    jquery: \"jQuery\"\n#    json: \"JSON\"\n#    number: \"Number\"\n#    webjavascript: \"JavaScript\"\n\n#  amazon_hoc:\n#    title: \"Keep Learning with Amazon!\"\n#    congrats: \"Congratulations on conquering that challenging Hour of Code!\"\n#    educate_1: \"Now, keep learning about coding and cloud computing with AWS Educate, an exciting, free program from Amazon for both students and teachers. With AWS Educate, you can earn cool badges as you learn about the basics of the cloud and cutting-edge technologies such as gaming, virtual reality, and Alexa.\"\n#    educate_2: \"Learn more and sign up here\"\n#    future_eng_1: \"You can also try to build your own school facts skill for Alexa\"\n#    future_eng_2: \"here\"\n#    future_eng_3: \"(device is not required). This Alexa activity is brought to you by the\"\n#    future_eng_4: \"Amazon Future Engineer\"\n#    future_eng_5: \"program which creates learning and work opportunities for all K-12 students in the United States who wish to pursue computer science.\"\n\n#  play_game_dev_level:\n#    created_by: \"Created by {{name}}\"\n#    created_during_hoc: \"Created during Hour of Code\"\n#    restart: \"Restart Level\"\n#    play: \"Play Level\"\n#    play_more_codecombat: \"Play More CodeCombat\"\n#    default_student_instructions: \"Click to control your hero and win your game!\"\n#    goal_survive: \"Survive.\"\n#    goal_survive_time: \"Survive for __seconds__ seconds.\"\n#    goal_defeat: \"Defeat all enemies.\"\n#    goal_defeat_amount: \"Defeat __amount__ enemies.\"\n#    goal_move: \"Move to all the red X marks.\"\n#    goal_collect: \"Collect all the items.\"\n#    goal_collect_amount: \"Collect __amount__ items.\"\n\n#  game_menu:\n#    inventory_tab: \"Inventory\"\n#    save_load_tab: \"Save/Load\"\n#    options_tab: \"Options\"\n#    guide_tab: \"Guide\"\n#    guide_video_tutorial: \"Video Tutorial\"\n#    guide_tips: \"Tips\"\n#    multiplayer_tab: \"Multiplayer\"\n#    auth_tab: \"Sign Up\"\n#    inventory_caption: \"Equip your hero\"\n#    choose_hero_caption: \"Choose hero, language\"\n#    options_caption: \"Configure settings\"\n#    guide_caption: \"Docs and tips\"\n#    multiplayer_caption: \"Play with friends!\"\n#    auth_caption: \"Save your progress.\"\n\n#  leaderboard:\n#    view_other_solutions: \"View Leaderboards\"\n#    scores: \"Scores\"\n#    top_players: \"Top Players by\"\n#    day: \"Today\"\n#    week: \"This Week\"\n#    all: \"All-Time\"\n#    latest: \"Latest\"\n#    time: \"Win Time\"\n#    damage_taken: \"Damage Taken\"\n#    damage_dealt: \"Damage Dealt\"\n#    difficulty: \"Difficulty\"\n#    gold_collected: \"Gold Collected\"\n#    survival_time: \"Survived\"\n#    defeated: \"Enemies Defeated\"\n#    code_length: \"Lines of Code\"\n#    score_display: \"__scoreType__: __score__\"\n\n#  inventory:\n#    equipped_item: \"Equipped\"\n#    required_purchase_title: \"Required\"\n#    available_item: \"Available\"\n#    restricted_title: \"Restricted\"\n#    should_equip: \"(double-click to equip)\"\n#    equipped: \"(equipped)\"\n#    locked: \"(locked)\"\n#    restricted: \"(restricted in this level)\"\n#    equip: \"Equip\"\n#    unequip: \"Unequip\"\n#    warrior_only: \"Warrior Only\"\n#    ranger_only: \"Ranger Only\"\n#    wizard_only: \"Wizard Only\"\n\n#  buy_gems:\n#    few_gems: \"A few gems\"\n#    pile_gems: \"Pile of gems\"\n#    chest_gems: \"Chest of gems\"\n#    purchasing: \"Purchasing...\"\n#    declined: \"Your card was declined\"\n#    retrying: \"Server error, retrying.\"\n#    prompt_title: \"Not Enough Gems\"\n#    prompt_body: \"Do you want to get more?\"\n#    prompt_button: \"Enter Shop\"\n#    recovered: \"Previous gems purchase recovered. Please refresh the page.\"\n#    price: \"x{{gems}} / mo\"\n#    buy_premium: \"Buy Premium\"\n#    purchase: \"Purchase\"\n#    purchased: \"Purchased\"\n\n#  subscribe_for_gems:\n#    prompt_title: \"Not Enough Gems!\"\n#    prompt_body: \"Subscribe to Premium to get gems and access to even more levels!\"\n\n#  earn_gems:\n#    prompt_title: \"Not Enough Gems\"\n#    prompt_body: \"Keep playing to earn more!\"\n\n#  subscribe:\n#    best_deal: \"Best Deal!\"\n#    confirmation: \"Congratulations! You now have a CodeCombat Premium Subscription!\"\n#    premium_already_subscribed: \"You're already subscribed to Premium!\"\n#    subscribe_modal_title: \"CodeCombat Premium\"\n#    comparison_blurb: \"Become a Master Coder - subscribe to <b>Premium</b> today!\"\n#    must_be_logged: \"You must be logged in first. Please create an account or log in from the menu above.\"\n#    subscribe_title: \"Subscribe\" # Actually used in subscribe buttons, too\n#    unsubscribe: \"Unsubscribe\"\n#    confirm_unsubscribe: \"Confirm Unsubscribe\"\n#    never_mind: \"Never Mind, I Still Love You\"\n#    thank_you_months_prefix: \"Thank you for supporting us these last\"\n#    thank_you_months_suffix: \"months.\"\n#    thank_you: \"Thank you for supporting CodeCombat.\"\n#    sorry_to_see_you_go: \"Sorry to see you go! Please let us know what we could have done better.\"\n#    unsubscribe_feedback_placeholder: \"O, what have we done?\"\n#    stripe_description: \"Monthly Subscription\"\n#    buy_now: \"Buy Now\"\n#    subscription_required_to_play: \"You'll need a subscription to play this level.\"\n#    unlock_help_videos: \"Subscribe to unlock all video tutorials.\"\n#    personal_sub: \"Personal Subscription\" # Accounts Subscription View below\n#    loading_info: \"Loading subscription information...\"\n#    managed_by: \"Managed by\"\n#    will_be_cancelled: \"Will be cancelled on\"\n#    currently_free: \"You currently have a free subscription\"\n#    currently_free_until: \"You currently have a subscription until\"\n#    free_subscription: \"Free subscription\"\n#    was_free_until: \"You had a free subscription until\"\n#    managed_subs: \"Managed Subscriptions\"\n#    subscribing: \"Subscribing...\"\n#    current_recipients: \"Current Recipients\"\n#    unsubscribing: \"Unsubscribing\"\n#    subscribe_prepaid: \"Click Subscribe to use prepaid code\"\n#    using_prepaid: \"Using prepaid code for monthly subscription\"\n#    feature_level_access: \"Access 300+ levels available\"\n#    feature_heroes: \"Unlock exclusive heroes and pets\"\n#    feature_learn: \"Learn to make games and websites\"\n#    month_price: \"$__price__\"\n#    first_month_price: \"Only $__price__ for your first month!\"\n#    lifetime: \"Lifetime Access\"\n#    lifetime_price: \"$__price__\"\n#    year_subscription: \"Yearly Subscription\"\n#    year_price: \"$__price__/year\"\n#    support_part1: \"Need help with payment or prefer PayPal? Email\"\n#    support_part2: \"support@codecombat.com\"\n\n#  announcement:\n#    now_available: \"Now available for subscribers!\"\n#    subscriber: \"subscriber\"\n#    cuddly_companions: \"Cuddly Companions!\" # Pet Announcement Modal\n#    kindling_name: \"Kindling Elemental\"\n#    kindling_description: \"Kindling Elementals just want to keep you warm at night. And during the day. All the time, really.\"\n#    griffin_name: \"Baby Griffin\"\n#    griffin_description: \"Griffins are half eagle, half lion, all adorable.\"\n#    raven_name: \"Raven\"\n#    raven_description: \"Ravens are excellent at gathering shiny bottles full of health for you.\"\n#    mimic_name: \"Mimic\"\n#    mimic_description: \"Mimics can pick up coins for you. Move them on top of coins to increase your gold supply.\"\n#    cougar_name: \"Cougar\"\n#    cougar_description: \"Cougars like to earn a PhD by Purring Happily Daily.\"\n#    fox_name: \"Blue Fox\"\n#    fox_description: \"Blue foxes are very clever and love digging in the dirt and snow!\"\n#    pugicorn_name: \"Pugicorn\"\n#    pugicorn_description: \"Pugicorns are some of the rarest creatures and can cast spells!\"\n#    wolf_name: \"Wolf Pup\"\n#    wolf_description: \"Wolf pups excel in hunting, gathering, and playing a mean game of hide-and-seek!\"\n#    ball_name: \"Red Squeaky Ball\"\n#    ball_description: \"ball.squeak()\"\n#    collect_pets: \"Collect pets for your heroes!\"\n#    each_pet: \"Each pet has a unique helper ability!\"\n#    upgrade_to_premium: \"Become a {{subscriber}} to equip pets.\"\n#    play_second_kithmaze: \"Play {{the_second_kithmaze}} to unlock the Wolf Pup!\"\n#    the_second_kithmaze: \"The Second Kithmaze\"\n#    keep_playing: \"Keep playing to discover the first pet!\"\n#    coming_soon: \"Coming soon\"\n#    ritic: \"Ritic the Cold\" # Ritic Announcement Modal\n#    ritic_description: \"Ritic the Cold. Trapped in Kelvintaph Glacier for countless ages, finally free and ready to tend to the ogres that imprisoned him.\"\n#    ice_block: \"A block of ice\"\n#    ice_description: \"There appears to be something trapped inside...\"\n#    blink_name: \"Blink\"\n#    blink_description: \"Ritic disappears and reappears in a blink of an eye, leaving nothing but a shadow.\"\n#    shadowStep_name: \"Shadowstep\"\n#    shadowStep_description: \"A master assassin knows how to walk between the shadows.\"\n#    tornado_name: \"Tornado\"\n#    tornado_description: \"It is good to have a reset button when one's cover is blown.\"\n#    wallOfDarkness_name: \"Wall of Darkness\"\n#    wallOfDarkness_description: \"Hide behind a wall of shadows to prevent the gaze of prying eyes.\"\n\n#  premium_features:\n#    get_premium: \"Get<br>CodeCombat<br>Premium\" # Fit into the banner on the /features page\n#    master_coder: \"Become a Master Coder by subscribing today!\"\n#    paypal_redirect: \"You will be redirected to PayPal to complete the subscription process.\"\n#    subscribe_now: \"Subscribe Now\"\n#    hero_blurb_1: \"Get access to __premiumHeroesCount__ super-charged subscriber-only heroes! Harness the unstoppable power of Okar Stompfoot, the deadly precision of Naria of the Leaf, or summon \\\"adorable\\\" skeletons with Nalfar Cryptor.\"\n#    hero_blurb_2: \"Premium Warriors unlock stunning martial skills like Warcry, Stomp, and Hurl Enemy. Or, play as a Ranger, using stealth and bows, throwing knives, traps! Try your skill as a true coding Wizard, and unleash a powerful array of Primordial, Necromantic or Elemental magic!\"\n#    hero_caption: \"Exciting new heroes!\"\n#    pet_blurb_1: \"Pets aren't just adorable companions, they also provide unique functionality and methods. The Baby Griffin can carry units through the air, the Wolf Pup plays catch with enemy arrows, the Cougar is fond of chasing ogres around, and the Mimic attracts coins like a magnet!\"\n#    pet_blurb_2: \"Collect all the pets to discover their unique abilities!\"\n#    pet_caption: \"Adopt pets to accompany your hero!\"\n#    game_dev_blurb: \"Learn game scripting and build new levels to share with your friends! Place the items you want, write code for unit logic and behavior, and see if your friends can beat the level!\"\n#    game_dev_caption: \"Design your own games to challenge your friends!\"\n#    everything_in_premium: \"Everything you get in CodeCombat Premium:\"\n#    list_gems: \"Receive bonus gems to buy gear, pets, and heroes\"\n#    list_levels: \"Gain access to __premiumLevelsCount__ more levels\"\n#    list_heroes: \"Unlock exclusive heroes, include Ranger and Wizard classes\"\n#    list_game_dev: \"Make and share games with friends\"\n#    list_web_dev: \"Build websites and interactive apps\"\n#    list_items: \"Equip Premium-only items like pets\"\n#    list_support: \"Get Premium support to help you debug tricky code\"\n#    list_clans: \"Create private clans to invite your friends and compete on a group leaderboard\"\n\n#  choose_hero:\n#    choose_hero: \"Choose Your Hero\"\n#    programming_language: \"Programming Language\"\n#    programming_language_description: \"Which programming language do you want to use?\"\n#    default: \"Default\"\n#    experimental: \"Experimental\"\n#    python_blurb: \"Simple yet powerful, great for beginners and experts.\"\n#    javascript_blurb: \"The language of the web. (Not the same as Java.)\"\n#    coffeescript_blurb: \"Nicer JavaScript syntax.\"\n#    lua_blurb: \"Game scripting language.\"\n#    java_blurb: \"(Subscriber Only) Android and enterprise.\"\n#    status: \"Status\"\n#    weapons: \"Weapons\"\n#    weapons_warrior: \"Swords - Short Range, No Magic\"\n#    weapons_ranger: \"Crossbows, Guns - Long Range, No Magic\"\n#    weapons_wizard: \"Wands, Staffs - Long Range, Magic\"\n#    attack: \"Damage\" # Can also translate as \"Attack\"\n#    health: \"Health\"\n#    speed: \"Speed\"\n#    regeneration: \"Regeneration\"\n#    range: \"Range\" # As in \"attack or visual range\"\n#    blocks: \"Blocks\" # As in \"this shield blocks this much damage\"\n#    backstab: \"Backstab\" # As in \"this dagger does this much backstab damage\"\n#    skills: \"Skills\"\n#    attack_1: \"Deals\"\n#    attack_2: \"of listed\"\n#    attack_3: \"weapon damage.\"\n#    health_1: \"Gains\"\n#    health_2: \"of listed\"\n#    health_3: \"armor health.\"\n#    speed_1: \"Moves at\"\n#    speed_2: \"meters per second.\"\n#    available_for_purchase: \"Available for Purchase\" # Shows up when you have unlocked, but not purchased, a hero in the hero store\n#    level_to_unlock: \"Level to unlock:\" # Label for which level you have to beat to unlock a particular hero (click a locked hero in the store to see)\n#    restricted_to_certain_heroes: \"Only certain heroes can play this level.\"\n\n#  skill_docs:\n#    function: \"function\" # skill types\n#    method: \"method\"\n#    snippet: \"snippet\"\n#    number: \"number\"\n#    array: \"array\"\n#    object: \"object\"\n#    string: \"string\"\n#    writable: \"writable\" # Hover over \"attack\" in Your Skills while playing a level to see most of this\n#    read_only: \"read-only\"\n#    action: \"Action\"\n#    spell: \"Spell\"\n#    action_name: \"name\"\n#    action_cooldown: \"Takes\"\n#    action_specific_cooldown: \"Cooldown\"\n#    action_damage: \"Damage\"\n#    action_range: \"Range\"\n#    action_radius: \"Radius\"\n#    action_duration: \"Duration\"\n#    example: \"Example\"\n#    ex: \"ex\" # Abbreviation of \"example\"\n#    current_value: \"Current Value\"\n#    default_value: \"Default value\"\n#    parameters: \"Parameters\"\n#    required_parameters: \"Required Parameters\"\n#    optional_parameters: \"Optional Parameters\"\n#    returns: \"Returns\"\n#    granted_by: \"Granted by\"\n\n#  save_load:\n#    granularity_saved_games: \"Saved\"\n#    granularity_change_history: \"History\"\n\n#  options:\n#    general_options: \"General Options\" # Check out the Options tab in the Game Menu while playing a level\n#    volume_label: \"Volume\"\n#    music_label: \"Music\"\n#    music_description: \"Turn background music on/off.\"\n#    editor_config_title: \"Editor Configuration\"\n#    editor_config_livecompletion_label: \"Live Autocompletion\"\n#    editor_config_livecompletion_description: \"Displays autocomplete suggestions while typing.\"\n#    editor_config_invisibles_label: \"Show Invisibles\"\n#    editor_config_invisibles_description: \"Displays invisibles such as spaces or tabs.\"\n#    editor_config_indentguides_label: \"Show Indent Guides\"\n#    editor_config_indentguides_description: \"Displays vertical lines to see indentation better.\"\n#    editor_config_behaviors_label: \"Smart Behaviors\"\n#    editor_config_behaviors_description: \"Autocompletes brackets, braces, and quotes.\"\n\n#  about:\n#    title: \"About CodeCombat - Engaging Students, Empowering Teachers, Inspiring Creation\"\n#    meta_description: \"Our mission is to level computer science through game-based learning and make coding accessible to every learner. We believe programming is magic and want learners to be empowered to to create things from pure imagination.\"\n#    learn_more: \"Learn More\"\n#    main_title: \"If you want to learn to program, you need to write (a lot of) code.\"\n#    main_description: \"At CodeCombat, our job is to make sure you're doing that with a smile on your face.\"\n#    mission_link: \"Mission\"\n#    team_link: \"Team\"\n#    story_link: \"Story\"\n#    press_link: \"Press\"\n#    mission_title: \"Our mission: make programming accessible to every student on Earth.\"\n#    mission_description_1: \"<strong>Programming is magic</strong>. It's the ability to create things from pure imagination. We started CodeCombat to give learners the feeling of wizardly power at their fingertips by using <strong>typed code</strong>.\"\n#    mission_description_2: \"As it turns out, that enables them to learn faster too. WAY faster. It's like having a conversation instead of reading a manual. We want to bring that conversation to every school and to <strong>every student</strong>, because everyone should have the chance to learn the magic of programming.\"\n#    team_title: \"Meet the CodeCombat team\"\n#    team_values: \"We value open and respectful dialog, where the best idea wins. Our decisions are grounded in customer research and our process is focused on delivering tangible results for them. Everyone is hands-on, from our CEO to our GitHub contributors, because we value growth and learning in our team.\"\n#    nick_title: \"Cofounder, CEO\"\n#    matt_title: \"Cofounder, CTO\"\n#    cat_title: \"Game Designer\"\n#    scott_title: \"Cofounder, Software Engineer\"\n#    maka_title: \"Customer Advocate\"\n#    robin_title: \"Senior Product Manager\"\n#    nolan_title: \"Sales Manager\"\n#    david_title: \"Marketing Lead\"\n#    titles_csm: \"Customer Success Manager\"\n#    titles_territory_manager: \"Territory Manager\"\n#    lawrence_title: \"Customer Success Manager\"\n#    sean_title: \"Senior Account Executive\"\n#    liz_title: \"Senior Account Executive\"\n#    jane_title: \"Account Executive\"\n#    shan_title: \"Partnership Development Lead, China\"\n#    run_title: \"Head of Operations, China\"\n#    lance_title: \"Software Engineer Intern, China\"\n#    matias_title: \"Senior Software Engineer\"\n#    ryan_title: \"Customer Support Specialist\"\n#    maya_title: \"Curriculum Developer\"\n#    bill_title: \"General Manager, China\"\n#    shasha_title: \"Product and Visual Designer\"\n#    daniela_title: \"Marketing Manager\"\n#    chelsea_title: \"Operations Manager\"\n#    claire_title: \"Executive Assistant\"\n#    bobby_title: \"Senior Game Designer\"\n#    brian_title: \"Lead Game Designer\"\n#    andrew_title: \"Software Engineer\"\n#    stephanie_title: \"Customer Support Specialist\"\n#    rob_title: \"Sales Development Representative\"\n#    shubhangi_title: \"Software Engineer\"\n#    bryukh_title: \"Gameplay Developer\"\n#    retrostyle_title: \"Illustration\"\n#    retrostyle_blurb: \"RetroStyle Games\"\n#    bryukh_blurb: \"Constructs puzzles\"\n#    community_title: \"...and our open-source community\"\n#    community_subtitle: \"Over 500 contributors have helped build CodeCombat, with more joining every week!\"\n#    community_description_3: \"CodeCombat is a\"\n#    community_description_link_2: \"community project\"\n#    community_description_1: \"with hundreds of players volunteering to create levels, contribute to our code to add features, fix bugs, playtest, and even translate the game into 50 languages so far. Employees, contributors and the site gain by sharing ideas and pooling effort, as does the open source community in general. The site is built on numerous open source projects, and we are open sourced to give back to the community and provide code-curious players a familiar project to explore and experiment with. Anyone can join the CodeCombat community! Check out our\"\n#    community_description_link: \"contribute page\"\n#    community_description_2: \"for more info.\"\n#    number_contributors: \"Over 450 contributors have lent their support and time to this project.\"\n#    story_title: \"Our story so far\"\n#    story_subtitle: \"Since 2013, CodeCombat has grown from a mere set of sketches to a living, thriving game.\"\n#    story_statistic_1a: \"5,000,000+\"\n#    story_statistic_1b: \"total players\"\n#    story_statistic_1c: \"have started their programming journey through CodeCombat\"\n#    story_statistic_2a: \"We’ve been translated into over 50 languages — our players hail from\"\n#    story_statistic_2b: \"190+ countries\"\n#    story_statistic_3a: \"Together, they have written\"\n#    story_statistic_3b: \"1 billion lines of code and counting\"\n#    story_statistic_3c: \"across many different programming languages\"\n#    story_long_way_1: \"Though we've come a long way...\"\n#    story_sketch_caption: \"Nick's very first sketch depicting a programming game in action.\"\n#    story_long_way_2: \"we still have much to do before we complete our quest, so...\"\n#    jobs_title: \"Come work with us and help write CodeCombat history!\"\n#    jobs_subtitle: \"Don't see a good fit but interested in keeping in touch? See our \\\"Create Your Own\\\" listing.\"\n#    jobs_benefits: \"Employee Benefits\"\n#    jobs_benefit_4: \"Unlimited vacation\"\n#    jobs_benefit_5: \"Professional development and continuing education support – free books and games!\"\n#    jobs_benefit_6: \"Medical (gold), dental, vision, commuter, 401K\"\n#    jobs_benefit_7: \"Sit-stand desks for all\"\n#    jobs_benefit_9: \"10-year option exercise window\"\n#    jobs_benefit_10: \"Maternity leave: 12 weeks paid, next 6 @ 55% salary\"\n#    jobs_benefit_11: \"Paternity leave: 12 weeks paid\"\n#    jobs_custom_title: \"Create Your Own\"\n#    jobs_custom_description: \"Are you passionate about CodeCombat but don't see a job listed that matches your qualifications? Write us and show how you think you can contribute to our team. We'd love to hear from you!\"\n#    jobs_custom_contact_1: \"Send us a note at\"\n#    jobs_custom_contact_2: \"introducing yourself and we might get in touch in the future!\"\n#    contact_title: \"Press & Contact\"\n#    contact_subtitle: \"Need more information? Get in touch with us at\"\n#    screenshots_title: \"Game Screenshots\"\n#    screenshots_hint: \"(click to view full size)\"\n#    downloads_title: \"Download Assets & Information\"\n#    about_codecombat: \"About CodeCombat\"\n#    logo: \"Logo\"\n#    screenshots: \"Screenshots\"\n#    character_art: \"Character Art\"\n#    download_all: \"Download All\"\n#    previous: \"Previous\"\n#    location_title: \"We're located in downtown SF:\"\n\n#  teachers:\n#    licenses_needed: \"Licenses needed\"\n\n#  special_offer:\n#    special_offer: \"Special Offer\"\n#    project_based_title: \"Project-Based Courses\"\n#    project_based_description: \"Web and Game Development courses feature shareable final projects.\"\n#    great_for_clubs_title: \"Great for clubs and electives\"\n#    great_for_clubs_description: \"Teachers can purchase up to __maxQuantityStarterLicenses__ Starter Licenses.\"\n#    low_price_title: \"Just __starterLicensePrice__ per student\"\n#    low_price_description: \"Starter Licenses are active for __starterLicenseLengthMonths__ months from purchase.\"\n#    three_great_courses: \"Three great courses included in the Starter License:\"\n#    license_limit_description: \"Teachers can purchase up to __maxQuantityStarterLicenses__ Starter Licenses. You have already purchased __quantityAlreadyPurchased__. If you need more, contact __supportEmail__. Starter Licenses are valid for __starterLicenseLengthMonths__ months.\"\n#    student_starter_license: \"Student Starter License\"\n#    purchase_starter_licenses: \"Purchase Starter Licenses\"\n#    purchase_starter_licenses_to_grant: \"Purchase Starter Licenses to grant access to __starterLicenseCourseList__\"\n#    starter_licenses_can_be_used: \"Starter Licenses can be used to assign additional courses immediately after purchase.\"\n#    pay_now: \"Pay Now\"\n#    we_accept_all_major_credit_cards: \"We accept all major credit cards.\"\n#    cs2_description: \"builds on the foundation from Introduction to Computer Science, diving into if-statements, functions, events and more.\"\n#    wd1_description: \"introduces the basics of HTML and CSS while teaching skills needed for students to build their first webpage.\"\n#    gd1_description: \"uses syntax students are already familiar with to show them how to build and share their own playable game levels.\"\n#    see_an_example_project: \"see an example project\"\n#    get_started_today: \"Get started today!\"\n#    want_all_the_courses: \"Want all the courses? Request information on our Full Licenses.\"\n#    compare_license_types: \"Compare License Types:\"\n#    cs: \"Computer Science\"\n#    wd: \"Web Development\"\n#    wd1: \"Web Development 1\"\n#    gd: \"Game Development\"\n#    gd1: \"Game Development 1\"\n#    maximum_students: \"Maximum # of Students\"\n#    unlimited: \"Unlimited\"\n#    priority_support: \"Priority support\"\n#    yes: \"Yes\"\n#    price_per_student: \"__price__ per student\"\n#    pricing: \"Pricing\"\n#    free: \"Free\"\n#    purchase: \"Purchase\"\n#    courses_prefix: \"Courses\"\n#    courses_suffix: \"\"\n#    course_prefix: \"Course\"\n#    course_suffix: \"\"\n\n#  teachers_quote:\n#    subtitle: \"Get your students started in less than an hour. You'll be able to <strong>create a class, add students, and monitor their progress</strong> as they learn computer science.\"\n#    email_exists: \"User exists with this email.\"\n#    phone_number: \"Phone number\"\n#    phone_number_help: \"What's the best number to reach you?\"\n#    primary_role_label: \"Your Primary Role\"\n#    role_default: \"Select Role\"\n#    primary_role_default: \"Select Primary Role\"\n#    purchaser_role_default: \"Select Purchaser Role\"\n#    tech_coordinator: \"Technology coordinator\"\n#    advisor: \"Curriculum Specialist/Advisor\"\n#    principal: \"Principal\"\n#    superintendent: \"Superintendent\"\n#    parent: \"Parent\"\n#    purchaser_role_label: \"Your Purchaser Role\"\n#    influence_advocate: \"Influence/Advocate\"\n#    evaluate_recommend: \"Evaluate/Recommend\"\n#    approve_funds: \"Approve Funds\"\n#    no_purchaser_role: \"No role in purchase decisions\"\n#    district_label: \"District\"\n#    district_name: \"District Name\"\n#    district_na: \"Enter N/A if not applicable\"\n#    organization_label: \"School\"\n#    school_name: \"School Name\"\n#    city: \"City\"\n#    state: \"State\"\n#    country: \"Country\"\n#    num_students_help: \"How many students will use CodeCombat?\"\n#    num_students_default: \"Select Range\"\n#    education_level_label: \"Education Level of Students\"\n#    education_level_help: \"Choose as many as apply.\"\n#    elementary_school: \"Elementary School\"\n#    high_school: \"High School\"\n#    please_explain: \"(please explain)\"\n#    middle_school: \"Middle School\"\n#    college_plus: \"College or higher\"\n#    referrer: \"How did you hear about us?\"\n#    referrer_help: \"For example: from another teacher, a conference, your students, Code.org, etc.\"\n#    referrer_default: \"Select One\"\n#    referrer_conference: \"Conference (e.g. ISTE)\"\n#    referrer_hoc: \"Code.org/Hour of Code\"\n#    referrer_teacher: \"A teacher\"\n#    referrer_admin: \"An administrator\"\n#    referrer_student: \"A student\"\n#    referrer_pd: \"Professional trainings/workshops\"\n#    referrer_web: \"Google\"\n#    referrer_other: \"Other\"\n#    anything_else: \"What kind of class do you anticipate using CodeCombat for?\"\n#    thanks_header: \"Request Received!\"\n#    thanks_sub_header: \"Thanks for expressing interest in CodeCombat for your school.\"\n#    thanks_p: \"We'll be in touch soon! If you need to get in contact, you can reach us at:\"\n#    back_to_classes: \"Back to Classes\"\n#    finish_signup: \"Finish creating your teacher account:\"\n#    finish_signup_p: \"Create an account to set up a class, add your students, and monitor their progress as they learn computer science.\"\n#    signup_with: \"Sign up with:\"\n#    connect_with: \"Connect with:\"\n#    conversion_warning: \"WARNING: Your current account is a <em>Student Account</em>. Once you submit this form, your account will be updated to a Teacher Account.\"\n#    learn_more_modal: \"Teacher accounts on CodeCombat have the ability to monitor student progress, assign licenses and manage classrooms. Teacher accounts cannot be a part of a classroom - if you are currently enrolled in a class using this account, you will no longer be able to access it once you update to a Teacher Account.\"\n#    create_account: \"Create a Teacher Account\"\n#    create_account_subtitle: \"Get access to teacher-only tools for using CodeCombat in the classroom.  <strong>Set up a class</strong>, add your students, and <strong>monitor their progress</strong>!\"\n#    convert_account_title: \"Update to Teacher Account\"\n#    not: \"Not\"\n\n#  versions:\n#    save_version_title: \"Save New Version\"\n#    new_major_version: \"New Major Version\"\n#    submitting_patch: \"Submitting Patch...\"\n#    cla_prefix: \"To save changes, first you must agree to our\"\n#    cla_url: \"CLA\"\n#    cla_suffix: \".\"\n#    cla_agree: \"I AGREE\"\n#    owner_approve: \"An owner will need to approve it before your changes will become visible.\"\n\n#  contact:\n#    contact_us: \"Contact CodeCombat\"\n#    welcome: \"Good to hear from you! Use this form to send us email. \"\n#    forum_prefix: \"For anything public, please try \"\n#    forum_page: \"our forum\"\n#    forum_suffix: \" instead.\"\n#    faq_prefix: \"There's also a\"\n#    faq: \"FAQ\"\n#    subscribe_prefix: \"If you need help figuring out a level, please\"\n#    subscribe: \"buy a CodeCombat subscription\"\n#    subscribe_suffix: \"and we'll be happy to help you with your code.\"\n#    subscriber_support: \"Since you're a CodeCombat subscriber, your email will get our priority support.\"\n#    screenshot_included: \"Screenshot included.\"\n#    where_reply: \"Where should we reply?\"\n#    send: \"Send Feedback\"\n\n#  account_settings:\n#    title: \"Account Settings\"\n#    not_logged_in: \"Log in or create an account to change your settings.\"\n#    me_tab: \"Me\"\n#    picture_tab: \"Picture\"\n#    delete_account_tab: \"Delete Your Account\"\n#    wrong_email: \"Wrong Email or Username\"\n#    wrong_password: \"Wrong Password\"\n#    delete_this_account: \"Delete this account permanently\"\n#    reset_progress_tab: \"Reset All Progress\"\n#    reset_your_progress: \"Clear all your progress and start over\"\n#    god_mode: \"God Mode\"\n#    emails_tab: \"Emails\"\n#    admin: \"Admin\"\n#    manage_subscription: \"Click here to manage your subscription.\"\n#    new_password: \"New Password\"\n#    new_password_verify: \"Verify\"\n#    type_in_email: \"Type in your email or username to confirm account deletion.\"\n#    type_in_email_progress: \"Type in your email to confirm deleting your progress.\"\n#    type_in_password: \"Also, type in your password.\"\n#    email_subscriptions: \"Email Subscriptions\"\n#    email_subscriptions_none: \"No Email Subscriptions.\"\n#    email_announcements: \"Announcements\"\n#    email_announcements_description: \"Get emails on the latest news and developments at CodeCombat.\"\n#    email_notifications: \"Notifications\"\n#    email_notifications_summary: \"Controls for personalized, automatic email notifications related to your CodeCombat activity.\"\n#    email_any_notes: \"Any Notifications\"\n#    email_any_notes_description: \"Disable to stop all activity notification emails.\"\n#    email_news: \"News\"\n#    email_recruit_notes: \"Job Opportunities\"\n#    email_recruit_notes_description: \"If you play really well, we may contact you about getting you a (better) job.\"\n#    contributor_emails: \"Contributor Class Emails\"\n#    contribute_prefix: \"We're looking for people to join our party! Check out the \"\n#    contribute_page: \"contribute page\"\n#    contribute_suffix: \" to find out more.\"\n#    email_toggle: \"Toggle All\"\n#    error_saving: \"Error Saving\"\n#    saved: \"Changes Saved\"\n#    password_mismatch: \"Password does not match.\"\n#    password_repeat: \"Please repeat your password.\"\n\n#  keyboard_shortcuts:\n#    keyboard_shortcuts: \"Keyboard Shortcuts\"\n#    space: \"Space\"\n#    enter: \"Enter\"\n#    press_enter: \"press enter\"\n#    escape: \"Escape\"\n#    shift: \"Shift\"\n#    run_code: \"Run current code.\"\n#    run_real_time: \"Run in real time.\"\n#    continue_script: \"Continue past current script.\"\n#    skip_scripts: \"Skip past all skippable scripts.\"\n#    toggle_playback: \"Toggle play/pause.\"\n#    scrub_playback: \"Scrub back and forward through time.\"\n#    single_scrub_playback: \"Scrub back and forward through time by a single frame.\"\n#    scrub_execution: \"Scrub through current spell execution.\"\n#    toggle_debug: \"Toggle debug display.\"\n#    toggle_grid: \"Toggle grid overlay.\"\n#    toggle_pathfinding: \"Toggle pathfinding overlay.\"\n#    beautify: \"Beautify your code by standardizing its formatting.\"\n#    maximize_editor: \"Maximize/minimize code editor.\"\n\n#  community:\n#    main_title: \"CodeCombat Community\"\n#    introduction: \"Check out the ways you can get involved below and decide what sounds the most fun. We look forward to working with you!\"\n#    level_editor_prefix: \"Use the CodeCombat\"\n#    level_editor_suffix: \"to create and edit levels. Users have created levels for their classes, friends, hackathons, students, and siblings. If create a new level sounds intimidating you can start by forking one of ours!\"\n#    thang_editor_prefix: \"We call units within the game 'thangs'. Use the\"\n#    thang_editor_suffix: \"to modify the CodeCombat source artwork. Allow units to throw projectiles, alter the direction of an animation, change a unit's hit points, or upload your own vector sprites.\"\n#    article_editor_prefix: \"See a mistake in some of our docs? Want to make some instructions for your own creations? Check out the\"\n#    article_editor_suffix: \"and help CodeCombat players get the most out of their playtime.\"\n#    find_us: \"Find us on these sites\"\n#    social_github: \"Check out all our code on GitHub\"\n#    social_blog: \"Read the CodeCombat blog on Sett\"\n#    social_discource: \"Join the discussion on our Discourse forum\"\n#    social_facebook: \"Like CodeCombat on Facebook\"\n#    social_twitter: \"Follow CodeCombat on Twitter\"\n#    social_gplus: \"Join CodeCombat on Google+\"\n#    social_slack: \"Chat with us in the public CodeCombat Slack channel\"\n#    contribute_to_the_project: \"Contribute to the project\"\n\n#  clans:\n#    title: \"Join CodeCombat Clans - Learn to Code in Python, JavaScript, and HTML\"\n#    clan_title: \"__clan__ - Join CodeCombat Clans and Learn to Code\"\n#    meta_description: \"Join a Clan or build your own community of coders. Play multiplayer arena levels and level up your hero and your coding skills.\"\n#    clan: \"Clan\"\n#    clans: \"Clans\"\n#    new_name: \"New clan name\"\n#    new_description: \"New clan description\"\n#    make_private: \"Make clan private\"\n#    subs_only: \"subscribers only\"\n#    create_clan: \"Create New Clan\"\n#    private_preview: \"Preview\"\n#    private_clans: \"Private Clans\"\n#    public_clans: \"Public Clans\"\n#    my_clans: \"My Clans\"\n#    clan_name: \"Clan Name\"\n#    name: \"Name\"\n#    chieftain: \"Chieftain\"\n#    edit_clan_name: \"Edit Clan Name\"\n#    edit_clan_description: \"Edit Clan Description\"\n#    edit_name: \"edit name\"\n#    edit_description: \"edit description\"\n#    private: \"(private)\"\n#    summary: \"Summary\"\n#    average_level: \"Average Level\"\n#    average_achievements: \"Average Achievements\"\n#    delete_clan: \"Delete Clan\"\n#    leave_clan: \"Leave Clan\"\n#    join_clan: \"Join Clan\"\n#    invite_1: \"Invite:\"\n#    invite_2: \"*Invite players to this Clan by sending them this link.\"\n#    members: \"Members\"\n#    progress: \"Progress\"\n#    not_started_1: \"not started\"\n#    started_1: \"started\"\n#    complete_1: \"complete\"\n#    exp_levels: \"Expand levels\"\n#    rem_hero: \"Remove Hero\"\n#    status: \"Status\"\n#    complete_2: \"Complete\"\n#    started_2: \"Started\"\n#    not_started_2: \"Not Started\"\n#    view_solution: \"Click to view solution.\"\n#    view_attempt: \"Click to view attempt.\"\n#    latest_achievement: \"Latest Achievement\"\n#    playtime: \"Playtime\"\n#    last_played: \"Last played\"\n#    leagues_explanation: \"Play in a league against other clan members in these multiplayer arena instances.\"\n#    track_concepts1: \"Track concepts\"\n#    track_concepts2a: \"learned by each student\"\n#    track_concepts2b: \"learned by each member\"\n#    track_concepts3a: \"Track levels completed for each student\"\n#    track_concepts3b: \"Track levels completed for each member\"\n#    track_concepts4a: \"See your students'\"\n#    track_concepts4b: \"See your members'\"\n#    track_concepts5: \"solutions\"\n#    track_concepts6a: \"Sort students by name or progress\"\n#    track_concepts6b: \"Sort members by name or progress\"\n#    track_concepts7: \"Requires invitation\"\n#    track_concepts8: \"to join\"\n#    private_require_sub: \"Private clans require a subscription to create or join.\"\n\n#  courses:\n#    create_new_class: \"Create New Class\"\n#    hoc_blurb1: \"Try the\"\n#    hoc_blurb2: \"Code, Play, Share\"\n#    hoc_blurb3: \"activity! Construct four different minigames to learn the basics of game development, then make your own!\"\n#    solutions_require_licenses: \"Level solutions are available for teachers who have licenses.\"\n#    unnamed_class: \"Unnamed Class\"\n#    edit_settings1: \"Edit Class Settings\"\n#    add_students: \"Add Students\"\n#    stats: \"Statistics\"\n#    student_email_invite_blurb: \"Your students can also use class code <strong>__classCode__</strong> when creating a Student Account, no email required.\"\n#    total_students: \"Total students:\"\n#    average_time: \"Average level play time:\"\n#    total_time: \"Total play time:\"\n#    average_levels: \"Average levels completed:\"\n#    total_levels: \"Total levels completed:\"\n#    students: \"Students\"\n#    concepts: \"Concepts\"\n#    play_time: \"Play time:\"\n#    completed: \"Completed:\"\n#    enter_emails: \"Separate each email address by a line break or commas\"\n#    send_invites: \"Invite Students\"\n#    number_programming_students: \"Number of Programming Students\"\n#    number_total_students: \"Total Students in School/District\"\n#    enroll: \"Enroll\"\n#    enroll_paid: \"Enroll Students in Paid Courses\"\n#    get_enrollments: \"Get More Licenses\"\n#    change_language: \"Change Course Language\"\n#    keep_using: \"Keep Using\"\n#    switch_to: \"Switch To\"\n#    greetings: \"Greetings!\"\n#    back_classrooms: \"Back to my classrooms\"\n#    back_classroom: \"Back to classroom\"\n#    back_courses: \"Back to my courses\"\n#    edit_details: \"Edit class details\"\n#    purchase_enrollments: \"Purchase Student Licenses\"\n#    remove_student: \"remove student\"\n#    assign: \"Assign\"\n#    to_assign: \"to assign paid courses.\"\n#    student: \"Student\"\n#    teacher: \"Teacher\"\n#    arena: \"Arena\"\n#    available_levels: \"Available Levels\"\n#    started: \"started\"\n#    complete: \"complete\"\n#    practice: \"practice\"\n#    required: \"required\"\n#    welcome_to_courses: \"Adventurers, welcome to Courses!\"\n#    ready_to_play: \"Ready to play?\"\n#    start_new_game: \"Start New Game\"\n#    play_now_learn_header: \"Play now to learn\"\n#    play_now_learn_1: \"basic syntax to control your character\"\n#    play_now_learn_2: \"while loops to solve pesky puzzles\"\n#    play_now_learn_3: \"strings & variables to customize actions\"\n#    play_now_learn_4: \"how to defeat an ogre (important life skills!)\"\n#    welcome_to_page: \"My Student Dashboard\"\n#    my_classes: \"Current Classes\"\n#    class_added: \"Class successfully added!\"\n#    view_map: \"view map\"\n#    view_videos: \"view videos\"\n#    view_project_gallery: \"view my classmates' projects\"\n#    join_class: \"Join A Class\"\n#    join_class_2: \"Join class\"\n#    ask_teacher_for_code: \"Ask your teacher if you have a CodeCombat class code! If so, enter it below:\"\n#    enter_c_code: \"<Enter Class Code>\"\n#    join: \"Join\"\n#    joining: \"Joining class\"\n#    course_complete: \"Course Complete\"\n#    play_arena: \"Play Arena\"\n#    view_project: \"View Project\"\n#    start: \"Start\"\n#    last_level: \"Last level played\"\n#    not_you: \"Not you?\"\n#    continue_playing: \"Continue Playing\"\n#    option1_header: \"Invite Students by Email\"\n#    remove_student1: \"Remove Student\"\n#    are_you_sure: \"Are you sure you want to remove this student from this class?\"\n#    remove_description1: \"Student will lose access to this classroom and assigned classes. Progress and gameplay is NOT lost, and the student can be added back to the classroom at any time.\"\n#    remove_description2: \"The activated paid license will not be returned.\"\n#    license_will_revoke: \"This student's paid license will be revoked and made available to assign to another student.\"\n#    keep_student: \"Keep Student\"\n#    removing_user: \"Removing user\"\n#    subtitle: \"Review course overviews and levels\" # Flat style redesign\n#    changelog: \"View latest changes to course levels.\"\n#    select_language: \"Select language\"\n#    select_level: \"Select level\"\n#    play_level: \"Play Level\"\n#    concepts_covered: \"Concepts covered\"\n#    view_guide_online: \"Level Overviews and Solutions\"\n#    grants_lifetime_access: \"Grants access to all Courses.\"\n#    enrollment_credits_available: \"Licenses Available:\"\n#    language_select: \"Select a language\" # ClassroomSettingsModal\n#    language_cannot_change: \"Language cannot be changed once students join a class.\"\n#    avg_student_exp_label: \"Average Student Programming Experience\"\n#    avg_student_exp_desc: \"This will help us understand how to pace courses better.\"\n#    avg_student_exp_select: \"Select the best option\"\n#    avg_student_exp_none: \"No Experience - little to no experience\"\n#    avg_student_exp_beginner: \"Beginner - some exposure or block-based\"\n#    avg_student_exp_intermediate: \"Intermediate - some experience with typed code\"\n#    avg_student_exp_advanced: \"Advanced - extensive experience with typed code\"\n#    avg_student_exp_varied: \"Varied Levels of Experience\"\n#    student_age_range_label: \"Student Age Range\"\n#    student_age_range_younger: \"Younger than 6\"\n#    student_age_range_older: \"Older than 18\"\n#    student_age_range_to: \"to\"\n#    estimated_class_dates_label: \"Estimated Class Dates\"\n#    estimated_class_frequency_label: \"Estimated Class Frequency\"\n#    classes_per_week: \"classes per week\"\n#    minutes_per_class: \"minutes per class\"\n#    create_class: \"Create Class\"\n#    class_name: \"Class Name\"\n#    teacher_account_restricted: \"Your account is a teacher account and cannot access student content.\"\n#    account_restricted: \"A student account is required to access this page.\"\n#    update_account_login_title: \"Log in to update your account\"\n#    update_account_title: \"Your account needs attention!\"\n#    update_account_blurb: \"Before you can access your classes, choose how you want to use this account.\"\n#    update_account_current_type: \"Current Account Type:\"\n#    update_account_account_email: \"Account Email/Username:\"\n#    update_account_am_teacher: \"I am a teacher\"\n#    update_account_keep_access: \"Keep access to classes I've created\"\n#    update_account_teachers_can: \"Teacher accounts can:\"\n#    update_account_teachers_can1: \"Create/manage/add classes\"\n#    update_account_teachers_can2: \"Assign/enroll students in courses\"\n#    update_account_teachers_can3: \"Unlock all course levels to try out\"\n#    update_account_teachers_can4: \"Access new teacher-only features as we release them\"\n#    update_account_teachers_warning: \"Warning: You will be removed from all classes that you have previously joined and will not be able to play as a student.\"\n#    update_account_remain_teacher: \"Remain a Teacher\"\n#    update_account_update_teacher: \"Update to Teacher\"\n#    update_account_am_student: \"I am a student\"\n#    update_account_remove_access: \"Remove access to classes I have created\"\n#    update_account_students_can: \"Student accounts can:\"\n#    update_account_students_can1: \"Join classes\"\n#    update_account_students_can2: \"Play through courses as a student and track your own progress\"\n#    update_account_students_can3: \"Compete against classmates in arenas\"\n#    update_account_students_can4: \"Access new student-only features as we release them\"\n#    update_account_students_warning: \"Warning: You will not be able to manage any classes that you have previously created or create new classes.\"\n#    unsubscribe_warning: \"Warning: You will be unsubscribed from your monthly subscription.\"\n#    update_account_remain_student: \"Remain a Student\"\n#    update_account_update_student: \"Update to Student\"\n#    need_a_class_code: \"You'll need a Class Code for the class you're joining:\"\n#    update_account_not_sure: \"Not sure which one to choose? Email\"\n#    update_account_confirm_update_student: \"Are you sure you want to update your account to a Student experience?\"\n#    update_account_confirm_update_student2: \"You will not be able to manage any classes that you have previously created or create new classes. Your previously created classes will be removed from CodeCombat and cannot be restored.\"\n#    instructor: \"Instructor: \"\n#    youve_been_invited_1: \"You've been invited to join \"\n#    youve_been_invited_2: \", where you'll learn \"\n#    youve_been_invited_3: \" with your classmates in CodeCombat.\"\n#    by_joining_1: \"By joining \"\n#    by_joining_2: \"will be able to help reset your password if you forget or lose it. You can also verify your email address so that you can reset the password yourself!\"\n#    sent_verification: \"We've sent a verification email to:\"\n#    you_can_edit: \"You can edit your email address in \"\n#    account_settings: \"Account Settings\"\n#    select_your_hero: \"Select Your Hero\"\n#    select_your_hero_description: \"You can always change your hero by going to your Courses page and clicking \\\"Change Hero\\\"\"\n#    select_this_hero: \"Select this Hero\"\n#    current_hero: \"Current Hero:\"\n#    current_hero_female: \"Current Hero:\"\n#    web_dev_language_transition: \"All classes program in HTML / JavaScript for this course.  Classes that have been using Python will start with extra JavaScript intro levels to ease the transition.  Classes that are already using JavaScript will skip the intro levels.\"\n#    course_membership_required_to_play: \"You'll need to join a course to play this level.\"\n#    license_required_to_play: \"Ask your teacher to assign a license to you so you can continue to play CodeCombat!\"\n#    update_old_classroom: \"New school year, new levels!\"\n#    update_old_classroom_detail: \"To make sure you're getting the most up-to-date levels, make sure you create a new class for this semester by clicking Create a New Class on your\"\n#    teacher_dashboard: \"teacher dashboard\"\n#    update_old_classroom_detail_2: \"and giving students the new Class Code that appears.\"\n#    view_assessments: \"View Assessments\"\n#    view_challenges: \"view challenge levels\"\n#    view_ranking: \"view ranking\"\n#    ranking_position: \"Position\"\n#    ranking_players: \"Players\"\n#    ranking_completed_leves: \"Completed levels\"\n#    challenge: \"Challenge:\"\n#    challenge_level: \"Challenge Level:\"\n#    status: \"Status:\"\n#    assessments: \"Assessments\"\n#    challenges: \"Challenges\"\n#    level_name: \"Level Name:\"\n#    keep_trying: \"Keep Trying\"\n#    start_challenge: \"Start Challenge\"\n#    locked: \"Locked\"\n#    concepts_used: \"Concepts Used:\"\n#    show_change_log: \"Show changes to this course's levels\"\n#    hide_change_log: \"Hide changes to this course's levels\"\n#    concept_videos: \"Concept Videos\"\n#    concept: \"Concept:\"\n#    basic_syntax: \"Basic Syntax\"\n#    while_loops: \"While Loops\"\n#    variables: \"Variables\"\n#    basic_syntax_desc: \"Syntax is how we write code. Just as spelling and grammar are important in writing narratives and essays, syntax is important when writing code. Humans are good at figuring out what something means, even if it isn't exactly correct, but computers aren't that smart, and they need you to write very precisely.\"\n#    while_loops_desc: \"A loop is a way of repeating actions in a program. You can use them so you don't have to keep writing repetitive code, and when you don't know exactly how many times an action will need to occur to accomplish a task.\"\n#    variables_desc: \"Working with variables is like organizing things in shoeboxes. You give the shoebox a name, like \\\"School Supplies\\\", and then you put things inside. The exact contents of the box might change over time, but whatever's inside will always be called \\\"School Supplies\\\". In programming, variables are symbols used to store data that will change over the course of the program. Variables can hold a variety of data types, including numbers and strings.\"\n#    locked_videos_desc: \"Keep playing the game to unlock the __concept_name__ concept video.\"\n#    unlocked_videos_desc: \"Review the __concept_name__ concept video.\"\n#    video_shown_before: \"shown before __level__\"\n#    link_google_classroom: \"Link Google Classroom\"\n#    select_your_classroom: \"Select Your Classroom\"\n#    no_classrooms_found: \"No classrooms found\"\n#    create_classroom_manually: \"Create classroom manually\"\n#    classes: \"Classes\"\n#    certificate_btn_print: \"Print\"\n#    certificate_btn_toggle: \"Toggle\"\n\n#  project_gallery:\n#    no_projects_published: \"Be the first to publish a project in this course!\"\n#    view_project: \"View Project\"\n#    edit_project: \"Edit Project\"\n\n#  teacher:\n#    assigning_course: \"Assigning course\"\n#    back_to_top: \"Back to Top\"\n#    click_student_code: \"Click on any level that the student has started or completed below to view the code they wrote.\"\n#    code: \"__name__'s Code\"\n#    complete_solution: \"Complete Solution\"\n#    course_not_started: \"Student has not started this course yet.\"\n#    appreciation_week_blurb1: \"For <strong>Teacher Appreciation Week 2019</strong>, we are offering free 1-week licenses!<br />Email Rob Arevalo (<a href=\\\"mailto:robarev@codecombat.com?subject=Teacher Appreciation Week\\\">robarev@codecombat.com</a>) with subject line \\\"<strong>Teacher Appreciation Week</strong>\\\", and include:\"\n#    appreciation_week_blurb2: \"the quantity of 1-week licenses you'd like (1 per student)\"\n#    appreciation_week_blurb3: \"the email address of your CodeCombat teacher account\"\n#    appreciation_week_blurb4: \"whether you'd like licenses for Week 1 (May 6-10) or Week 2 (May 13-17)\"\n#    hoc_happy_ed_week: \"Happy Computer Science Education Week!\"\n#    hoc_blurb1: \"Learn about the free\"\n#    hoc_blurb2: \"Code, Play, Share\"\n#    hoc_blurb3: \"activity, download a new teacher lesson plan, and tell your students to log in to play!\"\n#    hoc_button_text: \"View Activity\"\n#    no_code_yet: \"Student has not written any code for this level yet.\"\n#    open_ended_level: \"Open-Ended Level\"\n#    partial_solution: \"Partial Solution\"\n#    removing_course: \"Removing course\"\n#    solution_arena_blurb: \"Students are encouraged to solve arena levels creatively. The solution provided below meets the requirements of the arena level.\"\n#    solution_challenge_blurb: \"Students are encouraged to solve open-ended challenge levels creatively. One possible solution is displayed below.\"\n#    solution_project_blurb: \"Students are encouraged to build a creative project in this level. Please refer to curriculum guides in the Resource Hub for information on how to evaluate these projects.\"\n#    students_code_blurb: \"A correct solution to each level is provided where appropriate. In some cases, it’s possible for a student to solve a level using different code. Solutions are not shown for levels the student has not started.\"\n#    course_solution: \"Course Solution\"\n#    level_overview_solutions: \"Level Overview and Solutions\"\n#    no_student_assigned: \"No students have been assigned this course.\"\n#    paren_new: \"(new)\"\n#    student_code: \"__name__'s Student Code\"\n#    teacher_dashboard: \"Teacher Dashboard\" # Navbar\n#    my_classes: \"My Classes\"\n#    courses: \"Course Guides\"\n#    enrollments: \"Student Licenses\"\n#    resources: \"Resources\"\n#    help: \"Help\"\n#    language: \"Language\"\n#    edit_class_settings: \"edit class settings\"\n#    access_restricted: \"Account Update Required\"\n#    teacher_account_required: \"A teacher account is required to access this content.\"\n#    create_teacher_account: \"Create Teacher Account\"\n#    what_is_a_teacher_account: \"What's a Teacher Account?\"\n#    teacher_account_explanation: \"A CodeCombat Teacher account allows you to set up classrooms, monitor students’ progress as they work through courses, manage licenses and access resources to aid in your curriculum-building.\"\n#    current_classes: \"Current Classes\"\n#    archived_classes: \"Archived Classes\"\n#    archived_classes_blurb: \"Classes can be archived for future reference. Unarchive a class to view it in the Current Classes list again.\"\n#    view_class: \"view class\"\n#    archive_class: \"archive class\"\n#    unarchive_class: \"unarchive class\"\n#    unarchive_this_class: \"Unarchive this class\"\n#    no_students_yet: \"This class has no students yet.\"\n#    no_students_yet_view_class: \"View class to add students.\"\n#    try_refreshing: \"(You may need to refresh the page)\"\n#    create_new_class: \"Create a New Class\"\n#    class_overview: \"Class Overview\" # View Class page\n#    avg_playtime: \"Average level playtime\"\n#    total_playtime: \"Total play time\"\n#    avg_completed: \"Average levels completed\"\n#    total_completed: \"Total levels completed\"\n#    created: \"Created\"\n#    concepts_covered: \"Concepts covered\"\n#    earliest_incomplete: \"Earliest incomplete level\"\n#    latest_complete: \"Latest completed level\"\n#    enroll_student: \"Enroll student\"\n#    apply_license: \"Apply License\"\n#    revoke_license: \"Revoke License\"\n#    revoke_licenses: \"Revoke All Licenses\"\n#    course_progress: \"Course Progress\"\n#    not_applicable: \"N/A\"\n#    edit: \"edit\"\n#    edit_2: \"Edit\"\n#    remove: \"remove\"\n#    latest_completed: \"Latest completed:\"\n#    sort_by: \"Sort by\"\n#    progress: \"Progress\"\n#    concepts_used: \"Concepts used by Student:\"\n#    concept_checked: \"Concept checked:\"\n#    completed: \"Completed\"\n#    practice: \"Practice\"\n#    started: \"Started\"\n#    no_progress: \"No progress\"\n#    not_required: \"Not required\"\n#    view_student_code: \"Click to view student code\"\n#    select_course: \"Select course to view\"\n#    progress_color_key: \"Progress color key:\"\n#    level_in_progress: \"Level in Progress\"\n#    level_not_started: \"Level Not Started\"\n#    project_or_arena: \"Project or Arena\"\n#    students_not_assigned: \"Students who have not been assigned {{courseName}}\"\n#    course_overview: \"Course Overview\"\n#    copy_class_code: \"Copy Class Code\"\n#    class_code_blurb: \"Students can join your class using this Class Code. No email address is required when creating a Student account with this Class Code.\"\n#    copy_class_url: \"Copy Class URL\"\n#    class_join_url_blurb: \"You can also post this unique class URL to a shared webpage.\"\n#    add_students_manually: \"Invite Students by Email\"\n#    bulk_assign: \"Select course\"\n#    assigned_msg_1: \"{{numberAssigned}} students were assigned {{courseName}}.\"\n#    assigned_msg_2: \"{{numberEnrolled}} licenses were applied.\"\n#    assigned_msg_3: \"You now have {{remainingSpots}} available licenses remaining.\"\n#    assign_course: \"Assign Course\"\n#    removed_course_msg: \"{{numberRemoved}} students were removed from {{courseName}}.\"\n#    remove_course: \"Remove Course\"\n#    not_assigned_modal_title: \"Courses were not assigned\"\n#    not_assigned_modal_starter_body_1: \"This course requires a Starter License. You do not have enough Starter Licenses available to assign this course to all __selected__ selected students.\"\n#    not_assigned_modal_starter_body_2: \"Purchase Starter Licenses to grant access to this course.\"\n#    not_assigned_modal_full_body_1: \"This course requires a Full License. You do not have enough Full Licenses available to assign this course to all __selected__ selected students.\"\n#    not_assigned_modal_full_body_2: \"You only have __numFullLicensesAvailable__ Full Licenses available (__numStudentsWithoutFullLicenses__ students do not currently have a Full License active).\"\n#    not_assigned_modal_full_body_3: \"Please select fewer students, or reach out to __supportEmail__ for assistance.\"\n#    assigned: \"Assigned\"\n#    enroll_selected_students: \"Enroll Selected Students\"\n#    no_students_selected: \"No students were selected.\"\n#    show_students_from: \"Show students from\" # Enroll students modal\n#    apply_licenses_to_the_following_students: \"Apply Licenses to the Following Students\"\n#    students_have_licenses: \"The following students already have licenses applied:\"\n#    all_students: \"All Students\"\n#    apply_licenses: \"Apply Licenses\"\n#    not_enough_enrollments: \"Not enough licenses available.\"\n#    enrollments_blurb: \"Students are required to have a license to access any content after the first course.\"\n#    how_to_apply_licenses: \"How to Apply Licenses\"\n#    export_student_progress: \"Export Student Progress (CSV)\"\n#    send_email_to: \"Send Recover Password Email to:\"\n#    email_sent: \"Email sent\"\n#    send_recovery_email: \"Send recovery email\"\n#    enter_new_password_below: \"Enter new password below:\"\n#    change_password: \"Change Password\"\n#    changed: \"Changed\"\n#    available_credits: \"Available Licenses\"\n#    pending_credits: \"Pending Licenses\"\n#    empty_credits: \"Exhausted Licenses\"\n#    license_remaining: \"license remaining\"\n#    licenses_remaining: \"licenses remaining\"\n#    one_license_used: \"1 out of __totalLicenses__ licenses has been used\"\n#    num_licenses_used: \"__numLicensesUsed__ out of __totalLicenses__ licenses have been used\"\n#    starter_licenses: \"starter licenses\"\n#    start_date: \"start date:\"\n#    end_date: \"end date:\"\n#    get_enrollments_blurb: \" We'll help you build a solution that meets the needs of your class, school or district.\"\n#    how_to_apply_licenses_blurb_1: \"When a teacher assigns a course to a student for the first time, we’ll automatically apply a license. Use the bulk-assign dropdown in your classroom to assign a course to selected students:\"\n#    how_to_apply_licenses_blurb_2: \"Can I still apply a license without assigning a course?\"\n#    how_to_apply_licenses_blurb_3: \"Yes — go to the License Status tab in your classroom and click \\\"Apply License\\\" to any student who does not have an active license.\"\n#    request_sent: \"Request Sent!\"\n#    assessments: \"Assessments\"\n#    license_status: \"License Status\"\n#    status_expired: \"Expired on {{date}}\"\n#    status_not_enrolled: \"Not Enrolled\"\n#    status_enrolled: \"Expires on {{date}}\"\n#    select_all: \"Select All\"\n#    project: \"Project\"\n#    project_gallery: \"Project Gallery\"\n#    view_project: \"View Project\"\n#    unpublished: \"(unpublished)\"\n#    view_arena_ladder: \"View Arena Ladder\"\n#    resource_hub: \"Resource Hub\"\n#    pacing_guides: \"Classroom-in-a-Box Pacing Guides\"\n#    pacing_guides_desc: \"Learn how to incorporate all of CodeCombat's resources to plan your school year!\"\n#    pacing_guides_elem: \"Elementary School Pacing Guide\"\n#    pacing_guides_middle: \"Middle School Pacing Guide\"\n#    pacing_guides_high: \"High School Pacing Guide\"\n#    getting_started: \"Getting Started\"\n#    educator_faq: \"Educator FAQ\"\n#    educator_faq_desc: \"Frequently asked questions about using CodeCombat in your classroom or school.\"\n#    teacher_getting_started: \"Teacher Getting Started Guide\"\n#    teacher_getting_started_desc: \"New to CodeCombat? Download this Teacher Getting Started Guide to set up your account, create your first class, and invite students to the first course.\"\n#    student_getting_started: \"Student Quick Start Guide\"\n#    student_getting_started_desc: \"You can distribute this guide to your students before starting CodeCombat so that they can familiarize themselves with the code editor. This guide can be used for both Python and JavaScript classrooms.\"\n#    ap_cs_principles: \"AP Computer Science Principles\"\n#    ap_cs_principles_desc: \"AP Computer Science Principles gives students a broad introduction to the power, impact, and possibilities of Computer Science. The course emphasizes computational thinking and problem solving while also teaching the basics of programming.\"\n#    cs1: \"Introduction to Computer Science\"\n#    cs2: \"Computer Science 2\"\n#    cs3: \"Computer Science 3\"\n#    cs4: \"Computer Science 4\"\n#    cs5: \"Computer Science 5\"\n#    cs1_syntax_python: \"Course 1 Python Syntax Guide\"\n#    cs1_syntax_python_desc: \"Cheatsheet with references to common Python syntax that students will learn in Introduction to Computer Science.\"\n#    cs1_syntax_javascript: \"Course 1 JavaScript Syntax Guide\"\n#    cs1_syntax_javascript_desc: \"Cheatsheet with references to common JavaScript syntax that students will learn in Introduction to Computer Science.\"\n#    coming_soon: \"Additional guides coming soon!\"\n#    engineering_cycle_worksheet: \"Engineering Cycle Worksheet\"\n#    engineering_cycle_worksheet_desc: \"Use this worksheet to teach students the basics of the engineering cycle: Assess, Design, Implement and Debug. Refer to the completed example worksheet as a guide.\"\n#    engineering_cycle_worksheet_link: \"View example\"\n#    progress_journal: \"Progress Journal\"\n#    progress_journal_desc: \"Encourage students to keep track of their progress via a progress journal.\"\n#    cs1_curriculum: \"Introduction to Computer Science - Curriculum Guide\"\n#    cs1_curriculum_desc: \"Scope and sequence, lesson plans, activities and more for Course 1.\"\n#    arenas_curriculum: \"Arena Levels - Teacher Guide\"\n#    arenas_curriculum_desc: \"Instructions on how to run Wakka Maul, Cross Bones and Power Peak multiplayer arenas with your class.\"\n#    assessments_curriculum: \"Assessment Levels - Teacher Guide\"\n#    assessments_curriculum_desc: \"Learn how to use Challenge Levels and Combo Challenge levels to assess students' learning outcomes.\"\n#    cs2_curriculum: \"Computer Science 2 - Curriculum Guide\"\n#    cs2_curriculum_desc: \"Scope and sequence, lesson plans, activities and more for Course 2.\"\n#    cs3_curriculum: \"Computer Science 3 - Curriculum Guide\"\n#    cs3_curriculum_desc: \"Scope and sequence, lesson plans, activities and more for Course 3.\"\n#    cs4_curriculum: \"Computer Science 4 - Curriculum Guide\"\n#    cs4_curriculum_desc: \"Scope and sequence, lesson plans, activities and more for Course 4.\"\n#    cs5_curriculum_js: \"Computer Science 5 - Curriculum Guide (JavaScript)\"\n#    cs5_curriculum_desc_js: \"Scope and sequence, lesson plans, activities and more for Course 5 classes using JavaScript.\"\n#    cs5_curriculum_py: \"Computer Science 5 - Curriculum Guide (Python)\"\n#    cs5_curriculum_desc_py: \"Scope and sequence, lesson plans, activities and more for Course 5 classes using Python.\"\n#    cs1_pairprogramming: \"Pair Programming Activity\"\n#    cs1_pairprogramming_desc: \"Introduce students to a pair programming exercise that will help them become better listeners and communicators.\"\n#    gd1: \"Game Development 1\"\n#    gd1_guide: \"Game Development 1 - Project Guide\"\n#    gd1_guide_desc: \"Use this to guide your students as they create their first shareable game project in 5 days.\"\n#    gd1_rubric: \"Game Development 1 - Project Rubric\"\n#    gd1_rubric_desc: \"Use this rubric to assess student projects at the end of Game Development 1.\"\n#    gd2: \"Game Development 2\"\n#    gd2_curriculum: \"Game Development 2 - Curriculum Guide\"\n#    gd2_curriculum_desc: \"Lesson plans for Game Development 2.\"\n#    gd3: \"Game Development 3\"\n#    gd3_curriculum: \"Game Development 3 - Curriculum Guide\"\n#    gd3_curriculum_desc: \"Lesson plans for Game Development 3.\"\n#    wd1: \"Web Development 1\"\n#    wd1_curriculum: \"Web Development 1 - Curriculum Guide\"\n#    wd1_curriculum_desc: \"Scope and sequence, lesson plans, activities, and more for Web Development 1.\"\n#    wd1_headlines: \"Headlines & Headers Activity\"\n#    wd1_headlines_example: \"View sample solution\"\n#    wd1_headlines_desc: \"Why are paragraph and header tags important? Use this activity to show how well-chosen headers make web pages easier to read. There are many correct solutions to this!\"\n#    wd1_html_syntax: \"HTML Syntax Guide\"\n#    wd1_html_syntax_desc: \"One-page reference for the HTML style students will learn in Web Development 1.\"\n#    wd1_css_syntax: \"CSS Syntax Guide\"\n#    wd1_css_syntax_desc: \"One-page reference for the CSS and Style syntax students will learn in Web Development 1.\"\n#    wd2: \"Web Development 2\"\n#    wd2_jquery_syntax: \"jQuery Functions Syntax Guide\"\n#    wd2_jquery_syntax_desc: \"One-page reference for the jQuery functions students will learn in Web Development 2.\"\n#    wd2_quizlet_worksheet: \"Quizlet Planning Worksheet\"\n#    wd2_quizlet_worksheet_instructions: \"View instructions & examples\"\n#    wd2_quizlet_worksheet_desc: \"Before your students build their personality quiz project at the end of Web Development 2, they should plan out their quiz questions, outcomes and responses using this worksheet. Teachers can distribute the instructions and examples for students to refer to.\"\n#    student_overview: \"Overview\"\n#    student_details: \"Student Details\"\n#    student_name: \"Student Name\"\n#    no_name: \"No name provided.\"\n#    no_username: \"No username provided.\"\n#    no_email: \"Student has no email address set.\"\n#    student_profile: \"Student Profile\"\n#    playtime_detail: \"Playtime Detail\"\n#    student_completed: \"Student Completed\"\n#    student_in_progress: \"Student in Progress\"\n#    class_average: \"Class Average\"\n#    not_assigned: \"has not been assigned the following courses\"\n#    playtime_axis: \"Playtime in Seconds\"\n#    levels_axis: \"Levels in\"\n#    student_state: \"How is\"\n#    student_state_2: \"doing?\"\n#    student_good: \"is doing well in\"\n#    student_good_detail: \"This student is keeping pace with the class.\"\n#    student_warn: \"might need some help in\"\n#    student_warn_detail: \"This student might need some help with new concepts that have been introduced in this course.\"\n#    student_great: \"is doing great in\"\n#    student_great_detail: \"This student might be a good candidate to help other students working through this course.\"\n#    full_license: \"Full License\"\n#    starter_license: \"Starter License\"\n#    trial: \"Trial\"\n#    hoc_welcome: \"Happy Computer Science Education Week\"\n#    hoc_title: \"Hour of Code Games - Free Activities to Learn Real Coding Languages\"\n#    hoc_meta_description: \"Make your own game or code your way out of a dungeon! CodeCombat has four different Hour of Code activities and over 60 levels to learn code, play, and create.\"\n#    hoc_intro: \"There are three ways for your class to participate in Hour of Code with CodeCombat\"\n#    hoc_self_led: \"Self-Led Gameplay\"\n#    hoc_self_led_desc: \"Students can play through two Hour of Code CodeCombat tutorials on their own\"\n#    hoc_game_dev: \"Game Development\"\n#    hoc_and: \"and\"\n#    hoc_programming: \"JavaScript/Python Programming\"\n#    hoc_teacher_led: \"Teacher-Led Lessons\"\n#    hoc_teacher_led_desc1: \"Download our\"\n#    hoc_teacher_led_link: \"Introduction to Computer Science lesson plans\"\n#    hoc_teacher_led_desc2: \"to introduce your students to programming concepts using offline activities\"\n#    hoc_group: \"Group Gameplay\"\n#    hoc_group_desc_1: \"Teachers can use the lessons in conjunction with our Introduction to Computer Science course to track student progress. See our\"\n#    hoc_group_link: \"Getting Started Guide\"\n#    hoc_group_desc_2: \"for more details\"\n#    hoc_additional_desc1: \"For additional CodeCombat resources and activities, see our\"\n#    hoc_additional_desc2: \"Questions\"\n#    hoc_additional_contact: \"Get in touch\"\n#    revoke_confirm: \"Are you sure you want to revoke a Full License from {{student_name}}? The license will become available to assign to another student.\"\n#    revoke_all_confirm: \"Are you sure you want to revoke Full Licenses from all students in this class?\"\n#    revoking: \"Revoking...\"\n#    unused_licenses: \"You have unused Licenses that allow you to assign students paid courses when they're ready to learn more!\"\n#    remember_new_courses: \"Remember to assign new courses!\"\n#    more_info: \"More Info\"\n#    how_to_assign_courses: \"How to Assign Courses\"\n#    select_students: \"Select Students\"\n#    select_instructions: \"Click the checkbox next to each student you want to assign courses to.\"\n#    choose_course: \"Choose Course\"\n#    choose_instructions: \"Select the course from the dropdown menu you’d like to assign, then click “Assign to Selected Students.”\"\n#    push_projects: \"We recommend assigning Web Development 1 or Game Development 1 after students have finished Introduction to Computer Science! See our {{resource_hub}} for more details on those courses.\"\n#    teacher_quest: \"Teacher's Quest for Success\"\n#    quests_complete: \"Quests Complete\"\n#    teacher_quest_create_classroom: \"Create Classroom\"\n#    teacher_quest_add_students: \"Add Students\"\n#    teacher_quest_teach_methods: \"Help your students learn how to `call methods`.\"\n#    teacher_quest_teach_methods_step1: \"Get 75% of at least one class through the first level, __Dungeons of Kithgard__\"\n#    teacher_quest_teach_methods_step2: \"Print out the [Student Quick Start Guide](http://files.codecombat.com/docs/resources/StudentQuickStartGuide.pdf) in the Resource Hub.\"\n#    teacher_quest_teach_strings: \"Don't string your students along, teach them `strings`.\"\n#    teacher_quest_teach_strings_step1: \"Get 75% of at least one class through __True Names__\"\n#    teacher_quest_teach_strings_step2: \"Use the Teacher Level Selector on [Course Guides](/teachers/courses) page to preview __True Names__.\"\n#    teacher_quest_teach_loops: \"Keep your students in the loop about `loops`.\"\n#    teacher_quest_teach_loops_step1: \"Get 75% of at least one class through __Fire Dancing__.\"\n#    teacher_quest_teach_loops_step2: \"Use the __Loops Activity__ in the [CS1 Curriculum guide](/teachers/resources/cs1) to reinforce this concept.\"\n#    teacher_quest_teach_variables: \"Vary it up with `variables`.\"\n#    teacher_quest_teach_variables_step1: \"Get 75% of at least one class through __Known Enemy__.\"\n#    teacher_quest_teach_variables_step2: \"Encourage collaboration by using the [Pair Programming Activity](/teachers/resources/pair-programming).\"\n#    teacher_quest_kithgard_gates_100: \"Escape the Kithgard Gates with your class.\"\n#    teacher_quest_kithgard_gates_100_step1: \"Get 75% of at least one class through __Kithgard Gates__.\"\n#    teacher_quest_kithgard_gates_100_step2: \"Guide students to think through hard problems using the [Engineering Cycle Worksheet](http://files.codecombat.com/docs/resources/EngineeringCycleWorksheet.pdf).\"\n#    teacher_quest_wakka_maul_100: \"Prepare to duel in Wakka Maul.\"\n#    teacher_quest_wakka_maul_100_step1: \"Get 75% of at least one class to __Wakka Maul__.\"\n#    teacher_quest_wakka_maul_100_step2: \"See the [Arena Guide](/teachers/resources/arenas) in the [Resource Hub](/teachers/resources) for tips on how to run a successful arena day.\"\n#    teacher_quest_reach_gamedev: \"Explore new worlds!\"\n#    teacher_quest_reach_gamedev_step1: \"[Get licenses](/teachers/licenses) so that your students can explore new worlds, like Game Development and Web Development!\"\n#    teacher_quest_done: \"Want your students to learn even more code? Get in touch with our [school specialists](mailto:schools@codecombat.com) today!\"\n#    teacher_quest_keep_going: \"Keep going! Here's what you can do next:\"\n#    teacher_quest_more: \"See all quests\"\n#    teacher_quest_less: \"See fewer quests\"\n#    refresh_to_update: \"(refresh the page to see updates)\"\n#    view_project_gallery: \"View Project Gallery\"\n#    office_hours: \"Teacher Webinars\"\n#    office_hours_detail: \"Learn how to keep up with with your students as they create games and embark on their coding journey! Come and attend our\"\n#    office_hours_link: \"teacher webinar\"\n#    office_hours_detail_2: \"sessions.\"\n#    success: \"Success\"\n#    in_progress: \"In Progress\"\n#    not_started: \"Not Started\"\n#    mid_course: \"Mid-Course\"\n#    end_course: \"End of Course\"\n#    none: \"None detected yet\"\n#    explain_open_ended: \"Note: Students are encouraged to solve this level creatively — one possible solution is provided below.\"\n#    level_label: \"Level:\"\n#    time_played_label: \"Time Played:\"\n#    back_to_resource_hub: \"Back to Resource Hub\"\n#    back_to_course_guides: \"Back to Course Guides\"\n#    print_guide: \"Print this guide\"\n#    combo: \"Combo\"\n#    combo_explanation: \"Students pass Combo challenge levels by using at least one listed concept. Review student code by clicking the progress dot.\"\n#    concept: \"Concept\"\n#    sync_google_classroom: \"Sync Google Classroom\"\n\n#  share_licenses:\n#    share_licenses: \"Share Licenses\"\n#    shared_by: \"Shared By:\"\n#    add_teacher_label: \"Enter exact teacher email:\"\n#    add_teacher_button: \"Add Teacher\"\n#    subheader: \"You can make your licenses available to other teachers in your organization. Each license can only be used for one student at a time.\"\n#    teacher_not_found: \"Teacher not found. Please make sure this teacher has already created a Teacher Account.\"\n#    teacher_not_valid: \"This is not a valid Teacher Account. Only teacher accounts can share licenses.\"\n#    already_shared: \"You've already shared these licenses with that teacher.\"\n#    teachers_using_these: \"Teachers who can access these licenses:\"\n#    footer: \"When teachers revoke licenses from students, the licenses will be returned to the shared pool for other teachers in this group to use.\"\n#    you: \"(you)\"\n#    one_license_used: \"(1 license used)\"\n#    licenses_used: \"(__licensesUsed__ licenses used)\"\n#    more_info: \"More info\"\n\n#  sharing:\n#    game: \"Game\"\n#    webpage: \"Webpage\"\n#    your_students_preview: \"Your students will click here to see their finished projects! Unavailable in teacher preview.\"\n#    unavailable: \"Link sharing not available in teacher preview.\"\n#    share_game: \"Share This Game\"\n#    share_web: \"Share This Webpage\"\n#    victory_share_prefix: \"Share this link to invite your friends & family to\"\n#    victory_share_prefix_short: \"Invite people to\"\n#    victory_share_game: \"play your game level\"\n#    victory_share_web: \"view your webpage\"\n#    victory_share_suffix: \".\"\n#    victory_course_share_prefix: \"This link will let your friends & family\"\n#    victory_course_share_game: \"play the game\"\n#    victory_course_share_web: \"view the webpage\"\n#    victory_course_share_suffix: \"you just created.\"\n#    copy_url: \"Copy URL\"\n#    share_with_teacher_email: \"Send to your teacher\"\n\n#  game_dev:\n#    creator: \"Creator\"\n\n#  web_dev:\n#    image_gallery_title: \"Image Gallery\"\n#    select_an_image: \"Select an image you want to use\"\n#    scroll_down_for_more_images: \"(Scroll down for more images)\"\n#    copy_the_url: \"Copy the URL below\"\n#    copy_the_url_description: \"Useful if you want to replace an existing image.\"\n#    copy_the_img_tag: \"Copy the <img> tag\"\n#    copy_the_img_tag_description: \"Useful if you want to insert a new image.\"\n#    copy_url: \"Copy URL\"\n#    copy_img: \"Copy <img>\"\n#    how_to_copy_paste: \"How to Copy/Paste\"\n#    copy: \"Copy\"\n#    paste: \"Paste\"\n#    back_to_editing: \"Back to Editing\"\n\n#  classes:\n#    archmage_title: \"Archmage\"\n#    archmage_title_description: \"(Coder)\"\n#    archmage_summary: \"If you are a developer interested in coding educational games, become an archmage to help us build CodeCombat!\"\n#    artisan_title: \"Artisan\"\n#    artisan_title_description: \"(Level Builder)\"\n#    artisan_summary: \"Build and share levels for you and your friends to play. Become an Artisan to learn the art of teaching others to program.\"\n#    adventurer_title: \"Adventurer\"\n#    adventurer_title_description: \"(Level Playtester)\"\n#    adventurer_summary: \"Get our new levels (even our subscriber content) for free one week early and help us work out bugs before our public release.\"\n#    scribe_title: \"Scribe\"\n#    scribe_title_description: \"(Article Editor)\"\n#    scribe_summary: \"Good code needs good documentation. Write, edit, and improve the docs read by millions of players across the globe.\"\n#    diplomat_title: \"Diplomat\"\n#    diplomat_title_description: \"(Translator)\"\n#    diplomat_summary: \"CodeCombat is localized in 45+ languages by our Diplomats. Help us out and contribute translations.\"\n#    ambassador_title: \"Ambassador\"\n#    ambassador_title_description: \"(Support)\"\n#    ambassador_summary: \"Tame our forum users and provide direction for those with questions. Our ambassadors represent CodeCombat to the world.\"\n#    teacher_title: \"Teacher\"\n\n#  editor:\n#    main_title: \"CodeCombat Editors\"\n#    article_title: \"Article Editor\"\n#    thang_title: \"Thang Editor\"\n#    level_title: \"Level Editor\"\n#    course_title: \"Course Editor\"\n#    achievement_title: \"Achievement Editor\"\n#    poll_title: \"Poll Editor\"\n#    back: \"Back\"\n#    revert: \"Revert\"\n#    revert_models: \"Revert Models\"\n#    pick_a_terrain: \"Pick A Terrain\"\n#    dungeon: \"Dungeon\"\n#    indoor: \"Indoor\"\n#    desert: \"Desert\"\n#    grassy: \"Grassy\"\n#    mountain: \"Mountain\"\n#    glacier: \"Glacier\"\n#    small: \"Small\"\n#    large: \"Large\"\n#    fork_title: \"Fork New Version\"\n#    fork_creating: \"Creating Fork...\"\n#    generate_terrain: \"Generate Terrain\"\n#    more: \"More\"\n#    wiki: \"Wiki\"\n#    live_chat: \"Live Chat\"\n#    thang_main: \"Main\"\n#    thang_spritesheets: \"Spritesheets\"\n#    thang_colors: \"Colors\"\n#    level_some_options: \"Some Options?\"\n#    level_tab_thangs: \"Thangs\"\n#    level_tab_scripts: \"Scripts\"\n#    level_tab_components: \"Components\"\n#    level_tab_systems: \"Systems\"\n#    level_tab_docs: \"Documentation\"\n#    level_tab_thangs_title: \"Current Thangs\"\n#    level_tab_thangs_all: \"All\"\n#    level_tab_thangs_conditions: \"Starting Conditions\"\n#    level_tab_thangs_add: \"Add Thangs\"\n#    level_tab_thangs_search: \"Search thangs\"\n#    add_components: \"Add Components\"\n#    component_configs: \"Component Configurations\"\n#    config_thang: \"Double click to configure a thang\"\n#    delete: \"Delete\"\n#    duplicate: \"Duplicate\"\n#    stop_duplicate: \"Stop Duplicate\"\n#    rotate: \"Rotate\"\n#    level_component_tab_title: \"Current Components\"\n#    level_component_btn_new: \"Create New Component\"\n#    level_systems_tab_title: \"Current Systems\"\n#    level_systems_btn_new: \"Create New System\"\n#    level_systems_btn_add: \"Add System\"\n#    level_components_title: \"Back to All Thangs\"\n#    level_components_type: \"Type\"\n#    level_component_edit_title: \"Edit Component\"\n#    level_component_config_schema: \"Config Schema\"\n#    level_system_edit_title: \"Edit System\"\n#    create_system_title: \"Create New System\"\n#    new_component_title: \"Create New Component\"\n#    new_component_field_system: \"System\"\n#    new_article_title: \"Create a New Article\"\n#    new_thang_title: \"Create a New Thang Type\"\n#    new_level_title: \"Create a New Level\"\n#    new_article_title_login: \"Log In to Create a New Article\"\n#    new_thang_title_login: \"Log In to Create a New Thang Type\"\n#    new_level_title_login: \"Log In to Create a New Level\"\n#    new_achievement_title: \"Create a New Achievement\"\n#    new_achievement_title_login: \"Log In to Create a New Achievement\"\n#    new_poll_title: \"Create a New Poll\"\n#    new_poll_title_login: \"Log In to Create a New Poll\"\n#    article_search_title: \"Search Articles Here\"\n#    thang_search_title: \"Search Thang Types Here\"\n#    level_search_title: \"Search Levels Here\"\n#    achievement_search_title: \"Search Achievements\"\n#    poll_search_title: \"Search Polls\"\n#    read_only_warning2: \"Note: you can't save any edits here, because you're not logged in.\"\n#    no_achievements: \"No achievements have been added for this level yet.\"\n#    achievement_query_misc: \"Key achievement off of miscellanea\"\n#    achievement_query_goals: \"Key achievement off of level goals\"\n#    level_completion: \"Level Completion\"\n#    pop_i18n: \"Populate I18N\"\n#    tasks: \"Tasks\"\n#    clear_storage: \"Clear your local changes\"\n#    add_system_title: \"Add Systems to Level\"\n#    done_adding: \"Done Adding\"\n\n#  article:\n#    edit_btn_preview: \"Preview\"\n#    edit_article_title: \"Edit Article\"\n\n#  polls:\n#    priority: \"Priority\"\n\n#  contribute:\n#    page_title: \"Contributing\"\n#    intro_blurb: \"CodeCombat is part of the open source community! Hundreds of dedicated players have helped us build the game into what it is today. Join us and write the next chapter in CodeCombat's quest to teach the world to code!\"\n#    alert_account_message_intro: \"Hey there!\"\n#    alert_account_message: \"To subscribe for class emails, you'll need to be logged in first.\"\n#    archmage_introduction: \"One of the best parts about building games is they synthesize so many different things. Graphics, sound, real-time networking, social networking, and of course many of the more common aspects of programming, from low-level database management, and server administration to user facing design and interface building. There's a lot to do, and if you're an experienced programmer with a hankering to really dive into the nitty-gritty of CodeCombat, this class might be for you. We would love to have your help building the best programming game ever.\"\n#    class_attributes: \"Class Attributes\"\n#    archmage_attribute_1_pref: \"Knowledge in \"\n#    archmage_attribute_1_suf: \", or a desire to learn. Most of our code is in this language. If you're a fan of Ruby or Python, you'll feel right at home. It's JavaScript, but with a nicer syntax.\"\n#    archmage_attribute_2: \"Some experience in programming and personal initiative. We'll help you get oriented, but we can't spend much time training you.\"\n#    how_to_join: \"How To Join\"\n#    join_desc_1: \"Anyone can help out! Just check out our \"\n#    join_desc_2: \"to get started, and check the box below to mark yourself as a brave Archmage and get the latest news by email. Want to chat about what to do or how to get more deeply involved? \"\n#    join_desc_3: \", or find us in our \"\n#    join_desc_4: \"and we'll go from there!\"\n#    join_url_email: \"Email us\"\n#    join_url_slack: \"public Slack channel\"\n#    archmage_subscribe_desc: \"Get emails on new coding opportunities and announcements.\"\n#    artisan_introduction_pref: \"We must construct additional levels! People be clamoring for more content, and we can only build so many ourselves. Right now your workstation is level one; our level editor is barely usable even by its creators, so be wary. If you have visions of campaigns spanning for-loops to\"\n#    artisan_introduction_suf: \", then this class might be for you.\"\n#    artisan_attribute_1: \"Any experience in building content like this would be nice, such as using Blizzard's level editors. But not required!\"\n#    artisan_attribute_2: \"A hankering to do a whole lot of testing and iteration. To make good levels, you need to take it to others and watch them play it, and be prepared to find a lot of things to fix.\"\n#    artisan_attribute_3: \"For the time being, endurance en par with an Adventurer. Our Level Editor is super preliminary and frustrating to use. You have been warned!\"\n#    artisan_join_desc: \"Use the Level Editor in these steps, give or take:\"\n#    artisan_join_step1: \"Read the documentation.\"\n#    artisan_join_step2: \"Create a new level and explore existing levels.\"\n#    artisan_join_step3: \"Find us in our public Slack channel for help.\"\n#    artisan_join_step4: \"Post your levels on the forum for feedback.\"\n#    artisan_subscribe_desc: \"Get emails on level editor updates and announcements.\"\n#    adventurer_introduction: \"Let's be clear about your role: you are the tank. You're going to take heavy damage. We need people to try out brand-new levels and help identify how to make things better. The pain will be enormous; making good games is a long process and no one gets it right the first time. If you can endure and have a high constitution score, then this class might be for you.\"\n#    adventurer_attribute_1: \"A thirst for learning. You want to learn how to code and we want to teach you how to code. You'll probably be doing most of the teaching in this case, though.\"\n#    adventurer_attribute_2: \"Charismatic. Be gentle but articulate about what needs improving, and offer suggestions on how to improve.\"\n#    adventurer_join_pref: \"Either get together with (or recruit!) an Artisan and work with them, or check the box below to receive emails when there are new levels to test. We'll also be posting about levels to review on our networks like\"\n#    adventurer_forum_url: \"our forum\"\n#    adventurer_join_suf: \"so if you prefer to be notified those ways, sign up there!\"\n#    adventurer_subscribe_desc: \"Get emails when there are new levels to test.\"\n#    scribe_introduction_pref: \"CodeCombat isn't just going to be a bunch of levels. It will also include a resource for knowledge, a wiki of programming concepts that levels can hook into. That way rather than each Artisan having to describe in detail what a comparison operator is, they can simply link their level to the Article describing them that is already written for the player's edification. Something along the lines of what the \"\n#    scribe_introduction_url_mozilla: \"Mozilla Developer Network\"\n#    scribe_introduction_suf: \" has built. If your idea of fun is articulating the concepts of programming in Markdown form, then this class might be for you.\"\n#    scribe_attribute_1: \"Skill in words is pretty much all you need. Not only grammar and spelling, but able to convey complicated ideas to others.\"\n#    contact_us_url: \"Contact Us\"\n#    scribe_join_description: \"tell us a little about yourself, your experience with programming and what sort of things you'd like to write about. We'll go from there!\"\n#    scribe_subscribe_desc: \"Get emails about article writing announcements.\"\n#    diplomat_introduction_pref: \"So, if there's one thing we learned from the \"\n#    diplomat_launch_url: \"launch in October\"\n#    diplomat_introduction_suf: \"it's that there is sizeable interest in CodeCombat in other countries! We're building a corps of translators eager to turn one set of words into another set of words to get CodeCombat as accessible across the world as possible. If you like getting sneak peeks at upcoming content and getting these levels to your fellow nationals ASAP, then this class might be for you.\"\n#    diplomat_attribute_1: \"Fluency in English and the language you would like to translate to. When conveying complicated ideas, it's important to have a strong grasp in both!\"\n#    diplomat_i18n_page_prefix: \"You can start translating our levels by going to our\"\n#    diplomat_i18n_page: \"translations page\"\n#    diplomat_i18n_page_suffix: \", or our interface and website on GitHub.\"\n#    diplomat_join_pref_github: \"Find your language locale file \"\n#    diplomat_github_url: \"on GitHub\"\n#    diplomat_join_suf_github: \", edit it online, and submit a pull request. Also, check this box below to keep up-to-date on new internationalization developments!\"\n#    diplomat_subscribe_desc: \"Get emails about i18n developments and levels to translate.\"\n#    ambassador_introduction: \"This is a community we're building, and you are the connections. We've got forums, emails, and social networks with lots of people to talk with and help get acquainted with the game and learn from. If you want to help people get involved and have fun, and get a good feel of the pulse of CodeCombat and where we're going, then this class might be for you.\"\n#    ambassador_attribute_1: \"Communication skills. Be able to identify the problems players are having and help them solve them. Also, keep the rest of us informed about what players are saying, what they like and don't like and want more of!\"\n#    ambassador_join_desc: \"tell us a little about yourself, what you've done and what you'd be interested in doing. We'll go from there!\"\n#    ambassador_join_note_strong: \"Note\"\n#    ambassador_join_note_desc: \"One of our top priorities is to build multiplayer where players having difficulty solving levels can summon higher level wizards to help them. This will be a great way for ambassadors to do their thing. We'll keep you posted!\"\n#    ambassador_subscribe_desc: \"Get emails on support updates and multiplayer developments.\"\n#    teacher_subscribe_desc: \"Get emails on updates and announcements for teachers.\"\n#    changes_auto_save: \"Changes are saved automatically when you toggle checkboxes.\"\n#    diligent_scribes: \"Our Diligent Scribes:\"\n#    powerful_archmages: \"Our Powerful Archmages:\"\n#    creative_artisans: \"Our Creative Artisans:\"\n#    brave_adventurers: \"Our Brave Adventurers:\"\n#    translating_diplomats: \"Our Translating Diplomats:\"\n#    helpful_ambassadors: \"Our Helpful Ambassadors:\"\n\n#  ladder:\n#    title: \"Multiplayer Arenas\"\n#    arena_title: \"__arena__ | Multiplayer Arenas\"\n#    my_matches: \"My Matches\"\n#    simulate: \"Simulate\"\n#    simulation_explanation: \"By simulating games you can get your game ranked faster!\"\n#    simulation_explanation_leagues: \"You will mainly help simulate games for allied players in your clans and courses.\"\n#    simulate_games: \"Simulate Games!\"\n#    games_simulated_by: \"Games simulated by you:\"\n#    games_simulated_for: \"Games simulated for you:\"\n#    games_in_queue: \"Games currently in the queue:\"\n#    games_simulated: \"Games simulated\"\n#    games_played: \"Games played\"\n#    ratio: \"Ratio\"\n#    leaderboard: \"Leaderboard\"\n#    battle_as: \"Battle as \"\n#    summary_your: \"Your \"\n#    summary_matches: \"Matches - \"\n#    summary_wins: \" Wins, \"\n#    summary_losses: \" Losses\"\n#    rank_no_code: \"No New Code to Rank\"\n#    rank_my_game: \"Rank My Game!\"\n#    rank_submitting: \"Submitting...\"\n#    rank_submitted: \"Submitted for Ranking\"\n#    rank_failed: \"Failed to Rank\"\n#    rank_being_ranked: \"Game Being Ranked\"\n#    rank_last_submitted: \"submitted \"\n#    help_simulate: \"Help simulate games?\"\n#    code_being_simulated: \"Your new code is being simulated by other players for ranking. This will refresh as new matches come in.\"\n#    no_ranked_matches_pre: \"No ranked matches for the \"\n#    no_ranked_matches_post: \" team! Play against some competitors and then come back here to get your game ranked.\"\n#    choose_opponent: \"Choose an Opponent\"\n#    select_your_language: \"Select your language!\"\n#    tutorial_play: \"Play Tutorial\"\n#    tutorial_recommended: \"Recommended if you've never played before\"\n#    tutorial_skip: \"Skip Tutorial\"\n#    tutorial_not_sure: \"Not sure what's going on?\"\n#    tutorial_play_first: \"Play the Tutorial first.\"\n#    simple_ai: \"Simple CPU\"\n#    warmup: \"Warmup\"\n#    friends_playing: \"Friends Playing\"\n#    log_in_for_friends: \"Log in to play with your friends!\"\n#    social_connect_blurb: \"Connect and play against your friends!\"\n#    invite_friends_to_battle: \"Invite your friends to join you in battle!\"\n#    fight: \"Fight!\"\n#    watch_victory: \"Watch your victory\"\n#    defeat_the: \"Defeat the\"\n#    watch_battle: \"Watch the battle\"\n#    tournament_started: \", started\"\n#    tournament_ends: \"Tournament ends\"\n#    tournament_ended: \"Tournament ended\"\n#    tournament_rules: \"Tournament Rules\"\n#    tournament_blurb: \"Write code, collect gold, build armies, crush foes, win prizes, and upgrade your career in our $40,000 Greed tournament! Check out the details\"\n#    tournament_blurb_criss_cross: \"Win bids, construct paths, outwit opponents, grab gems, and upgrade your career in our Criss-Cross tournament! Check out the details\"\n#    tournament_blurb_zero_sum: \"Unleash your coding creativity in both gold gathering and battle tactics in this alpine mirror match between red sorcerer and blue sorcerer. The tournament began on Friday, March 27 and will run until Monday, April 6 at 5PM PDT. Compete for fun and glory! Check out the details\"\n#    tournament_blurb_ace_of_coders: \"Battle it out in the frozen glacier in this domination-style mirror match! The tournament began on Wednesday, September 16 and will run until Wednesday, October 14 at 5PM PDT. Check out the details\"\n#    tournament_blurb_blog: \"on our blog\"\n#    rules: \"Rules\"\n#    winners: \"Winners\"\n#    league: \"League\"\n#    red_ai: \"Red CPU\" # \"Red AI Wins\", at end of multiplayer match playback\n#    blue_ai: \"Blue CPU\"\n#    wins: \"Wins\" # At end of multiplayer match playback\n#    humans: \"Red\" # Ladder page display team name\n#    ogres: \"Blue\"\n#    live_tournament: \"Live Tournament\"\n#    awaiting_tournament_title: \"Tournament Inactive\"\n#    awaiting_tournament_blurb: \"The tournament arena is not currently active.\"\n\n#  user:\n#    user_title: \"__name__ - Learn to Code with CodeCombat\"\n#    stats: \"Stats\"\n#    singleplayer_title: \"Singleplayer Levels\"\n#    multiplayer_title: \"Multiplayer Levels\"\n#    achievements_title: \"Achievements\"\n#    last_played: \"Last Played\"\n#    status: \"Status\"\n#    status_completed: \"Completed\"\n#    status_unfinished: \"Unfinished\"\n#    no_singleplayer: \"No Singleplayer games played yet.\"\n#    no_multiplayer: \"No Multiplayer games played yet.\"\n#    no_achievements: \"No Achievements earned yet.\"\n#    favorite_prefix: \"Favorite language is \"\n#    favorite_postfix: \".\"\n#    not_member_of_clans: \"Not a member of any clans yet.\"\n#    certificate_view: \"view certificate\"\n#    certificate_click_to_view: \"click to view certificate\"\n#    certificate_course_incomplete: \"course incomplete\"\n#    certificate_of_completion: \"Certificate of Completion\"\n#    certificate_endorsed_by: \"Endorsed by\"\n#    certificate_stats: \"Course Stats\"\n#    certificate_lines_of: \"lines of\"\n#    certificate_levels_completed: \"levels completed\"\n#    certificate_for: \"For\"\n#    certificate_number: \"No.\"\n\n#  achievements:\n#    last_earned: \"Last Earned\"\n#    amount_achieved: \"Amount\"\n#    achievement: \"Achievement\"\n#    current_xp_prefix: \"\"\n#    current_xp_postfix: \" in total\"\n#    new_xp_prefix: \"\"\n#    new_xp_postfix: \" earned\"\n#    left_xp_prefix: \"\"\n#    left_xp_infix: \" until level \"\n#    left_xp_postfix: \"\"\n\n#  account:\n#    title: \"Account\"\n#    settings_title: \"Account Settings\"\n#    unsubscribe_title: \"Unsubscribe\"\n#    payments_title: \"Payments\"\n#    subscription_title: \"Subscription\"\n#    invoices_title: \"Invoices\"\n#    prepaids_title: \"Prepaids\"\n#    payments: \"Payments\"\n#    prepaid_codes: \"Prepaid Codes\"\n#    purchased: \"Purchased\"\n#    subscribe_for_gems: \"Subscribe for gems\"\n#    subscription: \"Subscription\"\n#    invoices: \"Invoices\"\n#    service_apple: \"Apple\"\n#    service_web: \"Web\"\n#    paid_on: \"Paid On\"\n#    service: \"Service\"\n#    price: \"Price\"\n#    gems: \"Gems\"\n#    active: \"Active\"\n#    subscribed: \"Subscribed\"\n#    unsubscribed: \"Unsubscribed\"\n#    active_until: \"Active Until\"\n#    cost: \"Cost\"\n#    next_payment: \"Next Payment\"\n#    card: \"Card\"\n#    status_unsubscribed_active: \"You're not subscribed and won't be billed, but your account is still active for now.\"\n#    status_unsubscribed: \"Get access to new levels, heroes, items, and bonus gems with a CodeCombat subscription!\"\n#    not_yet_verified: \"Not yet verified.\"\n#    resend_email: \"Resend email\"\n#    email_sent: \"Email sent! Check your inbox.\"\n#    verifying_email: \"Verifying your email address...\"\n#    successfully_verified: \"You've successfully verified your email address!\"\n#    verify_error: \"Something went wrong when verifying your email :(\"\n#    unsubscribe_from_marketing: \"Unsubscribe __email__ from all CodeCombat marketing emails?\"\n#    unsubscribe_button: \"Yes, unsubscribe\"\n#    unsubscribe_failed: \"Failed\"\n#    unsubscribe_success: \"Success\"\n\n#  account_invoices:\n#    amount: \"Amount in US dollars\"\n#    declined: \"Your card was declined\"\n#    invalid_amount: \"Please enter a US dollar amount.\"\n#    not_logged_in: \"Log in or create an account to access invoices.\"\n#    pay: \"Pay Invoice\"\n#    purchasing: \"Purchasing...\"\n#    retrying: \"Server error, retrying.\"\n#    success: \"Successfully paid. Thanks!\"\n\n#  account_prepaid:\n#    purchase_code: \"Purchase a Subscription Code\"\n#    purchase_code1: \"Subscription Codes can be redeemed to add premium subscription time to one or more accounts for the Home version of CodeCombat.\"\n#    purchase_code2: \"Each CodeCombat account can only redeem a particular Subscription Code once.\"\n#    purchase_code3: \"Subscription Code months will be added to the end of any existing subscription on the account.\"\n#    purchase_code4: \"Subscription Codes are for accounts playing the Home version of CodeCombat, they cannot be used in place of Student Licenses for the Classroom version.\"\n#    purchase_code5: \"For more information on Student Licenses, reach out to\"\n#    users: \"Users\"\n#    months: \"Months\"\n#    purchase_total: \"Total\"\n#    purchase_button: \"Submit Purchase\"\n#    your_codes: \"Your Codes\"\n#    redeem_codes: \"Redeem a Subscription Code\"\n#    prepaid_code: \"Prepaid Code\"\n#    lookup_code: \"Lookup prepaid code\"\n#    apply_account: \"Apply to your account\"\n#    copy_link: \"You can copy the code's link and send it to someone.\"\n#    quantity: \"Quantity\"\n#    redeemed: \"Redeemed\"\n#    no_codes: \"No codes yet!\"\n#    you_can1: \"You can\"\n#    you_can2: \"purchase a prepaid code\"\n#    you_can3: \"that can be applied to your own account or given to others.\"\n\n#  loading_error:\n#    could_not_load: \"Error loading from server. Try refreshing the page.\"\n#    connection_failure: \"Connection Failed\"\n#    connection_failure_desc: \"It doesn’t look like you’re connected to the internet! Check your network connection and then reload this page.\"\n#    login_required: \"Login Required\"\n#    login_required_desc: \"You need to be logged in to access this page.\"\n#    unauthorized: \"You need to be signed in. Do you have cookies disabled?\"\n#    forbidden: \"Forbidden\"\n#    forbidden_desc: \"Oh no, there’s nothing we can show you here! Make sure you’re logged into the correct account, or visit one of the links below to get back to programming!\"\n#    not_found: \"Not Found\"\n#    not_found_desc: \"Hm, there’s nothing here. Visit one of the following links to get back to programming!\"\n#    not_allowed: \"Method not allowed.\"\n#    timeout: \"Server Timeout\"\n#    conflict: \"Resource conflict.\"\n#    bad_input: \"Bad input.\"\n#    server_error: \"Server error.\"\n#    unknown: \"Unknown Error\"\n#    error: \"ERROR\"\n#    general_desc: \"Something went wrong, and it’s probably our fault. Try waiting a bit and then refreshing the page, or visit one of the following links to get back to programming!\"\n\n#  resources:\n#    level: \"Level\"\n#    patch: \"Patch\"\n#    patches: \"Patches\"\n#    system: \"System\"\n#    systems: \"Systems\"\n#    component: \"Component\"\n#    components: \"Components\"\n#    hero: \"Hero\"\n#    campaigns: \"Campaigns\"\n\n#  concepts:\n#    advanced_css_rules: \"Advanced CSS Rules\"\n#    advanced_css_selectors: \"Advanced CSS Selectors\"\n#    advanced_html_attributes: \"Advanced HTML Attributes\"\n#    advanced_html_tags: \"Advanced HTML Tags\"\n#    algorithm_average: \"Algorithm Average\"\n#    algorithm_find_minmax: \"Algorithm Find Min/Max\"\n#    algorithm_search_binary: \"Algorithm Search Binary\"\n#    algorithm_search_graph: \"Algorithm Search Graph\"\n#    algorithm_sort: \"Algorithm Sort\"\n#    algorithm_sum: \"Algorithm Sum\"\n#    arguments: \"Arguments\"\n#    arithmetic: \"Arithmetic\"\n#    array_2d: \"2D Array\"\n#    array_index: \"Array Indexing\"\n#    array_iterating: \"Iterating Over Arrays\"\n#    array_literals: \"Array Literals\"\n#    array_searching: \"Array Searching\"\n#    array_sorting: \"Array Sorting\"\n#    arrays: \"Arrays\"\n#    basic_css_rules: \"Basic CSS rules\"\n#    basic_css_selectors: \"Basic CSS selectors\"\n#    basic_html_attributes: \"Basic HTML Attributes\"\n#    basic_html_tags: \"Basic HTML Tags\"\n#    basic_syntax: \"Basic Syntax\"\n#    binary: \"Binary\"\n#    boolean_and: \"Boolean And\"\n#    boolean_inequality: \"Boolean Inequality\"\n#    boolean_equality: \"Boolean Equality\"\n#    boolean_greater_less: \"Boolean Greater/Less\"\n#    boolean_logic_shortcircuit: \"Boolean Logic Shortcircuiting\"\n#    boolean_not: \"Boolean Not\"\n#    boolean_operator_precedence: \"Boolean Operator Precedence\"\n#    boolean_or: \"Boolean Or\"\n#    boolean_with_xycoordinates: \"Coordinate Comparison\"\n#    bootstrap: \"Bootstrap\"\n#    break_statements: \"Break Statements\"\n#    classes: \"Classes\"\n#    continue_statements: \"Continue Statements\"\n#    dom_events: \"DOM Events\"\n#    dynamic_styling: \"Dynamic Styling\"\n#    events: \"Events\"\n#    event_concurrency: \"Event Concurrency\"\n#    event_data: \"Event Data\"\n#    event_handlers: \"Event Handlers\"\n#    event_spawn: \"Spawn Event\"\n#    for_loops: \"For Loops\"\n#    for_loops_nested: \"Nested For Loops\"\n#    for_loops_range: \"For Loops Range\"\n#    functions: \"Functions\"\n#    functions_parameters: \"Parameters\"\n#    functions_multiple_parameters: \"Multiple Parameters\"\n#    game_ai: \"Game AI\"\n#    game_goals: \"Game Goals\"\n#    game_spawn: \"Game Spawn\"\n#    graphics: \"Graphics\"\n#    graphs: \"Graphs\"\n#    heaps: \"Heaps\"\n#    if_condition: \"Conditional If Statements\"\n#    if_else_if: \"If/Else If Statements\"\n#    if_else_statements: \"If/Else Statements\"\n#    if_statements: \"If Statements\"\n#    if_statements_nested: \"Nested If Statements\"\n#    indexing: \"Array Indexes\"\n#    input_handling_flags: \"Input Handling - Flags\"\n#    input_handling_keyboard: \"Input Handling - Keyboard\"\n#    input_handling_mouse: \"Input Handling - Mouse\"\n#    intermediate_css_rules: \"Intermediate CSS Rules\"\n#    intermediate_css_selectors: \"Intermediate CSS Selectors\"\n#    intermediate_html_attributes: \"Intermediate HTML Attributes\"\n#    intermediate_html_tags: \"Intermediate HTML Tags\"\n#    jquery: \"jQuery\"\n#    jquery_animations: \"jQuery Animations\"\n#    jquery_filtering: \"jQuery Element Filtering\"\n#    jquery_selectors: \"jQuery Selectors\"\n#    length: \"Array Length\"\n#    math_coordinates: \"Coordinate Math\"\n#    math_geometry: \"Geometry\"\n#    math_operations: \"Math Library Operations\"\n#    math_proportions: \"Proportion Math\"\n#    math_trigonometry: \"Trigonometry\"\n#    object_literals: \"Object Literals\"\n#    parameters: \"Parameters\"\n#    programs: \"Programs\"\n#    properties: \"Properties\"\n#    property_access: \"Accessing Properties\"\n#    property_assignment: \"Assigning Properties\"\n#    property_coordinate: \"Coordinate Property\"\n#    queues: \"Data Structures - Queues\"\n#    reading_docs: \"Reading the Docs\"\n#    recursion: \"Recursion\"\n#    return_statements: \"Return Statements\"\n#    stacks: \"Data Structures - Stacks\"\n#    strings: \"Strings\"\n#    strings_concatenation: \"String Concatenation\"\n#    strings_substrings: \"Substring\"\n#    trees: \"Data Structures - Trees\"\n#    variables: \"Variables\"\n#    vectors: \"Vectors\"\n#    while_condition_loops: \"While Loops with Conditionals\"\n#    while_loops_simple: \"While Loops\"\n#    while_loops_nested: \"Nested While Loops\"\n#    xy_coordinates: \"Coordinate Pairs\"\n#    advanced_strings: \"Advanced Strings\" # Rest of concepts are deprecated\n#    algorithms: \"Algorithms\"\n#    boolean_logic: \"Boolean Logic\"\n#    basic_html: \"Basic HTML\"\n#    basic_css: \"Basic CSS\"\n#    basic_web_scripting: \"Basic Web Scripting\"\n#    intermediate_html: \"Intermediate HTML\"\n#    intermediate_css: \"Intermediate CSS\"\n#    intermediate_web_scripting: \"Intermediate Web Scripting\"\n#    advanced_html: \"Advanced HTML\"\n#    advanced_css: \"Advanced CSS\"\n#    advanced_web_scripting: \"Advanced Web Scripting\"\n#    input_handling: \"Input Handling\"\n#    while_loops: \"While Loops\"\n#    place_game_objects: \"Place game objects\"\n#    construct_mazes: \"Construct mazes\"\n#    create_playable_game: \"Create a playable, sharable game project\"\n#    alter_existing_web_pages: \"Alter existing web pages\"\n#    create_sharable_web_page: \"Create a sharable web page\"\n#    basic_input_handling: \"Basic Input Handling\"\n#    basic_game_ai: \"Basic Game AI\"\n#    basic_javascript: \"Basic JavaScript\"\n#    basic_event_handling: \"Basic Event Handling\"\n#    create_sharable_interactive_web_page: \"Create a sharable interactive web page\"\n\n#  anonymous_teacher:\n#    notify_teacher: \"Notify Teacher\"\n#    create_teacher_account: \"Create free teacher account\"\n#    enter_student_name: \"Your name:\"\n#    enter_teacher_email: \"Your teacher's email:\"\n#    teacher_email_placeholder: \"teacher.email@example.com\"\n#    student_name_placeholder: \"type your name here\"\n#    teachers_section: \"Teachers:\"\n#    students_section: \"Students:\"\n#    teacher_notified: \"We've notified your teacher that you want to play more CodeCombat in your classroom!\"\n\n#  delta:\n#    added: \"Added\"\n#    modified: \"Modified\"\n#    not_modified: \"Not Modified\"\n#    deleted: \"Deleted\"\n#    moved_index: \"Moved Index\"\n#    text_diff: \"Text Diff\"\n#    merge_conflict_with: \"MERGE CONFLICT WITH\"\n#    no_changes: \"No Changes\"\n\n#  legal:\n#    page_title: \"Legal\"\n#    opensource_introduction: \"CodeCombat is part of the open source community.\"\n#    opensource_description_prefix: \"Check out \"\n#    github_url: \"our GitHub\"\n#    opensource_description_center: \"and help out if you like! CodeCombat is built on dozens of open source projects, and we love them. See \"\n#    archmage_wiki_url: \"our Archmage wiki\"\n#    opensource_description_suffix: \"for a list of the software that makes this game possible.\"\n#    practices_title: \"Respectful Best Practices\"\n#    practices_description: \"These are our promises to you, the player, in slightly less legalese.\"\n#    privacy_title: \"Privacy\"\n#    privacy_description: \"We will not sell any of your personal information.\"\n#    security_title: \"Security\"\n#    security_description: \"We strive to keep your personal information safe. As an open source project, our site is freely open to anyone to review and improve our security systems.\"\n#    email_title: \"Email\"\n#    email_description_prefix: \"We will not inundate you with spam. Through\"\n#    email_settings_url: \"your email settings\"\n#    email_description_suffix: \"or through links in the emails we send, you can change your preferences and easily unsubscribe at any time.\"\n#    cost_title: \"Cost\"\n#    cost_description: \"CodeCombat is free to play for all of its core levels, with a ${{price}} USD/mo subscription for access to extra level branches and {{gems}} bonus gems per month. You can cancel with a click, and we offer a 100% money-back guarantee.\"\n#    copyrights_title: \"Copyrights and Licenses\"\n#    contributor_title: \"Contributor License Agreement\"\n#    contributor_description_prefix: \"All contributions, both on the site and on our GitHub repository, are subject to our\"\n#    cla_url: \"CLA\"\n#    contributor_description_suffix: \"to which you should agree before contributing.\"\n#    code_title: \"Client-Side Code - MIT\"\n#    client_code_description_prefix: \"All client-side code for codecombat.com in the public GitHub repository and in the codecombat.com database, is licensed under the\"\n#    mit_license_url: \"MIT license\"\n#    code_description_suffix: \"This includes all code in Systems and Components that are made available by CodeCombat for the purpose of creating levels.\"\n#    art_title: \"Art/Music - Creative Commons \"\n#    art_description_prefix: \"All common content is available under the\"\n#    cc_license_url: \"Creative Commons Attribution 4.0 International License\"\n#    art_description_suffix: \"Common content is anything made generally available by CodeCombat for the purpose of creating Levels. This includes:\"\n#    art_music: \"Music\"\n#    art_sound: \"Sound\"\n#    art_artwork: \"Artwork\"\n#    art_sprites: \"Sprites\"\n#    art_other: \"Any and all other non-code creative works that are made available when creating Levels.\"\n#    art_access: \"Currently there is no universal, easy system for fetching these assets. In general, fetch them from the URLs as used by the site, contact us for assistance, or help us in extending the site to make these assets more easily accessible.\"\n#    art_paragraph_1: \"For attribution, please name and link to codecombat.com near where the source is used or where appropriate for the medium. For example:\"\n#    use_list_1: \"If used in a movie or another game, include codecombat.com in the credits.\"\n#    use_list_2: \"If used on a website, include a link near the usage, for example underneath an image, or in a general attributions page where you might also mention other Creative Commons works and open source software being used on the site. Something that's already clearly referencing CodeCombat, such as a blog post mentioning CodeCombat, does not need some separate attribution.\"\n#    art_paragraph_2: \"If the content being used is created not by CodeCombat but instead by a user of codecombat.com, attribute them instead, and follow attribution directions provided in that resource's description if there are any.\"\n#    rights_title: \"Rights Reserved\"\n#    rights_desc: \"All rights are reserved for Levels themselves. This includes\"\n#    rights_scripts: \"Scripts\"\n#    rights_unit: \"Unit configuration\"\n#    rights_writings: \"Writings\"\n#    rights_media: \"Media (sounds, music) and any other creative content made specifically for that Level and not made generally available when creating Levels.\"\n#    rights_clarification: \"To clarify, anything that is made available in the Level Editor for the purpose of making levels is under CC, whereas the content created with the Level Editor or uploaded in the course of creation of Levels is not.\"\n#    nutshell_title: \"In a Nutshell\"\n#    nutshell_description: \"Any resources we provide in the Level Editor are free to use as you like for creating Levels. But we reserve the right to restrict distribution of the Levels themselves (that are created on codecombat.com) so that they may be charged for.\"\n#    nutshell_see_also: \"See also:\"\n#    canonical: \"The English version of this document is the definitive, canonical version. If there are any discrepancies between translations, the English document takes precedence.\"\n#    third_party_title: \"Third Party Services\"\n#    third_party_description: \"CodeCombat uses the following third party services (among others):\"\n#    cookies_message: \"CodeCombat uses a few essential and non-essential cookies.\"\n#    cookies_deny: \"Decline non-essential cookies\"\n\n#  ladder_prizes:\n#    title: \"Tournament Prizes\" # This section was for an old tournament and doesn't need new translations now.\n#    blurb_1: \"These prizes will be awarded according to\"\n#    blurb_2: \"the tournament rules\"\n#    blurb_3: \"to the top human and ogre players.\"\n#    blurb_4: \"Two teams means double the prizes!\"\n#    blurb_5: \"(There will be two first place winners, two second-place winners, etc.)\"\n#    rank: \"Rank\"\n#    prizes: \"Prizes\"\n#    total_value: \"Total Value\"\n#    in_cash: \"in cash\"\n#    custom_wizard: \"Custom CodeCombat Wizard\"\n#    custom_avatar: \"Custom CodeCombat avatar\"\n#    heap: \"for six months of \\\"Startup\\\" access\"\n#    credits: \"credits\"\n#    one_month_coupon: \"coupon: choose either Rails or HTML\"\n#    one_month_discount: \"discount, 30% off: choose either Rails or HTML\"\n#    license: \"license\"\n#    oreilly: \"ebook of your choice\"\n\n#  calendar:\n#    year: \"Year\"\n#    day: \"Day\"\n#    month: \"Month\"\n#    january: \"January\"\n#    february: \"February\"\n#    march: \"March\"\n#    april: \"April\"\n#    may: \"May\"\n#    june: \"June\"\n#    july: \"July\"\n#    august: \"August\"\n#    september: \"September\"\n#    october: \"October\"\n#    november: \"November\"\n#    december: \"December\"\n\n#  code_play_create_account_modal:\n#    title: \"You did it!\" # This section is only needed in US, UK, Mexico, India, and Germany\n#    body: \"You are now on your way to becoming a master coder. Sign up to receive an extra <strong>100 Gems</strong> & you will also be entered for a chance to <strong>win $2,500 & other Lenovo Prizes</strong>.\"\n#    sign_up: \"Sign up & keep coding ▶\"\n#    victory_sign_up_poke: \"Create a free account to save your code & be entered for a chance to win prizes!\"\n#    victory_sign_up: \"Sign up & be entered to <strong>win $2,500</strong>\"\n\n#  server_error:\n#    email_taken: \"Email already taken\"\n#    username_taken: \"Username already taken\"\n\n#  esper:\n#    line_no: \"Line $1: \"\n#    uncaught: \"Uncaught $1\" # $1 will be an error type, eg \"Uncaught SyntaxError\"\n#    reference_error: \"ReferenceError: \"\n#    argument_error: \"ArgumentError: \"\n#    type_error: \"TypeError: \"\n#    syntax_error: \"SyntaxError: \"\n#    error: \"Error: \"\n#    x_not_a_function: \"$1 is not a function\"\n#    x_not_defined: \"$1 is not defined\"\n#    spelling_issues: \"Look out for spelling issues: did you mean `$1` instead of `$2`?\"\n#    capitalization_issues: \"Look out for capitalization: `$1` should be `$2`.\"\n#    py_empty_block: \"Empty $1. Put 4 spaces in front of statements inside the $2 statement.\"\n#    fx_missing_paren: \"If you want to call `$1` as a function, you need `()`'s\"\n#    unmatched_token: \"Unmatched `$1`.  Every opening `$2` needs a closing `$3` to match it.\"\n#    unterminated_string: \"Unterminated string. Add a matching `\\\"` at the end of your string.\"\n#    missing_semicolon: \"Missing semicolon.\"\n#    missing_quotes: \"Missing quotes. Try `$1`\"\n#    argument_type: \"`$1`'s argument `$2` should have type `$3`, but got `$4`: `$5`.\"\n#    argument_type2: \"`$1`'s argument `$2` should have type `$3`, but got `$4`.\"\n#    target_a_unit: \"Target a unit.\"\n#    attack_capitalization: \"Attack $1, not $2. (Capital letters are important.)\"\n#    empty_while: \"Empty while statement. Put 4 spaces in front of statements inside the while statement.\"\n#    line_of_site: \"`$1`'s argument `$2` has a problem. Is there an enemy within your line-of-sight yet?\"\n#    need_a_after_while: \"Need a `$1` after `$2`.\"\n#    too_much_indentation: \"Too much indentation at the beginning of this line.\"\n#    missing_hero: \"Missing `$1` keyword; should be `$2`.\"\n#    takes_no_arguments: \"`$1` takes no arguments.\"\n#    no_one_named: \"There's no one named \\\"$1\\\" to target.\"\n#    separated_by_comma: \"Function calls paramaters must be seperated by `,`s\"\n#    protected_property: \"Can't read protected property: $1\"\n#    need_parens_to_call: \"If you want to call `$1` as function, you need `()`'s\"\n#    expected_an_identifier: \"Expected an identifier and instead saw '$1'.\"\n#    unexpected_identifier: \"Unexpected identifier\"\n#    unexpected_end_of: \"Unexpected end of input\"\n#    unnecessary_semicolon: \"Unnecessary semicolon.\"\n#    unexpected_token_expected: \"Unexpected token: expected $1 but found $2 while parsing $3\"\n#    unexpected_token: \"Unexpected token $1\"\n#    unexpected_token2: \"Unexpected token\"\n#    unexpected_number: \"Unexpected number\"\n#    unexpected: \"Unexpected '$1'.\"\n#    escape_pressed_code: \"Escape pressed; code aborted.\"\n#    target_an_enemy: \"Target an enemy by name, like `$1`, not the string `$2`.\"\n#    target_an_enemy_2: \"Target an enemy by name, like $1.\"\n#    cannot_read_property: \"Cannot read property '$1' of undefined\"\n#    attempted_to_assign: \"Attempted to assign to readonly property.\"\n#    unexpected_early_end: \"Unexpected early end of program.\"\n#    you_need_a_string: \"You need a string to build; one of $1\"\n#    unable_to_get_property: \"Unable to get property '$1' of undefined or null reference\" # TODO: Do we translate undefined/null?\n#    code_never_finished_its: \"Code never finished. It's either really slow or has an infinite loop.\"\n#    unclosed_string: \"Unclosed string.\"\n#    unmatched: \"Unmatched '$1'.\"\n#    error_you_said_achoo: \"You said: $1, but the password is: $2. (Capital letters are important.)\"\n#    indentation_error_unindent_does: \"Indentation Error: unindent does not match any outer indentation level\"\n#    indentation_error: \"Indentation error.\"\n#    need_a_on_the: \"Need a `:` on the end of the line following `$1`.\"\n#    attempt_to_call_undefined: \"attempt to call '$1' (a nil value)\"\n#    unterminated: \"Unterminated `$1`\"\n#    target_an_enemy_variable: \"Target an $1 variable, not the string $2. (Try using $3.)\"\n#    error_use_the_variable: \"Use the variable name like `$1` instead of a string like `$2`\"\n#    indentation_unindent_does_not: \"Indentation unindent does not match any outer indentation level\"\n#    unclosed_paren_in_function_arguments: \"Unclosed $1 in function arguments.\"\n#    unexpected_end_of_input: \"Unexpected end of input\"\n#    there_is_no_enemy: \"There is no `$1`. Use `$2` first.\" # Hints start here\n#    try_herofindnearestenemy: \"Try `$1`\"\n#    there_is_no_function: \"There is no function `$1`, but `$2` has a method `$3`.\"\n#    attacks_argument_enemy_has: \"`$1`'s argument `$2` has a problem.\"\n#    is_there_an_enemy: \"Is there an enemy within your line-of-sight yet?\"\n#    target_is_null_is: \"Target is $1. Is there always a target to attack? (Use $2?)\"\n#    hero_has_no_method: \"`$1` has no method `$2`.\"\n#    there_is_a_problem: \"There is a problem with your code.\"\n#    did_you_mean: \"Did you mean $1? You do not have an item equipped with that skill.\"\n#    missing_a_quotation_mark: \"Missing a quotation mark. \"\n#    missing_var_use_var: \"Missing `$1`. Use `$2` to make a new variable.\"\n#    you_do_not_have: \"You do not have an item equipped with the $1 skill.\"\n#    put_each_command_on: \"Put each command on a separate line\"\n#    are_you_missing_a: \"Are you missing a '$1' after '$2'? \"\n#    your_parentheses_must_match: \"Your parentheses must match.\"\n\n#  apcsp:\n#    title: \"AP Computer Science Principals | College Board Endorsed\"\n#    meta_description: \"CodeCombat’s comprehensive curriculum and professional development program are all you need to offer College Board’s newest computer science course to your students.\"\n#    syllabus: \"AP CS Principles Syllabus\"\n#    syllabus_description: \"Use this resource to plan CodeCombat curriculum for your AP Computer Science Principles class.\"\n#    computational_thinking_practices: \"Computational Thinking Practices\"\n#    learning_objectives: \"Learning Objectives\"\n#    curricular_requirements: \"Curricular Requirements\"\n#    unit_1: \"Unit 1: Creative Technology\"\n#    unit_1_activity_1: \"Unit 1 Activity: Technology Usability Review\"\n#    unit_2: \"Unit 2: Computational Thinking\"\n#    unit_2_activity_1: \"Unit 2 Activity: Binary Sequences\"\n#    unit_2_activity_2: \"Unit 2 Activity: Computing Lesson Project\"\n#    unit_3: \"Unit 3: Algorithms\"\n#    unit_3_activity_1: \"Unit 3 Activity: Algorithms - Hitchhiker's Guide\"\n#    unit_3_activity_2: \"Unit 3 Activity: Simulation - Predator & Prey\"\n#    unit_3_activity_3: \"Unit 3 Activity: Algorithms - Pair Design and Programming\"\n#    unit_4: \"Unit 4: Programming\"\n#    unit_4_activity_1: \"Unit 4 Activity: Abstractions\"\n#    unit_4_activity_2: \"Unit 4 Activity: Searching & Sorting\"\n#    unit_4_activity_3: \"Unit 4 Activity: Refactoring\"\n#    unit_5: \"Unit 5: The Internet\"\n#    unit_5_activity_1: \"Unit 5 Activity: How the Internet Works\"\n#    unit_5_activity_2: \"Unit 5 Activity: Internet Simulator\"\n#    unit_5_activity_3: \"Unit 5 Activity: Chat Room Simulation\"\n#    unit_5_activity_4: \"Unit 5 Activity: Cybersecurity\"\n#    unit_6: \"Unit 6: Data\"\n#    unit_6_activity_1: \"Unit 6 Activity: Introduction to Data\"\n#    unit_6_activity_2: \"Unit 6 Activity: Big Data\"\n#    unit_6_activity_3: \"Unit 6 Activity: Lossy & Lossless Compression\"\n#    unit_7: \"Unit 7: Personal & Global Impact\"\n#    unit_7_activity_1: \"Unit 7 Activity: Personal & Global Impact\"\n#    unit_7_activity_2: \"Unit 7 Activity: Crowdsourcing\"\n#    unit_8: \"Unit 8: Performance Tasks\"\n#    unit_8_description: \"Prepare students for the Create Task by building their own games and practicing key concepts.\"\n#    unit_8_activity_1: \"Create Task Practice 1: Game Development 1\"\n#    unit_8_activity_2: \"Create Task Practice 2: Game Development 2\"\n#    unit_8_activity_3: \"Create Task Practice 3: Game Development 3\"\n#    unit_9: \"Unit 9: AP Review\"\n#    unit_10: \"Unit 10: Post-AP\"\n#    unit_10_activity_1: \"Unit 10 Activity: Web Quiz\"\n\n#  parent_landing:\n#    slogan_quote: \"\\\"CodeCombat is really fun, and you learn a lot.\\\"\"\n#    quote_attr: \"5th Grader, Oakland, CA\"\n#    refer_teacher: \"Refer a Teacher\"\n#    focus_quote: \"Unlock your child's future\"\n#    value_head1: \"The most engaging way to learn typed code\"\n#    value_copy1: \"CodeCombat is child’s personal tutor. Covering material aligned with national curriculum standards, your child will program algorithms, build websites and even design their own games.\"\n#    value_head2: \"Building critical skills for the 21st century\"\n#    value_copy2: \"Your kids will learn how to navigate and become citizens in the digital world. CodeCombat is a solution that enhances your child’s critical thinking and resilience.\"\n#    value_head3: \"Heroes that your child will love\"\n#    value_copy3: \"We know how important fun and engagement is for the developing brain, so we’ve packed in as much learning as we can while wrapping it up in a game they'll love.\"\n#    dive_head1: \"Not just for software engineers\"\n#    dive_intro: \"Computer science skills have a wide range of applications. Take a look at a few examples below!\"\n#    medical_flag: \"Medical Applications\"\n#    medical_flag_copy: \"From mapping of the human genome to MRI machines, coding allows us to understand the body in ways we’ve never been able to before.\"\n#    explore_flag: \"Space Exploration\"\n#    explore_flag_copy: \"Apollo got to the Moon thanks to hardworking human computers, and scientists use computer programs to analyze the gravity of planets and search for new stars.\"\n#    filmaking_flag: \"Filmmaking and Animation\"\n#    filmaking_flag_copy: \"From the robotics of Jurassic Park to the incredible animation of Dreamworks and Pixar, films wouldn’t be the same without the digital creatives behind the scenes.\"\n#    dive_head2: \"Games are important for learning\"\n#    dive_par1: \"Multiple studies have found that game-based learning promotes\"\n#    dive_link1: \"cognitive development\"\n#    dive_par2: \"in kids while also proving to be\"\n#    dive_link2: \"more effective\"\n#    dive_par3: \"in helping students\"\n#    dive_link3: \"learn and retain knowledge\"\n#    dive_par4: \",\"\n#    dive_link4: \"concentrate\"\n#    dive_par5: \", and perform at a higher level of achievement.\"\n#    dive_par6: \"Game based learning is also good for developing\"\n#    dive_link5: \"resilience\"\n#    dive_par7: \", cognitive reasoning, and\"\n#    dive_par8: \". Science is just telling us what learners already know. Children learn best by playing.\"\n#    dive_link6: \"executive functions\"\n#    dive_head3: \"Team up with teachers\"\n#    dive_3_par1: \"In the future, \"\n#    dive_3_link1: \"coding is going to be as fundamental as learning to read and write\"\n#    dive_3_par2: \". We’ve worked closely with teachers to design and develop our content, and we can't wait to get your kids learning. Educational technology programs like CodeCombat work best when the teachers implement them consistently. Help us make that connection by introducing us to your child’s teachers!\"\n#    mission: \"Our mission: to teach and engage\"\n#    mission1_heading: \"Coding for today's generation\"\n#    mission2_heading: \"Preparing for the future\"\n#    mission3_heading: \"Supported by parents like you\"\n#    mission1_copy: \"Our education specialists work closely with teachers to meet children where they are in the educational landscape. Kids learn skills that can be applied outside of the game because they learn how to solve problems, no matter what their learning style is.\"\n#    mission2_copy: \"A 2016 survey showed that 64% of girls in 3-5th grade want to learn how to code. There were 7 million job openings in 2015 required coding skills. We built CodeCombat because every child should be given a chance to create their best future.\"\n#    mission3_copy: \"At CodeCombat, we’re parents. We’re coders. We’re educators. But most of all, we’re people who believe in giving our kids the best opportunity for success in whatever it is they decide to do.\"\n\n#  parent_modal:\n#    refer_teacher: \"Refer Teacher\"\n#    name: \"Your Name\"\n#    parent_email: \"Your Email\"\n#    teacher_email: \"Teacher's Email\"\n#    message: \"Message\"\n#    custom_message: \"I just found CodeCombat and thought it'd be a great program for your classroom! It's a computer science learning platform with standards-aligned curriculum.\\n\\nComputer literacy is so important and I think this would be a great way to get students engaged in learning to code.\"\n#    send: \"Send Email\"\n\n#  hoc_2018:\n#    banner: \"Happy Computer Science Education Week 2018!\"\n#    page_heading: \"Your students will learn to code by building their own game!\"\n#    step_1: \"Step 1: Watch Video Overview\"\n#    step_2: \"Step 2: Try it Yourself\"\n#    step_3: \"Step 3: Download Lesson Plan\"\n#    try_activity: \"Try Activity\"\n#    download_pdf: \"Download PDF\"\n#    teacher_signup_heading: \"Turn Hour of Code into a Year of Code\"\n#    teacher_signup_blurb: \"Everything you need to teach computer science, no prior experience needed.\"\n#    teacher_signup_input_blurb: \"Get first course free:\"\n#    teacher_signup_input_placeholder: \"Teacher email address\"\n#    teacher_signup_input_button: \"Get CS1 Free\"\n#    activities_header: \"More Hour of Code Activities\"\n#    activity_label_1: \"Escape the Dungeon!\"\n#    activity_label_2: \" Beginner: Build a Game!\"\n#    activity_label_3: \"Advanced: Build an Arcade Game!\"\n#    activity_button_1: \"View Lesson\"\n#    about: \"About CodeCombat\"\n#    about_copy: \"A game-based, standards-aligned computer science program that teaches real, typed Python and JavaScript.\"\n#    point1: \"✓ Scaffolded\"\n#    point2: \"✓ Differentiated\"\n#    point3: \"✓ Assessments\"\n#    point4: \"✓ Project-based courses\"\n#    point5: \"✓ Student tracking\"\n#    point6: \"✓ Full lesson plans\"\n#    title: \"HOUR OF CODE 2018\"\n#    acronym: \"HOC\"\n\n#  hoc_2018_interstitial:\n#    welcome: \"Welcome to CodeCombat's Hour of Code 2018!\"\n#    educator: \"I'm an educator\"\n#    show_resources: \"Show me teacher resources!\"\n#    student: \"I'm a student\"\n#    ready_to_code: \"I'm ready to code!\"\n\n#  hoc_2018_completion:\n#    congratulations: \"Congratulations on completing <b>Code, Play, Share!</b>\"\n#    send: \"Send your Hour of Code game to friends and family!\"\n#    copy: \"Copy URL\"\n#    get_certificate: \"Get a certificate of completion to celebrate with your class!\"\n#    get_cert_btn: \"Get Certificate\"\n#    first_name: \"First Name\"\n#    last_initial: \"Last Initial\"\n#    teacher_email: \"Teacher's email address\"\n\n#  school_administrator:\n#    title: \"School Administrator Dashboard\"\n#    my_teachers: \"My Teachers\"\n#    last_login: \"Last Login\"\n#    licenses_used: \"licenses used\"\n#    total_students: \"total students\"\n#    active_students: \"active students\"\n#    projects_created: \"projects created\"\n#    other: \"Other\"\n#    notice: \"The following school administrators have view-only access to your classroom data:\"\n#    add_additional_teacher: \"Need to add an additional teacher? Contact your CodeCombat Account Manager or email support@codecombat.com. \"\n#    license_stat_description: \"Licenses available accounts for the total number of licenses available to the teacher, including Shared Licenses.\"\n#    students_stat_description: \"Total students accounts for all students across all classrooms, regardless of whether they have licenses applied.\"\n#    active_students_stat_description: \"Active students counts the number of students that have logged into CodeCombat in the last 60 days.\"\n#    project_stat_description: \"Projects created counts the total number of Game and Web development projects that have been created.\"\n#    no_teachers: \"You are not administrating any teachers.\"\n\n\n\n// WEBPACK FOOTER //\n// ./app/locale/uz.coffee"],"sourceRoot":""}\n//# sourceURL=webpack-internal:///1087\n");

/***/ })

});