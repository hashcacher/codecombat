/*! hash:345dfe6c0e434e9c7378, chunkhash:d19dafe0df0c6a6102e6, name:locale/lt, filebase:lt.bundle.js, query:, file:javascripts/chunks/locale/lt.bundle.js */
webpackJsonp([45],{

/***/ 1063:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"lietuvių kalba\",\n  englishDescription: \"Lithuanian\",\n  translation: {\n    new_home: {\n      slogan: \"Labiausiai įtraukiantis žaidimas programavimo mokymuisi.\",\n      classroom_edition: \"Klasės režimas:\",\n      learn_to_code: \"Išmok programuoti:\",\n      play_now: \"Žaisk dabar\",\n      im_a_teacher: \"Aš - mokytojas\",\n      im_a_student: \"Aš - mokinys\",\n      learn_more: \"Sužinok daugiau\",\n      classroom_in_a_box: \"Virtuali klasė kompiuterių mokslo mokymui.\",\n      codecombat_is: \"CodeCombat yra platforma skirta <strong>mokiniams</strong> išmokti kompiuterių mokslo žaidžiant tikrą žaidimą.\",\n      our_courses: \"Mūsų kursai buvo specifiškai žaidžiant ištestuoti ir <strong>pranoko klasėse</strong>, netgi mokytojams su maža arba jokia programavimo patirtimi.\",\n      top_screenshots_hint: \"Mokiniai rašo kodą ir mato vykstančius pakitimus realiu laiku\",\n      designed_with: \"Sukurta galvojant apie mokytojus\",\n      real_code: \"Realus, parašytas kodas\",\n      from_the_first_level: \"nuo pirmo lygio\",\n      getting_students: \"Pratinti mokinius prie kodo rašymo kaip įmanoma greičiau yra kritiška mokantis programavimo sintaksės ir teisingos struktūros.\",\n      educator_resources: \"Pedagogo ištekliai\",\n      course_guides: \"ir kursų gidai\"\n    },\n    nav: {\n      play: \"Lygiai\",\n      community: \"Bendruomenė\",\n      courses: \"Kursai\",\n      blog: \"Blog'as\",\n      forum: \"Forumas\",\n      account: \"Paskyra\",\n      my_account: \"Mano paskyra\",\n      profile: \"Profilis\",\n      home: \"Pradžia\",\n      contribute: \"Prisidėti\",\n      legal: \"Teisė\",\n      privacy: \"Privatumas\",\n      about: \"Apie\",\n      contact: \"Kontaktai\",\n      twitter_follow: \"Sekti Twitter\",\n      my_classrooms: \"Mano klasės\",\n      my_courses: \"Mano kursai\",\n      careers: \"Karjera\",\n      facebook: \"Facebook'as\",\n      twitter: \"Twitter'is\",\n      create_a_class: \"Sukurti klasę\",\n      other: \"Kiti\",\n      learn_to_code: \"Išmok programuoti!\",\n      toggle_nav: \"Perjungti navigaciją\",\n      schools: \"Mokyklos\",\n      get_involved: \"Įsitraukite\",\n      open_source: \"Atviras kodas (GitHub)\",\n      support: \"Palaikymas\",\n      faqs: \"D.U.K.\",\n      help_pref: \"Reikia pagalbos? Parašyk\",\n      help_suff: \"ir mes susisieksime!\",\n      resource_hub: \"Išteklių centras\"\n    },\n    modal: {\n      close: \"Uždaryti\",\n      okay: \"OK\"\n    },\n    not_found: {\n      page_not_found: \"Puslapis nerastas\"\n    },\n    diplomat_suggestion: {\n      title: \"Padėkite išversti CodeCombat!\",\n      sub_heading: \"Mums reikia jūsų kalbos įgudžių.\",\n      pitch_body: \"Mes kuriame CodeCombat Angliškai, bet mes turime žaidėjų visame pasaulyje. Daugelis jų norėtų žaisti Lietuvoje, tačiau nesupranta Angliškai. Jei tu gerai moki abi kalbas, prašom užsiregistruoti ir tapti Diplomatu. Taip galėsi padėti išversti CodeCombat interneto svetainę ir visus lygius į Lietuvių kalbą.\",\n      missing_translations: \"Kol viską išversime į Lietuvių kalbą, dar neišverstą tekstą matysite užrašytą Anglų kalba.\",\n      learn_more: \"Sužinoti daugiau apie tapimą Diplomatu\",\n      subscribe_as_diplomat: \"Noriu tapti Diplomatu\"\n    },\n    play: {\n      play_as: \"Žaisti kaip\",\n      compete: \"Varžytis!\",\n      spectate: \"Stebėti\",\n      players: \"žaidėjai\",\n      hours_played: \"valandų žaista\",\n      items: \"Daiktai\",\n      unlock: \"Atrakinti\",\n      confirm: \"Tvirtinti\",\n      owned: \"Turima\",\n      locked: \"Užrakinta\",\n      available: \"Prieinama\",\n      skills_granted: \"Suteikti įgūdžiai\",\n      heroes: \"Herojai\",\n      achievements: \"Pasiekimai\",\n      settings: \"Nustatymai\",\n      poll: \"Apklausa\",\n      next: \"Kitas\",\n      change_hero: \"Keisti Herojų\",\n      buy_gems: \"Pirkti Deimantus\",\n      anonymous: \"Anoniminis Žaidėjas\",\n      level_difficulty: \"Sudėtingumas: \",\n      awaiting_levels_adventurer_prefix: \"Kiekvieną savaitę sukuriame naujus lygius.\",\n      awaiting_levels_adventurer: \"Prisijunk kaip Nuotykių Ieškotojas\",\n      awaiting_levels_adventurer_suffix: \"kad pamatytum juos pirmas.\",\n      adjust_volume: \"Reguliuoti garsą\",\n      campaign_multiplayer: \"Daugelio žaidėjų arenos\",\n      campaign_multiplayer_description: \"... kuriose tu prgramuoji kad įveiktum kitus žaidėjus.\"\n    },\n    share_progress_modal: {\n      blurb: \"Tau puikiai sekasi! Parodyk tėvams kiek jau išmokai su CodeCombat.\",\n      email_invalid: \"Neteisingas el. pašto adresas.\",\n      form_blurb: \"Įvesk tėvų el. pašto adresą ir mes jiems parodysim!\",\n      form_label: \"El. pašto adresas\",\n      placeholder: \"el. pašto adresas\",\n      title: \"Puikiai padirbėta, Mokinį!\"\n    },\n    login: {\n      sign_up: \"Sukurti paskyrą\",\n      email_or_username: \"El. paštas arba naudotojo vardas\",\n      log_in: \"Prisijungti\",\n      logging_in: \"Prisijungimas...\",\n      log_out: \"Atsijungti\",\n      forgot_password: \"Pamiršote slaptažodį?\",\n      finishing: \"Baiginėjama\",\n      sign_in_with_facebook: \"Prisijungti su Facebook\",\n      sign_in_with_gplus: \"Prisijungti su G+\",\n      signup_switch: \"Norite sukurti paskyrą?\"\n    },\n    signup: {\n      create_student_header: \"Sukurti mokinio paskyrą\",\n      create_teacher_header: \"Sukurti mokytojo paskyrą\",\n      create_individual_header: \"Sukurti individualią paskyrą\",\n      email_announcements: \"Gauti pranešimus elektroniniu paštu\",\n      creating: \"Kuriama paskyra...\",\n      sign_up: \"Užsiregistruoti\",\n      log_in: \"prisijungti slaptažodžio pagalba\",\n      required: \"PRieš tęsiant kelią turite prisijungti.\",\n      login_switch: \"Jau turite paskyrą?\",\n      optional: \"nebūtinas\"\n    },\n    recover: {\n      recover_account_title: \"Susigrąžinti paskyrą\",\n      send_password: \"Siųsti susigrąžinimo slaptažodį\",\n      recovery_sent: \"Susigražinimo laiškas išsiųstas.\"\n    },\n    items: {\n      primary: \"Pagrindiniai\",\n      secondary: \"Pagalbiniai\",\n      armor: \"Šarvai\",\n      accessories: \"Priedai\",\n      misc: \"Kiti\",\n      books: \"Knygos\"\n    },\n    common: {\n      back: \"Atgal\",\n      coming_soon: \"Jau greitai!\",\n      \"continue\": \"Tęsti\",\n      default_code: \"Kodas pagal nutylėjimą\",\n      loading: \"Kraunama...\",\n      overview: \"Apžvalga\",\n      solution: \"Sprendimas\",\n      intro: \"Įvadas\",\n      saving: \"Saugoma...\",\n      sending: \"Siunčiama...\",\n      send: \"Siųsti\",\n      sent: \"Išsiųsta\",\n      cancel: \"Atšaukti\",\n      save: \"Išsaugoti\",\n      publish: \"Paskelbti\",\n      create: \"Kurti\",\n      fork: \"Išsišakojimas\",\n      play: \"Žaisti\",\n      retry: \"Pakartoti\",\n      actions: \"Veiksmai\",\n      info: \"Informacija\",\n      help: \"Pagalba\",\n      watch: \"Žiūrėti\",\n      unwatch: \"Nebežiūrėti\",\n      submit_patch: \"Pateikti pataisymą\",\n      submit_changes: \"Išsaugoti pakeitimus\",\n      save_changes: \"Saugoti pakeitimus\",\n      required_field: \"privaloma\"\n    },\n    general: {\n      and: \"ir\",\n      name: \"Vardas\",\n      date: \"Data\",\n      body: \"Tekstas\",\n      version: \"Versija\",\n      pending: \"Laukiama\",\n      accepted: \"Priimtas\",\n      rejected: \"Atmestas\",\n      withdrawn: \"Pasitraukęs\",\n      accept: \"Priimti\",\n      reject: \"Atmesti\",\n      withdraw: \"Pasitraukti\",\n      submitter: \"Teikėjas\",\n      submitted: \"Pateikta\",\n      commit_msg: \"Patvirtinti Žinutę\",\n      version_history: \"Versijų Istorija\",\n      version_history_for: \"Versijos istorija: \",\n      select_changes: \"Kad pamatytum skirtumą, pažymėk du pakeitimus žemiau.\",\n      undo_prefix: \"Atgal\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Pirmyn\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Esamo žaidimo lygio peržiūra\",\n      result: \"Rezultatas\",\n      results: \"Rezultatai\",\n      description: \"Aprašymas\",\n      or: \"arba\",\n      subject: \"Tema\",\n      email: \"El. paštas\",\n      password: \"Slaptažodis\",\n      confirm_password: \"Patvirtink slaptažodį\",\n      message: \"Žinutė\",\n      code: \"Kodas\",\n      ladder: \"Rezultatų lentelė\",\n      when: \"Kai\",\n      opponent: \"Priešininkas\",\n      rank: \"Rangas\",\n      score: \"Taškai\",\n      win: \"Pergalė\",\n      loss: \"Pralaimėjimas\",\n      tie: \"Lygiosios\",\n      easy: \"Lengvas\",\n      medium: \"Vidutinis\",\n      hard: \"Sunkus\",\n      player: \"Žaidėjas\",\n      player_level: \"Lygis\",\n      warrior: \"Karys\",\n      ranger: \"Žvalgas\",\n      wizard: \"Burtininkas\",\n      first_name: \"Vardas\",\n      last_name: \"Pavardė\",\n      last_initial: \"Pavardės inicialas\",\n      username: \"Naudotojo vardas\",\n      contact_us: \"Susisiek su mumis\",\n      close_window: \"Uždaryti langą\",\n      learn_more: \"Sužinok daugiau\"\n    },\n    units: {\n      second: \"sekundė\",\n      seconds: \"sekundės\",\n      minute: \"minutė\",\n      minutes: \"minutės\",\n      hour: \"valanda\",\n      hours: \"hours\",\n      day: \"diena\",\n      days: \"dienos\",\n      week: \"savaitė\",\n      weeks: \"savaitės\",\n      month: \"mėnuo\",\n      months: \"mėnesiai\",\n      year: \"metai\",\n      years: \"metai\"\n    },\n    play_level: {\n      directions: \"Kryptys\",\n      edit_level: \"Redaguoti lygį\",\n      explore_codecombat: \"Tyrinėti CodeCombat\",\n      finished_hoc: \"Aš baigiau savo Kodo Valandą\",\n      get_certificate: \"Gauk savo sertifikatą!\",\n      level_complete: \"Lygis įveiktas\",\n      completed_level: \"Įveiktas Lygis:\",\n      course: \"Kursas:\",\n      done: \"Gerai\",\n      next_level: \"Kitas Lygis\",\n      next_game: \"Kitas žaidimas\",\n      languages: \"Kalbos\",\n      programming_language: \"Programavimo kalbos\",\n      show_menu: \"Parodyti žaidimo meniu\",\n      level: \"Lygis\",\n      skip: \"Praleisti\",\n      game_menu: \"Žaidimo meniu\",\n      restart: \"Paleisti iš naujo\",\n      goals: \"Pagalba\",\n      goal: \"Tikslas\",\n      running: \"Leidžiama...\",\n      success: \"Sėkmingai!\",\n      incomplete: \"Neužbaigta\",\n      timed_out: \"Laikas baigėsi\",\n      failing: \"Nesėkmingai\",\n      reload: \"Atstatyti\",\n      reload_title: \"Atstatyti visą kodą?\",\n      reload_really: \"Ar tikrai norite atsukti visą lygį į pradžią?\",\n      reload_confirm: \"Atstatyti viską\",\n      test_level: \"Testuoti lygį\",\n      victory: \"Pergalė\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" baigta\",\n      victory_sign_up: \"Užsiregistruokite, kad išsaugotumėte pažangą\",\n      victory_sign_up_poke: \"Norite išsaugoti savo kodą? Sukurkite paskyrą nemokamai!\",\n      victory_rate_the_level: \"Ar patiko šis lygis?\",\n      victory_return_to_ladder: \"Grįžti į razultatų lentelę\",\n      victory_saving_progress: \"Išsaugoma pažanga\",\n      victory_go_home: \"Į Pradžią\",\n      victory_review: \"Papasakok daugiau!\",\n      victory_review_placeholder: \"Ar Jums patiko lygis?\",\n      victory_hour_of_code_done: \"Ar pabaigėte?\",\n      victory_hour_of_code_done_yes: \"Taip, aš užbaigiau savo Kodo Valandą™!\",\n      victory_experience_gained: \"Gauta XP\",\n      victory_gems_gained: \"Gauta Deimantų\",\n      victory_new_item: \"Naujas Daiktas\",\n      victory_new_hero: \"Naujas herojus\",\n      victory_viking_code_school: \"Po paraliais, tu katik įveikei sunkujį lygį! Jei tu dar nesi programuotojas, tai bent turėtum būti. Tu katik paspartinai priėmimą į Vikingų Kodo Mokyklą, kur savo įgudžius gali perkelti į naują lygį ir, per 14 sąvaičių, gali tapti profesionaliu internetinių sistemų programuotoju.\",\n      victory_become_a_viking: \"Tapk Vikingu\",\n      victory_no_progress_for_teachers: \"Mokytojų progresas nesaugomas. Bet jūs galite susikurti sau mokinio paskyrą savo klasėje.\",\n      tome_cast_button_run: \"Paleisti\",\n      tome_cast_button_running: \"Leidžiama\",\n      tome_cast_button_ran: \"Paleista\",\n      tome_submit_button: \"Pateikti\",\n      tome_reload_method: \"Atstatyti originalų kodą šiam metodui\",\n      tome_available_spells: \"Prieinami Kerai\",\n      tome_your_skills: \"Jūsų Įgūdžiai\",\n      hints: \"Užuominos\",\n      hints_title: \"Užuomina {{number}}\",\n      code_saved: \"Kodas išsaugotas\",\n      skip_tutorial: \"Praleisti (ESC)\",\n      keyboard_shortcuts: \"Mygtukai\",\n      loading_start: \"Pradėti lygį\",\n      problem_alert_title: \"Taisyti kodą\",\n      time_current: \"Dabar:\",\n      time_total: \"Max:\",\n      time_goto: \"Eik į:\",\n      non_user_code_problem_title: \"Nepavyko pakrauti lygio\",\n      infinite_loop_title: \"Pastebėtas begalinis ciklas!\",\n      infinite_loop_description: \"Pradinis pasaulio sukūrimo kodas niekada nesustabdo vykdymo. Greičiausiai jis labai lėtas arba tai amžinas ciklas. Arba tai gali būti klaida. Gali dar kartą pabandyti vykdyti kodą arba grąžinti jį į pradinę būseną. Jei ti nepadės, pranešk mums.\",\n      check_dev_console: \"Tu taipogi gali atsidaryti kūrėjo konsolę, kad sužinotum kas negerai.\",\n      check_dev_console_link: \"(instrukcijos)\",\n      infinite_loop_try_again: \"Bandyk dar kartą\",\n      infinite_loop_reset_level: \"Pradėti lygi išnaujo\",\n      infinite_loop_comment_out: \"Užkomentuoti mano kodą\",\n      tip_toggle_play: \"Įjunkite ir išjunkite Pauzę spaudžiant Ctrl+P.\",\n      tip_scrub_shortcut: \"Naudokite Ctrl+[ ir Ctrl+] persukimui pirmyn ir atgal.\",\n      tip_guide_exists: \"Pasirinkite punktą Vedlys žaidimo meniu (puslapio viršuje), jame rasite naudingos informacijos.\",\n      tip_open_source: \"CodeCombat - 100% atviro kodo!\",\n      tip_tell_friends: \"Jums patinka CodeCombat? Papasakokite savo draugams!\",\n      tip_beta_launch: \"CodeCombat Beta versija startavo 2013 m. spalio mėnesį.\",\n      tip_think_solution: \"Galvok ne apie problemą, o apie sprendimą.\",\n      tip_theory_practice: \"Teoriškai nėra skirtuma tarp teorijos ir praktikos. Praktiškai - yra. - Yogi Berra\",\n      tip_error_free: \"Yra du būdai parašyti programą be klaidų; tik trečiasis suveikia. - Alan Perlis\",\n      tip_debugging_program: \"Jei derinimas yra procesas klaidoms šalinti, tai programavimas turėtų būti procesas klaidoms padaryti. - Edsger W. Dijkstra\",\n      tip_forums: \"Aplankykite forumą ir parašykite mums Jūsų nuomonę!\",\n      tip_baby_coders: \"Ateityje ir kūdikiai bus Arkimagais.\",\n      tip_morale_improves: \"Krovimas tęsis, kol moralė pagerės.\",\n      tip_all_species: \"Mes tikime lygiomis galimybėmis visoms rūšims į programavimą.\",\n      tip_reticulating: \"Splanų padengimas tinklu.\",\n      tip_harry: \"Tu esi Burtininkas, \",\n      tip_great_responsibility: \"Su puikiu programavimo įgudžiu ateina ir didelė atsakomybė.\",\n      tip_munchkin: \"Jei nevalgysi daržovių, baubas tavęs ateis, kol miegosi.\",\n      tip_binary: \"Pasaulyje yra tik 10  tipų žmonės: tie kurie supranta dvejetainius skaičius ir tie kurie ne.\",\n      tip_commitment_yoda: \"Programuotojas turi turėti giliausią atsidarimą, puikų protą. ~ Yoda\",\n      tip_no_try: \"Daryk. Arba ne. Jokių 'pabandysiu'. - Yoda\",\n      tip_patience: \"Kantrybės turėti turi, jaunasis Padavane. - Yoda\",\n      tip_documented_bug: \"Dokumentuota klaida nėra klaida; tai programos ypatybė.\",\n      tip_impossible: \"Tai visuomet atrodo neįmanoma tol, kol tai nėra padaryta. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Kalbėjimas yra pigus. Parodyk man kodą. - Linus Torvalds\",\n      tip_first_language: \"Labiausiai pražūtingas dalykas, kurį gali išmokti yra tavo pirmoji programavimo kalba. - Alan Kay\",\n      tip_hardware_problem: \"K: Kiek programuotojų reikia tam, kad įsuktų lemputę?  A: Nei vieno, tai 'geležies' problema.\",\n      tip_google: \"Turi problemą kurios negali išspręsti? Pagooglink!\",\n      tip_open_source_contribute: \"Gali padėti tobulinti CodeCombat!\",\n      tip_free_your_mind: \"Turi paleisti visą tai, Neo. Baimę, abejones ir netikėjimą. Išlaisvink savo mintis. - Morpheus\"\n    },\n    play_game_dev_level: {\n      created_by: \"Kūrėjas: {{name}}\",\n      restart: \"Paleisti lygį iš naujo\",\n      play: \"Žaisti lygį\",\n      play_more_codecombat: \"Žaisk daugiau CodeCombat\",\n      default_student_instructions: \"Paspausk pele herojaus valdymui ir laimėk žaidimą!\"\n    },\n    game_menu: {\n      inventory_tab: \"Inventorius\",\n      save_load_tab: \"Įrašyti / Atkurti\",\n      options_tab: \"Pasirinkimai\",\n      guide_tab: \"Pagalba\",\n      guide_video_tutorial: \"Video vadovėlis\",\n      guide_tips: \"Patarimai\",\n      multiplayer_tab: \"Žaidimas keliese\",\n      auth_tab: \"Registruotis\",\n      inventory_caption: \"Parenk savo herojų\",\n      choose_hero_caption: \"Pasirink herijų, kalbo\",\n      options_caption: \"Konfigūruoti nustatymus\",\n      guide_caption: \"Dokumentai ir patarimai\",\n      multiplayer_caption: \"Žaisk su draugais!\",\n      auth_caption: \"Išsaugok savo pažangą.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Peržiūrėti rezultatus\",\n      scores: \"Taškai\",\n      top_players: \"Geriausi žaidėjai pagal\",\n      day: \"Šiandien\",\n      week: \"Savaitė\",\n      all: \"Visi laikotarpiai\",\n      time: \"Laikas\",\n      damage_taken: \"Gauta žalos\",\n      damage_dealt: \"Padaryta žalos\",\n      difficulty: \"Sudėtingumas\",\n      gold_collected: \"Surinkta Aukso\"\n    },\n    inventory: {\n      equipped_item: \"Naudojama\",\n      required_purchase_title: \"Reikalaujama\",\n      available_item: \"Prieinama\",\n      restricted_title: \"Uždrausta\",\n      should_equip: \"(double-click kad naudotum)\",\n      equipped: \"(naudojama)\",\n      locked: \"(užrakinta)\",\n      restricted: \"(uždrausta šiame lygyje)\",\n      equip: \"Naudoti\",\n      unequip: \"Nenaudoti\"\n    },\n    buy_gems: {\n      few_gems: \"Sauja deimantų\",\n      pile_gems: \"Krūvelė deimantų\",\n      chest_gems: \"Skrynia deimantų\",\n      purchasing: \"Perkama...\",\n      declined: \"Jūsų kortelė atmesta\",\n      retrying: \"Serverio klaida, kartojame.\",\n      prompt_title: \"Deimantų nepakanka\",\n      prompt_body: \"Ar norite gauti daugiau?\",\n      prompt_button: \"Į Parduotuvę\",\n      recovered: \"Atstatyta deimantų pirkimo operacija. Prašome pakraukite puslapį iš naujo.\",\n      price: \"x{{gems}} / mėn\"\n    },\n    subscribe: {\n      subscribe_modal_title: \"CodeCombat Premium\",\n      comparison_blurb: \"Pagerink savo įgudžius su CodeCombat prenumerata!\",\n      must_be_logged: \"Turi pirmiau prisijungti. Susikurk paskyrą arba prisijunk per meniu, esančiu viršuje.\",\n      subscribe_title: \"Prenumerata\",\n      unsubscribe: \"Nebepremenuoruoti\",\n      confirm_unsubscribe: \"patvirtinti nebeprenumeravimą\",\n      never_mind: \"Nekreipk dėmesio, aš vis dar tave myliu.\"\n    },\n    choose_hero: {\n      choose_hero: \"Pasirink Herojų\",\n      programming_language: \"Programavimo kalba\",\n      programming_language_description: \"Kokią programavimo kalbą norėtum naudoti?\",\n      \"default\": \"Numatytasis\",\n      experimental: \"Eksperimentinis\",\n      python_blurb: \"Paprasta bet galinga. Puikiai tinka ir naujokams ir ekspertams.\",\n      javascript_blurb: \"WWW tinklo kalba. (Nepainiokite su Java.)\",\n      coffeescript_blurb: \"JavaScript su malonesne sintakse.\",\n      lua_blurb: \"Žaidimų skriptų kalba.\",\n      java_blurb: \"(Tik abonementams) Android ir verslui.\",\n      status: \"Būsena\",\n      weapons: \"Ginklai\",\n      weapons_warrior: \"Kardai - artimas atstumas, be Kerų\",\n      weapons_ranger: \"Arbaletai, Šautuvai - tolimas atstumas, be Kerų\",\n      weapons_wizard: \"stebuklų lazdelės ir skeptrai - tolimas atstumas, magija\",\n      attack: \"Žala\",\n      health: \"Sveikata\",\n      speed: \"Greitis\",\n      regeneration: \"Atsistatymas\",\n      range: \"Nuotolis\",\n      blocks: \"Blokuoja\",\n      backstab: \"Slaptasis smūgis\",\n      skills: \"Įgūdžiai\",\n      attack_1: \"Padaro\",\n      attack_2: \"įvardinto\",\n      attack_3: \"ginklo žalos.\",\n      health_1: \"Gauna\",\n      health_2: \"įvardintų\",\n      health_3: \"šarvų sveikatos taškų.\",\n      speed_1: \"Juda\",\n      speed_2: \"metrų per sekundę greičiu.\",\n      available_for_purchase: \"Galima pirkti\",\n      level_to_unlock: \"Atrakinama lygyje:\",\n      restricted_to_certain_heroes: \"Tik kai kurie herojai gali žaisti šiame lygyje.\"\n    },\n    save_load: {\n      granularity_saved_games: \"Išsaugotas\",\n      granularity_change_history: \"Istorija\"\n    },\n    options: {\n      general_options: \"Bendri nustatymai\",\n      volume_label: \"Garsumas\",\n      music_label: \"Muzika\",\n      music_description: \"Įj./išj. fono muziką.\",\n      editor_config_title: \"Redaktoriaus konfigūravimas\",\n      editor_config_livecompletion_label: \"Automatinis žodžių užpildymas \",\n      editor_config_livecompletion_description: \"Rodyti automatinio užpildymo siūlymus rašymo metu.\",\n      editor_config_invisibles_label: \"Rodyti nematomus simbolius\",\n      editor_config_invisibles_description: \"Rodyti nematomus simbolius, tokius kaip tarpai ar Tab.\",\n      editor_config_indentguides_label: \"Rodyti poslinkio rekomendacijas\",\n      editor_config_indentguides_description: \"Rodomos vertikalios linijos patogesniam poslinkio matymui.\",\n      editor_config_behaviors_label: \"Išmanusis redagavimas\",\n      editor_config_behaviors_description: \"Automatiškai uždaro skliaustus, figurinius skliaustus ir kabutes.\"\n    },\n    teachers: {\n      licenses_needed: \"Reikalingos licencijos\"\n    },\n    versions: {\n      save_version_title: \"Išsaugoti Naują Versiją\",\n      new_major_version: \"Nauja Pagrindinė Versija\",\n      submitting_patch: \"Pateikiamas Pataisymas...\",\n      cla_prefix: \"Kad išsaugoti pakeitimus, turite sutikti su mūsų\",\n      cla_url: \"PLS\",\n      cla_suffix: \".\",\n      cla_agree: \"AŠ SUTINKU\",\n      owner_approve: \"Sąvininkas pirmiausiai turi patvirtinti, kad jūsų pakeitimai būtų matomi.\"\n    },\n    contact: {\n      contact_us: \"Susisiekti su CodeCombat\",\n      welcome: \"Maloniai jus išklausysime! Naudokitės šia forma, kad išsiųstumėte mus elektroninį laišką.\",\n      forum_prefix: \"Norint pasisakyti viešai, naudokitės \",\n      forum_page: \"mūsų forumu.\",\n      forum_suffix: \" instead.\",\n      faq_prefix: \"Taip pat turime vietą\",\n      faq: \"DUK\",\n      subscribe_prefix: \"Jei reikalinga pagalbos įveikiant lygį, prašome\",\n      subscribe: \"įsigyti CodeCombat abonementą\",\n      subscribe_suffix: \"ir męs mielai jums padėsime.\",\n      subscriber_support: \"Kadangi turite CodeCombat abonementą, jūsų elektroniniai laiškai mums tampa įpatingai svarbūs.\",\n      screenshot_included: \"Ekrano kopija pridėta.\",\n      where_reply: \"Kur mums atsakyti?\",\n      send: \"Siųsti užklausą\"\n    },\n    account_settings: {\n      title: \"Paskyros Nustatymai\",\n      not_logged_in: \"Norint pakeisti paskyros nustatymus turite prisijungti arba susikurti paskyrą.\",\n      me_tab: \"Aš\",\n      picture_tab: \"Nuotrauka\",\n      delete_account_tab: \"Pašalinti Mano Paskyrą\",\n      wrong_email: \"Neteisingas el. pašto adresas\",\n      wrong_password: \"Neteisingas slaptažodis\",\n      delete_this_account: \"Tuoj pat pašalinti šią paskyrą\",\n      reset_progress_tab: \"Atstatyti Viską Išnaujo\",\n      reset_your_progress: \"Viską išvalyti ir pradėti išnaujo\",\n      god_mode: \"God Mode(Dievo Režimas)\",\n      emails_tab: \"Pranešimai\",\n      admin: \"Administratorius\",\n      manage_subscription: \"Abonemento valdymas, spauskite čia.\",\n      new_password: \"Naujas slaptažodis\",\n      new_password_verify: \"Patvirtinimas\",\n      type_in_email: \"Paskyros pašalinimo patvirtinimui, įveskite el. pašto adresą.\",\n      type_in_email_progress: \"Norint pradėti išnaujo įveskite el. pašto adresą.\",\n      type_in_password: \"Taip pat, įveskite slaptažodį.\",\n      email_subscriptions: \"El. pašto abonementai\",\n      email_subscriptions_none: \"Nėra el. pašto abonementų.\",\n      email_announcements: \"Skelbimai\",\n      email_announcements_description: \"Gauk svarbiausią informaciją apie naujienas ir projekto vystymo eigą tiesiai iš CodeCombat.\",\n      email_notifications: \"Pranešimai\",\n      email_notifications_summary: \"Automatinių pranešimų, susijusių su CodeCombat veikla, valdymas.\",\n      email_any_notes: \"Visi pranešimai\",\n      email_any_notes_description: \"Nuimkite varnelę, kad nebegautumėte jokių pranešimų.\",\n      email_news: \"Naujienos\",\n      email_recruit_notes: \"Darbo Pasiūlymai\",\n      email_recruit_notes_description: \"Jei viską atliksite tikrai gerai, mes galime pasiūlyti (geresnį) darbą.\",\n      contributor_emails: \"Pranešimai Pagalbininkų Kategorijai\",\n      contribute_prefix: \"Mes ieškome norinčių prisijungti prie mūsų grupės! Ieškantiems daugiau informacijos siūlome apsilankykti \",\n      contribute_page: \"pagalbininkų puslapyje.\",\n      contribute_suffix: \" to find out more.\",\n      email_toggle: \"Perjungti visus\",\n      error_saving: \"Klaida Išsaugant\",\n      saved: \"Pakeitimai Išsaugoti\",\n      password_mismatch: \"Slaptažodžiai nesutampa.\",\n      password_repeat: \"Pakartokite slaptažodį.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Mygtukai\",\n      space: \"Tarpas\",\n      enter: \"Enter\",\n      press_enter: \"paspauskite enter\",\n      escape: \"Escape\",\n      shift: \"Shift\",\n      run_code: \"Paleisti programos kodą.\",\n      run_real_time: \"Paleisti realiuoju laiku.\",\n      continue_script: \"Tęsti dabartinį skriptą.\",\n      skip_scripts: \"Peršokti per visus peršokamus skriptus.\",\n      toggle_playback: \"Pauzė/Paleisti.\",\n      scrub_playback: \"Slinkti pirmyn ir atgal per laiką.\",\n      single_scrub_playback: \"Slinkti pirmyn ir atgal per laiką po vieną kadrą.\",\n      scrub_execution: \"Slinkti per esamą rašybos tikrinimo vykdymą.\",\n      toggle_debug: \"Įj./išj. klaidų aptikimo (debug) displejų.\",\n      toggle_grid: \"Įjungti tinklelį.\",\n      toggle_pathfinding: \"Perjungti kelio radimo sluoksnį.\",\n      beautify: \"Tvarkyti Jūsų kodą standartizuojant jo formatą.\",\n      maximize_editor: \"Išdidinti/sumažinti kodo redaktorių.\"\n    },\n    community: {\n      main_title: \"Bendruomenė CodeCombat\"\n    },\n    clans: {\n      clan: \"Klanas\",\n      clans: \"Klanai\",\n      new_name: \"Klano pavadinimas\",\n      new_description: \"Klano aprašymas\",\n      make_private: \"Privatus klanas\",\n      subs_only: \"tik abonentams\",\n      create_clan: \"Sukurti Klaną\",\n      private_preview: \"Peržiūra\",\n      private_clans: \"Privatūs Klanai\",\n      public_clans: \"Vieši Klanai\",\n      my_clans: \"Mano Klanai\",\n      clan_name: \"Klano Pavadinimas\",\n      name: \"Vardas\",\n      chieftain: \"Vadas\",\n      edit_clan_name: \"Keisti Klano Pavadinimą\",\n      edit_clan_description: \"Keisti Klano Aprašymą\",\n      edit_name: \"keisti pavadinimą\",\n      edit_description: \"keisti aprašymą\",\n      \"private\": \"(privatus)\",\n      summary: \"Suvestinė\",\n      average_level: \"Lygių vidurkis\",\n      average_achievements: \"Pasiekimų vidurkis\",\n      delete_clan: \"Pašalinti klaną\",\n      leave_clan: \"Išeiti iš klano\",\n      join_clan: \"Prisijungti prie klano\",\n      invite_1: \"Pakvietimas:\",\n      invite_2: \"*Kvieskite žaidėjus į klaną nusiųsdami šią nuorodą.\",\n      members: \"Nariai\",\n      progress: \"Pažanga\",\n      not_started_1: \"nepradėta\",\n      started_1: \"pradėta\",\n      complete_1: \"pabaigta\",\n      exp_levels: \"Išplėsti lygius\",\n      rem_hero: \"Pašalinti Herojų\",\n      status: \"Būsena\",\n      complete_2: \"Pabaigta\",\n      started_2: \"Pradėta\",\n      not_started_2: \"Nepradėta\",\n      view_solution: \"Peržiūrėti sprendimą.\",\n      view_attempt: \"Peržiūrėti bandymą.\",\n      latest_achievement: \"Naujausias Pasiekimas\",\n      playtime: \"Viso žaista\",\n      last_played: \"Paskutinį kartą žaista\",\n      leagues_explanation: \"Pasirink lygą ir varžykis su kitų klanų nariais.\",\n      track_concepts1: \"Sekite \",\n      track_concepts2a: \"kitų mokinių idėjas\",\n      track_concepts2b: \"kitų narių idėjas\",\n      track_concepts3a: \"Stebėkite kitų mokinių įveiktus lygius\",\n      track_concepts3b: \"Stebėkite kitų narių įveiktus lygius\",\n      track_concepts4a: \"Peržiūrėkite mokinių\",\n      track_concepts4b: \"Peržiūrėkite narių\",\n      track_concepts5: \"sprendimus\",\n      track_concepts6a: \"Išrikiuokite mokinius pagal vardą arba pažangą\",\n      track_concepts6b: \"Išrikiuokite narius pagal vardą arba pažangą\",\n      track_concepts7: \"Norint tapti nariu\",\n      track_concepts8: \"reikalingas kvietimas\",\n      private_require_sub: \"Norint sukurti privatų ar prisijungti prie privataus klano, reikalingas abonementas.\"\n    },\n    classes: {\n      archmage_title: \"Arkimagas\",\n      archmage_title_description: \"(Koderis)\",\n      archmage_summary: \"Jei tu esi programuotojas ir norėtum programuoti mokomuosius žiadimus, tapk Arkimagu ir padėk mums kurti CodeCombat!\",\n      artisan_title: \"Meistras\",\n      artisan_title_description: \"(Lygių architektas)\",\n      artisan_summary: \"Kurk ir dalinkis lygiais su savo draugais. Tapk Meistru ir mokykis meno mokyti kitus programuoti.\",\n      adventurer_title: \"Nuotykių ieškotojas\",\n      adventurer_title_description: \"(Lygių bandytojas)\",\n      adventurer_summary: \"Gauk naujausius lygius nemokamai. Net savaitę anksčiau ir padėk mums ištaisyti klaidas prieš oficialų pristatymą.\",\n      scribe_title: \"Raštininkas\",\n      scribe_title_description: \"(Straipsnių redaktorius)\",\n      scribe_summary: \"Geram kodui reikia geros dokumentacijos. Kurk, redaguok ir tobulink dokumentus, kuriuos skaito milijonai žaidėjų visame pasaulyje.\",\n      diplomat_title: \"Diplomatas\",\n      diplomat_title_description: \"(Vertėjas)\",\n      diplomat_summary: \"Diplomatų dėka CodeCombat yra verčiamas į daugiau kaip 45 kalbas. Tu gali mums padėti tapdamas vertėju.\",\n      ambassador_title: \"Ambasadorius\",\n      ambassador_title_description: \"(Palaikymas)\",\n      ambassador_summary: \"Nuramink mūsų forumo naudotojus ir suteik pagalbą tiems kas turi klausimų. Mūsų Ambasadoriai atstovauja CodeCombat visam pasauliui.\"\n    },\n    article: {\n      edit_btn_preview: \"Peržiūra\",\n      edit_article_title: \"Redaguoti straipsnį\"\n    },\n    polls: {\n      priority: \"Prioritetas\"\n    },\n    concepts: {\n      \"arguments\": \"Argumentai (Arguments)\",\n      arithmetic: \"Aritmetika (Arithmetic)\",\n      arrays: \"Masyvai (Arrays)\",\n      basic_syntax: \"Pagrindinė sintaksė (Basic Syntax)\",\n      classes: \"Klasės (Classes)\",\n      for_loops: \"Ciklai 'For' (For Loops)\",\n      functions: \"Funkcijos (Functions)\",\n      graphics: \"Grafika (Graphics)\",\n      math_operations: \"Matematiniai operatoriai (Math Operations)\",\n      parameters: \"Parametrai (Parameters)\",\n      recursion: \"Rekursija (Recursion)\",\n      strings: \"Eilutės (Strings)\",\n      variables: \"Kintamieji (Variables)\",\n      vectors: \"Vektoriai (Vectors)\",\n      algorithms: \"Algoritmai (Algorithms)\",\n      boolean_logic: \"Bulio logika (Boolean Logic)\",\n      input_handling: \"Įvesties apdirbimas (Input Handling)\",\n      while_loops: \"Ciklai (Loops)\"\n    },\n    calendar: {\n      year: \"Metai\",\n      day: \"Diena\",\n      month: \"Mėnuo\",\n      january: \"Sausis\",\n      february: \"Vasaris\",\n      march: \"Kovas\",\n      april: \"Balandis\",\n      may: \"Gegužė\",\n      june: \"Birželis\",\n      july: \"Liepa\",\n      august: \"Rugpjūtis\",\n      september: \"Rugsėjis\",\n      october: \"Spalis\",\n      november: \"Lapkritis\",\n      december: \"Gruodis\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1063\n");

/***/ })

});