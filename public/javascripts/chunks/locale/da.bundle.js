/*! hash:345dfe6c0e434e9c7378, chunkhash:c4588b22f3a947544194, name:locale/da, filebase:da.bundle.js, query:, file:javascripts/chunks/locale/da.bundle.js */
webpackJsonp([70],{

/***/ 1038:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"dansk\",\n  englishDescription: \"Danish\",\n  translation: {\n    new_home: {\n      slogan: \"Det mest engagerende spil for at lære programmering.\",\n      classroom_edition: \"Klasseværelse Udgave:\",\n      learn_to_code: \"Lær at kode:\",\n      play_now: \"Spil Nu\",\n      im_a_teacher: \"Jeg er lærer\",\n      im_a_student: \"Jeg er elev\",\n      learn_more: \"Lær mere\",\n      classroom_in_a_box: \"En klasseværelsespakkeløsning til at undervise datalogi.\",\n      codecombat_is: \"CodeCombat er en platform <strong> for studerende </strong> for at lære datalogi mens du nyder et rigtigt spil.\",\n      our_courses: \"Vores kurser er spiltestet til at udmærke sig i et klasseværelsesmiljø, selv af lærere med lille eller ingen forudgående programmeringserfaring.\",\n      top_screenshots_hint: \"Elever skriver kode og ser deres ændringer i realtid\",\n      designed_with: \"Designet med lærere i tankerne\",\n      real_code: \"Rigtigt, indtastet kode\",\n      from_the_first_level: \"fra den første bane\",\n      getting_students: \"At få eleven til indtastet kode så hurtigt som muligt er afgørende for at lære programmeringssyntaks og ordentlig struktur.\",\n      educator_resources: \"Lærerressourcer\",\n      course_guides: \"og kursusguider\",\n      teaching_computer_science: \"At undervise datalogi kræver ikke en kostelig uddannelse, fordi vi leverer værktøjer til at understøtte lærere med alle mulige baggrunde.\",\n      accessible_to: \"Tilgængelig til\",\n      everyone: \"alle\",\n      democratizing: \"At demokratisere processen med at lære programmering er kernen i vores filosofi. Alle bør være i stand til at lære at kode.\",\n      forgot_learning: \"Jeg tror faktisk, at de glemte, at de faktisk var ved at lære noget.\",\n      wanted_to_do: \" Programmering er noget, jeg har altid ønsket mig at kunne, og jeg troede aldrig, jeg ville være i stand til at lære det i skolen.\",\n      why_games: \"Hvorfor er læring gennem spil vigtig?\",\n      games_reward: \"Spil belønner den produktive kamp.\",\n      encourage: \"Gaming er et medium, der tilskynder interaktion, opdagelse, og trial-and-error. Et godt spil udfordrer spilleren til at mestre færdigheder over tid, hvilket er den samme kritiske proces elever går igennem når de lærer.\",\n      excel: \"Spil udmærker sig ved at være givende\",\n      struggle: \"produktive kamp\",\n      kind_of_struggle: \"den form for kamp, ​​der resulterer i at lære, det er engagerende og\",\n      motivating: \"motiverende\",\n      not_tedious: \"ikke kedelig.\",\n      gaming_is_good: \"Undersøgelser tyder på at spil er godt for børns hjerner. (det er sandt!)\",\n      game_based: \"Når spilbaserede læringssystemer er\",\n      compared: \"sammenlignet\",\n      conventional: \"med konventionelle vurderingsmetoder, så er forskellen er klar: Spil er bedre til at hjælpe elever med at erhverve sig viden, koncentrere sig og\",\n      perform_at_higher_level: \"nå et højere præstationsniveau\",\n      feedback: \"Spil giver også realtids-feedback, der giver eleverne mulighed for at tilpasse deres løsningsstrategi og forstå begreber mere helhedsorienteret, i stedet for at være begrænset til blot “rigtige” eller “forkerte” svar.\",\n      real_game: \"Et rigtigt spil, spillet med rigtig programmering.\",\n      great_game: \"Et godt spil er mere end blot badges og achievements - det handler om en spillers rejse, veldesignede gåder, og evnen til at tackle udfordringer med rammer og tillid.\",\n      agency: \"CodeCombat er et spil, der giver spillerne rammerne og en tillid til vores robuste kodefortolkermotor, som hjælper begyndere og avancerede elever med både skrive ordentligt og korrekt kode.\",\n      request_demo_title: \"Få dine elever i gang i dag!\",\n      request_demo_subtitle: \"Anmod om en demo og få dine elever i gang på mindre end en time.\",\n      get_started_title: \"Opsæt din klasse i dag\",\n      get_started_subtitle: \"Opsæt en klasse, tilføj dine elever, og overvåg deres fremgang når de lærer datalogi.\",\n      request_demo: \"Anmod demo\",\n      setup_a_class: \"Opsæt klasse\",\n      have_an_account: \"Har du allerede en konto?\",\n      logged_in_as: \"Du er i øjeblikket logget ind som\",\n      computer_science: \"Datalogikurser for alle aldre\",\n      ffa: \"Gratis for alle elever\",\n      coming_soon: \"Kommer snart!\",\n      courses_available_in: \"Kurser er tilgængelige i JavaScript, Python og Java (kommer snart!)\",\n      boast: \"Praler med gåder, der er komplekse nok til at fascinere både gamere og kodere.\",\n      winning: \"En overbevisende kombination af rollespil og programmeringsopgaver, der formår at gøre børnevenlig uddannelse lovligt fornøjelig.\",\n      run_class: \"Alt hvad du behøver for at køre en datalogiklasse på din skole i dag - uden at kræve en datalogibaggrund.\",\n      goto_classes: \"Gå til mine Klasser\",\n      view_profile: \"Vis Min Profil\",\n      want_coco: \"Ønsker du CodeCombat på din skole?\"\n    },\n    nav: {\n      play: \"Spil\",\n      community: \"Fællesskab\",\n      courses: \"Kurser\",\n      blog: \"Blog\",\n      forum: \"Forum\",\n      account: \"Konto\",\n      profile: \"Profil\",\n      home: \"Hjem\",\n      contribute: \"Bidrag\",\n      legal: \"Betingelser\",\n      about: \"Om\",\n      contact: \"Kontakt\",\n      twitter_follow: \"Følg\",\n      careers: \"Karrierer\",\n      facebook: \"Facebook\",\n      twitter: \"Twitter\",\n      create_a_class: \"Opret klasse\",\n      other: \"Andet\",\n      learn_to_code: \"Lær at kode!\",\n      toggle_nav: \"Toggle navigation\",\n      schools: \"Skoler\",\n      get_involved: \"Bliv involveret\",\n      open_source: \"Open source (GitHub)\",\n      support: \"Support\",\n      faqs: \"FAQs\",\n      help_pref: \"Brug for hjælp? E-mail\",\n      help_suff: \"så vi kommer i kontakt!\"\n    },\n    modal: {\n      close: \"Luk\",\n      okay: \"Okay\"\n    },\n    not_found: {\n      page_not_found: \"Siden blev ikke fundet\"\n    },\n    diplomat_suggestion: {\n      title: \"Hjælp med at oversætte CodeCombat!\",\n      sub_heading: \"Vi har brug for dine sprogfærdigheder.\",\n      pitch_body: \"Vi udvikler CodeCombat på engelsk, men vi har allerede spillere over hele verden. Mange af dem vil gerne spille på dansk, men taler ikke engelsk, så hvis du kan begge, så overvej gerne at melde dig som Diplomat og hjælp med at oversætte både CodeCombat hjemmesiden og alle niveauer til dansk.\",\n      missing_translations: \"Indtil vi har alting oversat til dansk, vil du se engelsk, når dansk ikke er tilgængeligt.\",\n      learn_more: \"Lær mere om at være Diplomat\",\n      subscribe_as_diplomat: \"Meld dig som Diplomat\"\n    },\n    play: {\n      play_as: \"Spil Som \",\n      compete: \"Konkurrér!\",\n      spectate: \"Observér\",\n      players: \"spillere\",\n      hours_played: \"timer spillet\",\n      items: \"Udstyr\",\n      unlock: \"Lås op\",\n      confirm: \"Bekræft\",\n      owned: \"Ejer\",\n      locked: \"Låst\",\n      available: \"Tilgængelig\",\n      skills_granted: \"Opnåede evner\",\n      heroes: \"Helte\",\n      achievements: \"Bedrifter\",\n      settings: \"Indstillinger\",\n      poll: \"Meningsmåling\",\n      next: \"Næste\",\n      change_hero: \"Skift helt\",\n      buy_gems: \"Køb diamanter\",\n      anonymous: \"Anonym spiller\",\n      level_difficulty: \"Sværhedsgrad: \",\n      awaiting_levels_adventurer_prefix: \"Vi frigiver nye baner hver uge.\",\n      awaiting_levels_adventurer: \"Skriv dig op som eventyrer\",\n      awaiting_levels_adventurer_suffix: \"for at blive den første til at spille nye baner.\",\n      adjust_volume: \"Indstil lydstyrke\",\n      campaign_multiplayer: \"Multiplayer Arenaer\",\n      campaign_multiplayer_description: \"... hvor du koder ansigt-til-ansigt imod andre spillere.\"\n    },\n    share_progress_modal: {\n      blurb: \"Du gør godt fremskridt! Fortæl din forælder hvor meget du har lært med CodeCombat.\",\n      email_invalid: \"Ugyldig emailaddresse.\",\n      form_blurb: \"Indtast din forælders email nedenfor, så viser vi dem det!\",\n      form_label: \"Email\",\n      placeholder: \"emailaddresse\",\n      title: \"Fremragende arbejde, Lærling\"\n    },\n    login: {\n      sign_up: \"Opret ny konto\",\n      log_in: \"Log Ind\",\n      logging_in: \"Logger ind\",\n      log_out: \"Log Ud\",\n      forgot_password: \"Glemt dit kodeord?\",\n      finishing: \"Færdiggører\",\n      sign_in_with_facebook: \"Log ind med Facebook\",\n      sign_in_with_gplus: \"Log ind med G+\",\n      signup_switch: \"Vil du oprette en konto?\"\n    },\n    signup: {\n      email_announcements: \"Modtag nyheder på email\",\n      creating: \"Opretter Konto...\",\n      sign_up: \"Registrér\",\n      log_in: \"Log ind med password\",\n      required: \"Du skal logge ind før du kan gå den vej.\",\n      login_switch: \"Har du allerede en konto?\",\n      optional: \"valgfrit\",\n      connected_gplus_header: \"Du har registreret dig med Google+!\",\n      connected_gplus_p: \"Afslut registreringen, så du kan logge ind med din Google+ konto.\",\n      connected_facebook_header: \"Du har registreret dig med  Facebook!\",\n      connected_facebook_p: \"Afslut registreringen, så du kan logge ind med din Facebook-konto.\",\n      hey_students: \"Elever, indtast klassekoden udleveret af din lærer.\"\n    },\n    recover: {\n      recover_account_title: \"genskab konto\",\n      send_password: \"Send kodeord\",\n      recovery_sent: \"Gendannelsesemail sendt.\"\n    },\n    items: {\n      primary: \"Primære\",\n      secondary: \"Sekundære\",\n      armor: \"Rustning\",\n      accessories: \"Ekstraudstyr\",\n      misc: \"Diverse\",\n      books: \"Bøger\"\n    },\n    common: {\n      back: \"Gå tilbage\",\n      \"continue\": \"Fortsæt\",\n      loading: \"Henter...\",\n      saving: \"Gemmer...\",\n      sending: \"Sender...\",\n      send: \"Send\",\n      cancel: \"Annuller\",\n      save: \"Gem\",\n      publish: \"Offentliggør\",\n      create: \"Skab\",\n      fork: \"Forgren\",\n      play: \"Spil\",\n      retry: \"Prøv igen\",\n      actions: \"Handlinger\",\n      info: \"Info\",\n      help: \"Hjælp\",\n      watch: \"Hold øje\",\n      unwatch: \"Stop med at holde øje\",\n      submit_patch: \"Indsend opdatering\",\n      submit_changes: \"Indsend ændringer\",\n      save_changes: \"Gem ændringer\"\n    },\n    general: {\n      and: \"og\",\n      name: \"navn\",\n      date: \"Dato\",\n      body: \"krop\",\n      version: \"version\",\n      pending: \"Afventer\",\n      accepted: \"Accepteret\",\n      rejected: \"Afvist\",\n      withdrawn: \"Trukket tilbage\",\n      accept: \"Accepter\",\n      reject: \"Afvis\",\n      withdraw: \"Tilbagetræk\",\n      submitter: \"Indsender\",\n      submitted: \"Indsendt\",\n      commit_msg: \"ændringsnotat\",\n      version_history: \"Versionshistorie\",\n      version_history_for: \"versionhistorie for: \",\n      select_changes: \"Vælg to ændringer nedenfor for at se forskellen.\",\n      undo_prefix: \"Fortryd\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Gentag\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Afspil forhåndsvisning af nuværende bane\",\n      result: \"Resultat\",\n      results: \"resultater\",\n      description: \"beskrivelse\",\n      or: \"eller\",\n      subject: \"Emne\",\n      email: \"email\",\n      password: \"Kodeord\",\n      message: \"Besked\",\n      code: \"Kode\",\n      ladder: \"Rangstige\",\n      when: \"Når\",\n      opponent: \"Modstander\",\n      rank: \"Rang\",\n      score: \"Score\",\n      win: \"Sejr\",\n      loss: \"Tab\",\n      tie: \"Uafgjort\",\n      easy: \"Let\",\n      medium: \"Mellem\",\n      hard: \"Svær\",\n      player: \"Spiller\",\n      player_level: \"Niveau\",\n      warrior: \"Krigsherre\",\n      ranger: \"Bueskytte\",\n      wizard: \"Troldmand\"\n    },\n    units: {\n      second: \"sekund\",\n      seconds: \"sekunder\",\n      minute: \"minut\",\n      minutes: \"minutter\",\n      hour: \"time\",\n      hours: \"timer\",\n      day: \"dag\",\n      days: \"dage\",\n      week: \"uge\",\n      weeks: \"uger\",\n      month: \"måned\",\n      months: \"måneder\",\n      year: \"år\",\n      years: \"år\"\n    },\n    play_level: {\n      completed_level: \"Gennemførte Baner:\",\n      course: \"Kursus:\",\n      done: \"Færdig\",\n      next_level: \"Næste Bane:\",\n      next_game: \"Næste spil\",\n      show_menu: \"Vis spilmenu\",\n      home: \"Hjem\",\n      level: \"Bane\",\n      skip: \"Spring over\",\n      game_menu: \"Spilmenu\",\n      restart: \"Start forfra\",\n      goals: \"Mål\",\n      goal: \"Mål\",\n      running: \"Kører...\",\n      success: \"Success!\",\n      incomplete: \"Ufærdig\",\n      timed_out: \"Løb tør for tid\",\n      failing: \"Fejler\",\n      reload: \"Genindlæs\",\n      reload_title: \"Genindlæs alt kode?\",\n      reload_really: \"Er du sikker på at du ønsker at genindlæse denne bane helt fra begyndelsen?\",\n      reload_confirm: \"Genindlæs alt\",\n      victory: \"Sejr\",\n      victory_title_prefix: \"\",\n      victory_title_suffix: \" Færdig\",\n      victory_sign_up: \"Opret dig for at gemme din fremgang\",\n      victory_sign_up_poke: \"Ønsker du at gemme din kode? Opret en gratis konto!\",\n      victory_rate_the_level: \"Bedøm denne bane: \",\n      victory_return_to_ladder: \"Returner til rangstige\",\n      victory_saving_progress: \"Gemmer fremgang\",\n      victory_go_home: \"Gå hjem\",\n      victory_review: \"Fortæl os mere!\",\n      victory_review_placeholder: \"Hvordan var levelet?\",\n      victory_hour_of_code_done: \"Er du færdig?\",\n      victory_hour_of_code_done_yes: \"Ja, jeg er færdig med min Kodetime!\",\n      victory_experience_gained: \"XP tjent\",\n      victory_gems_gained: \"Diamanter tjent\",\n      victory_new_item: \"Nyt udstyr\",\n      victory_viking_code_school: \"For dælen det var en svær bane du lige slog! Hvis ikke du allerede er softwareudvikler, så burde du blive det. Du er lige kommet foran i køen til at blive accepteret hos Viking Code School, du kan tage dine evner til det næste niveau og blive en professionel webudvikler på 14 uger.\",\n      victory_become_a_viking: \"Bliv en Viking\",\n      tome_cast_button_run: \"Kør\",\n      tome_cast_button_running: \"Kører\",\n      tome_cast_button_ran: \"Kørt\",\n      tome_submit_button: \"Indsend\",\n      tome_reload_method: \"Genindlæs den originale kode til denne metode\",\n      tome_available_spells: \"Tilgængelige trylleformularer\",\n      tome_your_skills: \"Dine evner\",\n      code_saved: \"Kode gemt\",\n      skip_tutorial: \"Spring over (esc)\",\n      keyboard_shortcuts: \"Tastaturgenveje\",\n      loading_start: \"Start bane\",\n      problem_alert_title: \"Ret din kode\",\n      time_current: \"Nu:\",\n      time_total: \"Max:\",\n      time_goto: \"Gå til:\",\n      non_user_code_problem_title: \"Kan ikke indlæse banen\",\n      infinite_loop_title: \"Uendelig løkke detekteret\",\n      infinite_loop_description: \"Den indledende kode til at bygge verdenen blev aldrig færdig med at køre. Den er sandsynligvis enten meget langsom eller har en uendeligt løkke. Eller også er der en bug. Du kan enten prøve at køre denne kode igen eller nulstille koden til den oprindelige tilstand. Hvis ikke det virker må du meget gerne fortælle os det.\",\n      check_dev_console: \"Du kan også åbne udviklerkonsollen for at se hvad der kunne være galt.\",\n      check_dev_console_link: \"(vejledning)\",\n      infinite_loop_try_again: \"Prøv igen\",\n      infinite_loop_reset_level: \"Nulstil bane\",\n      infinite_loop_comment_out: \"Udkommenter min kode\",\n      tip_toggle_play: \"Skift mellem afspil/pause med Ctrl+P.\",\n      tip_scrub_shortcut: \"Brug Ctrl+[ og Ctrl+] til at spole tilbage og frem.\",\n      tip_guide_exists: \"Klik på guiden i spilmenuen (i toppen af siden) for brugbar info.\",\n      tip_open_source: \"CodeCombat er 100% open source!\",\n      tip_tell_friends: \"Kan du lide CodeCombat? Fortæl dine venner om os!\",\n      tip_beta_launch: \"CodeCombat søsatte sin beta i oktober, 2013.\",\n      tip_think_solution: \"Tænk på løsningen, ikke problemet.\",\n      tip_theory_practice: \"I teorien er der ingen forskel på teori og praksis. Men i praksis er der. - Yogi Bjørn\",\n      tip_error_free: \"Der findes to måder at skrive fejlfrie programmer; kun den tredje virker. - Alan Perlis\",\n      tip_debugging_program: \"Hvis debugging er at fjerne kodefejl, så må programmering være at proppe fejl ind i koden. - Edsger W. Dijkstra\",\n      tip_forums: \"Kig over i vores forum og fortæl os hvad du synes!\",\n      tip_baby_coders: \"I fremtiden vil selv babier være Ærketroldmænd.\",\n      tip_morale_improves: \"Indlæsning vil fortsætte indtil moralen forbedres.\",\n      tip_all_species: \"Vi tror på lige muligheder for at lære programmering for alle arter.\",\n      tip_reticulating: \"Krydset knogler.\",\n      tip_harry: \"Du' en troldmand, \",\n      tip_great_responsibility: \"Med store kodeevner kommer stort fejlfindingsansvnar.\",\n      tip_munchkin: \"Hvis du ikke spiser dine grøntsager, kommer der en Munchkin efter dig mens du sover.\",\n      tip_binary: \"Der findes kun 10 slags mennesker i verdenen: Dem som forstår binært, og dem som ikke gør.\",\n      tip_commitment_yoda: \"En programmør skal have det dybeste engagement, det alvorligste sind. ~ Yoda\",\n      tip_no_try: \"Gør. Eller ej. Forsøg intet. - Yoda\",\n      tip_patience: \"Tålmodighed du skal have, unge Padawan. - Yoda\",\n      tip_documented_bug: \"En dokumenteret bug er ikke en fejl; det er en feature.\",\n      tip_impossible: \"Det virker altid umuligt indtil det er gjort. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Tale er billigt. Vis mig koden. - Linus Torvalds\",\n      tip_first_language: \"Det mest katastrofale, du nogensinde kan lære, er dit første programmeringssprog. - Alan Kay\",\n      tip_hardware_problem: \"Q: Hvor mange programmører tager det at skifte en pære?  A: Ingen, det er et hardware problem.\",\n      tip_hofstadters_law: \"Hofstadter's Lov: Det tager altid længere tid end du forventer, selv når du tager hensyn til Hofstadter's Lov.\",\n      tip_premature_optimization: \"For tidlig optimering er roden til alt ondt. - Donald Knuth\",\n      tip_brute_force: \"I tvivlstilfælde, brug rå kraft. - Ken Thompson\",\n      tip_extrapolation: \"Der er kun to slags mennesker: Dem der kan ekstrapolere fra ufuldstændig data...\",\n      tip_superpower: \"Programmering er det tætteste vi kommer op at have superheltekræfter.\",\n      tip_control_destiny: \"I rigtig open source, har du ret til at styre din egen skæbne. - Linus Torvalds\",\n      tip_no_code: \"Ingen kode er hurtigere end ingen kode.\",\n      tip_code_never_lies: \"Kode lyver aldrig, kommentarer gør nogle gange. - Ron Jeffries\",\n      tip_reusable_software: \"Før software kan være genbrugeligt skal det først være brugbart.\",\n      tip_optimization_operator: \"Et hvert sprog har en optimeringsoperator. I de fleste sprog er operatoren ‘//’\",\n      tip_lines_of_code: \"At måle programmeringsfremgang via antal kodelinjer er som at måle flyfremgang efter vægt. — Bill Gates\",\n      tip_source_code: \"Jeg ønsker at ændre verden, men de ville ikke give mig kildekoden.\",\n      tip_javascript_java: \"Java er til JavaScript hvad Bil er at Billet. - Chris Heilmann\",\n      tip_move_forward: \"Hvad end du gør, så bliv ved med at rykke fremad. - Martin Luther King Jr.\",\n      tip_google: \"Har du et problem du ikke kan løse? Google det!\",\n      tip_adding_evil: \"Tilføjer et strejf af ondskab..\",\n      tip_hate_computers: \"Der er en ting omkring folk, der tror, ​​de hader computere. Hvad de i virkeligheden hader er elendige programmører. - Larry Niven\",\n      tip_open_source_contribute: \"Du kan hjælpe med at forbedre CodeCombat!\",\n      tip_recurse: \"At iterere er menneskeligt, rekursion er guddommeligt. - L. Peter Deutsch\",\n      tip_free_your_mind: \"Du er nødt til at slippe det hele, Neo. Frygt, tvivl og mistillid. Befri dit sind. - Morpheus\",\n      tip_strong_opponents: \"Selv de stærkeste modstandere har en svaghed. - Itachi Uchiha\",\n      tip_paper_and_pen: \"Før du starter med at programmere, kan du altid sætte dig ned med et stykke papir og blyant.\",\n      tip_solve_then_write: \"Først, løs problemet, derefter skriv koden. - John Johnson\",\n      tip_compiler_ignores_comments: \"Nogle gange tror jeg, at kompileren ignorerer mine kommentarer.\",\n      tip_understand_recursion: \"Den eneste måde at forstå rekursion er at forstå rekursion.\",\n      tip_life_and_polymorphism: \"Open Source er som en helt polymorf heterogen struktur: Alle typer er velkomne.\",\n      tip_mistakes_proof_of_trying: \"Fejl i din kode er bare bevis på, at du forsøger.\",\n      tip_adding_orgres: \"Runder kæmper op.\",\n      tip_sharpening_swords: \"Slibning af sværd.\",\n      tip_ratatouille: \"Du skal ikke lade nogen definere dine grænser på grund af hvor du kommer fra. Din eneste begrænsning er din sjæl. - Gusteau, Ratatouille\",\n      tip_nemo: \"Når livet tynger dig ned, ved du så hvad du skal gøre? Bare svøm videre, bare svøm videre. - Dory, Finding Nemo\",\n      tip_internet_weather: \"Bare flyt til Internet, det er allertiders her. Vi får lov til at leve hvor vejret altid er fantastisk. - John Green\",\n      tip_nerds: \"Nørder har lov til at elske ting, som i at-hoppe-op-og-ned-i-stolen-kan-ikke-kontrollere-mig-selv elske det. - John Green\",\n      tip_self_taught: \"Jeg lærte mig selv 90% af hvad jeg har lært. Og det er normalt! - Hank Green\",\n      tip_luna_lovegood: \"Bare rolig, du er lige så rask som jeg er. - Luna Lovegood\",\n      tip_good_idea: \"Den bedste måde at få en god idé på er at få en masse ideer. - Linus Pauling\",\n      tip_programming_not_about_computers: \"Datalogi handler ikke mere om computere end astronomi handler om teleskoper. - Edsger Dijkstra\",\n      tip_mulan: \"Tro du kan, så kan du. - Mulan\"\n    },\n    game_menu: {\n      inventory_tab: \"Dine ting\",\n      save_load_tab: \"Gem/Indlæs\",\n      options_tab: \"Indstillinger\",\n      guide_tab: \"Guide\",\n      guide_video_tutorial: \"Video Tutorial\",\n      guide_tips: \"Råd\",\n      multiplayer_tab: \"Flere spillere\",\n      auth_tab: \"Tilmeld dig\",\n      inventory_caption: \"Udrust din helt\",\n      choose_hero_caption: \"Vælg helt, sprog\",\n      options_caption: \"Rediger indstillinger\",\n      guide_caption: \"Dokumentation og tips\",\n      multiplayer_caption: \"Spil med venner!\",\n      auth_caption: \"Gem dit spil.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Vis Ranglister\",\n      scores: \"Point\",\n      top_players: \"Topspillere efter\",\n      day: \"Idag\",\n      week: \"Denne uge\",\n      all: \"Historisk\",\n      time: \"Tid\",\n      damage_taken: \"Skade taget\",\n      damage_dealt: \"Skade gjort\",\n      difficulty: \"Sværhedsgrad\",\n      gold_collected: \"Guld samlet\"\n    },\n    inventory: {\n      equipped_item: \"Taget på\",\n      required_purchase_title: \"Påkrævet\",\n      available_item: \"Tilgængelig\",\n      restricted_title: \"Begrænset\",\n      should_equip: \"(dobbeltklik for at tage det på)\",\n      equipped: \"(taget på)\",\n      locked: \"(låst)\",\n      restricted: \"(begrænset til denne bane)\",\n      equip: \"Tag på\",\n      unequip: \"Tag af\"\n    },\n    buy_gems: {\n      few_gems: \"Et par ædelstene\",\n      pile_gems: \"En bunke ædelstene\",\n      chest_gems: \"En kiste med ædelstene\",\n      purchasing: \"Køber...\",\n      declined: \"Dit kort blev afvist\",\n      retrying: \"Serverfejl, prøver igen.\",\n      prompt_title: \"Ikke nok ædelstene\",\n      prompt_body: \"Ønsker du flere?\",\n      prompt_button: \"Besøg Butik\",\n      recovered: \"Tidligere ædelstenskøb er genskabt. Opdatér venligst siden.\",\n      price: \"x{{gems}} / måned\"\n    },\n    subscribe: {\n      comparison_blurb: \"Skærp dine færdigheder med et CodeCombat abonnement!\",\n      must_be_logged: \"Du skal først være logget ind. Opret en konto eller log ind fra ovenstående menu.\",\n      subscribe_title: \"Tilmeld\",\n      unsubscribe: \"Afmeld\",\n      confirm_unsubscribe: \"Bekræft Afmeldling\",\n      never_mind: \"Det gør ikke noget, jeg elsker dig stadig\",\n      thank_you_months_prefix: \"Tak for at støtte os disse sidste\",\n      thank_you_months_suffix: \"måneder.\",\n      thank_you: \"Tak for at støtte CodeCombat.\",\n      sorry_to_see_you_go: \"Ked af at se dig gå! Fortæl os, hvad vi kunne have gjort bedre.\",\n      unsubscribe_feedback_placeholder: \"Nå, hvad har vi gjort?\",\n      stripe_description: \"Månedligt Abonnement\",\n      subscription_required_to_play: \"Du har brug for et abonnement for at spille denne bane.\",\n      unlock_help_videos: \"Abonnér for at låse alle video-tutorials op.\",\n      personal_sub: \"Personlig Abonnement\",\n      loading_info: \"Indlæser abonnementsinformation...\",\n      managed_by: \"Administreret af\",\n      will_be_cancelled: \"Vil blive annulleret på\",\n      currently_free: \"Du har i øjeblikket et gratis abonnement\",\n      currently_free_until: \"Du har i øjeblikket et abonnement, indtil\",\n      was_free_until: \"Du havde et gratis abonnement, indtil\",\n      managed_subs: \"Administrerede Abonnementer\",\n      subscribing: \"Tilmelder...\",\n      current_recipients: \"Aktuelle Modtagere\",\n      unsubscribing: \"Afmelder\",\n      subscribe_prepaid: \"Klik Abonnér at bruge en forudbetalte kode\",\n      using_prepaid: \"Bruger forudbetalt kode til månedligt abonnement\"\n    },\n    choose_hero: {\n      choose_hero: \"Vælg din helt\",\n      programming_language: \"Programmeringssprog\",\n      programming_language_description: \"Hvilket programmerings sprog har du lyst til at bruge?\",\n      \"default\": \"Standard\",\n      experimental: \"Experimental\",\n      python_blurb: \"Simplet, dog stærkt, godt for begyndere og eksperter.\",\n      javascript_blurb: \"Internettets sprog (ikke det samme som Java).\",\n      coffeescript_blurb: \"Pænere JavaScript-syntaks.\",\n      lua_blurb: \"Spil scripting sprog.\",\n      status: \"Status\",\n      weapons: \"Våben\",\n      weapons_warrior: \"Sværd - Kort afstand, Ingen Magi\",\n      weapons_ranger: \"Armbryst, Skydevåben - Lang afstand, Ingen Magi\",\n      weapons_wizard: \"Tryllestave, Stave - Lang afstand, Magi\",\n      attack: \"Skade\",\n      health: \"Liv\",\n      speed: \"Fart\",\n      regeneration: \"Regeneration\",\n      range: \"Afstand\",\n      blocks: \"Blokér\",\n      backstab: \"Bagangreb\",\n      skills: \"Færdigheder\",\n      attack_1: \"Giver\",\n      attack_2: \"af mulig\",\n      attack_3: \"våbenskade.\",\n      health_1: \"Får\",\n      health_2: \"af mulig\",\n      health_3: \"rustningsliv.\",\n      speed_1: \"Rykker med\",\n      speed_2: \"meter i sekundet.\",\n      available_for_purchase: \"Kan nu blive købt\",\n      level_to_unlock: \"Level for at låse op:\",\n      restricted_to_certain_heroes: \"Kun visse helt kan spille dette level.\"\n    },\n    skill_docs: {\n      writable: \"skrivbar\",\n      read_only: \"read-only\",\n      action: \"Handling\",\n      spell: \"Besværgelse\",\n      action_name: \"navn\",\n      action_cooldown: \"Takes\",\n      action_specific_cooldown: \"Pausetid\",\n      action_damage: \"Skade\",\n      action_range: \"Afstand\",\n      action_radius: \"Radius\",\n      action_duration: \"Varighed\",\n      example: \"Eksempel\",\n      ex: \"eks.\",\n      current_value: \"Nuværende Værdi\",\n      default_value: \"Standard værdi\",\n      parameters: \"Parametre\",\n      returns: \"Returnerer\",\n      granted_by: \"Givet af\"\n    },\n    save_load: {\n      granularity_saved_games: \"Gemte\",\n      granularity_change_history: \"Historie\"\n    },\n    options: {\n      general_options: \"Generelle Indstillinger\",\n      volume_label: \"Lydstyrke\",\n      music_label: \"Musik\",\n      music_description: \"Tænd/Sluk baggrundsmusik.\",\n      editor_config_title: \"Editor Konfiguration\",\n      editor_config_livecompletion_label: \"Live Autocompletion\",\n      editor_config_livecompletion_description: \"Viser autocomplete forslag mens du skriver.\",\n      editor_config_invisibles_label: \"Vis Skjulte\",\n      editor_config_invisibles_description: \"Viser skjulte tegn som mellemrum og indrykning.\",\n      editor_config_indentguides_label: \"Vis Indrykningsguide\",\n      editor_config_indentguides_description: \"Viser lodrette linjer for at fremhæve indrykning.\",\n      editor_config_behaviors_label: \"Intelligent Opførelse\",\n      editor_config_behaviors_description: \"Autocomplete af parenteser og anførelsestegn.\"\n    },\n    about: {\n      main_title: \"Hvis du vil lære at programmere, skal du skrive (en masse) kode.\",\n      main_description: \"Hos CodeCombat er vores opgave at sikre, at du gør det med et smil på læben.\",\n      mission_link: \"Mission\",\n      team_link: \"Hold\",\n      story_link: \"Baggrund\",\n      press_link: \"Pressen\",\n      mission_title: \"Vores mission: At gøre programmering tilgængelig for alle elever på Jorden.\",\n      mission_description_1: \"<strong>Programmering er magi</strong>. Det er evnen til at skabe ting fra ren fantasi. Vi startede CodeCombat for at give eleverne en fornemmelse af troldmandsmagt lige ved hånden ved hjælp af <strong>indtastet kode</strong>.\",\n      mission_description_2: \"Det viser sig, at det får dem til at lære hurtigere, MEGET hurtigere. Det er som at have en samtale i stedet for at læse en manual. Vi ønsker at bringe denne samtale til alle skoler og til <strong>alle elever</strong>, fordi alle skal have chancen for at lære det magiske ved programmering.\",\n      team_title: \"Mød CodeCombat teamet\",\n      team_values: \"Vi værdsætter åben og respektfuld dialog, hvor den bedste idé vinder. Vores beslutninger er funderet med undersøgelser af kundernes oplevelser og vores proces er fokuseret på at levere konkrete resultater til dem. Alle er inddraget, fra vores CEO til vores GitHub bidragsydere, fordi vi værdsætter vækst og læring i vores team.\",\n      nick_title: \"Medstifter, CEO\",\n      matt_title: \"Medstifter, CTO\",\n      cat_title: \"Game Designer\",\n      scott_title: \"Medstifter, Software Engineer\",\n      maka_title: \"Kundens Talsmand\",\n      robin_title: \"UX Design & Udvikling\",\n      titles_csm: \"Správce úspěšných zákazníků\",\n      retrostyle_title: \"Illustration\",\n      retrostyle_blurb: \"Retro Spil\",\n      community_title: \"...og vores open source fællesskab\",\n      community_subtitle: \"Over 450 bidragydere har hjulpet med at bygge CodeCombat, flere kommer til hver uge!\",\n      community_description_1: \"CodeCombat er et fællesprojekt, med hundredvis af spillere, der frivilligt skaber baner, bidrager til vores kode ved at tilføje funktioner, rette fejl, spilteste, og oversætte spillet til hele 50 sprog. Medarbejdere, bidragydere og portalen vinder alle ved at dele idéer og samle kræfterne, og ligeså gør open source fællesskabet. Portalen er bygget med en lang række open source projekter, og vi er open source for at give tilbage til fællesskabet og skabe kode til nysgerrige spillere så det har et velkendt projekt at udforske og eksperimentere med. Alle kan deltage i CodeCombat's fællesskab! Tjek vores\",\n      community_description_link: \"bidragsside\",\n      community_description_2: \"for mere info.\",\n      number_contributors: \"Over 450 bidragydere har udlånt deres støtte og tid til dette projekt.\",\n      story_title: \"Vores historie indtil videre\",\n      story_subtitle: \"Siden 2013 er CodeCombat vokset fra et simpelt sæt skitser til et levende, blomstrende spil.\",\n      story_statistic_1a: \"5.000.000+\",\n      story_statistic_1b: \"spillere\",\n      story_statistic_1c: \"har startet deres programmeringsrejse med CodeCombat\",\n      story_statistic_2a: \"Vi har været oversat til over 50 sprog - vores spillere kommer fra\",\n      story_statistic_2b: \"200+ lande\",\n      story_statistic_3a: \"Tilsammen, har de skrevet\",\n      story_statistic_3b: \"1 milliard linjer kode og flere på vej\",\n      story_statistic_3c: \"i seks forskellige programmeringssprog\",\n      story_long_way_1: \"Selv om vi er kommet langt...\",\n      story_sketch_caption: \"Nick's allerførste skitse der forestiller et programmeringsspil i fuld gang.\",\n      story_long_way_2: \"vi har stadig meget at gøre, før vi har fuldført vores opgave, så...\",\n      jobs_title: \"Kom og arbejd hos os og hjælp med at skrive CodeCombat historie!\",\n      jobs_subtitle: \"Kan du ikke finde den rette mulighed, men er interesseret i at holde kontakten? Se vores \\\"Lav Dit Eget\\\" liste.\",\n      jobs_benefits: \"Personalegoder\",\n      jobs_benefit_4: \"Ubegrænset antal syge- eller personligedage\",\n      jobs_benefit_5: \"Faglig udvikling og hjælp til efteruddannelse\",\n      jobs_benefit_6: \"Syge-, Tand- og Synsforsikring\",\n      jobs_custom_title: \"Lav Dit Eget\",\n      jobs_custom_description: \"Brænder du for CodeCombat men kan ikke se et ledigt job, der matcher dine kvalifikationer? Skriv til os og vis, hvordan du tror, ​​du kan bidrage til vores team. Vi vil meget gerne høre fra dig!\",\n      jobs_custom_contact_1: \"Send os en besked på\",\n      jobs_custom_contact_2: \"introducer dig selv så vi måske får etableret fremtidig kontakt!\",\n      contact_title: \"Presse & Kontakt\",\n      contact_subtitle: \"Behov for flere oplysninger? Kom i kontakt med os på\",\n      screenshots_title: \"Spil Screenshots\",\n      screenshots_hint: \"(klik for fuld størrelse)\",\n      downloads_title: \"Download Assets & Information\",\n      about_codecombat: \"Om CodeCombat\",\n      logo: \"Logo\",\n      screenshots: \"Screenshots\",\n      character_art: \"Character Art\",\n      download_all: \"Download Alt\",\n      previous: \"Forrige\",\n      location_title: \"Vi har kontor i centrum af SF:\"\n    },\n    teachers_quote: {\n      subtitle: \"Få dine elever startet på mindre end en time. Du vil være i stand til at <strong>oprette en klasse, tilføje elever, og overvåge deres fremgang</strong> mens de lærer datalogi!\",\n      email_exists: \"En bruger med denne email eksisterer allerede.\",\n      phone_number: \"Telefonnummer\",\n      phone_number_help: \"Hvor kan vi få fat i dig i løbet af arbejdsdagen?\",\n      tech_coordinator: \"Teknologikoordinator\",\n      advisor: \"Rådgiver\",\n      principal: \"Skoleleder\",\n      superintendent: \"Leder\",\n      parent: \"Forælder\",\n      organization_label: \"Navn på Skole/Område\",\n      city: \"By\",\n      state: \"Stat\",\n      country: \"Land\",\n      num_students_help: \"Hvor mange forventer du at indskrive i CodeCombat?\",\n      education_level_label: \"Eleverne Uddannelsesniveau\",\n      education_level_help: \"Vælg så mange som passer.\",\n      elementary_school: \"Grundskole\",\n      high_school: \"Ungdomsuddannelse\",\n      please_explain: \"(uddyb venligst)\",\n      middle_school: \"Mellemskole\",\n      college_plus: \"Vidergående uddannelse eller højere\",\n      anything_else: \"Noget andet, vi bør vide?\",\n      thanks_header: \"Tak for at anmode om en demo!\",\n      thanks_p: \"Vi vil snart tage kontakt. Spørgsmål? Email os:\"\n    },\n    versions: {\n      save_version_title: \"Gem ny version\",\n      new_major_version: \"Ny hoved Version\",\n      submitting_patch: \"Indsender Opdatering...\",\n      cla_prefix: \"For at gemme dine ændringer, må du acceptere brugerbetingelserne\",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"Jeg er enig\",\n      owner_approve: \"En ejer skal godkende den før dine ændringer bliver synlige.\"\n    },\n    contact: {\n      contact_us: \"Kontakt CodeCombat\",\n      welcome: \"Godt at høre fra dig! Brug denne formular til at sende os en email. \",\n      forum_prefix: \"For noget offentligt, prøv venligst \",\n      forum_page: \"Vores forum\",\n      forum_suffix: \" istedet.\",\n      faq_prefix: \"Der er også en\",\n      faq: \"FAQ\",\n      subscribe_prefix: \"Hvis du har brug for hjælp til at finde ud af en bane, kan du\",\n      subscribe: \"købe et CodeCombat abonnement\",\n      subscribe_suffix: \"og vi vil med glæde hjælpe dig med din kode.\",\n      subscriber_support: \"Eftersom du er en CodeCombat abonnent, vil din email få prima-support.\",\n      screenshot_included: \"Screenshot inkluderet.\",\n      where_reply: \"Hvor skal vi svare?\",\n      send: \"Send Feedback\"\n    },\n    account_settings: {\n      title: \"Kontoindstillinger\",\n      not_logged_in: \"Log ind eller opret en konto for at ændre dine indstillinger.\",\n      me_tab: \"Mig\",\n      picture_tab: \"Billede\",\n      delete_account_tab: \"Slet Din Konto\",\n      wrong_email: \"Forkert Email\",\n      wrong_password: \"Forkert Password\",\n      delete_this_account: \"Slet denne konto permanent\",\n      reset_progress_tab: \"Nulstil Forløb\",\n      reset_your_progress: \"Slet din fremgang og start forfra\",\n      god_mode: \"Gude Tilstand\",\n      emails_tab: \"Emails\",\n      admin: \"Admin\",\n      manage_subscription: \"Klik her for at administrere dit abonnement.\",\n      new_password: \"Nyt Password\",\n      new_password_verify: \"Bekræft\",\n      type_in_email: \"Indtast din email for at bekræfte kontosletning.\",\n      type_in_email_progress: \"Indtast din email for at bekræfte sletning af din fremgang.\",\n      type_in_password: \"Indtast også dit password.\",\n      email_subscriptions: \"Emailtilmeldinger\",\n      email_subscriptions_none: \"Ingen Email Abonnementer.\",\n      email_announcements: \"Nyheder\",\n      email_announcements_description: \"Få emails om de seneste nyheder og udvikling på CodeCombat.\",\n      email_notifications: \"Notifikationer\",\n      email_notifications_summary: \"Indstillinger for personlig, automatiske email notifikationer relateret til din CodeCombat aktivitet.\",\n      email_any_notes: \"Eventuelle Notifikationer\",\n      email_any_notes_description: \"Deaktiver for at stoppe alle aktivitetsnotifikationer via email.\",\n      email_news: \"Nyheder\",\n      email_recruit_notes: \"Jobmuligheder\",\n      email_recruit_notes_description: \"Hvis du spiller rigtigt godt, kan vi kontakte dig så du får dig et (bedre) job.\",\n      contributor_emails: \"Bidragsklasse-emails\",\n      contribute_prefix: \"Vi leder efter folk til at joine vores gruppe! Tjek \",\n      contribute_page: \"bidragssiden\",\n      contribute_suffix: \" ud for at finde ud af mere.\",\n      email_toggle: \"Skift Alle\",\n      error_saving: \"Fejl under Gemning\",\n      saved: \"Ændringer Gemt\",\n      password_mismatch: \"Password matcher ikke.\",\n      password_repeat: \"Gentag venligst dit kodeord.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Keyboard Genvejstaster\",\n      space: \"Mellemrum\",\n      enter: \"Enter\",\n      press_enter: \"tryk enter\",\n      escape: \"Esc\",\n      shift: \"Skift\",\n      run_code: \"Kør nuværende kode.\",\n      run_real_time: \"Kør i realtid.\",\n      continue_script: \"Fortsæt efter nuværende script.\",\n      skip_scripts: \"Spring over alle scripts der kan springes over.\",\n      toggle_playback: \"Tryk play/pause.\",\n      scrub_playback: \"Kør tilbage og fremad i tid.\",\n      single_scrub_playback: \"Kør tilbage og fremad i tid billede for billede.\",\n      scrub_execution: \"Kør gennem besværgelseseksekvering.\",\n      toggle_debug: \"Tænd/Sluk debug skærmbillede.\",\n      toggle_grid: \"Tænd/Sluk gitter overlejring.\",\n      toggle_pathfinding: \"Tænd/Sluk stifinder overlejring.\",\n      beautify: \"Forskøn din kode ved at standardisere dens formattering.\",\n      maximize_editor: \"Maksimer/Minimer kodeeditor.\"\n    },\n    community: {\n      main_title: \"CodeCombat Fællesskab\",\n      introduction: \"Tjek nedenfor hvordan du kan blive involveret, og beslut dig for hvad der lyder sjovest. Vi ser frem til at arbejde sammen med dig!\",\n      level_editor_prefix: \"Brug CodeCombat\",\n      level_editor_suffix: \"at oprette og redigere baner. Brugerne har skabt baner til deres klasser, venner, Hackathon, elever og søskende. Hvis det lyder skræmmende at lave en ny bare, kan du starte med at fork'e en af ​​vores!\",\n      thang_editor_prefix: \"Vi kalder enheder i spillet 'thangs'. Brug\",\n      thang_editor_suffix: \"at ændre CodeCombat's eget artwork. Tillad enheder at kaste projektiler, ændre retningen af ​​en animation, ændre en enheds livspoints, eller upload dine egne vektorgrafik sprites.\",\n      article_editor_prefix: \"Har du fundet en fejl i vores dokumentation? Har du brug for at lave nogle instruktioner til dine egne kreationer? Tjek\",\n      article_editor_suffix: \"og hjælp CodeCombat spillere med at få mest muligt ud af deres spilletid.\",\n      find_us: \"Find os på disse websteder\",\n      social_github: \"Tjek alt vores kode på GitHub\",\n      social_blog: \"Læs CodeCombat-bloggen på Sett\",\n      social_discource: \"Deltag i diskussionen på vores Discourse-forum\",\n      social_facebook: \"Like CodeCombat på Facebook\",\n      social_twitter: \"Følg CodeCombat på Twitter\",\n      social_gplus: \"Følg CodeCombat på Google+\",\n      contribute_to_the_project: \"Bidrag til projektet\"\n    },\n    clans: {\n      clan: \"Klan\",\n      clans: \"Klaner\",\n      new_name: \"Nyt klannavn\",\n      new_description: \"Ny klanbeskrivelse\",\n      make_private: \"Gør klan privat\",\n      subs_only: \"kun abonnenter\",\n      create_clan: \"Lav Ny Klan\",\n      private_preview: \"Forsmag\",\n      private_clans: \"Private Klaner\",\n      public_clans: \"Public Klaner\",\n      my_clans: \"Mine Klaner\",\n      clan_name: \"Klannavn\",\n      name: \"Navn\",\n      chieftain: \"Høvding\",\n      edit_clan_name: \"Rediger Klannavn\",\n      edit_clan_description: \"Rediger Klanbeskrivelse\",\n      edit_name: \"Rediger navn\",\n      edit_description: \"Rediger beskrivelse\",\n      \"private\": \"(privat)\",\n      summary: \"Oversigt\",\n      average_level: \"Gennemsnitligt Niveau\",\n      average_achievements: \"Gennemsnitlig Bedrifter\",\n      delete_clan: \"Slet Klan\",\n      leave_clan: \"Forlad Klan\",\n      join_clan: \"Følg Clan\",\n      invite_1: \"Invitér:\",\n      invite_2: \"*Invitér spillere til denne Klan ved at sende dem dette link.\",\n      members: \"Medlemmer\",\n      progress: \"Fremgang\",\n      not_started_1: \"ikke begyndt\",\n      started_1: \"begyndt\",\n      complete_1: \"gennemført\",\n      exp_levels: \"Udvid baner\",\n      rem_hero: \"Fjern Helt\",\n      status: \"Status\",\n      complete_2: \"Gennemført\",\n      started_2: \"Begyndt\",\n      not_started_2: \"Ikke Begyndt\",\n      view_solution: \"Klik for at se løsningen.\",\n      view_attempt: \"Klik for at se forsøg.\",\n      latest_achievement: \"Seneste Bedrifter\",\n      playtime: \"Spilletid\",\n      last_played: \"Sidst spillede\",\n      leagues_explanation: \"Spil i en liga mod andre klanmedlemmer i disse multiplayer arenainstanser.\",\n      track_concepts1: \"Følg koncepter\",\n      track_concepts2a: \"lært af hver elev\",\n      track_concepts2b: \"lært af hvert medlem\",\n      track_concepts3a: \"Følg baner gennemført af hver elev\",\n      track_concepts3b: \"Følg baner gennemført af hvert medlem\",\n      track_concepts4a: \"Vis dine elever'\",\n      track_concepts4b: \"Vis dine medlemmer'\",\n      track_concepts5: \"løsninger\",\n      track_concepts6a: \"Sortér elever ved navn eller fremgang\",\n      track_concepts6b: \"Sortér medlemmer ved navn eller fremgang\",\n      track_concepts7: \"Kræver invitation\",\n      track_concepts8: \"at slutte sig til\",\n      private_require_sub: \"Det kræver et abonnement at oprette eller deltage i private klaner.\"\n    },\n    courses: {\n      create_new_class: \"Lav Ny Klasse\",\n      unnamed_class: \"Unavngivet Klasse\",\n      edit_settings1: \"Rediger Klasseindstillinger\",\n      add_students: \"Tilføj Elever\",\n      stats: \"Statistik\",\n      total_students: \"Antal Elever:\",\n      average_time: \"Gennemsnitlig banespilletid:\",\n      total_time: \"Total spilletid:\",\n      average_levels: \"Gennemsnitlig antal gennemførte baner:\",\n      total_levels: \"Total antal gennemførte baner:\",\n      students: \"Elever\",\n      concepts: \"Begreber\",\n      play_time: \"Spiltid:\",\n      completed: \"Gennemført:\",\n      enter_emails: \"Indtast emails på eleverne, der skal inviteres, én pr linje\",\n      send_invites: \"Send Invitationer\",\n      enroll: \"Indskriv\",\n      enroll_paid: \"Tilmeld Elever til Betalte Kurser\",\n      get_enrollments: \"Få flere Tilmeldinger\",\n      change_language: \"Rediger kursussprog\",\n      keep_using: \"Forsæt Brug Af\",\n      switch_to: \"Skift Til\",\n      greetings: \"Vær Hilset!\",\n      back_classrooms: \"Tilbage til mine klasseværelser\",\n      back_courses: \"Tilbage til mine klasser\",\n      edit_details: \"Rediger klassedetaljer\",\n      purchase_enrollments: \"Køb Tilmeldinger\",\n      remove_student: \"fjern elev\",\n      assign: \"Tildel\",\n      to_assign: \"at tildele betalte kurser.\",\n      teacher: \"Lærer\",\n      arena: \"Arena\",\n      available_levels: \"Tilgengængelige Baner\",\n      welcome_to_courses: \"Eventyrere, velkommen til Kurser!\",\n      ready_to_play: \"Klar til at spille?\",\n      start_new_game: \"Start Nyt Spil\",\n      play_now_learn_header: \"Spil nu for at lære\",\n      play_now_learn_1: \"grundlæggende syntaks til at styre din helt\",\n      play_now_learn_2: \"while-løkker til at løse irriterende gåder\",\n      play_now_learn_3: \"strenge og variable at tilpasse handlinger\",\n      play_now_learn_4: \"hvordan man besejrer en kæmpe (vigtige færdigheder i livet!)\",\n      welcome_to_page: \"Velkommen til din Kursusside!\",\n      my_classes: \"Mine Klasser\",\n      class_added: \"Klasse tilføjet!\",\n      join_class: \"Følg En Klasse\",\n      ask_teacher_for_code: \"Spørg din lærer om du har en CodeCombat-klassekode! Hvis det er tilfældet, angiv den nedenfor:\",\n      enter_c_code: \"<Indtast klassekode>\",\n      join: \"Følg\",\n      joining: \"Følger klasse\",\n      course_complete: \"Kursus Gennemført\",\n      play_arena: \"Spil Arena\",\n      start: \"Start\",\n      last_level: \"Sidste Bane\",\n      not_you: \"Ikke dig?\",\n      continue_playing: \"Fortsæt Spil\",\n      option1_header: \"Mulighed 1: Invitér elever via email\",\n      remove_student1: \"Fjern Elever\",\n      are_you_sure: \"Er du sikker på at du vil fjerne denne elev fra denne klasse?\",\n      remove_description1: \"Elever mister adgang til dette klasseværelse og tildelte kurser. Fremgang og spilletid er ikke tabt, og eleven kan tilføjes til klasseværelset igen til enhver tid.\",\n      remove_description2: \"Den aktiverede betalte licens vil ikke blive returneret.\",\n      keep_student: \"Behold Elev\",\n      removing_user: \"Fjerne elev\",\n      concepts_covered: \"Begreber Gennemgået\",\n      language_cannot_change: \"Sprog kan ikke ændres, når først en klasse har deltagende elever.\",\n      create_class: \"Opret Klasse\"\n    },\n    classes: {\n      archmage_title: \"Ærkemager\",\n      archmage_title_description: \"(Programmør)\",\n      archmage_summary: \"Hvis du er en udvikler som er interesseret i programmering af pædagogiske spil, så bliv en Ærkemager for at hjælpe os med at skabe CodeCombat!\",\n      artisan_title: \"Artisan\",\n      artisan_title_description: \"(Banedesigner)\",\n      artisan_summary: \"Byg og del baner som dig og dine venner kan spille. Bliv en Artisan for at lære kunsten i at undervise andre programmering.\",\n      adventurer_title: \"Eventyrer\",\n      adventurer_title_description: \"(Banetester)\",\n      adventurer_summary: \"Få vores nye baner (selv vores abonnentindhold) gratis en uge tidligere end andre og hjælp os med at fjerne bugs før vores offentlige release.\",\n      scribe_title: \"Skriver\",\n      scribe_title_description: \"(Artikel redaktør)\",\n      scribe_summary: \"God kode kræver god dokumentation. Skriv, redigér og forbedre dokumenter læst af millioner af spillere over hele kloden.\",\n      diplomat_title: \"Diplomat\",\n      diplomat_title_description: \"(Oversætter)\",\n      diplomat_summary: \"CodeCombat er oversat til 45+ sprog af vores Diplomater. Hjælp os ved at bidrage med oversættelser.\",\n      ambassador_title: \"Ambassadør\",\n      ambassador_title_description: \"(Brugerstøtte)\",\n      ambassador_summary: \"Tæm vores forumbrugere og guide dem imod svar til deres spørgsmål. Vores ambassadører repræsenterer CodeCombat for verdenen.\",\n      teacher_title: \"Lærer\"\n    },\n    editor: {\n      main_title: \"CodeCombat Editorer\",\n      article_title: \"Artikel Editor\",\n      thang_title: \"Thang Editor\",\n      level_title: \"Bane Redigeringsværktøj\",\n      achievement_title: \"Bedrift Editor\",\n      poll_title: \"Afstemning Editor\",\n      back: \"Tilbage\",\n      revert: \"Fortryd\",\n      revert_models: \"Fortryd Modeller\",\n      pick_a_terrain: \"Vælg Et Terræn\",\n      dungeon: \"Fangehul\",\n      indoor: \"Indendørs\",\n      desert: \"Ørken\",\n      grassy: \"Eng\",\n      mountain: \"Bjerge\",\n      glacier: \"Gletscher\",\n      small: \"Lille\",\n      large: \"Stor\",\n      fork_title: \"Fork Ny Version\",\n      fork_creating: \"Opretter Fork...\",\n      generate_terrain: \"Generér Terræn\",\n      more: \"Mere\",\n      wiki: \"Wiki\",\n      live_chat: \"Live Chat\",\n      thang_main: \"Main\",\n      thang_spritesheets: \"Spritesheets\",\n      thang_colors: \"Farver\",\n      level_some_options: \"Nogle Muligheder?\",\n      level_tab_thangs: \"Thangs\",\n      level_tab_scripts: \"Scripts\",\n      level_tab_components: \"Komponenter\",\n      level_tab_systems: \"Systemer\",\n      level_tab_docs: \"Dokumentation\",\n      level_tab_thangs_title: \"Nuværende Thangs\",\n      level_tab_thangs_all: \"Alle\",\n      level_tab_thangs_conditions: \"Startbetingelser\",\n      level_tab_thangs_add: \"Tilføj Thangs\",\n      level_tab_thangs_search: \"Søg efter thangs\",\n      add_components: \"Tilføj Komponenter\",\n      component_configs: \"Komponent konfigurationer\",\n      config_thang: \"Dobbelt klik for at konfigurere en thang\",\n      \"delete\": \"Slet\",\n      duplicate: \"Duplikér\",\n      stop_duplicate: \"Stop Duplikering\",\n      rotate: \"Rotér\",\n      level_component_tab_title: \"Nuværende komponenter\",\n      level_component_btn_new: \"Opret ny komponent\",\n      level_systems_tab_title: \"Nuværende systemer\",\n      level_systems_btn_new: \"Opret nyt system\",\n      level_systems_btn_add: \"Tilføj system\",\n      level_components_title: \"Tilbage til Alle Thangs\",\n      level_components_type: \"Type\",\n      level_component_edit_title: \"Redigér komponent\",\n      level_component_config_schema: \"Configurér Schema\",\n      level_system_edit_title: \"Redigér system\",\n      create_system_title: \"Opret nyt system\",\n      new_component_title: \"Opret ny komponent\",\n      new_component_field_system: \"System\",\n      new_article_title: \"Opret en Ny Artikel\",\n      new_thang_title: \"Opret en Ny Thang Type\",\n      new_level_title: \"Opret en Ny Bane\",\n      new_article_title_login: \"Log ind for at oprette en Ny Artikel\",\n      new_thang_title_login: \"Log ind for at oprette en Ny Thang Type\",\n      new_level_title_login: \"Log ind for at oprette en Ny Bane\",\n      new_achievement_title: \"Opret en Ny Bedrift\",\n      new_achievement_title_login: \"Log ind for at oprette en Ny Bedrift\",\n      new_poll_title: \"Opret en Ny Afstemning\",\n      new_poll_title_login: \"Log ind for at oprette Ny Afstemning\",\n      article_search_title: \"Søg Artikler Her\",\n      thang_search_title: \"Søg Thang Types Her\",\n      level_search_title: \"Søg Baner Her\",\n      achievement_search_title: \"Søg Bedrifter\",\n      poll_search_title: \"Søg Afstemninger\",\n      read_only_warning2: \"Bemærk: Du kan ikke gemme ændringer her, da du ikke er logget ind.\",\n      no_achievements: \"Ingen bedrifter er endnu ikke blevet tilføjet denne bane.\",\n      achievement_query_misc: \"Hovedbedrift ud af diverse\",\n      achievement_query_goals: \"Hovedbedrift ud af banemål\",\n      level_completion: \"Bane Gennemførsel\",\n      pop_i18n: \"Populér I18N\",\n      tasks: \"Opgaver\",\n      clear_storage: \"Rens dine lokale ændringer\",\n      add_system_title: \"Tilføj Systemer til Bane\",\n      done_adding: \"Alt Tilføjet\"\n    },\n    article: {\n      edit_btn_preview: \"Forhåndsvisning\",\n      edit_article_title: \"Ændr artikkel\"\n    },\n    polls: {\n      priority: \"Prioritering\"\n    },\n    contribute: {\n      page_title: \"Bidrager\",\n      intro_blurb: \"CodeCombat er 100% open source! Hundredvis af dedikerede spillere har hjulpet os med at bygge spillet op til hvad det er i dag. Kom og skrive det næste kapitel i CodeCombat's søgen efter at lære verden at kode!\",\n      alert_account_message_intro: \"Hej med dig!\",\n      alert_account_message: \"For at modtage klasse-emails, skal du først være logget ind.\",\n      archmage_introduction: \"En af de bedste ting ved at bygge spil er, at de kombinerer så mange forskellige ting. Grafik, lyd, netværk, sociale netværk, og selvfølgelig mange af de mere almindelige aspekter af programmering, fra low-level database management og server administration til at brugerinteraktionsdesign og bygning af grænseflader. Der er meget at gøre, og hvis du er en erfaren programmør med flair for virkelig at dykke ned i de små dele af CodeCombat, kan denne klasse være lige noget for dig. Vi ville elske at have din hjælp til at opbygge det bedste programmeringsspil nogensinde.\",\n      class_attributes: \"Klasse Attributter\",\n      archmage_attribute_1_pref: \"Viden om \",\n      archmage_attribute_1_suf: \", eller lyst til at lære det. Det meste af vores kode er i dette sprog. Hvis du er en fan af Ruby eller Python, vil du føle dig hjemme. Det er JavaScript, men med en pænere syntaks.\",\n      archmage_attribute_2: \"Nogen programmeringserfaring og personligt initiativ. Vi hjælper dig med at finde rundt, men vi kan ikke bruge meget tid at træne dig.\",\n      how_to_join: \"Sådan Deltager Du\",\n      join_desc_1: \"Alle kan hjælpe! Bare tjek vores \",\n      join_desc_2: \"for at komme i gang, og markér feltet nedenfor for at erklære dig selv som en modig Ærkemager og få de seneste nyheder via email. Hvis du vil chat'e om hvad man kan gøre, eller hvordan man bliver mere involveret? \",\n      join_desc_3: \", eller find os i vores \",\n      join_desc_4: \"og vi tager den derfra!\",\n      join_url_email: \"Skriv til os\",\n      archmage_subscribe_desc: \"Modtag email om nye programmeringsmuligheder og annonceringer.\",\n      artisan_introduction_pref: \"Vi skal lave flere baner! Folk kræver mere indhold, og vi kan kun bygge et vist antal selv. Lige nu er din arbejdsstation bane ét; vores bane-editor er næppe brugbar selv af dens skabere, så vær på vagt. Hvis du har visioner om kampagner der spænder for-løkker til\",\n      artisan_introduction_suf: \", så er denne klasse måske noget for dig.\",\n      artisan_attribute_1: \"Enhver erfaring i at bygge indhold vil være rart, såsom at bruge Blizzard's bane-editor. Men det er ikke påkrævet!\",\n      artisan_attribute_2: \"En hang til masser af tests og iterationer. For at lave gode baner, er du nødt til at vise det til andre, se dem spille det og være parat til at finde en masse ting at forbedre.\",\n      artisan_attribute_3: \"I øjeblikket er udholdenhed på lige fod med en Eventyrer. Vores Bane Editor er super ung og frustrerende at bruge. Du er hermed advaret!\",\n      artisan_join_desc: \"Brug Bane Editor til disse trin, sådan cirka:\",\n      artisan_join_step1: \"Læs dokumentationen.\",\n      artisan_join_step2: \"Lav en ny bane og udforsk eksisterende baner.\",\n      artisan_join_step3: \"Find os i vores offentlige Slack kanal for at få hjælp.\",\n      artisan_join_step4: \"Vis dine baner på forummet for at få feedback.\",\n      artisan_subscribe_desc: \"Få emails omkring bane editor opdateringer og meddelelser.\",\n      adventurer_introduction: \"Lad os være klar over din rolle: Du er Tanl. Du kommer til at tage megen skade. Vi har brug for folk til at prøve helt nye baner, og hjælpe med at identificere, hvordan vi gør tingene bedre. Smerten vil være enorm; at lave gode spil er en lang process, og ingen får det rigtigt første gang. Hvis du kan holde ud og har en høj restitueringsevne, så kan denne klasse være noget for dig.\",\n      adventurer_attribute_1: \"En tørst efter at lære. Du ønsker at lære at kode og vi ønsker at lære dig, hvordan man koder. Men, du vil sandsynligvis foretage det meste af læringen.\",\n      adventurer_attribute_2: \"Karismatisk. Være blid til at formulere hvad der skal forbedres, og kom med forslag til hvordan det kan forbedres.\",\n      adventurer_join_pref: \"Enten find sammen med (eller rekruttér!) en Artisan, eller markere feltet nedenfor for at modtage e-mails, når der er nye baner klar til test. Vi vil fortælle hvilke baner der kan gennemgås via vores netværk som\",\n      adventurer_forum_url: \"vores forum\",\n      adventurer_join_suf: \"så hvis du foretrækker at blive underrettet på disse måder, så tilmeld dig der!\",\n      adventurer_subscribe_desc: \"Modtag email, når der er nye baner klar til test.\",\n      scribe_introduction_pref: \"CodeCombat bliver ikke kun et sæt baner. Det vil også være en vidensressource, en wiki for programmeringsbegreber som baner kan gøre brug af. På den måde kan hver Artisan undgå at skulle lave en detaljeret beskrivelse af, hvad en sammenligningsoperator er, og istedet linke deres bane til en artikel der beskriver den. Noget i retning af hvad \",\n      scribe_introduction_url_mozilla: \"Mozilla Developer Network\",\n      scribe_introduction_suf: \" har gjort. Hvis din opfattelse af sjov er at formulere programmeringsbegreber i Markdown-format, så er denne klasse formentligt noget for dig.\",\n      scribe_attribute_1: \"Evner med ord er stortset alt hvad du behøver. Ikke kun grammatik og stavning, men også evnen til at formidle komplicerede ideer til andre.\",\n      contact_us_url: \"Kontakt os\",\n      scribe_join_description: \"fortæl os lidt om dig selv, dine erfaringer med programmering og hvilke emner, du gerne vil skrive om. Så tager vi den derfra!\",\n      scribe_subscribe_desc: \"Få emails omkring artikelskrivning.\",\n      diplomat_introduction_pref: \"Så hvis der er én ting, vi har lært af \",\n      diplomat_launch_url: \"lanceringen i oktober\",\n      diplomat_introduction_suf: \"så er det, at der er betydelig interesse i CodeCombat i andre lande! Vi bygger et korps af oversættere ivrige efter at vende ét sæt ord om til et andet sæt ord for at gøre CodeCombat så tilgængelig i hele verden som muligt. Hvis du kan lide snigpremierer på kommende indhold og få disse baner ud til dine landsmænd ASAP, så er denne klasse noget for dig.\",\n      diplomat_attribute_1: \"Flydende i engelsk og det sprog, du ønsker at oversætte til. Når man formidler komplicerede ideer, er det vigtigt at have en stærk forståelse i begge sprog!\",\n      diplomat_i18n_page_prefix: \"Du kan begynde med at oversætte vores baner ved at gå til vores\",\n      diplomat_i18n_page: \"oversætter side\",\n      diplomat_i18n_page_suffix: \", eller til vores grænseflade og hjemmeside på GitHub.\",\n      diplomat_join_pref_github: \"Find din sproglokaliseringsfil \",\n      diplomat_github_url: \"på GitHub\",\n      diplomat_join_suf_github: \", redigér den online, og indsend en pull-anmodning. Kontrollér også feltet nedenfor for at holde dig up-to-date med internationaliseringsudviklingen!\",\n      diplomat_subscribe_desc: \"Få emails omkring i18n-udviklingen og baner der kan oversættes.\",\n      ambassador_introduction: \"Dette er et fællesskab, som vi er ved at bygge, og du har kontakterne. Vi har fora, emails og sociale netværk med masser af mennesker at tale med, at hjælpe med at bruge spillet og lære fra. Hvis du vil hjælpe med at få folk involveret og have det sjovt, og med at få en god fornemmelse af CodeCombat og hvor vi skal hen, så kan denne klasse være noget for dig.\",\n      ambassador_attribute_1: \"Kommunikationsevner. Vær i stand til at identificere de problemer, som spillerne har, og hjælpe dem med at løse dem. Hold også resten af ​​os informeret om, hvad spillerne siger, hvad de kan lide og ikke kan lide og hvad de ønsker sig mere af!\",\n      ambassador_join_desc: \"fortæl os lidt mere om dig selv, hvad du har gjort, og hvad du ville være interesseret i at gøre. Så tager vi den derfra!\",\n      ambassador_join_note_strong: \"Note\",\n      ambassador_join_note_desc: \"En af vores topprioriteter er at opbygge multiplayer, hvor spillere der har problemer med at løse niveauer kan tilkalde højlevel troldmænd til at hjælpe dem. Dette vil være en god måde for ambassadører at gøre deres arbejde. Vi vil holde jer opdateret omkring dette!\",\n      ambassador_subscribe_desc: \"Få emails omkring supportopdateringer og udviklingen af multiplayer.\",\n      teacher_subscribe_desc: \"Få emails omkring opdateringer og meddelelser for lærere.\",\n      changes_auto_save: \"Ændringerne gemmes automatisk, når du skifter afkrydsningsfelter.\",\n      diligent_scribes: \"Vores flittige Skrivere:\",\n      powerful_archmages: \"Vores Magtfulde Ærkemagere:\",\n      creative_artisans: \"Vores Kreative Artisans:\",\n      brave_adventurers: \"Vores Modige Eventyrere:\",\n      translating_diplomats: \"Vores Oversættende Diplomater:\",\n      helpful_ambassadors: \"Vores Hjælpsomme Ambassadørere:\"\n    },\n    ladder: {\n      my_matches: \"Mine kampe\",\n      simulate: \"Simulér\",\n      simulation_explanation: \"Ved at simulere spil kan du få dit spil rangeret hurtigere!\",\n      simulation_explanation_leagues: \"Du vil primært hjælpe med at simulere spil for allierede spillere i dine klaner og kurser.\",\n      simulate_games: \"Simulér Spil!\",\n      games_simulated_by: \"Spil simuleret af dig:\",\n      games_simulated_for: \"Spil simuleret af dig:\",\n      games_in_queue: \"Spil lige nu i køen:\",\n      games_simulated: \"Spil simuleret\",\n      games_played: \"Spil spillet\",\n      ratio: \"Forhold\",\n      leaderboard: \"Rangstige\",\n      battle_as: \"Kæmp som \",\n      summary_your: \"Dine \",\n      summary_matches: \"Kampe - \",\n      summary_wins: \" Vundne, \",\n      summary_losses: \" Tabte\",\n      rank_no_code: \"Ingen ny kode til Rangliste\",\n      rank_my_game: \"Ranglist Mit Spil!\",\n      rank_submitting: \"Indsender...\",\n      rank_submitted: \"Indsendt til Rangordning\",\n      rank_failed: \"Det lykkedes ikke at Rangordne\",\n      rank_being_ranked: \"Spil Bliver Rangordnet\",\n      rank_last_submitted: \"indsendt \",\n      help_simulate: \"Hjælp med at simulere spil?\",\n      code_being_simulated: \"Din nye kode bliver simuleret af andre spillere for at blive rangordnet. Dette vil blive opdateret som nye kampe kommer til.\",\n      no_ranked_matches_pre: \"Ingen rangordnet kampe for \",\n      no_ranked_matches_post: \" dit team! Spil mod nogle konkurrenter og vend derefter tilbage hertil for at få dit spil rangeret.\",\n      choose_opponent: \"Vælg en Modstander\",\n      select_your_language: \"Vælg dit sprog!\",\n      tutorial_play: \"Spil Tutorial\",\n      tutorial_recommended: \"Recommended if you've never played before\",\n      tutorial_skip: \"Skip Tutorial\",\n      tutorial_not_sure: \"Ikke helt sikker på hvad der foregår?\",\n      tutorial_play_first: \"Spil vores Tutorial.\",\n      simple_ai: \"Simpel CPU\",\n      warmup: \"Warmup\",\n      friends_playing: \"Venner der spiller\",\n      log_in_for_friends: \"Log på for at spille med dine venner!\",\n      social_connect_blurb: \"Tilslut og spil med vennerne!\",\n      invite_friends_to_battle: \"Invitér dine venner til at slutte sig til dig i kamp!\",\n      fight: \"Kæmp!\",\n      watch_victory: \"Vis din sejr\",\n      defeat_the: \"Overvind \",\n      watch_battle: \"Se kampen\",\n      tournament_started: \", begyndt\",\n      tournament_ends: \"Turnering afslutter\",\n      tournament_ended: \"Turnering afsluttet\",\n      tournament_rules: \"Turneringsregler\",\n      tournament_blurb: \"Skriv koden, samle guld, byg hære, knus fjender, vind præmier og opgrader din karriere i vores $ 40.000 Grådighedsturnering! Tjek detaljerne\",\n      tournament_blurb_criss_cross: \"Vind bud, konstruer stier, overlist modstandere, snub ædelstene og opgrader din karriere i vores Criss-Cross turnering! Tjek detaljerne\",\n      tournament_blurb_zero_sum: \"Slip din kodekreativitet løs i både guldindsamling og kamptaktik i denne alpine spejlkamp mellem rød troldmand og blå troldmand. Turneringen startede fredag ​​den 27. marts og den vil køre til mandag d. 6 april ved 05:00 PDT. Konkurrer om sjov og herlighed! Tjek detaljerne\",\n      tournament_blurb_ace_of_coders: \"Kæmp løs på den frosne gletscher i en spejlkamp! Turneringen startede onsdag den 16. september og den løber til og med onsdag 14 oktober kl 05:00 PDT. Tjek detaljerne\",\n      tournament_blurb_blog: \"på vores blog\",\n      rules: \"Regler\",\n      winners: \"Vindere\",\n      league: \"Liga\",\n      red_ai: \"Rød CPU\",\n      blue_ai: \"Blå CPU\",\n      wins: \"Vundne\",\n      humans: \"Rød\",\n      ogres: \"Blå\"\n    },\n    user: {\n      stats: \"Stats\",\n      singleplayer_title: \"Singleplayer Baner\",\n      multiplayer_title: \"Multiplayer Baner\",\n      achievements_title: \"Bedrifter\",\n      last_played: \"Sidst Spillet\",\n      status: \"Status\",\n      status_completed: \"Gennemførte\",\n      status_unfinished: \"Ufærdige\",\n      no_singleplayer: \"Ingen påbegyndte Singleplayer-spil.\",\n      no_multiplayer: \"Ingen påbegyndte Multiplayer-spil.\",\n      no_achievements: \"Ingen optjente Bedrifter.\",\n      favorite_prefix: \"Yndlingssprog er \",\n      favorite_postfix: \".\",\n      not_member_of_clans: \"Endnu ikke medlem af nogen klan.\"\n    },\n    achievements: {\n      last_earned: \"Sidst Tjente\",\n      amount_achieved: \"Beløb\",\n      achievement: \"Bedrift\",\n      current_xp_prefix: \"\",\n      current_xp_postfix: \" i alt\",\n      new_xp_prefix: \"\",\n      new_xp_postfix: \" tjent\",\n      left_xp_prefix: \"\",\n      left_xp_infix: \" indtil level \",\n      left_xp_postfix: \"\"\n    },\n    account: {\n      payments: \"Betalinger\",\n      prepaid_codes: \"Forudbetalte Koder\",\n      purchased: \"Købt\",\n      subscription: \"Abonnement\",\n      invoices: \"Fakturaer\",\n      service_apple: \"Apple\",\n      service_web: \"Web\",\n      paid_on: \"Betalt\",\n      service: \"Service\",\n      price: \"Pris\",\n      gems: \"Ædelstene\",\n      active: \"Aktiv\",\n      subscribed: \"Tilmeldt\",\n      unsubscribed: \"Afmeldt\",\n      active_until: \"Aktiv Indtil\",\n      cost: \"Pris\",\n      next_payment: \"Næste Betaling\",\n      card: \"Kort\",\n      status_unsubscribed_active: \"Du er ikke tilmeldt og vil ikke blive faktureret, men din konto er ligenu stadig aktiv.\",\n      status_unsubscribed: \"Få adgang til nye baner, helte, sager og bonus ædelstene med et CodeCombat-abonnement!\"\n    },\n    account_invoices: {\n      amount: \"Beløb i US dollars\",\n      declined: \"Dit kort blev afvist\",\n      invalid_amount: \"Angiv et US dollar beløb.\",\n      not_logged_in: \"Log ind eller opret en konto for at få adgang til fakturaer.\",\n      pay: \"Betal Faktura\",\n      purchasing: \"Køber...\",\n      retrying: \"Serverfejl, prøver igen.\",\n      success: \"Betaling gennemført. Tak!\"\n    },\n    account_prepaid: {\n      purchase_code: \"Køb en abonnementskode\",\n      purchase_code1: \"Abonnementskoder kan indløses for tilføje premium abonnementstid til en eller flere CodeCombat-konti.\",\n      purchase_code2: \"Hver CodeCombat-konto kan kun indløse en bestemt abonnementskode en gang.\",\n      purchase_code3: \"Abonnementskode måneder vil blive tilføjet til slutningen af et eksisterende abonnement på kontoen.\",\n      users: \"Burgere\",\n      months: \"Måneder\",\n      purchase_total: \"Total\",\n      purchase_button: \"Indsend Køb\",\n      your_codes: \"Dine Koder\",\n      redeem_codes: \"Indløs en Abonnementskode\",\n      prepaid_code: \"Forudbetalt kode\",\n      lookup_code: \"Opslå forudbetalt kode\",\n      apply_account: \"Anvend på din konto\",\n      copy_link: \"Du kan kopiere kodens link og sende den til en person.\",\n      quantity: \"Mængde\",\n      redeemed: \"Indløs\",\n      no_codes: \"Endnu ingen koder!\",\n      you_can1: \"Du kan\",\n      you_can2: \"købe en forudbetalt kode\",\n      you_can3: \"der kan anvendes på din egen konto eller gives til andre.\"\n    },\n    loading_error: {\n      could_not_load: \"Fejl ved indlæsning fra server\",\n      connection_failure: \"Forbindelsen mislykkedes\",\n      connection_failure_desc: \"Det ser ikke ud som om du er forbundet til Internet! Tjek din netværksforbindelse og genindlæse derefter denne side.\",\n      login_required: \"Login påkrævet\",\n      login_required_desc: \"Du skal være logget ind for at få adgang til denne side.\",\n      unauthorized: \"Du skal være logget ind. Har du har blokeret cookies?\",\n      forbidden: \"Ingen Adgang\",\n      forbidden_desc: \"Øv, der er ikke noget, som vi kan vise dig her! Sørg for, at du er logget ind på den rigtige konto, eller besøg en af ​​nedenstående links for at komme tilbage til programmering!\",\n      not_found: \"Ikke Fundet\",\n      not_found_desc: \"Øh, der er ikke noget her. Besøg et af følgende links for at komme tilbage til programmering!\",\n      not_allowed: \"Metode ikke tilladt.\",\n      timeout: \"Server Timeout\",\n      conflict: \"Resource konflikt.\",\n      bad_input: \"Dårligt input.\",\n      server_error: \"Serverfejl.\",\n      unknown: \"Ukendt Fejl\",\n      error: \"FEJL\",\n      general_desc: \"Noget gik galt, og det er sandsynligvis vores skyld. Prøv at vente lidt og opdatér derefter siden, eller besøg en af ​​de følgende links for at komme tilbage til programmering!\"\n    },\n    resources: {\n      level: \"Bane\",\n      patch: \"Opdatering\",\n      patches: \"Opdateringer\",\n      system: \"System\",\n      systems: \"Systemer\",\n      component: \"Komponent\",\n      components: \"Komponenter\",\n      hero: \"Helt\",\n      campaigns: \"Kampagner\"\n    },\n    concepts: {\n      \"arguments\": \"Argumenter\",\n      arithmetic: \"Aritmetik\",\n      arrays: \"Arrays\",\n      basic_syntax: \"Grundlæggende Syntaks\",\n      break_statements: \"Break Erklæringer\",\n      classes: \"Klasser\",\n      continue_statements: \"Continue Erklæringer\",\n      for_loops: \"For Løkker\",\n      functions: \"Funktioner\",\n      graphics: \"Grafik\",\n      if_statements: \"If Erklæringer\",\n      math_operations: \"Matematiske Funktioner\",\n      object_literals: \"Object Konstanter\",\n      parameters: \"Parametre\",\n      recursion: \"Rekursion\",\n      strings: \"Strenge\",\n      variables: \"Variable\",\n      vectors: \"Vektorer\",\n      advanced_strings: \"Avanceret Strenge\",\n      algorithms: \"Algoritmer\",\n      boolean_logic: \"Boolsk Logik\",\n      input_handling: \"Input Håndtering\",\n      while_loops: \"While Løkker\"\n    },\n    delta: {\n      added: \"Tilføjet\",\n      modified: \"Ændret\",\n      not_modified: \"Ikke Ændret\",\n      deleted: \"Slettet\",\n      moved_index: \"Index Flyttet \",\n      text_diff: \"Tekstsammenligning\",\n      merge_conflict_with: \"FOREN KONFLIKT MED\",\n      no_changes: \"Ingen Ændringer\"\n    },\n    legal: {\n      page_title: \"Rettigheder\",\n      opensource_description_prefix: \"Check \",\n      github_url: \"vores GitHub\",\n      opensource_description_center: \"og hjælp, hvis du har lyst! CodeCombat er bygget på snesevis af open source-projekter, og vi elsker dem. Se \",\n      archmage_wiki_url: \"vores Ærkemager wiki\",\n      opensource_description_suffix: \"for en liste over den software, der gør dette spil muligt.\",\n      practices_title: \"Respektfuld Best Practices\",\n      practices_description: \"Disse er vores løfter til dig, spilleren, i lidt mindre juridiske termer.\",\n      privacy_title: \"Privatliv\",\n      privacy_description: \"Vi vil ikke sælge nogen af ​​dine personlige oplysninger.\",\n      security_title: \"Sikkerhed\",\n      security_description: \"Vi stræber efter at holde dine personlige oplysninger sikre. Som et open source projekt, er vores hjemmeside frit åbent for alle, til at gennemgå og forbedre vores sikkerhedssystemer.\",\n      email_title: \"Email\",\n      email_description_prefix: \"Vi vil ikke oversvømme dig med spam. Via\",\n      email_settings_url: \"dine email-indstillinger\",\n      email_description_suffix: \"eller via links i de e-mails vi sender, kan du ændre dine præferencer og nemt afmelde notifikationer når som helst.\",\n      cost_title: \"Pris\",\n      cost_description: \"CodeCombat er gratis at spille på alle grundlæggende baner, med et ${{price}} USD/måned abonnement der giver adgang til ekstra baner og {{gems}} bonus ædelstene hver måned. Du kan annullere med et klik, og vi tilbyder fuld reklamationsret.\",\n      copyrights_title: \"Ophavsret og licenser\",\n      contributor_title: \"Bidragsyder Licensaftale\",\n      contributor_description_prefix: \"Alle bidrag, både på webstedet og på vores GitHub repository, er genstand for vores\",\n      cla_url: \"CLA\",\n      contributor_description_suffix: \"hvori du skal være enig før du bidrager.\",\n      code_title: \"Kode - MIT\",\n      mit_license_url: \"MIT licens\",\n      code_description_suffix: \"Dette omfatter al kode i systemer og komponenter, der er stillet til rådighed af CodeCombat med det formål at skabe baner.\",\n      art_title: \"Art/Musik - Creative Commons \",\n      art_description_prefix: \"Alt fælles indhold er tilgængelig under\",\n      cc_license_url: \"Creative Commons Attribution 4.0 International License\",\n      art_description_suffix: \"Fælles indhold er alt som er gjort tilgængelig af CodeCombat med det formål at skabe baner. Dette omfatter:\",\n      art_music: \"Musik\",\n      art_sound: \"Lyd\",\n      art_artwork: \"Artwork\",\n      art_sprites: \"Sprites\",\n      art_other: \"Ethvert og alle andre ikke-kode kreative værker, der er stillet til rådighed, når du opretter Baner.\",\n      art_access: \"I øjeblikket er der intet universel, nemt system til at hente disse aktiver. Generelt kan de hentes via de webadresser, som anvendes på hjemmesiden, så kontakt os for at få hjælp, eller for at hjælpe os i at udvide stedet til at gøre disse aktiver mere lettilgængelige.\",\n      art_paragraph_1: \"For tilskrivning, bedes navn og link til codecombat.com i nærheden af ​​hvor koden anvendes eller hvor det ellers passer for mediet. For eksempel:\",\n      use_list_1: \"Hvis det bruges i en film eller et andet spil, omfat codecombat.com i credits.\",\n      use_list_2: \"Hvis det bruges på en hjemmeside, indsæt et link nær brug, for eksempel under et billede, eller i en generel tilskrivningsside, hvor du også kan nævne andre Creative Commons aktiver og open source software, der bruges på sitet. Noget, der allerede klart refererer CodeCombat, såsom et blogindlæg der nævner CodeCombat behøver for nogle separate tilskrivninger.\",\n      art_paragraph_2: \"Hvis indholdet brugt ikke er skabt af CodeCombat men i stedet af en bruger af codecombat.com, tilskrives de i stedet, og følg henføringsmetoder som anvist i ressource-beskrivelsen, hvis der er en sådan.\",\n      rights_title: \"Rettigheder Forbeholdes\",\n      rights_desc: \"Alle rettigheder er forbeholdt Banerne selv. Dette omfatter\",\n      rights_scripts: \"Scripts\",\n      rights_unit: \"Enhedskonfiguration\",\n      rights_writings: \"Skriveri\",\n      rights_media: \"Medier (lyde, musik) og ethvert andet kreativt indhold lavet specielt til denne Bane og som ikke er gjort almindeligt tilgængelig, når man opretter Baner.\",\n      rights_clarification: \"For at tydeliggøre, noget, der stilles til rådighed i Level Editor til det formål at lave Baner er under CC, mens indholdet oprettet med Bane Editor eller uploadet i løbet af skabelsen af baner er ikke.\",\n      nutshell_title: \"I en nøddeskal\",\n      nutshell_description: \"Eventuelle ressourcer, vi leverer i Level Editor er gratis at bruge som du har lyst til at skabe Baner. Men vi forbeholder os ret til at begrænse distributionen af Banerne selv (der er oprettet på codecombat.com), så de kan blive opkrævet penge for i fremtiden, hvis det er hvad der ender med at ske.\",\n      canonical: \"Den engelske version af dette dokument er den endelige, kanoniske version. Hvis der er uoverensstemmelse mellem oversættelser, den engelske dokument forrang.\",\n      third_party_title: \"Tredjepartstjenester\",\n      third_party_description: \"CodeCombat bruger følgende tredjeparts-tjenester (blandt andre):\"\n    },\n    ladder_prizes: {\n      title: \"Turneringspræmier\",\n      blurb_1: \"Disse præmier vil blive uddelt i henhold til\",\n      blurb_2: \"turneringsreglerne\",\n      blurb_3: \"til top menneskelige og kæmpe spillere.\",\n      blurb_4: \"To hold betyder dobbelt så mange præmier!\",\n      blurb_5: \"(Der vil være to førstepladser, to andenpladser, osv.)\",\n      rank: \"Rang\",\n      prizes: \"Præmier\",\n      total_value: \"Totalværdi\",\n      in_cash: \"i kontanter\",\n      custom_wizard: \"Brugerdefineret CodeCombat Troldmand\",\n      custom_avatar: \"Brugerdefineret CodeCombat avatar\",\n      heap: \"for seks måneder \\\"Opstarts\\\"-adgang\",\n      credits: \"kredit\",\n      one_month_coupon: \"kupon: vælg enten Rails eller HTML\",\n      one_month_discount: \"rabat på 30%: vælg imellem Rails eller HTML\",\n      license: \"licens\",\n      oreilly: \"ebook efter eget valg\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1038\n");

/***/ })

});