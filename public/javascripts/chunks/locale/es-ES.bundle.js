/*! hash:345dfe6c0e434e9c7378, chunkhash:fb0ab7538230578e3480, name:locale/es-ES, filebase:es-ES.bundle.js, query:, file:javascripts/chunks/locale/es-ES.bundle.js */
webpackJsonp([62],{

/***/ 1046:
/***/ (function(module, exports) {

eval("module.exports = {\n  nativeDescription: \"español (ES)\",\n  englishDescription: \"Spanish (Spain)\",\n  translation: {\n    new_home: {\n      slogan: \"El juego más atractivo para aprender a programar.\",\n      classroom_edition: \"Edición para aulas:\",\n      learn_to_code: \"Aprende a programar:\",\n      play_now: \"Juega ahora\",\n      im_a_teacher: \"Soy un profesor\",\n      im_a_student: \"Soy un alumno\",\n      learn_more: \"Aprende más\",\n      classroom_in_a_box: \"Una clase todo en uno para enseñar informática.\",\n      codecombat_is: \"CodeCombat es una plataforma <strong>para que los estudiantes</strong> aprendan ciencia de la computación mientras juegan a un juego real.\",\n      our_courses: \"Nuestros cursos han sido especialmente diseñados para <strong> ser lo mejor del aula</strong>, incluso con profesores con poca o nula preparación en programación.\",\n      watch_how: \"Mira cómo CodeCombat está transformando la forma en que la gente aprende informática.\",\n      top_screenshots_hint: \"Los estudiantes escriben código y ven sus cambios en tiempo real.\",\n      designed_with: \"Diseñado pensando en los profesores\",\n      real_code: \"Real, escribe código\",\n      from_the_first_level: \"desde el primer nivel.\",\n      getting_students: \"Involucrar a los alumnos en la programación por sentencias tan rápido como sea posible es fundamental para aprender la sintaxis de la programación con una estructura apropiada.\",\n      educator_resources: \"Recursos para educadores\",\n      course_guides: \"y guías de cursos.\",\n      teaching_computer_science: \"Enseñar ciencias de la computación no requiere de un costoso título, porque nosotros proveemos las herramientas para apoyar educadores con cualquier nivel de conocimientos.\",\n      accessible_to: \"Accesible para\",\n      everyone: \"todo el mundo.\",\n      democratizing: \"La democratización del proceso de aprendizaje es el núcleo de nuestra filosofía. Todo mundo debe ser capaz de aprender a programar.\",\n      forgot_learning: \"En realidad creo que ellos olvidaron que en realidad están aprendiendo algo.\",\n      wanted_to_do: \" Programar es algo que siempre he querido hacer, nunca pensé que sería capáz de aprenderlo en la escuela.\",\n      why_games: \"¿Por qué aprender usando juegos es importante?\",\n      games_reward: \"Los juegos premian el esfuerzo productivo\",\n      encourage: \"Jugar es un excelente medio que promueve la interacción, descubrimiento, y aprendizaje a través de prueba-error. Un buen juego reta al jugador a dominar habilidades al pasar el tiempo, éste el el mismo proceso critico por el que pasan los estudiantes al aprender.\",\n      excel: \"Los juegos son excelentes premiando\",\n      struggle: \"el esfuerzo productivo\",\n      kind_of_struggle: \"el tipo de esfuerzo que resulta en aprendizaje learning que es atractivo y\",\n      motivating: \"motivante\",\n      not_tedious: \"no tedioso.\",\n      gaming_is_good: \"Estudios sugieren que el jugar es bueno para el cerebro de los niños. (¡Es verdad!)\",\n      game_based: \"Cuando los sistemas de aprendizaje basados en juegos son\",\n      compared: \"comparados\",\n      conventional: \"contra los métodos convencionales de evaluación, la diferencia es clara: los juegos son mejores ayudando a los alumnos a retener conocimiento, concentrarse y\",\n      perform_at_higher_level: \"desempeñarse a un nivel más alto de ejecución.\",\n      feedback: \"Los juegos también proporcionan retroalimentación en tiempo real que permite a los estudiantes ajustar su camino de solución y entender los conceptos de manera más holística, en lugar de limitarse a respuestas 'correctas' o 'incorrectas'.\",\n      real_game: \"Un juego real, jugado con código de verdad.\",\n      great_game: \"Un gran juego es algo más que insignias y logros - es sobre el viaje de un jugador, rompecabezas bien diseñados y la habilidad para enfrentar los desafíos con agilidad y confianza.\",\n      agency: \"CodeCombat es un juego que ofrece a los jugadores esa voluntad y confianza con nuestro motor de código robusto, que ayuda tanto a los principiantes como a los estudiantes avanzados por igual a escribir código correcto y válido.\",\n      request_demo_title: \"¡Invita a tus estudiantes hoy!\",\n      request_demo_subtitle: \"Solicitar una demostración y empieza a jugar con tus estudiantes en menos de una hora.\",\n      get_started_title: \"Configure su clase hoy\",\n      get_started_subtitle: \"Prepare su clase, agregue cuentas de estudiantes y siga su progreso a medida que aprenden a programar.\",\n      request_demo: \"Pide una demostración\",\n      setup_a_class: \"Configurar una clase\",\n      have_an_account: \"¿Tienes una cuenta?\",\n      logged_in_as: \"En este momento, has iniciado sesión como\",\n      computer_science: \"Cursos de informática para todas las edades\",\n      ffa: \"Gratis para todos los estudiantes\",\n      coming_soon: \"¡Más muy pronto!\",\n      courses_available_in: \"Los cursos están disponibles en JavaScript y Python. Los cursos de Desarrollo Web utilizan HTML, CSS, jQuery y Bootstrap.\",\n      boast: \"Cuenta con acertijos lo suficiente complejos como para fascinar a jugadores y programadores por igual.\",\n      winning: \"Una combinación ganadora entre un juego de rol y una tarea sobre programación que hacen la educación amigable y disfrutable para los niños.\",\n      run_class: \"Todo lo que necesitas para organizar una clase de informática en tu escuela hoy mismo, sin necesidad de ningún conocimiento previo de informática.\",\n      goto_classes: \"Ir a Mis clases\",\n      view_profile: \"Ver mi perfil\",\n      view_progress: \"Ver mi progreso\",\n      go_to_courses: \"Ir a mis cursos\",\n      want_coco: \"¿Quieres CodeCombat en tu escuela?\"\n    },\n    nav: {\n      map: \"Mapa\",\n      play: \"Jugar\",\n      community: \"Comunidad\",\n      courses: \"Cursos\",\n      blog: \"Blog\",\n      forum: \"Foro\",\n      account: \"Cuenta\",\n      my_account: \"Mi Cuenta\",\n      profile: \"Perfil\",\n      home: \"Inicio\",\n      contribute: \"Colaborar\",\n      legal: \"Legalidad\",\n      privacy: \"Privacidad\",\n      about: \"Sobre nosotros\",\n      contact: \"Contacta\",\n      twitter_follow: \"Síguenos en Twitter\",\n      my_classrooms: \"Mis Clases\",\n      my_courses: \"Mis Cursos\",\n      careers: \"Carreras\",\n      facebook: \"Facebook\",\n      twitter: \"Twitter\",\n      create_a_class: \"Crear una clase.\",\n      other: \"Otros\",\n      learn_to_code: \"¡Aprende a programar!\",\n      toggle_nav: \"Cambiar modo de navegación\",\n      schools: \"Escuelas\",\n      get_involved: \"Involúcrate\",\n      open_source: \"Código abierto (GitHub)\",\n      support: \"Soporte\",\n      faqs: \"Preguntas frecuentes\",\n      help_pref: \"¿Necesitas ayuda? ¡Email\",\n      help_suff: \"y nos pondremos en contacto!\",\n      resource_hub: \"Centro de recursos\"\n    },\n    modal: {\n      close: \"Cerrar\",\n      okay: \"Ok\"\n    },\n    not_found: {\n      page_not_found: \"Página no encontrada\"\n    },\n    diplomat_suggestion: {\n      title: \"¡Ayuda a traducir CodeCombat!\",\n      sub_heading: \"Necesitamos tus habilidades lingüísticas.\",\n      pitch_body: \"Nosotros desarrollamos CodeCombat en inglés, pero ya tenemos jugadores de todo el mundo. Muchos de ellos quieren jugar en español porque no hablan inglés, así que si hablas ambos idiomas, inscríbete como Diplomático y ayuda a traducir la web y todos los niveles de CodeCombat al español.\",\n      missing_translations: \"Mientras terminamos la traducción al español, verás en inglés las partes que no estén todavía disponibles.\",\n      learn_more: \"Aprende más sobre ser un Diplomático\",\n      subscribe_as_diplomat: \"Suscríbete como Diplomático\"\n    },\n    play: {\n      play_as: \"Jugar como\",\n      get_course_for_class: \"¡Asigna desarrollo de juegos y más a tus clases!\",\n      compete: \"¡Compite!\",\n      spectate: \"Observar\",\n      players: \"jugadores\",\n      hours_played: \"horas jugadas\",\n      items: \"Objetos\",\n      unlock: \"Desbloquear\",\n      confirm: \"Confirmar\",\n      owned: \"Lo Posees\",\n      locked: \"Bloqueado\",\n      available: \"Disponible\",\n      skills_granted: \"Habilidades concedidas\",\n      heroes: \"Heroes\",\n      achievements: \"Logros\",\n      settings: \"Ajustes\",\n      poll: \"Encuesta\",\n      next: \"Siguiente Heroe\",\n      change_hero: \"Seleccionar Heroe\",\n      change_hero_or_language: \"Cambiar héroe o idioma\",\n      buy_gems: \"Comprar Joyas\",\n      subscribers_only: \"¡Solo para suscriptores!\",\n      subscribe_unlock: \"¡Subscríbete para desbloquearlos!\",\n      subscriber_heroes: \"¡Suscríbete hoy para desbloquear inmediatamente Amara, Hushbaum y Hattori!\",\n      subscriber_gems: \"¡Suscríbete hoy para comprar este héroe con gemas!\",\n      anonymous: \"Jugador Anónimo\",\n      level_difficulty: \"Dificultad: \",\n      awaiting_levels_adventurer_prefix: \"Liberamos nuevos niveles cada semana.\",\n      awaiting_levels_adventurer: \"Regístrate como Aventurero\",\n      awaiting_levels_adventurer_suffix: \"para ser el primero en jugar nuevos niveles.\",\n      adjust_volume: \"Ajustar volúmen\",\n      campaign_multiplayer: \"Arenas Multijugador\",\n      campaign_multiplayer_description: \"... en las que tu código se enfrentará al de otros jugadores.\",\n      brain_pop_done: \"¡Has vencido a los Ogros con código! ¡Ganaste!\",\n      brain_pop_challenge: \"Retarte a jugar otra vez usando un lenguaje de programación diferente!\",\n      back_to_classroom: \"Regresa a la clase\",\n      teacher_button: \"Para maestros\",\n      get_more_codecombat: \"Obtener más CodeCombat\"\n    },\n    code: {\n      \"if\": \"si\",\n      \"else\": \"otro\",\n      elif: \"si no\",\n      \"while\": \"mientras\",\n      loop: \"ciclo\",\n      \"for\": \"por\",\n      \"break\": \"interrupción\",\n      \"continue\": \"continuar\",\n      pass: \"pasar\",\n      \"return\": \"regresar\",\n      then: \"entonces\",\n      \"do\": \"hacer\",\n      end: \"fin\",\n      \"function\": \"función\",\n      def: \"define\",\n      \"var\": \"variable\",\n      self: \"yo\",\n      hero: \"heroe\",\n      \"this\": \"este\",\n      or: \"o\",\n      \"||\": \"o\",\n      and: \"y\",\n      \"&&\": \"y\",\n      not: \"no\",\n      \"!\": \"no\",\n      \"=\": \"asigne a\",\n      \"==\": \"igual a\",\n      \"===\": \"igual a estrictamente\",\n      \"!=\": \"no igual a\",\n      \"!==\": \"no estrictamente igual\",\n      \">\": \"es mayor que\",\n      \">=\": \"es mayor que o igual\",\n      \"<\": \"es menor que\",\n      \"<=\": \"es menor que o igual\",\n      \"*\": \"multiplicado por\",\n      \"/\": \"dividido por\",\n      \"+\": \"más\",\n      \"-\": \"menos\",\n      \"+=\": \"añade y asigne\",\n      \"-=\": \"elimine y asigne\",\n      True: \"Verdadero\",\n      \"true\": \"verdadero\",\n      False: \"Falso\",\n      \"false\": \"falso\",\n      undefined: \"indefinido\",\n      \"null\": \"nulo\",\n      nil: \"cero\",\n      None: \"Ninguno\"\n    },\n    share_progress_modal: {\n      blurb: \"¡Estás progresando bastante bien! Dile a tus padres cuánto has aprendido con CodeCombat.\",\n      email_invalid: \"La dirección de correo electrónico no es válida.\",\n      form_blurb: \"¡Introduzca su correo electrónico y nosotros les mostraremos!\",\n      form_label: \"Correo Electrónico\",\n      placeholder: \"correo electrónico\",\n      title: \"Excelente Trabajo, Aprendiz\"\n    },\n    login: {\n      sign_up: \"Crear una cuenta\",\n      email_or_username: \"Correo electrónico o nombre de usuario\",\n      log_in: \"Entrar\",\n      logging_in: \"Entrando...\",\n      log_out: \"Salir\",\n      forgot_password: \"¿Olvidaste tu contraseña?\",\n      finishing: \"Finalizando\",\n      sign_in_with_facebook: \"Accede usando Facebook\",\n      sign_in_with_gplus: \"Accede usando G+\",\n      signup_switch: \"¿Quieres crear una cuenta?\"\n    },\n    signup: {\n      create_student_header: \"Crear Cuenta de Estudiante\",\n      create_teacher_header: \"Crear Cuenta de Maestro\",\n      create_individual_header: \"Crear Cuenta Individual\",\n      email_announcements: \"¡Reciba anuncios sobre los nuevos niveles y características de CodeCombat!\",\n      creating: \"Creando cuenta...\",\n      sign_up: \"Registrarse\",\n      log_in: \"Iniciar sesión con contraseña\",\n      required: \"Tienes que estar registrado antes de poder seguir por aquí.\",\n      login_switch: \"¿Ya tienes una cuenta?\",\n      optional: \"opcional\",\n      connected_gplus_header: \"¡Te has conectado con éxito con Google+!\",\n      connected_gplus_p: \"Termina el registro para poder iniciar sesión con su cuenta de Google+.\",\n      connected_facebook_header: \"¡Te has conectado correctamente con Facebook!\",\n      connected_facebook_p: \"Termina el registro para poder iniciar sesión con su cuenta de Facebook.\",\n      hey_students: \"Alumnos, ingresen el código de la clase de su maestro.\",\n      birthday: \"Cumpleaños\",\n      account_exists: \"Este correo electrónico ya está en uso:\",\n      sign_in: \"Iniciar Sesión\",\n      email_good: \"¡El email parece bueno!\",\n      name_available: \"Nombre de usuario disponible!\",\n      name_is_email: \"El nombre de usuario no puede ser un correo electrónico\",\n      choose_type: \"Elija su tipo de cuenta:\",\n      teacher_type_1: \"Enseñar programación utilizando CodeCombat!\",\n      teacher_type_2: \"Configura tu clase\",\n      teacher_type_3: \"Acceder a las guías del curso\",\n      teacher_type_4: \"Ver el progreso del estudiante\",\n      signup_as_teacher: \"Iniciar sesión como Maestro\",\n      student_type_1: \"¡Aprende a programar mientras juegas un juego atractivo!\",\n      student_type_2: \"Juega con tu clase\",\n      signup_as_student: \"Iniciar sesión como Estudiante\"\n    },\n    recover: {\n      recover_account_title: \"Recuperar Cuenta\",\n      send_password: \"Enviar recuperación de contraseña\",\n      recovery_sent: \"Email de recuperación de contraseña enviado.\"\n    },\n    items: {\n      primary: \"Primario\",\n      secondary: \"Secundario\",\n      armor: \"Armadura\",\n      accessories: \"Accesorios\",\n      misc: \"Misceláneos\",\n      books: \"Libros\"\n    },\n    common: {\n      back: \"Volver\",\n      \"continue\": \"Continuar\",\n      loading: \"Cargando...\",\n      saving: \"Guardando...\",\n      sending: \"Enviando...\",\n      send: \"Enviar\",\n      cancel: \"Cancelar\",\n      save: \"Guardar\",\n      publish: \"Publicar\",\n      create: \"Crear\",\n      fork: \"Bifurcar\",\n      play: \"Jugar\",\n      retry: \"Reintentar\",\n      actions: \"Acciones\",\n      info: \"Información\",\n      help: \"Ayuda\",\n      watch: \"Mirar\",\n      unwatch: \"Pasar\",\n      submit_patch: \"Enviar Parche\",\n      submit_changes: \"Enviar Cambios\",\n      save_changes: \"Guardar cambios\",\n      required_field: \"Campo requerido\"\n    },\n    general: {\n      and: \"y\",\n      name: \"Nombre\",\n      date: \"Fecha\",\n      body: \"Cuerpo\",\n      version: \"Versión\",\n      pending: \"Pendiente\",\n      accepted: \"Aceptado\",\n      rejected: \"Rechazado\",\n      withdrawn: \"Retirado\",\n      accept: \"Aceptar\",\n      reject: \"Rechazar\",\n      withdraw: \"Retirar\",\n      submitted: \"Enviado\",\n      commit_msg: \"Mensaje de Asignación o Commit\",\n      version_history: \"Historial de versión\",\n      version_history_for: \"Historial de las versiones de: \",\n      select_changes: \"Selecciona dos cambios más abajo para ver la diferencia.\",\n      undo_prefix: \"Deshacer\",\n      undo_shortcut: \"(Ctrl+Z)\",\n      redo_prefix: \"Rehacer\",\n      redo_shortcut: \"(Ctrl+Shift+Z)\",\n      play_preview: \"Reproducir una vista previa del nivel actual\",\n      result: \"Resultado\",\n      results: \"Resultados\",\n      description: \"Descripción\",\n      or: \"o\",\n      subject: \"Asunto\",\n      email: \"Correo electrónico\",\n      password: \"Password\",\n      confirm_password: \"Confirmar contraseña\",\n      message: \"Mensaje\",\n      code: \"Código\",\n      ladder: \"Clasificación\",\n      when: \"Cuando\",\n      opponent: \"Oponente\",\n      rank: \"Rango\",\n      score: \"Puntuación\",\n      win: \"Victoria\",\n      loss: \"Derrota\",\n      tie: \"Empate\",\n      easy: \"Fácil\",\n      medium: \"Media\",\n      hard: \"Difícil\",\n      player: \"Jugador\",\n      player_level: \"Nivel\",\n      warrior: \"Guerrero\",\n      ranger: \"Unidad de combate a distancia\",\n      wizard: \"Mago\",\n      first_name: \"Nombre\",\n      last_name: \"Apellidos\",\n      last_initial: \"Última inicial\",\n      username: \"Alias\",\n      contact_us: \"Contáctenos\",\n      close_window: \"Cerrar ventana\",\n      learn_more: \"Ver Más\",\n      more: \"Más\",\n      fewer: \"Menos\",\n      \"with\": \"con\"\n    },\n    units: {\n      second: \"segundo\",\n      seconds: \"segundos\",\n      sec: \"seg\",\n      minute: \"minuto\",\n      minutes: \"minutos\",\n      hour: \"hora\",\n      hours: \"horas\",\n      day: \"día\",\n      days: \"días\",\n      week: \"semana\",\n      weeks: \"semanas\",\n      month: \"mes\",\n      months: \"meses\",\n      year: \"año\",\n      years: \"años\"\n    },\n    play_level: {\n      back_to_map: \"Regresar al mapa\",\n      directions: \"Direcciones\",\n      edit_level: \"Editar Nivel\",\n      keep_learning: \"Continuar Aprendiendo\",\n      explore_codecombat: \"Explore CodeCombat\",\n      finished_hoc: \"He terminado my Hora de Código\",\n      get_certificate: \"Obtén tu certificado!\",\n      level_complete: \"Nivel completo\",\n      completed_level: \"Nivel completado:\",\n      course: \"Curso:\",\n      done: \"Hecho\",\n      next_level: \"Siguiente nivel\",\n      next_game: \"Siguiente juego\",\n      show_menu: \"Mostrar menú del juego\",\n      home: \"Inicio\",\n      level: \"Nivel\",\n      skip: \"Saltar\",\n      game_menu: \"Menú del Juego\",\n      restart: \"Reiniciar\",\n      goals: \"Objetivos\",\n      goal: \"Objetivo Principal\",\n      running: \"Corriendo...\",\n      success: \"Éxito!\",\n      incomplete: \"Incompleto\",\n      timed_out: \"Acabó el tiempo\",\n      failing: \"Fallando\",\n      reload: \"Recargar\",\n      reload_title: \"¿Recargar todo el código?\",\n      reload_really: \"¿Estás seguro que quieres reiniciar el nivel?\",\n      reload_confirm: \"Recargarlo todo\",\n      victory: \"Victoria\",\n      victory_title_prefix: \"¡\",\n      victory_title_suffix: \" Completado!\",\n      victory_sign_up: \"Regístrate para recibir actualizaciones.\",\n      victory_sign_up_poke: \"¿Quieres recibir las últimas noticias en tu correo electrónico? ¡Crea una cuente gratuita y te mantendremos informado!\",\n      victory_rate_the_level: \"Puntúa este nivel: \",\n      victory_return_to_ladder: \"Volver a Clasificación\",\n      victory_saving_progress: \"Salvando Progreso\",\n      victory_go_home: \"Ir a Inicio\",\n      victory_review: \"¡Cuéntanos más!\",\n      victory_review_placeholder: \"¿Cómo estuvo el nivel?\",\n      victory_hour_of_code_done: \"¿Ya terminaste?\",\n      victory_hour_of_code_done_yes: \"Si, ¡He terminado con mi hora de código!\",\n      victory_experience_gained: \"XP Conseguida\",\n      victory_gems_gained: \"Gemas Conseguidas\",\n      victory_new_item: \"Nuevo artículo\",\n      victory_viking_code_school: \"Jolines, el nivel que acabas de pasar era difícil! Si todavía no eres un desarrollador de software, deberías serlo. Acabas de conseguir una aceptación por vía rápida con la Escuela Vikinga de Có, donde tú puedes llevar tus habilidades al siguiente nivel y convertirte en un desarrollador web profesional en 14 semanas.\",\n      victory_become_a_viking: \"Convertirse en un vikingo\",\n      victory_no_progress_for_teachers: \"El progreso no se guarda para los profesores. Pero, puedes añadir una cuenta de estudiante a tu clase para ti.\",\n      tome_cast_button_run: \"Correr\",\n      tome_cast_button_running: \"Corriendo\",\n      tome_cast_button_ran: \"Corrido\",\n      tome_submit_button: \"Mandar\",\n      tome_reload_method: \"Recargar código original para este método\",\n      tome_available_spells: \"Hechizos disponibles\",\n      tome_your_skills: \"Tus Habilidades\",\n      code_saved: \"código Salvado\",\n      skip_tutorial: \"Saltar (esc)\",\n      keyboard_shortcuts: \"Atajos de teclado\",\n      loading_start: \"Iniciar Nivel\",\n      problem_alert_title: \"Arregla tu código\",\n      time_current: \"Ahora:\",\n      time_total: \"Máx:\",\n      time_goto: \"Ir a:\",\n      non_user_code_problem_title: \"No puede cargar un nivel\",\n      infinite_loop_title: \"Bucle infinito detectado\",\n      infinite_loop_description: \"El código inicial para construir el mundo no terminó de ejecutarse. Probablemente es muy lento o tiene un loop infinito. O puede ser un bug. Puedes tratar ejecutando este código nuevamente o reiniciar el código a su estado por defecto. Si eso no lo arregla, haznos saber.\",\n      check_dev_console: \"También podéis abrir la consola de desarrollo para ver que puede salir mal.\",\n      check_dev_console_link: \"(instrucciones)\",\n      infinite_loop_try_again: \"Inténtalo de nuevo\",\n      infinite_loop_reset_level: \"Reiniciar nivel\",\n      infinite_loop_comment_out: \"Comenta mi código\",\n      tip_toggle_play: \"Alterna entre jugar/pausa con Ctrl+P.\",\n      tip_scrub_shortcut: \"Ctrl+[ y Ctrl+] para rebobinar y avanza hacia adelantar.\",\n      tip_guide_exists: \"Haz clic en la guía arriba de la página para más información útil.\",\n      tip_open_source: \"¡CodeCombat es 100% open source!\",\n      tip_tell_friends: \"¿Disfrutando de CodeCombat? ¡Cuéntale a tus amigos acerca de nosotros!\",\n      tip_beta_launch: \"CodeCombat lanzó su beta en Octubre de 2013.\",\n      tip_think_solution: \"Piensa en la solución, no en el problema.\",\n      tip_theory_practice: \"En teoría, no hay diferencia entre la teoría y la práctica. Pero en la práctica, la hay. - Yogi Berra\",\n      tip_error_free: \"Hay dos formas de escribir programas sin errores; solo la tercera funciona. - Alan Perlis\",\n      tip_debugging_program: \"Si depurar es el proceso de eliminar bugs, entonces programar debe ser el proceso de crearlos. - Edsger W. Dijkstra\",\n      tip_forums: \"¡Dirígete a los foros y dinos lo que piensas!\",\n      tip_baby_coders: \"En el futuro, incluso los bebés serás Archimagos.\",\n      tip_morale_improves: \"Se seguirá cargando hasta que la moral mejore.\",\n      tip_all_species: \"Creemos en las mismas oportunidades para aprender a programar para todas las especies.\",\n      tip_reticulating: \"Reticulating spines.\",\n      tip_harry: \"Ey un mago, \",\n      tip_great_responsibility: \"Grandes habilidades de codificación programación conllevan una gran responsabilidad a la hora de depurar.\",\n      tip_munchkin: \"Si no te comes la verdura, un munchkin vendrá a por ti mientras duermes.\",\n      tip_binary: \"Hay 10 tipos de personas en el mundo: las que saben binario y las que no.\",\n      tip_commitment_yoda: \"Un programador debe tener el más serio compromiso, la mente más crítica. ~ Yoda\",\n      tip_no_try: \"Hazlo o no lo hagas, pero no lo intentes. - Yoda\",\n      tip_patience: \"Paciencia tener debes, joven Padawan. - Yoda\",\n      tip_documented_bug: \"Un bug documentado no es un bug, es una característica más.\",\n      tip_impossible: \"Siempre parece imposible, hasta que se hace. - Nelson Mandela\",\n      tip_talk_is_cheap: \"Hablar es fácil. Enséñame el código. - Linus Torvalds\",\n      tip_first_language: \"La cosa más desastrosa que puedes aprender es tu primer lenguaje de programación. - Alan Kay\",\n      tip_hardware_problem: \"P: ¿Cuantos programadores hacen falta para cambiar una bombilla?  R: Ninguno, es un problema de hardware.\",\n      tip_hofstadters_law: \"Ley de Hofstadter: Siempre lleva más tiempo de lo que esperas, incluso cuando tienes en cuenta la Ley de Hofstadter.\",\n      tip_premature_optimization: \"La optimización prematura es la raíz de todo mal. - Donald Knuth\",\n      tip_brute_force: \"Cuando haya dudas, usa la fuerza bruta. - Ken Thompson\",\n      tip_extrapolation: \"Existen solo dos clases de personas: aquellos que pueden extrapolar desde información incompleta...\",\n      tip_superpower: \"Programar es lo más parecido que tenemos a un superpoder.\",\n      tip_control_destiny: \"En el verdadero open source, tienes el derecho de controlar tu propio destino. - Linus Torvalds\",\n      tip_no_code: \"Ningún código es más rápido que ningún código\",\n      tip_code_never_lies: \"El código nunca os miente, los comentarios algunas veces. — Ron Jeffries\",\n      tip_reusable_software: \"Antes de que el software pueda ser reutilizable, primero debe ser utilizable.\",\n      tip_optimization_operator: \"Cada lenguaje tiene un operator para optimización. En la mayoría de los lenguajes dicho operador es ‘//’\",\n      tip_lines_of_code: \"Medir el progreso en la programación en líneas de código es como medir el progreso de construcción de una aeronave por su peso. — Bill Gates\",\n      tip_source_code: \"Quiero cambiar el mundo, pero no me darían acceso al código fuente.\",\n      tip_javascript_java: \"Java es a JavaScript lo que un automóvil es a un móvil. - Chris Heilmann\",\n      tip_move_forward: \"Lo que sea que hagas, sigue hacia adelante. - Martin Luther King Jr.\",\n      tip_google: \"¿Tenéis un problema que no podéis resolver? ¡Googleadlo!\",\n      tip_adding_evil: \"Añadiendo una pizca de maldad.\",\n      tip_hate_computers: \"Esto es lo que pasa con la gente que piensa que odia las computadoras. Lo que realmente odian es a los malos programadores. - Larry Niven\",\n      tip_open_source_contribute: \"Puedes contribuir a mejorar CodeCombat!\",\n      tip_recurse: \"Iterar es humano, recursar es divino. - L. Peter Deutsch\",\n      tip_free_your_mind: \"Tienes que dejarlo ir, Neo. Miedo, dudas e incredulidad. Libera tu mente. - Morpheus\",\n      tip_strong_opponents: \"Incluso el más fuerte de los opositores oculta debilidad. - Itachi Uchiha\",\n      tip_paper_and_pen: \"Antes de empezar a programar, siempre puedes planificar con papel y lápiz.\",\n      tip_solve_then_write: \"Priero, resuelve el problema. Después, escribe el código. - John Johnson\",\n      tip_compiler_ignores_comments: \"A veces pienso que el compilador ignora mis comentarios.\",\n      tip_understand_recursion: \"La única manera de entender la recursividad, es entendiendo la recursividad.\",\n      tip_life_and_polymorphism: \"El código abierto es como una estructura totalmente polimórfica y heterógenea: Bienvenidos todos los tipos.\",\n      tip_mistakes_proof_of_trying: \"Los errores en tú código tan solo son una prueba de que lo estás intentando.\",\n      tip_adding_orgres: \"Redondeando los ogros.\",\n      tip_sharpening_swords: \"Afilando las espadas.\",\n      tip_ratatouille: \"No debes dejar que nadie defina tus límites debido a tu origen. Tu único límite es tu alma. - Gusteau, Ratatouille\",\n      tip_nemo: \"Si la vida te derrota ¿Qué hay que hacer? Nadaremos, nadaremos, nadaremos. - Dory, Encontrando a Nemo\",\n      tip_good_idea: \"La mejor manera para tener una buena idea es tener muchas ideas. - Linus Pauling\",\n      tip_mulan: \"Si crees que puedes, entonces podrás. - Mulan\"\n    },\n    game_menu: {\n      inventory_tab: \"Inventario\",\n      save_load_tab: \"Guardar/Cargar\",\n      options_tab: \"Opciones\",\n      guide_tab: \"Guia\",\n      guide_video_tutorial: \"Vídeo Tutorial\",\n      guide_tips: \"Consejos\",\n      multiplayer_tab: \"Multijugador\",\n      auth_tab: \"Crear cuenta\",\n      inventory_caption: \"Equipa a tu héroe\",\n      choose_hero_caption: \"Elige la lengua del héroe\",\n      options_caption: \"Ajustes de configuración\",\n      guide_caption: \"Documentos y pistas\",\n      multiplayer_caption: \"¡Juega con amigos!\",\n      auth_caption: \"Guarda tu progreso.\"\n    },\n    leaderboard: {\n      view_other_solutions: \"Ver clasificaciones\",\n      scores: \"Puntuaciones\",\n      top_players: \"Mejores jugadores de\",\n      day: \"Hoy\",\n      week: \"Esta semana\",\n      all: \"Siempre\",\n      time: \"Tiempo\",\n      damage_taken: \"Daño recibido\",\n      damage_dealt: \"Daño causado\",\n      difficulty: \"Dificultad\",\n      gold_collected: \"Oro conseguido\"\n    },\n    inventory: {\n      equipped_item: \"Equipado\",\n      required_purchase_title: \"Requerido\",\n      available_item: \"Disponible\",\n      restricted_title: \"Restringido\",\n      should_equip: \"(doble-clic para equipar)\",\n      equipped: \"(equipado)\",\n      locked: \"(bloqueado)\",\n      restricted: \"(restringido en este nivel)\",\n      equip: \"Equipar\",\n      unequip: \"Desequipar\"\n    },\n    buy_gems: {\n      few_gems: \"Unas pocas joyas\",\n      pile_gems: \"Pila de joyas\",\n      chest_gems: \"Cofre de joyas\",\n      purchasing: \"Comprando...\",\n      declined: \"Tu tarjeta fue rechazada\",\n      retrying: \"Erroe en servidor, reintentando.\",\n      prompt_title: \"Gemas no suficientes\",\n      prompt_body: \"¿Quieres obtener más?\",\n      prompt_button: \"Ingresa a la tienda\",\n      recovered: \"Las gemas compradas con anterioridad han sido recuperadas. Por favor, actualiza la página.\",\n      price: \"x{{gems}} / mes\"\n    },\n    earn_gems: {\n      prompt_title: \"No hay suficientes gemas\",\n      prompt_body: \"¡Sigue jugando para ganar más!\"\n    },\n    subscribe: {\n      comparison_blurb: \"¡Mejora tus habilidades con una suscripción a CodeCombat!\",\n      must_be_logged: \"Primero debes iniciar sesión. Crea una cuenta o entra a tu cuenta desde el menú.\",\n      subscribe_title: \"Suscríbete\",\n      unsubscribe: \"Dar de baja\",\n      confirm_unsubscribe: \"Confirmar baja\",\n      never_mind: \"No te preocupes, aun así te quiero\",\n      thank_you_months_prefix: \"Gracias por apoyarnos estos\",\n      thank_you_months_suffix: \"meses.\",\n      thank_you: \"Gracias por apoyar a CodeCombat.\",\n      sorry_to_see_you_go: \"¡Lamentamos verte marchar! Por favor, haznos saber que pudimos haacer mejor.\",\n      unsubscribe_feedback_placeholder: \"Oh, ¿Qué hemos hecho?\",\n      stripe_description: \"Suscripción mensual\",\n      subscription_required_to_play: \"Necesitas una suscripción para jugar este nivel.\",\n      unlock_help_videos: \"Suscríbete para desbloquear todos los videotutoriales.\",\n      personal_sub: \"Suscripciones personales\",\n      loading_info: \"Cargando información de la suscripción...\",\n      managed_by: \"Administrado por\",\n      will_be_cancelled: \"Será cancelado el\",\n      currently_free: \"Actualmente tienes una suscripción gratuita\",\n      currently_free_until: \"Actualmente tienes una suscripción hasta el\",\n      was_free_until: \"Tenías una suscripción gratuita hasta el\",\n      managed_subs: \"Suscripciones administradas\",\n      subscribing: \"Suscribiendo...\",\n      current_recipients: \"Últimos recibos\",\n      unsubscribing: \"Dando de baja...\",\n      subscribe_prepaid: \"Haz clic en Suscríbete para utilizar un código de prepago\",\n      using_prepaid: \"Utilizando código de prepago para suscripción mensual\"\n    },\n    choose_hero: {\n      choose_hero: \"Selecciona tu Héroe\",\n      programming_language: \"Lenguaje de Programación\",\n      programming_language_description: \"¿Qué lenguaje de programación deseas usar?\",\n      \"default\": \"Por defecto\",\n      experimental: \"Experimental\",\n      python_blurb: \"Simple pero poderoso.\",\n      javascript_blurb: \"El lenguaje de la web.\",\n      coffeescript_blurb: \"Sintaxis de JavaScript mejorada.\",\n      lua_blurb: \"Lenguaje Script para Juegos.\",\n      status: \"Estado\",\n      weapons: \"Armas\",\n      weapons_warrior: \"Espadas - Corto Alcance, Sin Magia\",\n      weapons_ranger: \"Ballestas, Pistolas - Largo Alcance, Sin Magia\",\n      weapons_wizard: \"Varitas, Bastones - Largo Alcance, Con Magia\",\n      attack: \"Daño\",\n      health: \"Salud\",\n      speed: \"Velocidad\",\n      regeneration: \"Regeneración\",\n      range: \"Alcance\",\n      blocks: \"Bloqueo\",\n      skills: \"Habilidades\",\n      speed_1: \"Se mueve a\",\n      speed_2: \"metros por segundo.\",\n      available_for_purchase: \"Disponible para Comprar\",\n      level_to_unlock: \"Nivel para desbloquear:\",\n      restricted_to_certain_heroes: \"Solo ciertos héroes pueden jugar este nivel.\"\n    },\n    skill_docs: {\n      read_only: \"Solo lectura\",\n      action: \"Acción\",\n      spell: \"Hechizo\",\n      action_name: \"nombres\",\n      action_cooldown: \"Toma\",\n      action_specific_cooldown: \"Reposo\",\n      action_damage: \"Daño\",\n      action_range: \"Alcance\",\n      action_radius: \"Radio\",\n      action_duration: \"Duración\",\n      example: \"Ejemplo\",\n      ex: \"ej\",\n      current_value: \"Valor actual\",\n      default_value: \"Valor por defecto\",\n      parameters: \"Parámetros\",\n      returns: \"Devolver\",\n      granted_by: \"Otorgado por\"\n    },\n    save_load: {\n      granularity_saved_games: \"Guardado\",\n      granularity_change_history: \"Historia\"\n    },\n    options: {\n      general_options: \"Opciones Generales\",\n      volume_label: \"Volumen\",\n      music_label: \"Musica\",\n      music_description: \"Musica de fondo on/off.\",\n      editor_config_title: \"Configuración del editor\",\n      editor_config_livecompletion_label: \"Autocompletado en vivo\",\n      editor_config_livecompletion_description: \"Muestra sugerencias de autocompletado mientras se escribe.\",\n      editor_config_invisibles_label: \"Mostrar elementos invisibles\",\n      editor_config_invisibles_description: \"Se pueden ver elementos invisibles como espacios o tabulaciones.\",\n      editor_config_indentguides_label: \"Mostrar guías de sangría\",\n      editor_config_indentguides_description: \"Se puede ver las líneas verticales que definen el sangrado de una forma más claraDisplays vertical lines to see indentation better.\",\n      editor_config_behaviors_label: \"Comportamientos inteligentes\",\n      editor_config_behaviors_description: \"Se completan automáticamente corchetes, paréntesis y comillas.\"\n    },\n    about: {\n      mission_title: \"Nuestra misión: lograr que la programación esté disponible para todos los alumnos de la Tierra.\",\n      mission_description_1: \"<strong>Programar es hacer magia</strong>. Es la habilidad de crear cosas desde la imaginación. Iniciamos CodeCombat para que los alumnos experimenten en sus dedos la magia al <strong>escribir código.</strong>.\",\n      mission_description_2: \"Ademas resulta, que esto permite aprender más rápido. MUCHO más rápido. Es como mantener una conversación en lugar de leer un manual. Queremos llevar esa conversación a todas las escuelas y a <strong>todos los alumnos</strong>, porque todos deben tener la oportunidad de aprender la magia de la programación.\",\n      team_title: \"Conoce al equipo de CodeCombat\",\n      nick_title: \"Co-Fundador\",\n      matt_title: \"Co-Fundador\",\n      cat_title: \"Jefe Artesano\",\n      scott_title: \"Co-Fundador\",\n      titles_csm: \"Gerente de éxito del cliente\",\n      retrostyle_title: \"Illustración\",\n      retrostyle_blurb: \"RetroStyle Games\"\n    },\n    teachers: {\n      licenses_needed: \"Licencias necesarias\"\n    },\n    versions: {\n      save_version_title: \"Guardar nueva versión\",\n      new_major_version: \"Nueva versión principal\",\n      cla_prefix: \"Para guardar los cambios, primero debes aceptar nuestro\",\n      cla_url: \"CLA\",\n      cla_suffix: \".\",\n      cla_agree: \"De acuerdo\"\n    },\n    contact: {\n      contact_us: \"Contacta con CodeCombat\",\n      welcome: \"¡Nos gusta saber de ti! Usa este formulario para enviarnos un correo. \",\n      forum_prefix: \"Para asuntos públicos, por favor usa \",\n      forum_page: \"nuestro foro\",\n      forum_suffix: \" en su lugar.\",\n      faq_prefix: \"Tambien existe un\",\n      faq: \"FAQ\",\n      subscribe_prefix: \"Si necesitas ayuda para resolver el nivel, por favor\",\n      subscribe: \"compra una subscripción de CodeCombat\",\n      subscribe_suffix: \"y estaremos encantados de ayudarte con tu código.\",\n      subscriber_support: \"Ya que eres un subscriptor de CodeCombat, tu email tendrá nuestro soporte prioritario.\",\n      screenshot_included: \"Pantallazo incluido.\",\n      where_reply: \"¿Dónde debemos responder?\",\n      send: \"Envía tu comentario\"\n    },\n    account_settings: {\n      title: \"Ajustes de la cuenta\",\n      not_logged_in: \"Inicia sesión o crea una cuenta para cambiar tus ajustes.\",\n      me_tab: \"Yo\",\n      picture_tab: \"Foto\",\n      delete_account_tab: \"Borrar tu cuenta\",\n      wrong_email: \"Email incorrecto\",\n      wrong_password: \"Contraseña incorrecta\",\n      delete_this_account: \"Eliminar esta cuenta de forma permanente\",\n      reset_progress_tab: \"Reestablecer progreso\",\n      reset_your_progress: \"Elimina tu progreso y empieza de nuevo\",\n      god_mode: \"Modo Dios\",\n      emails_tab: \"Correos electrónicos\",\n      admin: \"Admin\",\n      manage_subscription: \"Clic aquí para modificar tu suscripción.\",\n      new_password: \"Nueva contraseña\",\n      new_password_verify: \"Verificar\",\n      type_in_email: \"Introduce tu correo para confirmar el borrado de esta cuenta\",\n      type_in_email_progress: \"TypeIntroduce tu correo para confirmar el borrado de tu progreso.\",\n      type_in_password: \"Además, introduce tu contraseña.\",\n      email_subscriptions: \"Suscripciones de correo electrónico\",\n      email_subscriptions_none: \"Sin suscripciones de correo electrónico.\",\n      email_announcements: \"Noticias\",\n      email_announcements_description: \"Recibe correos electrónicos con las últimas noticias y desarrollos de CodeCombat.\",\n      email_notifications: \"Notificationes\",\n      email_notifications_summary: \"Controles para personalizar las notificaciones por email automaticas, relacionadas con tu actividad en CodeCombat.\",\n      email_any_notes: \"Cualquier Notificacion\",\n      email_any_notes_description: \"Deshabilitar todas las notificaciones por mail.\",\n      email_news: \"Noticias\",\n      email_recruit_notes: \"Oportunidades de Trabajo\",\n      email_recruit_notes_description: \"Si tu juegas realmente bien, puede que contactemos contigo para que consigas un trabajo (mejor).\",\n      contributor_emails: \"Correos para colaboradores\",\n      contribute_prefix: \"¡Buscamos gente que se una a nuestro comunidad! Comprueba la \",\n      contribute_page: \"página de colaboraciones\",\n      contribute_suffix: \" para saber más.\",\n      email_toggle: \"Activar todo\",\n      error_saving: \"Error al guardar\",\n      saved: \"Cambios guardados\",\n      password_mismatch: \"La contraseña no coincide\",\n      password_repeat: \"Repite tu contraseña.\"\n    },\n    keyboard_shortcuts: {\n      keyboard_shortcuts: \"Atajos de teclado\",\n      space: \"Barra espaciadora (Espacio)\",\n      enter: \"Enter\",\n      press_enter: \"Presiona intro\",\n      escape: \"Escape\",\n      shift: \"Shift\",\n      run_code: \"Ejecutar código actual.\",\n      run_real_time: \"correr en tiempo real.\",\n      continue_script: \"Continuar después del script actual.\",\n      skip_scripts: \"Saltar todos los scripts posibles.\",\n      toggle_playback: \"Cambiar Play/Pausa.\",\n      beautify: \"Embellece tu código estandarizando el formato.\",\n      maximize_editor: \"Maximizar/minimizar editor de código.\"\n    },\n    community: {\n      main_title: \"Comunidad de CodeCombat\",\n      introduction: \"Descubre las formas en las que te puedes involucrar abajo y decide cual te suena más divertida. ¡Esperamos trabajar contigo!\",\n      level_editor_prefix: \"Usa CodeCombat\",\n      level_editor_suffix: \"para crear y editar niveles. Usuarios han creado niveles para sus clases, amigos, hackathons, estudiantes, y hermanos. Si crear un nivel te suena intimidante, ¡puedes empezar usando uno de los nuestros!\",\n      thang_editor_prefix: \"Llamamos a la unidades dentro del juego 'thangs'. Usa el\",\n      thang_editor_suffix: \"para modificar los artes fuente de CodeCombat. Permite a las unidades lanzar proyectiles, cambiar la dirección de la animación, cambiar los puntos de una unidad, o subir tus propios sprites vectoriales.\",\n      article_editor_prefix: \"¿Viste un error en alguno de nuestros documentos? ¿Quieres hacer algunas instrucciones para tus propias creaciones? Revisa el\",\n      article_editor_suffix: \"y ayuda a juegadores de CodeCombat a obtener lo mejor de su tiempo en el juego.\",\n      find_us: \"Encuentranos en estos sitios\",\n      social_github: \"Descárgate el código fuente desde GitHub\",\n      social_blog: \"Lee el blog de CodeCombat en Sett\",\n      social_discource: \"Unete a la discusion en nuestro foro\",\n      social_facebook: \"Dale a Me Gusta a CodeCombat en Facebook\",\n      social_twitter: \"Sigue a CodeCombat en Twitter\",\n      social_gplus: \"Unete a CodeCombat en Google+\",\n      social_slack: \"Chatea con nosotros en el canal público de CodeCombat\",\n      contribute_to_the_project: \"Contribuye al proyecto\"\n    },\n    clans: {\n      clan: \"Clan\",\n      clans: \"Clanes\",\n      new_name: \"Nombre del nuevo Clan\",\n      new_description: \"Descripción del nuevo Clan\",\n      make_private: \"Crear un Clan privado\",\n      subs_only: \"Sólo para usuarios suscritos\",\n      create_clan: \"Crear nuevo Clan\",\n      private_preview: \"Previsualización\",\n      public_clans: \"Clanes públicos\",\n      my_clans: \"Mis Clanes\",\n      clan_name: \"Nombre del Clan\",\n      name: \"Nombre\",\n      chieftain: \"Lider\",\n      edit_clan_name: \"Editar nombre del Clan\",\n      edit_clan_description: \"Editar descripción del Clan\",\n      edit_name: \"Editar nombre\",\n      edit_description: \"editar descripción\",\n      \"private\": \"(privado)\",\n      summary: \"Resumen\",\n      average_level: \"Media de nivel\",\n      average_achievements: \"Media de logros\",\n      delete_clan: \"Borrar Clan\",\n      leave_clan: \"Abandonar Clan\",\n      join_clan: \"Unirse al Clan\",\n      invite_1: \"Invitación:\",\n      invite_2: \"*Invitar a los jugadores a unirse a este Clan enviándoles este enlace.\",\n      members: \"Miembros\",\n      progress: \"Progreso\",\n      not_started_1: \"no iniciado\",\n      started_1: \"iniciado\",\n      complete_1: \"completo\",\n      exp_levels: \"Expandir niveles\",\n      rem_hero: \"Eliminar Héroe\",\n      status: \"Estado\",\n      complete_2: \"Completo\",\n      started_2: \"Iniciado\",\n      not_started_2: \"No iniciado\",\n      view_solution: \"Clic para ver solución.\",\n      latest_achievement: \"Último logro\",\n      playtime: \"Tiempo de juego\",\n      last_played: \"Último jugado\",\n      leagues_explanation: \"Participa en una liga contra miembros de otro Clan en estas arenas multijugador.\"\n    },\n    game_dev: {\n      creator: \"Creador\"\n    },\n    classes: {\n      archmage_title: \"Archimago\",\n      archmage_title_description: \"(Programador)\",\n      archmage_summary: \"¡Si eres un desarrollador interesado en crear juegos educacionales, conviértete en un Archimago y ayuda a la construcción de CodeCombat!\",\n      artisan_title: \"Artesano\",\n      artisan_title_description: \"(Diseñador de Niveles)\",\n      artisan_summary: \"Construye y comparte niveles para que puedas jugar tú y tus amigos. Conviértete en un Artesano para aprender el arte de enseñar a otros a programar.\",\n      adventurer_title: \"Aventurero\",\n      adventurer_title_description: \"(Tester de Niveles)\",\n      adventurer_summary: \"Consigue una semana antes y gratis, los nuevos niveles (incluso aquellos que requieren suscripción) y ayúdanos a solucionar bugs (fallos) antes de que se publiquen los niveles.\",\n      scribe_title: \"Escriba\",\n      scribe_title_description: \"(Editor de Artículos)\",\n      scribe_summary: \"El buen código requiere de buena documentación. Escribe, edita, y mejora la documentación leída por millones de jugadores a lo largo del globo.\",\n      diplomat_title: \"Diplomático\",\n      diplomat_title_description: \"(Traductor)\",\n      diplomat_summary: \"CodeCombat está traducido a más de 45 idiomas por nuestros Diplomáticos. Ayúdanos realizando traducciones.\",\n      ambassador_title: \"Embajador\",\n      ambassador_title_description: \"(Soporte)\",\n      ambassador_summary: \"Amansa a los usuarios de nuestro foro y guía a aquellos que tengan preguntas. Nuestros Embajadores representan a CodeCombat frente al mundo.\",\n      teacher_title: \"Profesor\"\n    },\n    editor: {\n      main_title: \"Editores de CodeCombat\",\n      article_title: \"Editor de Artículos\",\n      thang_title: \"Editor de Objetos\",\n      level_title: \"Editor de Niveles\",\n      achievement_title: \"Editor de Logros\",\n      poll_title: \"Editor de Encuestas\",\n      back: \"Volver\",\n      revert: \"Revertir\",\n      revert_models: \"Revertir Modelos\",\n      pick_a_terrain: \"Escoge un Terreno\",\n      dungeon: \"Mazmorra\",\n      indoor: \"Interior\",\n      desert: \"Desierto\",\n      grassy: \"Cubierto de hierba\",\n      mountain: \"Montaña\",\n      glacier: \"Glaciar\",\n      small: \"Pequeño\",\n      large: \"Grande\",\n      fork_title: \"Bifurcar nueva versión\",\n      fork_creating: \"Creando bifurcación...\",\n      generate_terrain: \"Generar Terreno\",\n      more: \"Más\",\n      wiki: \"Wiki\",\n      live_chat: \"Chat en directo\",\n      thang_main: \"Principal\",\n      thang_colors: \"Colores\",\n      level_some_options: \"¿Algunas opciones?\",\n      level_tab_thangs: \"Objetos\",\n      level_tab_scripts: \"Scripts\",\n      level_tab_components: \"Componentes\",\n      level_tab_systems: \"Sistemas\",\n      level_tab_docs: \"Documentación\",\n      level_tab_thangs_title: \"Objetos actuales\",\n      level_tab_thangs_all: \"Todo\",\n      level_tab_thangs_conditions: \"Condiciones de inicio\",\n      level_tab_thangs_add: \"Añadir Objetos\",\n      add_components: \"Agregar Componentes\",\n      \"delete\": \"Borrar\",\n      duplicate: \"Duplicar\",\n      stop_duplicate: \"Detener duplicados\",\n      rotate: \"Rotar\",\n      level_component_tab_title: \"Componentes Actuales\",\n      level_component_btn_new: \"Crear Nuevo Componente\",\n      level_systems_tab_title: \"Sistemas Actuales\",\n      level_systems_btn_new: \"Crear Nuevo Sistema\",\n      level_systems_btn_add: \"Añadir Sistema\",\n      level_components_title: \"Volver a Todos los Objetos\",\n      level_components_type: \"Tipo\",\n      level_component_edit_title: \"Editar Componente\",\n      level_component_config_schema: \"Configurar esquema\",\n      level_system_edit_title: \"Editar Sistema\",\n      create_system_title: \"Crear Nuevo Sistema\",\n      new_component_title: \"Crear Nuevo Componente\",\n      new_component_field_system: \"Sistema\",\n      new_article_title: \"Crear un nuevo artículo\",\n      new_thang_title: \"Crea un nuevo tipo de objeto\",\n      new_level_title: \"Crear un nuevo nivel\",\n      new_article_title_login: \"Inicia sesión para Crear un Nuevo Artículo\",\n      new_thang_title_login: \"Inicia sesión para Crear un Nuevo Tipo de Thang\",\n      new_level_title_login: \"Inicia sesión para Crear un Nuevo Nivel\",\n      new_achievement_title: \"Crea un nuevo Logro\",\n      new_achievement_title_login: \"Inicia sesión para Crear un Nuevo Logro\",\n      new_poll_title: \"Crear una nueva Encuesta\",\n      new_poll_title_login: \"Inicia sesión para Crear una Nueva Encuesta\",\n      article_search_title: \"Buscar artículos aquí\",\n      thang_search_title: \"Busca tipos de objetos aquí\",\n      level_search_title: \"Buscar niveles aquí\",\n      achievement_search_title: \"Buscar Logros\",\n      poll_search_title: \"Buscar encuestas\",\n      read_only_warning2: \"Nota: no puedes guardar nada de lo que edites aquí porque no has iniciado sesión.\",\n      no_achievements: \"No se han añadido logros a este nivel.\",\n      level_completion: \"Porcentaje de Nivel Completado\",\n      pop_i18n: \"Poblar I18N\",\n      tasks: \"Tareas\"\n    },\n    article: {\n      edit_btn_preview: \"Vista preliminar\",\n      edit_article_title: \"Editar artículo\"\n    },\n    polls: {\n      priority: \"Prioridad\"\n    },\n    contribute: {\n      page_title: \"Colaborar\",\n      intro_blurb: \"¡CodeCombat es 100% código abierto! Cientos de dedicados jugadores nos han ayudado a convertir el juego en lo que es hoy en día. !Únete a nosotros y escribe el siguiente capítulo de CodeCombat en la aventura de enseñar al mundo a programar!\",\n      alert_account_message_intro: \"¡Hola!\",\n      alert_account_message: \"Para suscribirse a los mails de clase, necesitas estar logado.\",\n      archmage_introduction: \"Una de las mejores partes de desarrollar juegos es que combinan cosas muy diferentes. Gráficos, sonido, uso de redes en tiempo real, redes sociales y por supuesto mucho de los aspectos comunes de la programación, desde gestión de bases de datos a bajo nivel y administración de servidores hasta diseño de experiencia del usuario y creación de interfaces. Hay un montón de cosas por hacer y si eres un programador experimentado con interés en conocer lo que se cuece en la trastienda de CodeCombat, esta Clase puede ser la ideal para ti. Nos encantaría recibir tu ayuda para crear el mejor juego de programación de la historia.\",\n      class_attributes: \"Atributos de las Clases\",\n      archmage_attribute_1_pref: \"Conocimiento en \",\n      archmage_attribute_1_suf: \", o deseo por aprender. La mayor parte de nuestro código está escrito en este lenguaje. Si eres un fan de Ruby o Python te sentirás como en casa. Es JavaScript pero con una sintaxis más agradable.\",\n      archmage_attribute_2: \"Alguna experiencia en programación e iniciativa personal. Te orientaremos, pero no podemos pasar mucho tiempo enseñándote.\",\n      how_to_join: \"Cómo unirse\",\n      join_desc_1: \"¡Cualquiera puede ayudar! Solo echa un vistazo a nuestro \",\n      join_desc_2: \"para comenzar y marca la casilla de abajo para etiquetarte como un bravo Archimago y obtener las últimas noticias por correo electrónico. ¿Quieres charlar sobre qué hacer o como involucrarte más? \",\n      join_desc_3: \", o encuéntranos en nuestro \",\n      join_desc_4: \"¡y partiremos desde ese punto!\",\n      join_url_email: \"Escríbenos un correo electrónico\",\n      join_url_slack: \"canal público de Slack\",\n      archmage_subscribe_desc: \"Recibe correos sobre nuevos anuncios y oportunidades de codificar.\",\n      artisan_introduction_pref: \"¡Debemos construir niveles adicionales! La gente clama por más contenido y solo podemos crear unos cuantos. Ahora mismo tu estación de trabajo es el nivel uno; nuestro editor de niveles es apenas usable por sus creadores, así que ten cuidado. Si tienes visiones de campañas que alcanzan el infinito\",\n      artisan_introduction_suf: \", entonces esta Clase es ideal para ti.\",\n      artisan_attribute_1: \"Cualquier experiencia creando contenido similar estaría bien, como por ejemplo el editor de niveles de Blizzard. ¡Aunque no es necesaria!\",\n      artisan_attribute_2: \"Un anhelo de hacer un montón de testeo e iteraciones. Para hacer buenos niveles necesitas mostrárselos a otros y mirar como juegan, además de estar preparado para encontrar los fallos a reparar.\",\n      artisan_attribute_3: \"Por el momento, la resistencia va a la par con el Aventurero. Nuestro editor de niveles está a un nivel de desarrollo temprano y puede ser muy frustrante usarlo. ¡Estás advertido!\",\n      artisan_join_desc: \"Sigue las siguientes indicaciones para usar el editor de niveles. Tómalo o déjalo:\",\n      artisan_join_step1: \"Lee la documentación.\",\n      artisan_join_step2: \"Crea un nuevo nivel y explora los niveles existentes.\",\n      artisan_join_step3: \"Busca nuestra sala pública de Slack en busca de ayuda.\",\n      artisan_join_step4: \"Publica tus niveles en el foro para recibir comentarios críticos.\",\n      artisan_subscribe_desc: \"Recibe correos sobre actualizaciones del editor de niveles y anuncios.\",\n      adventurer_introduction: \"Hablemos claro sobre tu papel: eres el tanque. Vas a recibir fuertes daños. Necesitamos gente para probar nuestros flamantes niveles y ayudar a mejorarlos. El dolor será enorme; hacer buenos juegos es un proceso largo y nadie lo consigue a la primera. Si puedes resistir y tener una puntuación alta en Resistencia, entonces esta Clase es para ti.\",\n      adventurer_attribute_1: \"Estar sediento de conocimientos. Quieres aprender a programar y nosotros queremos enseñarte cómo hacerlo. Aunque en este caso es más probable que seas tú el que esté haciendo la mayor parte de la enseñanza.\",\n      adventurer_attribute_2: \"Carismático. Se amable pero claro a la hora de desglosar qué necesita ser mejorado y sugiere de qué formas podría hacerse.\",\n      adventurer_join_pref: \"Reúnete con (¡o recluta!) un Artesano y trabaja con ellos, o marca la casilla de abajo para recibir un correo cuando haya nuevos niveles para testar. También publicaremos en nuestras redes nuevos niveles para revisar\",\n      adventurer_forum_url: \"nuestro foro\",\n      adventurer_join_suf: \"así que si prefieres estar informado en esa forma, ¡crea una cuenta allí!\",\n      adventurer_subscribe_desc: \"Recibe correos cuando haya nuevos niveles para testar.\",\n      scribe_introduction_pref: \"CodeCombat no será solo un montón de niveles. También será una fuente de conocimientos, una wiki de conceptos de programación a la que los niveles se engancharan. De esa forma, en lugar de que cada Artesano tenga que describir en detalle qué es un operador de comparación, podrá simplemente enlazar el nivel al Artículo que los describe y que ya ha sido escrito para edificación del jugador. Algo en la línea de lo que la \",\n      scribe_introduction_url_mozilla: \"Mozilla Developer Network\",\n      scribe_introduction_suf: \" ha construido. Si tu idea de diversión es articular los conceptos de la programación de una forma sencilla, entonces esta clase es para ti.\",\n      scribe_attribute_1: \"Habilidad a la hora de escribir es casi todo lo que necesitas. No solo dominar la gramática y la ortografía sino también expresar ideas complicadas a los demás de forma sencilla.\",\n      contact_us_url: \"Escribenos un correo electrónico\",\n      scribe_join_description: \"cuéntanos más sobre ti, tu experiencia en el mundo de la programación y sobre qué cosas te gustaría escribir. ¡Y continuaremos a partir de ahí!\",\n      scribe_subscribe_desc: \"Recibe correos sobre anuncios de redacción de Artículos.\",\n      diplomat_introduction_pref: \"Así, si hemos aprendido algo desde el \",\n      diplomat_launch_url: \"lanzamiento en octubre\",\n      diplomat_introduction_suf: \"hay un interés considerable en CodeCombat en otros paises, ¡especialmente Brasil! Estamos formando un cuerpo de traductores con ganas de traducir un grupo de palabras tras otro para hacer CodeCombat tan accesible para todo el mundo como sea posible. Si quieres recibir avances de próximos contenidos y quieres poner esos niveles a disposición de los que comparten tu idioma tan pronto como sea posible, entonces esta Clase es para ti.\",\n      diplomat_attribute_1: \"Fluidez con el inglés y el lenguaje al que quieras traducir. Cuando de transmitir ideas complejas se trata, ¡es importante tener grandes conocimientos de ambas!\",\n      diplomat_i18n_page_prefix: \"Puedes traducir nuestros niveles yendo a nuestra\",\n      diplomat_i18n_page: \"página de traducciones\",\n      diplomat_i18n_page_suffix: \", o en nuestra interfaz y sitio web en GitHub.\",\n      diplomat_join_pref_github: \"Encuentra el fichero local de tu idioma \",\n      diplomat_github_url: \"en GitHub\",\n      diplomat_join_suf_github: \", edítalo online, y solicita que sea revisado. Además, marca la casilla de abajo para mantenerte informado en nuevos progresos en Internacionalización.\",\n      diplomat_subscribe_desc: \"Recibe correos sobre nuevos niveles y desarrollos para traducir.\",\n      ambassador_introduction: \"Esta es una comunidad en construcción y tú eres parte de las conexiones. Tenemos chat Olark, correos electrónicos y las redes sociales con una gran cantidad de personas con quienes hablar, ayudar a familiarizarse con el juego y aprender. Si quieres ayudar a la gente a que se involucre, se divierta, y tenga buenas sensaciones sobre CodeCombat y hacia dónde vamos, entonces esta clase es para ti.\",\n      ambassador_attribute_1: \"Habilidades de comunicación. Ser capaz de identificar los problemas que los jugadores están teniendo y ayudarles a resolverlos. Además, mantener al resto de nosotros informados sobre lo que los jugadores están diciendo, lo que les gusta, lo que no ¡y de lo que quieren más!\",\n      ambassador_join_desc: \"cuéntanos más sobre ti, que has hecho y qué estarías interesado en hacer. ¡Y continuaremos a partir de ahí!\",\n      ambassador_join_note_strong: \"Nota\",\n      ambassador_join_note_desc: \"Una de nuestras principales prioridades es construir un modo multijugador donde los jugadores con mayores dificultades a la hora de resolver un nivel, puedan invocar a los magos más avanzados para que les ayuden. Será una buena manera de que los Embajadores puedan hacer su trabajo. ¡Te mantendremos informado!\",\n      ambassador_subscribe_desc: \"Recibe correos acerca de actualizaciones de soporte y desarrollo del multijugador.\",\n      teacher_subscribe_desc: \"Recibe acerca de  actualizaciones y anuncios para profesores.\",\n      changes_auto_save: \"Los cambios son guardados automáticamente cuando marcas las casillas de verificación.\",\n      diligent_scribes: \"Nuestros diligentes Escribas:\",\n      powerful_archmages: \"Nuestros poderosos Archimagos:\",\n      creative_artisans: \"Nuestros creativos Artesanos:\",\n      brave_adventurers: \"Nuestros bravos Aventureros:\",\n      translating_diplomats: \"Nuestros políglotas Diplomáticos:\",\n      helpful_ambassadors: \"Nuestros amables Embajadores:\"\n    },\n    ladder: {\n      my_matches: \"Mis partidas\",\n      simulate: \"Simular\",\n      simulation_explanation: \"¡Simulando partidas puedes hacer que tu partida sea calificada más rápido!\",\n      simulate_games: \"¡Simula juegos!\",\n      games_simulated_by: \"Juegos simulados por ti:\",\n      games_simulated_for: \"Juegos simulados para ti:\",\n      games_simulated: \"Juegos simulados\",\n      games_played: \"Partidas jugadas\",\n      ratio: \"Ratio\",\n      leaderboard: \"Clasificación\",\n      battle_as: \"Pelea como \",\n      summary_your: \"Tus \",\n      summary_matches: \"Partidas - \",\n      summary_wins: \" Victorias, \",\n      summary_losses: \" Derrotas\",\n      rank_no_code: \"No hay código nuevo para calificar\",\n      rank_my_game: \"¡Califica mi juego!\",\n      rank_submitting: \"Enviando...\",\n      rank_submitted: \"Enviado para calificación\",\n      rank_failed: \"Fallo al calificar\",\n      rank_being_ranked: \"El juego está siendo calificado\",\n      rank_last_submitted: \"enviado \",\n      help_simulate: \"Ayudar a simular Juegos?\",\n      code_being_simulated: \"Tu nuevo código está siendo simulado por otros jugados para ser calificado. Se irá actualizando a medida que las partidas se vayan sucediendo.\",\n      no_ranked_matches_pre: \"No hay partidas calificadas para \",\n      no_ranked_matches_post: \" equipo! Juega contra otros competidores y luego vuelve aquí para que tu partida aparezca en la clasificación.\",\n      choose_opponent: \"Elige un contrincante\",\n      select_your_language: \"Elige tu Idioma!\",\n      tutorial_play: \"Jugar el Tutorial\",\n      tutorial_recommended: \"Recomendado si no has jugado antes.\",\n      tutorial_skip: \"Saltar el Tutorial\",\n      tutorial_not_sure: \"¿No estás seguro de cómo funciona esto?\",\n      tutorial_play_first: \"Prueba el Tutorial primero.\",\n      simple_ai: \"IA sencilla\",\n      warmup: \"calentamiento\",\n      friends_playing: \"Amigos jugando\",\n      log_in_for_friends: \"¡Inicia sesión para jugar con tus amigos!\",\n      social_connect_blurb: \"¡Conéctate y juega contra tus amigos!\",\n      invite_friends_to_battle: \"¡Invita a tus amigos a unirse a la batalla!\",\n      fight: \"¡Pelea!\",\n      watch_victory: \"Ver tu victoria\",\n      defeat_the: \"Vence a\",\n      watch_battle: \"Observa la batalla\",\n      tournament_started: \", iniciado\",\n      tournament_ends: \"El torneo termina\",\n      tournament_ended: \"El torneo ha terminado\",\n      tournament_rules: \"Reglas del Torneo\",\n      tournament_blurb: \"Escribe código, recolecta oro, construye ejércitos, aplasta a los malos, gana premios, y sube en tu carrera en nuestro Torneo de la Avaricia con $40,000! Ver los detalles\",\n      tournament_blurb_criss_cross: \"Gana pujas, construye caminos, aniquila a tus oponentes, recoge gemas, y mejora tu carrera en nuestro torneo Criss-Cross! Mira los  detalles\",\n      tournament_blurb_blog: \"en nuestro blog\",\n      rules: \"Reglas\",\n      winners: \"Ganadores\",\n      league: \"Liga\",\n      red_ai: \"IA Roja\",\n      blue_ai: \"IA Azul\",\n      wins: \"Gana\",\n      humans: \"Roja\",\n      ogres: \"Azul\"\n    },\n    user: {\n      stats: \"Estadisticas\",\n      singleplayer_title: \"Niveles Individuales\",\n      multiplayer_title: \"Niveles Multijugador\",\n      achievements_title: \"Logros\",\n      last_played: \"Ultimo Jugado\",\n      status: \"Estatus\",\n      status_completed: \"Completado\",\n      status_unfinished: \"Sin Terminar\",\n      no_singleplayer: \"No has jugado ningún nivel individual todavía.\",\n      no_multiplayer: \"No has jugado ningún nivel multijugador todavía.\",\n      no_achievements: \"No has alcanzado ningún logro todavía.\",\n      favorite_prefix: \"Favorite language is \",\n      favorite_postfix: \".\",\n      not_member_of_clans: \"Aún no pertenece a ningún Clan.\"\n    },\n    achievements: {\n      last_earned: \"Ganado la última vez\",\n      amount_achieved: \"Cantidad\",\n      achievement: \"Logro\",\n      current_xp_prefix: \"\",\n      current_xp_postfix: \" en total\",\n      new_xp_prefix: \"\",\n      new_xp_postfix: \" ganado\",\n      left_xp_prefix: \"\",\n      left_xp_infix: \" hasta el nivel\",\n      left_xp_postfix: \"\"\n    },\n    account: {\n      payments: \"Pagos\",\n      prepaid_codes: \"Código prepagados\",\n      purchased: \"Adquirido\",\n      subscription: \"Suscripción\",\n      invoices: \"Facturas\",\n      service_apple: \"Apple\",\n      service_web: \"Web\",\n      paid_on: \"Pagado en\",\n      service: \"Servicio\",\n      price: \"Precio\",\n      gems: \"Joyas\",\n      active: \"Activo\",\n      subscribed: \"Suscrito\",\n      unsubscribed: \"Sin suscripción\",\n      active_until: \"Activo Hasta\",\n      cost: \"Coste\",\n      next_payment: \"Siguiente Pago\",\n      card: \"Tarjeta\",\n      status_unsubscribed_active: \"No estás suscrito y no serás facturado, pero tu cuenta sigue activa por ahora.\",\n      status_unsubscribed: \"¡Obtén acceso a nuevos niveles, héroes, artículos, y joyas adicionales con una suscripción a CodeCombat!\"\n    },\n    account_invoices: {\n      amount: \"Cantidad en dólares Americanos\",\n      declined: \"Tu tarjeta ha sido rechazada\",\n      invalid_amount: \"Introduce una cantidad en dólares.\",\n      not_logged_in: \"Inicia sesión o crea una cuenta para acceder a los recibos.\",\n      pay: \"Pagar recibo\",\n      purchasing: \"Comprando...\",\n      retrying: \"Error del servidor, reintentando.\",\n      success: \"Pago realizado correctamente. ¡Muchas gracias!\"\n    },\n    account_prepaid: {\n      purchase_total: \"Total\"\n    },\n    loading_error: {\n      could_not_load: \"Error al cargar desde el servidor.\",\n      connection_failure: \"Fallo en la conexión.\",\n      connection_failure_desc: \"No parece que estés conectado a Internet! Comprueba tu conexión de red y vuelva a cargar esta página.\",\n      login_required: \"Necesario iniciar sesión\",\n      login_required_desc: \"Tiene que estar registrado para acceder a esta página.\",\n      unauthorized: \"Tienes que haber iniciado sesión. ¿No permites la instalación de cookies?\",\n      forbidden: \"No tienes autorización.\",\n      forbidden_desc: \"Oh, no, no hay nada que le podemos mostrar aquí! Asegúrese de que está conectado a la cuenta correcta, o visita uno de los enlaces siguientes para volver a la programación!\",\n      not_found: \"No encontrado.\",\n      not_found_desc: \"Hm, no hay nada aquí. Visita uno de los siguientes enlaces para volver a la programación!\",\n      not_allowed: \"Método no permitido.\",\n      timeout: \"Tiempo de espera del servidor superado.\",\n      conflict: \"Conflicto de recursos.\",\n      bad_input: \"Entrada incorrecta.\",\n      server_error: \"Error del servidor.\",\n      unknown: \"Error desconocido.\",\n      error: \"ERROR\",\n      general_desc: \"Algo salió mal, y es probable que sea nuestra culpa. Espera un poco y luego actualiza la página, o visita uno de los siguientes enlaces para volver a la programación!\"\n    },\n    resources: {\n      level: \"Nivel\",\n      patch: \"Parche\",\n      patches: \"Parches\",\n      system: \"Sistema\",\n      systems: \"Sistemas\",\n      component: \"Componente\",\n      components: \"Componentes\",\n      hero: \"Héroe\",\n      campaigns: \"Campañas\"\n    },\n    concepts: {\n      \"arguments\": \"Argumentos\",\n      arithmetic: \"Aritmética\",\n      arrays: \"Vectores\",\n      basic_syntax: \"Sintáxis básica\",\n      bootstrap: \"Bootstrap\",\n      break_statements: \"Sentencias Break\",\n      classes: \"Clases\",\n      continue_statements: \"Sentencias Continue\",\n      for_loops: \"Bucles For\",\n      functions: \"Funciones\",\n      graphics: \"Gráficos\",\n      if_statements: \"Sentencias if\",\n      jquery: \"jQuery\",\n      math_operations: \"Operaciones matemáticas\",\n      object_literals: \"Objetos literales\",\n      parameters: \"Parámetros\",\n      recursion: \"Recursividad\",\n      strings: \"Cadenas\",\n      variables: \"Variables\",\n      vectors: \"Vectores\",\n      advanced_strings: \"Cadenas de texto avanzadas\",\n      algorithms: \"Algoritmos\",\n      boolean_logic: \"Lógica booleanos\",\n      basic_html: \"HTML Básico\",\n      basic_css: \"CSS Básico\",\n      basic_web_scripting: \"Programación web básica\",\n      intermediate_html: \"HTML intermedio\",\n      intermediate_css: \"CSS intermedio\",\n      intermediate_web_scripting: \"Programación web intermedia\",\n      advanced_html: \"HTML avanzado\",\n      advanced_css: \"CSS avanzado\",\n      advanced_web_scripting: \"Programación web avanzada\",\n      input_handling: \"Manejo de entradas\",\n      while_loops: \"Bucles While\"\n    },\n    delta: {\n      added: \"Añadido\",\n      modified: \"Modificado\",\n      not_modified: \"Sin Modificar\",\n      deleted: \"Eliminado\",\n      moved_index: \"Indice Movido\",\n      text_diff: \"Diferencias\",\n      merge_conflict_with: \"MERGE EN CONFLICTO CON\",\n      no_changes: \"Sin Cambios\"\n    },\n    legal: {\n      page_title: \"Legal\",\n      opensource_description_prefix: \"Echa un vistazo a \",\n      github_url: \"nuestro GitHub\",\n      opensource_description_center: \"y ayúdanos si quieres. CodeCombat está desarrollado sobre docenas de proyectos open source, y nos encanta. Mira \",\n      archmage_wiki_url: \"nuestra wiki del Archimago\",\n      opensource_description_suffix: \"para encontrar una lista del software que hace este juego posible.\",\n      practices_title: \"Prácticas respetuosas\",\n      practices_description: \"Esto es lo que te prometemos a ti, el jugador, sin usar mucha jerga legal.\",\n      privacy_title: \"Privacidad\",\n      privacy_description: \"No venderemos tu información personal.\",\n      security_title: \"Seguridad\",\n      security_description: \"Nos esforzamos por mantener segura tu información personal. Como proyecto de código abierto, nuestro sitio está abierto a cualquiera que quiera revisarlo y mejorar nuestros sistemas de seguridad.\",\n      email_title: \"Correo electrónico\",\n      email_description_prefix: \"No te inundaremos con spam. Mediante\",\n      email_settings_url: \"tus ajustes de correo electrónico\",\n      email_description_suffix: \"o a través de los enlaces en los correos que te enviemos, puedes cambiar tus preferencias y darte de baja fácilmente en cualquier momento.\",\n      cost_title: \"Precio\",\n      cost_description: \"CodeCombat es un juego gratuito para todos sus niveles básicos, con una suscripción de ${{price}} USD al mes con acceso a niveles adicionales y un bonus de {{gems}} gemas al mes. Puedes cancelar con un clic, y ofrecemos una garantía de reembolso del 100%.\",\n      copyrights_title: \"Copyrights y Licencias\",\n      contributor_title: \"Acuerdo de Licencia del Colaborador\",\n      contributor_description_prefix: \"Todas las colaboraciones, tanto en la web como en nuestro repositorio de GitHub, están sujetas a nuestro\",\n      cla_url: \"CLA\",\n      contributor_description_suffix: \"con el que deberás estar de acuerdo antes de colaborar.\",\n      code_title: \"Código - MIT\",\n      mit_license_url: \"Licencia MIT\",\n      code_description_suffix: \"Esto incluye todo el código en Sistemas y Componentes puesto a disposición por CodeCombat para la creación de niveles.\",\n      art_title: \"Arte/Música - Creative Commons \",\n      art_description_prefix: \"Todo el contenido común está disponible bajo la\",\n      cc_license_url: \"Creative Commons Attribution 4.0 International License\",\n      art_description_suffix: \"Contenido común es cualquier cosa puesta a disposición por CodeCombat con el propósito de la creación de niveles. Esto incluye:\",\n      art_music: \"Música\",\n      art_sound: \"Sonido\",\n      art_artwork: \"Arte\",\n      art_sprites: \"Sprites\",\n      art_other: \"Otros trabajos creativos no relacionados con código puestos a disposición para la creación de Niveles.\",\n      art_access: \"Actualmente no hay un sistema universal y fácil para ir en busca de esos recursos. En general, recógelos de las URLs como las usadas en el sitio, contáctanos para recibir asistencia, o ayúdanos a extender el sitio para hacer más fácilmente accesibles estos recursos.\",\n      art_paragraph_1: \"Para la atribución, por favor pon tu nombre y enlaza a codecombat.com cerca del lugar donde se utiliza la fuente o en su caso para el medio. Por ejemplo:\",\n      use_list_1: \"Si se usa en una película u otro juego, incluye codecombat.com en los créditos.\",\n      use_list_2: \"Si se usa en una página web, incluye un enlace cerca de donde se use, por ejemplo bajo una imagen, o en una página general de atribuciones donde también menciones otros trabajos Creative Commons y software de código abierto que uses en tu web. Si ya se hace clara referencia a CodeCombat, como en el post de un blog mencionando a CodeCombat, no es necesaria una atribución del contenido por separado.\",\n      art_paragraph_2: \"Si el contenido usado ha sido creado no por CodeCombat sino por un usuario de codecombat.com, deberá serle atribuido a dicho usuario y seguir las directrices de atribución proporcionadas en la descripción del recurso, si la hay.\",\n      rights_title: \"Derechos Reservados\",\n      rights_desc: \"Todos los derechos reservados para los Niveles. Esto incluye\",\n      rights_scripts: \"Scripts\",\n      rights_unit: \"Configuración de la Unidad\",\n      rights_writings: \"Escritos\",\n      rights_media: \"Media (sonidos, música) y cualquier otro contenido creativo creado específicamente para ese Nivel y que no estuviera disponible para todos al crear el/los niveles.\",\n      rights_clarification: \"Para aclarar, cualquier cosa que se pone a disposición en el editor de niveles con el fin de crear Niveles se encuentra bajo licencia CC, mientras que el contenido creado con el editor de niveles o subido en el curso de la creación de niveles no lo es.\",\n      nutshell_title: \"En una palabra\",\n      nutshell_description: \"Todos los recursos que ofrecemos en el editor de niveles son libres de ser utilizados para crear niveles. Pero nos reservamos el derecho de restringir la distribución de los propios niveles (que se crean en codecombat.com) de modo que se pueda cobrar por ellos en el futuro, si eso es lo que termina sucediendo.\",\n      canonical: \"La versión inglesa de este documento es la canónica, la definitiva. Si hay alguna diferencia con lo que pueda aparecer en las traducciones, la versión inglesa es la que prevalece sobre las demás.\",\n      third_party_title: \"Servicios de terceros\",\n      third_party_description: \"CodeCombat utiliza los siguientes servicios de terceros (entre otros):\"\n    },\n    ladder_prizes: {\n      title: \"Premios del Torneo\",\n      blurb_1: \"Estos premios se entregarán acorde a\",\n      blurb_2: \"las reglas del torneo\",\n      blurb_3: \"A los primeros jugadores humanos y ogros.\",\n      blurb_4: \"Dos equipos significa doble-premio!\",\n      blurb_5: \"(Habrá dos ganadores por puesto, dos en el primer puesto, dos en el segundo, etc.)\",\n      rank: \"Rango\",\n      prizes: \"Premios\",\n      total_value: \"Valor Total\",\n      in_cash: \"en dinero\",\n      custom_wizard: \"Personaliza tu Hechicero de CodeCombat\",\n      custom_avatar: \"Personaliza tu avatar de CoceCombat\",\n      heap: \"Por seis meses de acceso \\\"Startup\\\"\",\n      credits: \"créditos\",\n      one_month_coupon: \"cupon: elige entre Rails o HTML\",\n      one_month_discount: \"descuento del 30%: elige entre Rails o HTML\",\n      license: \"licencia\",\n      oreilly: \"ebook de tu elección\"\n    },\n    calendar: {\n      year: \"Año\",\n      day: \"Día\",\n      month: \"Mes\",\n      january: \"Enero\",\n      february: \"Febrero\",\n      march: \"Marzo\",\n      april: \"Abril\",\n      may: \"Mayo\",\n      june: \"Junio\",\n      july: \"Julio\",\n      august: \"Agosto\",\n      september: \"Septiembre\",\n      october: \"Octubre\",\n      november: \"Noviembre\",\n      december: \"Diciembre\"\n    },\n    server_error: {\n      email_taken: \"El correo electrónico ya ha sido tomado\",\n      username_taken: \"El nombre de usuario ya ha sido tomado\"\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1046\n");

/***/ })

});